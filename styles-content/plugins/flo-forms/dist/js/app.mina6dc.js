/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/js";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./admin/vue-components/vue-form-generator/dist/vfg.js":
/*!*************************************************************!*\
  !*** ./admin/vue-components/vue-form-generator/dist/vfg.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * vue-form-generator v2.2.2\n * https://github.com/icebob/vue-form-generator\n * Released under the MIT License.\n */\n\n!function (e, t) {\n  \"object\" == ( false ? undefined : _typeof(exports)) && \"object\" == ( false ? undefined : _typeof(module)) ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(undefined, function () {\n  return function (e) {\n    function t(r) {\n      if (n[r]) return n[r].exports;var o = n[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;\n    }var n = {};return t.m = e, t.c = n, t.p = \"\", t(0);\n  }(function (e) {\n    for (var t in e) {\n      if (Object.prototype.hasOwnProperty.call(e, t)) switch (_typeof(e[t])) {case \"function\":\n          break;case \"object\":\n          e[t] = function (t) {\n            var n = t.slice(1),\n                r = e[t[0]];return function (e, t, o) {\n              r.apply(this, [e, t, o].concat(n));\n            };\n          }(e[t]);break;default:\n          e[t] = e[e[t]];}\n    }return e;\n  }([function (e, t, n) {\n    \"use strict\";\n    e.exports = { component: n(1), schema: n(161), validators: n(225), abstractField: n(221).default, install: function install(t) {\n        t.component(\"VueFormGenerator\", e.exports.component);\n      } };\n  }, function (e, t, n) {\n    n(2);var r = n(3)(n(4), n(376), null, null);e.exports = r.exports;\n  }, function (e, t) {}, function (e, t) {\n    e.exports = function (e, t, n, r) {\n      var o,\n          i = e = e || {},\n          a = _typeof(e.default);\"object\" !== a && \"function\" !== a || (o = e, i = e.default);var s = \"function\" == typeof i ? i.options : i;if (t && (s.render = t.render, s.staticRenderFns = t.staticRenderFns), n && (s._scopeId = n), r) {\n        var u = s.computed || (s.computed = {});Object.keys(r).forEach(function (e) {\n          var t = r[e];u[e] = function () {\n            return t;\n          };\n        });\n      }return { esModule: o, exports: i, options: s };\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(5),\n        i = r(o),\n        a = n(75),\n        s = r(a),\n        u = n(79),\n        c = r(u),\n        l = n(86),\n        f = r(l),\n        d = n(88),\n        p = r(d),\n        h = n(89),\n        m = r(h),\n        v = n(91),\n        y = r(v),\n        g = n(119),\n        b = r(g),\n        x = n(161),\n        _ = {},\n        w = n(217);(0, y.default)(w.keys(), function (e) {\n      var t = e.replace(/^\\.\\//, \"\").replace(/\\.vue/, \"\");_[t] = w(e);\n    });var O = n(309);(0, y.default)(O.keys(), function (e) {\n      var t = e.replace(/^\\.\\//, \"\").replace(/\\.vue/, \"\");_[t] = O(e);\n    }), t.default = { components: _, props: { schema: Object, model: Object, options: { type: Object, default: function _default() {\n            return { validateAfterLoad: !1, validateAsync: !1, validateAfterChanged: !1, validationErrorClass: \"error\", validationSuccessClass: \"\" };\n          } }, multiple: { type: Boolean, default: !1 }, isNewModel: { type: Boolean, default: !1 }, tag: { type: String, default: \"fieldset\", validator: function validator(e) {\n            return e.length > 0;\n          } } }, data: function data() {\n        return { errors: [] };\n      }, computed: { fields: function fields() {\n          var e = this,\n              t = [];return this.schema && this.schema.fields && (0, y.default)(this.schema.fields, function (n) {\n            e.multiple && n.multi !== !0 || t.push(n);\n          }), t;\n        }, groups: function groups() {\n          var e = [];return this.schema && this.schema.groups && (0, y.default)(this.schema.groups, function (t) {\n            e.push(t);\n          }), e;\n        } }, watch: { model: function model(e, t) {\n          var n = this;t != e && null != e && this.$nextTick(function () {\n            n.options.validateAfterLoad === !0 && n.isNewModel !== !0 ? n.validate() : n.clearValidationErrors();\n          });\n        } }, mounted: function mounted() {\n        var e = this;this.$nextTick(function () {\n          e.model && (e.options.validateAfterLoad === !0 && e.isNewModel !== !0 ? e.validate() : e.clearValidationErrors());\n        });\n      }, methods: { getFieldRowClasses: function getFieldRowClasses(e) {\n          var t,\n              n = this.fieldErrors(e).length > 0,\n              r = (t = {}, (0, s.default)(t, (0, b.default)(this.options, \"validationErrorClass\", \"error\"), n), (0, s.default)(t, (0, b.default)(this.options, \"validationSuccessClass\", \"valid\"), !n), (0, s.default)(t, \"disabled\", this.fieldDisabled(e)), (0, s.default)(t, \"readonly\", this.fieldReadonly(e)), (0, s.default)(t, \"featured\", this.fieldFeatured(e)), (0, s.default)(t, \"required\", this.fieldRequired(e)), t);return (0, f.default)(e.styleClasses) ? (0, y.default)(e.styleClasses, function (e) {\n            return r[e] = !0;\n          }) : (0, c.default)(e.styleClasses) && (r[e.styleClasses] = !0), (0, p.default)(e.type) || (r[\"field-\" + e.type] = !0), r;\n        }, getFieldType: function getFieldType(e) {\n          return \"field-\" + e.type;\n        }, fieldTypeHasLabel: function fieldTypeHasLabel(e) {\n          if ((0, p.default)(e.label)) return !1;var t = \"\";switch (t = \"input\" === e.type ? e.inputType : e.type) {case \"button\":case \"submit\":case \"reset\":\n              return !1;default:\n              return !0;}\n        }, fieldDisabled: function fieldDisabled(e) {\n          return (0, m.default)(e.disabled) ? e.disabled.call(this, this.model, e, this) : !(0, p.default)(e.disabled) && e.disabled;\n        }, fieldRequired: function fieldRequired(e) {\n          return (0, m.default)(e.required) ? e.required.call(this, this.model, e, this) : !(0, p.default)(e.required) && e.required;\n        }, fieldVisible: function fieldVisible(e) {\n          return (0, m.default)(e.visible) ? e.visible.call(this, this.model, e, this) : !!(0, p.default)(e.visible) || e.visible;\n        }, fieldReadonly: function fieldReadonly(e) {\n          return (0, m.default)(e.readonly) ? e.readonly.call(this, this.model, e, this) : !(0, p.default)(e.readonly) && e.readonly;\n        }, fieldFeatured: function fieldFeatured(e) {\n          return (0, m.default)(e.featured) ? e.featured.call(this, this.model, e, this) : !(0, p.default)(e.featured) && e.featured;\n        }, fieldHint: function fieldHint(e) {\n          return (0, m.default)(e.hint) ? e.hint.call(this, this.model, e, this) : e.hint;\n        }, buttonClickHandler: function buttonClickHandler(e, t, n) {\n          return e.onclick.call(this, this.model, t, n, this);\n        }, onFieldValidated: function onFieldValidated(e, t, n) {\n          var r = this;this.errors = this.errors.filter(function (e) {\n            return e.field != n.schema;\n          }), !e && t && t.length > 0 && (0, y.default)(t, function (e) {\n            r.errors.push({ field: n.schema, error: e });\n          });var o = 0 == this.errors.length;this.$emit(\"validated\", o, this.errors);\n        }, validate: function validate() {\n          var e = this,\n              t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;null === t && (t = (0, b.default)(this.options, \"validateAsync\", !1)), this.clearValidationErrors();var n = [],\n              r = [];(0, y.default)(this.$children, function (e) {\n            (0, m.default)(e.validate) && (n.push(e), r.push(e.validate(!0)));\n          });var o = function o(r) {\n            var o = [];(0, y.default)(r, function (e, t) {\n              (0, f.default)(e) && e.length > 0 && (0, y.default)(e, function (e) {\n                o.push({ field: n[t].schema, error: e });\n              });\n            }), e.errors = o;var i = 0 == o.length;return e.$emit(\"validated\", i, o), t ? o : i;\n          };return t ? i.default.all(r).then(o) : o(r);\n        }, clearValidationErrors: function clearValidationErrors() {\n          this.errors.splice(0), (0, y.default)(this.$children, function (e) {\n            e.clearValidationErrors();\n          });\n        }, modelUpdated: function modelUpdated(e, t) {\n          this.$emit(\"model-updated\", e, t);\n        }, buttonVisibility: function buttonVisibility(e) {\n          return e.buttons && e.buttons.length > 0;\n        }, fieldErrors: function fieldErrors(e) {\n          var t = this.errors.filter(function (t) {\n            return t.field == e;\n          });return t.map(function (e) {\n            return e.error;\n          });\n        }, getFieldID: function getFieldID(e) {\n          var t = this.options && this.options.fieldIdPrefix ? this.options.fieldIdPrefix : \"\";return (0, x.slugifyFormID)(e, t);\n        } } };\n  }, function (e, t, n) {\n    e.exports = { default: n(6), __esModule: !0 };\n  }, function (e, t, n) {\n    n(7), n(8), n(52), n(56), n(73), n(74), e.exports = n(16).Promise;\n  }, function (e, t) {}, function (e, t, n) {\n    \"use strict\";\n    var r = n(9)(!0);n(12)(String, \"String\", function (e) {\n      this._t = String(e), this._i = 0;\n    }, function () {\n      var e,\n          t = this._t,\n          n = this._i;return n >= t.length ? { value: void 0, done: !0 } : (e = r(t, n), this._i += e.length, { value: e, done: !1 });\n    });\n  }, function (e, t, n) {\n    var r = n(10),\n        o = n(11);e.exports = function (e) {\n      return function (t, n) {\n        var i,\n            a,\n            s = String(o(t)),\n            u = r(n),\n            c = s.length;return u < 0 || u >= c ? e ? \"\" : void 0 : (i = s.charCodeAt(u), i < 55296 || i > 56319 || u + 1 === c || (a = s.charCodeAt(u + 1)) < 56320 || a > 57343 ? e ? s.charAt(u) : i : e ? s.slice(u, u + 2) : (i - 55296 << 10) + (a - 56320) + 65536);\n      };\n    };\n  }, function (e, t) {\n    var n = Math.ceil,\n        r = Math.floor;e.exports = function (e) {\n      return isNaN(e = +e) ? 0 : (e > 0 ? r : n)(e);\n    };\n  }, function (e, t) {\n    e.exports = function (e) {\n      if (void 0 == e) throw TypeError(\"Can't call method on  \" + e);return e;\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n    var r = n(13),\n        o = n(14),\n        i = n(29),\n        a = n(19),\n        s = n(30),\n        u = n(31),\n        c = n(32),\n        l = n(48),\n        f = n(50),\n        d = n(49)(\"iterator\"),\n        p = !([].keys && \"next\" in [].keys()),\n        h = \"@@iterator\",\n        m = \"keys\",\n        v = \"values\",\n        y = function y() {\n      return this;\n    };e.exports = function (e, t, n, g, b, x, _) {\n      c(n, t, g);var w,\n          O,\n          j,\n          M = function M(e) {\n        if (!p && e in T) return T[e];switch (e) {case m:\n            return function () {\n              return new n(this, e);\n            };case v:\n            return function () {\n              return new n(this, e);\n            };}return function () {\n          return new n(this, e);\n        };\n      },\n          k = t + \" Iterator\",\n          S = b == v,\n          C = !1,\n          T = e.prototype,\n          F = T[d] || T[h] || b && T[b],\n          P = F || M(b),\n          I = b ? S ? M(\"entries\") : P : void 0,\n          D = \"Array\" == t ? T.entries || F : F;if (D && (j = f(D.call(new e())), j !== Object.prototype && j.next && (l(j, k, !0), r || s(j, d) || a(j, d, y))), S && F && F.name !== v && (C = !0, P = function P() {\n        return F.call(this);\n      }), r && !_ || !p && !C && T[d] || a(T, d, P), u[t] = P, u[k] = y, b) if (w = { values: S ? P : M(v), keys: x ? P : M(m), entries: I }, _) for (O in w) {\n        O in T || i(T, O, w[O]);\n      } else o(o.P + o.F * (p || C), t, w);return w;\n    };\n  }, function (e, t) {\n    e.exports = !0;\n  }, function (e, t, n) {\n    var r = n(15),\n        o = n(16),\n        i = n(17),\n        a = n(19),\n        s = \"prototype\",\n        u = function u(e, t, n) {\n      var c,\n          l,\n          f,\n          d = e & u.F,\n          p = e & u.G,\n          h = e & u.S,\n          m = e & u.P,\n          v = e & u.B,\n          y = e & u.W,\n          g = p ? o : o[t] || (o[t] = {}),\n          b = g[s],\n          x = p ? r : h ? r[t] : (r[t] || {})[s];p && (n = t);for (c in n) {\n        l = !d && x && void 0 !== x[c], l && c in g || (f = l ? x[c] : n[c], g[c] = p && \"function\" != typeof x[c] ? n[c] : v && l ? i(f, r) : y && x[c] == f ? function (e) {\n          var t = function t(_t, n, r) {\n            if (this instanceof e) {\n              switch (arguments.length) {case 0:\n                  return new e();case 1:\n                  return new e(_t);case 2:\n                  return new e(_t, n);}return new e(_t, n, r);\n            }return e.apply(this, arguments);\n          };return t[s] = e[s], t;\n        }(f) : m && \"function\" == typeof f ? i(Function.call, f) : f, m && ((g.virtual || (g.virtual = {}))[c] = f, e & u.R && b && !b[c] && a(b, c, f)));\n      }\n    };u.F = 1, u.G = 2, u.S = 4, u.P = 8, u.B = 16, u.W = 32, u.U = 64, u.R = 128, e.exports = u;\n  }, function (e, t) {\n    var n = e.exports = \"undefined\" != typeof window && window.Math == Math ? window : \"undefined\" != typeof self && self.Math == Math ? self : Function(\"return this\")();\"number\" == typeof __g && (__g = n);\n  }, function (e, t) {\n    var n = e.exports = { version: \"2.5.1\" };\"number\" == typeof __e && (__e = n);\n  }, function (e, t, n) {\n    var r = n(18);e.exports = function (e, t, n) {\n      if (r(e), void 0 === t) return e;switch (n) {case 1:\n          return function (n) {\n            return e.call(t, n);\n          };case 2:\n          return function (n, r) {\n            return e.call(t, n, r);\n          };case 3:\n          return function (n, r, o) {\n            return e.call(t, n, r, o);\n          };}return function () {\n        return e.apply(t, arguments);\n      };\n    };\n  }, function (e, t) {\n    e.exports = function (e) {\n      if (\"function\" != typeof e) throw TypeError(e + \" is not a function!\");return e;\n    };\n  }, function (e, t, n) {\n    var r = n(20),\n        o = n(28);e.exports = n(24) ? function (e, t, n) {\n      return r.f(e, t, o(1, n));\n    } : function (e, t, n) {\n      return e[t] = n, e;\n    };\n  }, function (e, t, n) {\n    var r = n(21),\n        o = n(23),\n        i = n(27),\n        a = Object.defineProperty;t.f = n(24) ? Object.defineProperty : function (e, t, n) {\n      if (r(e), t = i(t, !0), r(n), o) try {\n        return a(e, t, n);\n      } catch (e) {}if (\"get\" in n || \"set\" in n) throw TypeError(\"Accessors not supported!\");return \"value\" in n && (e[t] = n.value), e;\n    };\n  }, function (e, t, n) {\n    var r = n(22);e.exports = function (e) {\n      if (!r(e)) throw TypeError(e + \" is not an object!\");return e;\n    };\n  }, function (e, t) {\n    e.exports = function (e) {\n      return \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) ? null !== e : \"function\" == typeof e;\n    };\n  }, function (e, t, n) {\n    e.exports = !n(24) && !n(25)(function () {\n      return 7 != Object.defineProperty(n(26)(\"div\"), \"a\", { get: function get() {\n          return 7;\n        } }).a;\n    });\n  }, function (e, t, n) {\n    e.exports = !n(25)(function () {\n      return 7 != Object.defineProperty({}, \"a\", { get: function get() {\n          return 7;\n        } }).a;\n    });\n  }, function (e, t) {\n    e.exports = function (e) {\n      try {\n        return !!e();\n      } catch (e) {\n        return !0;\n      }\n    };\n  }, function (e, t, n) {\n    var r = n(22),\n        o = n(15).document,\n        i = r(o) && r(o.createElement);e.exports = function (e) {\n      return i ? o.createElement(e) : {};\n    };\n  }, function (e, t, n) {\n    var r = n(22);e.exports = function (e, t) {\n      if (!r(e)) return e;var n, o;if (t && \"function\" == typeof (n = e.toString) && !r(o = n.call(e))) return o;if (\"function\" == typeof (n = e.valueOf) && !r(o = n.call(e))) return o;if (!t && \"function\" == typeof (n = e.toString) && !r(o = n.call(e))) return o;throw TypeError(\"Can't convert object to primitive value\");\n    };\n  }, function (e, t) {\n    e.exports = function (e, t) {\n      return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };\n    };\n  }, function (e, t, n) {\n    e.exports = n(19);\n  }, function (e, t) {\n    var n = {}.hasOwnProperty;e.exports = function (e, t) {\n      return n.call(e, t);\n    };\n  }, function (e, t) {\n    e.exports = {};\n  }, function (e, t, n) {\n    \"use strict\";\n    var r = n(33),\n        o = n(28),\n        i = n(48),\n        a = {};n(19)(a, n(49)(\"iterator\"), function () {\n      return this;\n    }), e.exports = function (e, t, n) {\n      e.prototype = r(a, { next: o(1, n) }), i(e, t + \" Iterator\");\n    };\n  }, function (e, t, n) {\n    var r = n(21),\n        o = n(34),\n        i = n(46),\n        a = n(43)(\"IE_PROTO\"),\n        s = function s() {},\n        u = \"prototype\",\n        _c = function c() {\n      var e,\n          t = n(26)(\"iframe\"),\n          r = i.length,\n          o = \"<\",\n          a = \">\";for (t.style.display = \"none\", n(47).appendChild(t), t.src = \"javascript:\", e = t.contentWindow.document, e.open(), e.write(o + \"script\" + a + \"document.F=Object\" + o + \"/script\" + a), e.close(), _c = e.F; r--;) {\n        delete _c[u][i[r]];\n      }return _c();\n    };e.exports = Object.create || function (e, t) {\n      var n;return null !== e ? (s[u] = r(e), n = new s(), s[u] = null, n[a] = e) : n = _c(), void 0 === t ? n : o(n, t);\n    };\n  }, function (e, t, n) {\n    var r = n(20),\n        o = n(21),\n        i = n(35);e.exports = n(24) ? Object.defineProperties : function (e, t) {\n      o(e);for (var n, a = i(t), s = a.length, u = 0; s > u;) {\n        r.f(e, n = a[u++], t[n]);\n      }return e;\n    };\n  }, function (e, t, n) {\n    var r = n(36),\n        o = n(46);e.exports = Object.keys || function (e) {\n      return r(e, o);\n    };\n  }, function (e, t, n) {\n    var r = n(30),\n        o = n(37),\n        i = n(40)(!1),\n        a = n(43)(\"IE_PROTO\");e.exports = function (e, t) {\n      var n,\n          s = o(e),\n          u = 0,\n          c = [];for (n in s) {\n        n != a && r(s, n) && c.push(n);\n      }for (; t.length > u;) {\n        r(s, n = t[u++]) && (~i(c, n) || c.push(n));\n      }return c;\n    };\n  }, function (e, t, n) {\n    var r = n(38),\n        o = n(11);e.exports = function (e) {\n      return r(o(e));\n    };\n  }, function (e, t, n) {\n    var r = n(39);e.exports = Object(\"z\").propertyIsEnumerable(0) ? Object : function (e) {\n      return \"String\" == r(e) ? e.split(\"\") : Object(e);\n    };\n  }, function (e, t) {\n    var n = {}.toString;e.exports = function (e) {\n      return n.call(e).slice(8, -1);\n    };\n  }, function (e, t, n) {\n    var r = n(37),\n        o = n(41),\n        i = n(42);e.exports = function (e) {\n      return function (t, n, a) {\n        var s,\n            u = r(t),\n            c = o(u.length),\n            l = i(a, c);if (e && n != n) {\n          for (; c > l;) {\n            if (s = u[l++], s != s) return !0;\n          }\n        } else for (; c > l; l++) {\n          if ((e || l in u) && u[l] === n) return e || l || 0;\n        }return !e && -1;\n      };\n    };\n  }, function (e, t, n) {\n    var r = n(10),\n        o = Math.min;e.exports = function (e) {\n      return e > 0 ? o(r(e), 9007199254740991) : 0;\n    };\n  }, function (e, t, n) {\n    var r = n(10),\n        o = Math.max,\n        i = Math.min;e.exports = function (e, t) {\n      return e = r(e), e < 0 ? o(e + t, 0) : i(e, t);\n    };\n  }, function (e, t, n) {\n    var r = n(44)(\"keys\"),\n        o = n(45);e.exports = function (e) {\n      return r[e] || (r[e] = o(e));\n    };\n  }, function (e, t, n) {\n    var r = n(15),\n        o = \"__core-js_shared__\",\n        i = r[o] || (r[o] = {});e.exports = function (e) {\n      return i[e] || (i[e] = {});\n    };\n  }, function (e, t) {\n    var n = 0,\n        r = Math.random();e.exports = function (e) {\n      return \"Symbol(\".concat(void 0 === e ? \"\" : e, \")_\", (++n + r).toString(36));\n    };\n  }, function (e, t) {\n    e.exports = \"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\");\n  }, function (e, t, n) {\n    var r = n(15).document;e.exports = r && r.documentElement;\n  }, function (e, t, n) {\n    var r = n(20).f,\n        o = n(30),\n        i = n(49)(\"toStringTag\");e.exports = function (e, t, n) {\n      e && !o(e = n ? e : e.prototype, i) && r(e, i, { configurable: !0, value: t });\n    };\n  }, function (e, t, n) {\n    var r = n(44)(\"wks\"),\n        o = n(45),\n        i = n(15).Symbol,\n        a = \"function\" == typeof i,\n        s = e.exports = function (e) {\n      return r[e] || (r[e] = a && i[e] || (a ? i : o)(\"Symbol.\" + e));\n    };s.store = r;\n  }, function (e, t, n) {\n    var r = n(30),\n        o = n(51),\n        i = n(43)(\"IE_PROTO\"),\n        a = Object.prototype;e.exports = Object.getPrototypeOf || function (e) {\n      return e = o(e), r(e, i) ? e[i] : \"function\" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? a : null;\n    };\n  }, function (e, t, n) {\n    var r = n(11);e.exports = function (e) {\n      return Object(r(e));\n    };\n  }, function (e, t, n) {\n    n(53);for (var r = n(15), o = n(19), i = n(31), a = n(49)(\"toStringTag\"), s = \"CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList\".split(\",\"), u = 0; u < s.length; u++) {\n      var c = s[u],\n          l = r[c],\n          f = l && l.prototype;f && !f[a] && o(f, a, c), i[c] = i.Array;\n    }\n  }, function (e, t, n) {\n    \"use strict\";\n    var r = n(54),\n        o = n(55),\n        i = n(31),\n        a = n(37);e.exports = n(12)(Array, \"Array\", function (e, t) {\n      this._t = a(e), this._i = 0, this._k = t;\n    }, function () {\n      var e = this._t,\n          t = this._k,\n          n = this._i++;return !e || n >= e.length ? (this._t = void 0, o(1)) : \"keys\" == t ? o(0, n) : \"values\" == t ? o(0, e[n]) : o(0, [n, e[n]]);\n    }, \"values\"), i.Arguments = i.Array, r(\"keys\"), r(\"values\"), r(\"entries\");\n  }, function (e, t) {\n    e.exports = function () {};\n  }, function (e, t) {\n    e.exports = function (e, t) {\n      return { value: t, done: !!e };\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n    var r,\n        o,\n        i,\n        a,\n        s = n(13),\n        u = n(15),\n        c = n(17),\n        l = n(57),\n        f = n(14),\n        d = n(22),\n        p = n(18),\n        h = n(58),\n        m = n(59),\n        v = n(63),\n        y = n(64).set,\n        g = n(66)(),\n        b = n(67),\n        x = n(68),\n        _ = n(69),\n        w = \"Promise\",\n        O = u.TypeError,\n        j = u.process,\n        _M = u[w],\n        k = \"process\" == l(j),\n        S = function S() {},\n        C = o = b.f,\n        T = !!function () {\n      try {\n        var e = _M.resolve(1),\n            t = (e.constructor = {})[n(49)(\"species\")] = function (e) {\n          e(S, S);\n        };return (k || \"function\" == typeof PromiseRejectionEvent) && e.then(S) instanceof t;\n      } catch (e) {}\n    }(),\n        F = function F(e) {\n      var t;return !(!d(e) || \"function\" != typeof (t = e.then)) && t;\n    },\n        P = function P(e, t) {\n      if (!e._n) {\n        e._n = !0;var n = e._c;g(function () {\n          for (var r = e._v, o = 1 == e._s, i = 0, a = function a(t) {\n            var n,\n                i,\n                a = o ? t.ok : t.fail,\n                s = t.resolve,\n                u = t.reject,\n                c = t.domain;try {\n              a ? (o || (2 == e._h && $(e), e._h = 1), a === !0 ? n = r : (c && c.enter(), n = a(r), c && c.exit()), n === t.promise ? u(O(\"Promise-chain cycle\")) : (i = F(n)) ? i.call(n, s, u) : s(n)) : u(r);\n            } catch (e) {\n              u(e);\n            }\n          }; n.length > i;) {\n            a(n[i++]);\n          }e._c = [], e._n = !1, t && !e._h && I(e);\n        });\n      }\n    },\n        I = function I(e) {\n      y.call(u, function () {\n        var t,\n            n,\n            r,\n            o = e._v,\n            i = D(e);if (i && (t = x(function () {\n          k ? j.emit(\"unhandledRejection\", o, e) : (n = u.onunhandledrejection) ? n({ promise: e, reason: o }) : (r = u.console) && r.error && r.error(\"Unhandled promise rejection\", o);\n        }), e._h = k || D(e) ? 2 : 1), e._a = void 0, i && t.e) throw t.v;\n      });\n    },\n        D = function D(e) {\n      if (1 == e._h) return !1;for (var t, n = e._a || e._c, r = 0; n.length > r;) {\n        if (t = n[r++], t.fail || !D(t.promise)) return !1;\n      }return !0;\n    },\n        $ = function $(e) {\n      y.call(u, function () {\n        var t;k ? j.emit(\"rejectionHandled\", e) : (t = u.onrejectionhandled) && t({ promise: e, reason: e._v });\n      });\n    },\n        A = function A(e) {\n      var t = this;t._d || (t._d = !0, t = t._w || t, t._v = e, t._s = 2, t._a || (t._a = t._c.slice()), P(t, !0));\n    },\n        E = function E(e) {\n      var t,\n          n = this;if (!n._d) {\n        n._d = !0, n = n._w || n;try {\n          if (n === e) throw O(\"Promise can't be resolved itself\");(t = F(e)) ? g(function () {\n            var r = { _w: n, _d: !1 };try {\n              t.call(e, c(E, r, 1), c(A, r, 1));\n            } catch (e) {\n              A.call(r, e);\n            }\n          }) : (n._v = e, n._s = 1, P(n, !1));\n        } catch (e) {\n          A.call({ _w: n, _d: !1 }, e);\n        }\n      }\n    };T || (_M = function M(e) {\n      h(this, _M, w, \"_h\"), p(e), r.call(this);try {\n        e(c(E, this, 1), c(A, this, 1));\n      } catch (e) {\n        A.call(this, e);\n      }\n    }, r = function r(e) {\n      this._c = [], this._a = void 0, this._s = 0, this._d = !1, this._v = void 0, this._h = 0, this._n = !1;\n    }, r.prototype = n(70)(_M.prototype, { then: function then(e, t) {\n        var n = C(v(this, _M));return n.ok = \"function\" != typeof e || e, n.fail = \"function\" == typeof t && t, n.domain = k ? j.domain : void 0, this._c.push(n), this._a && this._a.push(n), this._s && P(this, !1), n.promise;\n      }, catch: function _catch(e) {\n        return this.then(void 0, e);\n      } }), i = function i() {\n      var e = new r();this.promise = e, this.resolve = c(E, e, 1), this.reject = c(A, e, 1);\n    }, b.f = C = function C(e) {\n      return e === _M || e === a ? new i(e) : o(e);\n    }), f(f.G + f.W + f.F * !T, { Promise: _M }), n(48)(_M, w), n(71)(w), a = n(16)[w], f(f.S + f.F * !T, w, { reject: function reject(e) {\n        var t = C(this),\n            n = t.reject;return n(e), t.promise;\n      } }), f(f.S + f.F * (s || !T), w, { resolve: function resolve(e) {\n        return _(s && this === a ? _M : this, e);\n      } }), f(f.S + f.F * !(T && n(72)(function (e) {\n      _M.all(e).catch(S);\n    })), w, { all: function all(e) {\n        var t = this,\n            n = C(t),\n            r = n.resolve,\n            o = n.reject,\n            i = x(function () {\n          var n = [],\n              i = 0,\n              a = 1;m(e, !1, function (e) {\n            var s = i++,\n                u = !1;n.push(void 0), a++, t.resolve(e).then(function (e) {\n              u || (u = !0, n[s] = e, --a || r(n));\n            }, o);\n          }), --a || r(n);\n        });return i.e && o(i.v), n.promise;\n      }, race: function race(e) {\n        var t = this,\n            n = C(t),\n            r = n.reject,\n            o = x(function () {\n          m(e, !1, function (e) {\n            t.resolve(e).then(n.resolve, r);\n          });\n        });return o.e && r(o.v), n.promise;\n      } });\n  }, function (e, t, n) {\n    var r = n(39),\n        o = n(49)(\"toStringTag\"),\n        i = \"Arguments\" == r(function () {\n      return arguments;\n    }()),\n        a = function a(e, t) {\n      try {\n        return e[t];\n      } catch (e) {}\n    };e.exports = function (e) {\n      var t, n, s;return void 0 === e ? \"Undefined\" : null === e ? \"Null\" : \"string\" == typeof (n = a(t = Object(e), o)) ? n : i ? r(t) : \"Object\" == (s = r(t)) && \"function\" == typeof t.callee ? \"Arguments\" : s;\n    };\n  }, function (e, t) {\n    e.exports = function (e, t, n, r) {\n      if (!(e instanceof t) || void 0 !== r && r in e) throw TypeError(n + \": incorrect invocation!\");return e;\n    };\n  }, function (e, t, n) {\n    var r = n(17),\n        o = n(60),\n        i = n(61),\n        a = n(21),\n        s = n(41),\n        u = n(62),\n        c = {},\n        l = {},\n        t = e.exports = function (e, t, n, f, d) {\n      var p,\n          h,\n          m,\n          v,\n          y = d ? function () {\n        return e;\n      } : u(e),\n          g = r(n, f, t ? 2 : 1),\n          b = 0;if (\"function\" != typeof y) throw TypeError(e + \" is not iterable!\");if (i(y)) {\n        for (p = s(e.length); p > b; b++) {\n          if (v = t ? g(a(h = e[b])[0], h[1]) : g(e[b]), v === c || v === l) return v;\n        }\n      } else for (m = y.call(e); !(h = m.next()).done;) {\n        if (v = o(m, g, h.value, t), v === c || v === l) return v;\n      }\n    };t.BREAK = c, t.RETURN = l;\n  }, function (e, t, n) {\n    var r = n(21);e.exports = function (e, t, n, o) {\n      try {\n        return o ? t(r(n)[0], n[1]) : t(n);\n      } catch (t) {\n        var i = e.return;throw void 0 !== i && r(i.call(e)), t;\n      }\n    };\n  }, function (e, t, n) {\n    var r = n(31),\n        o = n(49)(\"iterator\"),\n        i = Array.prototype;e.exports = function (e) {\n      return void 0 !== e && (r.Array === e || i[o] === e);\n    };\n  }, function (e, t, n) {\n    var r = n(57),\n        o = n(49)(\"iterator\"),\n        i = n(31);e.exports = n(16).getIteratorMethod = function (e) {\n      if (void 0 != e) return e[o] || e[\"@@iterator\"] || i[r(e)];\n    };\n  }, function (e, t, n) {\n    var r = n(21),\n        o = n(18),\n        i = n(49)(\"species\");e.exports = function (e, t) {\n      var n,\n          a = r(e).constructor;return void 0 === a || void 0 == (n = r(a)[i]) ? t : o(n);\n    };\n  }, function (e, t, n) {\n    var r,\n        o,\n        i,\n        a = n(17),\n        s = n(65),\n        u = n(47),\n        c = n(26),\n        l = n(15),\n        f = l.process,\n        d = l.setImmediate,\n        p = l.clearImmediate,\n        h = l.MessageChannel,\n        m = l.Dispatch,\n        v = 0,\n        y = {},\n        g = \"onreadystatechange\",\n        b = function b() {\n      var e = +this;if (y.hasOwnProperty(e)) {\n        var t = y[e];delete y[e], t();\n      }\n    },\n        x = function x(e) {\n      b.call(e.data);\n    };d && p || (d = function d(e) {\n      for (var t = [], n = 1; arguments.length > n;) {\n        t.push(arguments[n++]);\n      }return y[++v] = function () {\n        s(\"function\" == typeof e ? e : Function(e), t);\n      }, r(v), v;\n    }, p = function p(e) {\n      delete y[e];\n    }, \"process\" == n(39)(f) ? r = function r(e) {\n      f.nextTick(a(b, e, 1));\n    } : m && m.now ? r = function r(e) {\n      m.now(a(b, e, 1));\n    } : h ? (o = new h(), i = o.port2, o.port1.onmessage = x, r = a(i.postMessage, i, 1)) : l.addEventListener && \"function\" == typeof postMessage && !l.importScripts ? (r = function r(e) {\n      l.postMessage(e + \"\", \"*\");\n    }, l.addEventListener(\"message\", x, !1)) : r = g in c(\"script\") ? function (e) {\n      u.appendChild(c(\"script\"))[g] = function () {\n        u.removeChild(this), b.call(e);\n      };\n    } : function (e) {\n      setTimeout(a(b, e, 1), 0);\n    }), e.exports = { set: d, clear: p };\n  }, function (e, t) {\n    e.exports = function (e, t, n) {\n      var r = void 0 === n;switch (t.length) {case 0:\n          return r ? e() : e.call(n);case 1:\n          return r ? e(t[0]) : e.call(n, t[0]);case 2:\n          return r ? e(t[0], t[1]) : e.call(n, t[0], t[1]);case 3:\n          return r ? e(t[0], t[1], t[2]) : e.call(n, t[0], t[1], t[2]);case 4:\n          return r ? e(t[0], t[1], t[2], t[3]) : e.call(n, t[0], t[1], t[2], t[3]);}return e.apply(n, t);\n    };\n  }, function (e, t, n) {\n    var r = n(15),\n        o = n(64).set,\n        i = r.MutationObserver || r.WebKitMutationObserver,\n        a = r.process,\n        s = r.Promise,\n        u = \"process\" == n(39)(a);e.exports = function () {\n      var e,\n          t,\n          n,\n          c = function c() {\n        var r, o;for (u && (r = a.domain) && r.exit(); e;) {\n          o = e.fn, e = e.next;try {\n            o();\n          } catch (r) {\n            throw e ? n() : t = void 0, r;\n          }\n        }t = void 0, r && r.enter();\n      };if (u) n = function n() {\n        a.nextTick(c);\n      };else if (i) {\n        var l = !0,\n            f = document.createTextNode(\"\");new i(c).observe(f, { characterData: !0 }), n = function n() {\n          f.data = l = !l;\n        };\n      } else if (s && s.resolve) {\n        var d = s.resolve();n = function n() {\n          d.then(c);\n        };\n      } else n = function n() {\n        o.call(r, c);\n      };return function (r) {\n        var o = { fn: r, next: void 0 };t && (t.next = o), e || (e = o, n()), t = o;\n      };\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      var t, n;this.promise = new e(function (e, r) {\n        if (void 0 !== t || void 0 !== n) throw TypeError(\"Bad Promise constructor\");t = e, n = r;\n      }), this.resolve = o(t), this.reject = o(n);\n    }var o = n(18);e.exports.f = function (e) {\n      return new r(e);\n    };\n  }, function (e, t) {\n    e.exports = function (e) {\n      try {\n        return { e: !1, v: e() };\n      } catch (e) {\n        return { e: !0, v: e };\n      }\n    };\n  }, function (e, t, n) {\n    var r = n(21),\n        o = n(22),\n        i = n(67);e.exports = function (e, t) {\n      if (r(e), o(t) && t.constructor === e) return t;var n = i.f(e),\n          a = n.resolve;return a(t), n.promise;\n    };\n  }, function (e, t, n) {\n    var r = n(19);e.exports = function (e, t, n) {\n      for (var o in t) {\n        n && e[o] ? e[o] = t[o] : r(e, o, t[o]);\n      }return e;\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n    var r = n(15),\n        o = n(16),\n        i = n(20),\n        a = n(24),\n        s = n(49)(\"species\");e.exports = function (e) {\n      var t = \"function\" == typeof o[e] ? o[e] : r[e];a && t && !t[s] && i.f(t, s, { configurable: !0, get: function get() {\n          return this;\n        } });\n    };\n  }, function (e, t, n) {\n    var r = n(49)(\"iterator\"),\n        o = !1;try {\n      var i = [7][r]();i.return = function () {\n        o = !0;\n      }, Array.from(i, function () {\n        throw 2;\n      });\n    } catch (e) {}e.exports = function (e, t) {\n      if (!t && !o) return !1;var n = !1;try {\n        var i = [7],\n            a = i[r]();a.next = function () {\n          return { done: n = !0 };\n        }, i[r] = function () {\n          return a;\n        }, e(i);\n      } catch (e) {}return n;\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n    var r = n(14),\n        o = n(16),\n        i = n(15),\n        a = n(63),\n        s = n(69);r(r.P + r.R, \"Promise\", { finally: function _finally(e) {\n        var t = a(this, o.Promise || i.Promise),\n            n = \"function\" == typeof e;return this.then(n ? function (n) {\n          return s(t, e()).then(function () {\n            return n;\n          });\n        } : e, n ? function (n) {\n          return s(t, e()).then(function () {\n            throw n;\n          });\n        } : e);\n      } });\n  }, function (e, t, n) {\n    \"use strict\";\n    var r = n(14),\n        o = n(67),\n        i = n(68);r(r.S, \"Promise\", { try: function _try(e) {\n        var t = o.f(this),\n            n = i(e);return (n.e ? t.reject : t.resolve)(n.v), t.promise;\n      } });\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }t.__esModule = !0;var o = n(76),\n        i = r(o);t.default = function (e, t, n) {\n      return t in e ? (0, i.default)(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e;\n    };\n  }, function (e, t, n) {\n    e.exports = { default: n(77), __esModule: !0 };\n  }, function (e, t, n) {\n    n(78);var r = n(16).Object;e.exports = function (e, t, n) {\n      return r.defineProperty(e, t, n);\n    };\n  }, function (e, t, n) {\n    var r = n(14);r(r.S + r.F * !n(24), \"Object\", { defineProperty: n(20).f });\n  }, function (e, t, n) {\n    function r(e) {\n      return \"string\" == typeof e || !i(e) && a(e) && o(e) == s;\n    }var o = n(80),\n        i = n(86),\n        a = n(87),\n        s = \"[object String]\";e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return null == e ? void 0 === e ? u : s : c && c in Object(e) ? i(e) : a(e);\n    }var o = n(81),\n        i = n(84),\n        a = n(85),\n        s = \"[object Null]\",\n        u = \"[object Undefined]\",\n        c = o ? o.toStringTag : void 0;e.exports = r;\n  }, function (e, t, n) {\n    var r = n(82),\n        o = r.Symbol;e.exports = o;\n  }, function (e, t, n) {\n    var r = n(83),\n        o = \"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self && self.Object === Object && self,\n        i = r || o || Function(\"return this\")();e.exports = i;\n  }, function (e, t) {\n    (function (t) {\n      var n = \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) && t && t.Object === Object && t;e.exports = n;\n    }).call(t, function () {\n      return this;\n    }());\n  }, function (e, t, n) {\n    function r(e) {\n      var t = a.call(e, u),\n          n = e[u];try {\n        e[u] = void 0;var r = !0;\n      } catch (e) {}var o = s.call(e);return r && (t ? e[u] = n : delete e[u]), o;\n    }var o = n(81),\n        i = Object.prototype,\n        a = i.hasOwnProperty,\n        s = i.toString,\n        u = o ? o.toStringTag : void 0;e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      return o.call(e);\n    }var r = Object.prototype,\n        o = r.toString;e.exports = n;\n  }, function (e, t) {\n    var n = Array.isArray;e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      return null != e && \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e));\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      return null == e;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      if (!i(e)) return !1;var t = o(e);return t == s || t == u || t == a || t == c;\n    }var o = n(80),\n        i = n(90),\n        a = \"[object AsyncFunction]\",\n        s = \"[object Function]\",\n        u = \"[object GeneratorFunction]\",\n        c = \"[object Proxy]\";e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      var t = typeof e === \"undefined\" ? \"undefined\" : _typeof(e);return null != e && (\"object\" == t || \"function\" == t);\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = s(e) ? o : i;return n(e, a(t));\n    }var o = n(92),\n        i = n(93),\n        a = n(117),\n        s = n(86);e.exports = r;\n  }, function (e, t) {\n    function n(e, t) {\n      for (var n = -1, r = null == e ? 0 : e.length; ++n < r && t(e[n], n, e) !== !1;) {}return e;\n    }e.exports = n;\n  }, function (e, t, n) {\n    var r = n(94),\n        o = n(116),\n        i = o(r);e.exports = i;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return e && o(e, t, i);\n    }var o = n(95),\n        i = n(97);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(96),\n        o = r();e.exports = o;\n  }, function (e, t) {\n    function n(e) {\n      return function (t, n, r) {\n        for (var o = -1, i = Object(t), a = r(t), s = a.length; s--;) {\n          var u = a[e ? s : ++o];if (n(i[u], u, i) === !1) break;\n        }return t;\n      };\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      return a(e) ? o(e) : i(e);\n    }var o = n(98),\n        i = n(111),\n        a = n(115);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = a(e),\n          r = !n && i(e),\n          l = !n && !r && s(e),\n          d = !n && !r && !l && c(e),\n          p = n || r || l || d,\n          h = p ? o(e.length, String) : [],\n          m = h.length;for (var v in e) {\n        !t && !f.call(e, v) || p && (\"length\" == v || l && (\"offset\" == v || \"parent\" == v) || d && (\"buffer\" == v || \"byteLength\" == v || \"byteOffset\" == v) || u(v, m)) || h.push(v);\n      }return h;\n    }var o = n(99),\n        i = n(100),\n        a = n(86),\n        s = n(102),\n        u = n(105),\n        c = n(106),\n        l = Object.prototype,\n        f = l.hasOwnProperty;e.exports = r;\n  }, function (e, t) {\n    function n(e, t) {\n      for (var n = -1, r = Array(e); ++n < e;) {\n        r[n] = t(n);\n      }return r;\n    }e.exports = n;\n  }, function (e, t, n) {\n    var r = n(101),\n        o = n(87),\n        i = Object.prototype,\n        a = i.hasOwnProperty,\n        s = i.propertyIsEnumerable,\n        u = r(function () {\n      return arguments;\n    }()) ? r : function (e) {\n      return o(e) && a.call(e, \"callee\") && !s.call(e, \"callee\");\n    };e.exports = u;\n  }, function (e, t, n) {\n    function r(e) {\n      return i(e) && o(e) == a;\n    }var o = n(80),\n        i = n(87),\n        a = \"[object Arguments]\";e.exports = r;\n  }, function (e, t, n) {\n    (function (e) {\n      var r = n(82),\n          o = n(104),\n          i = \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) && t && !t.nodeType && t,\n          a = i && \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && e && !e.nodeType && e,\n          s = a && a.exports === i,\n          u = s ? r.Buffer : void 0,\n          c = u ? u.isBuffer : void 0,\n          l = c || o;e.exports = l;\n    }).call(t, n(103)(e));\n  }, function (e, t) {\n    e.exports = function (e) {\n      return e.webpackPolyfill || (e.deprecate = function () {}, e.paths = [], e.children = [], e.webpackPolyfill = 1), e;\n    };\n  }, function (e, t) {\n    function n() {\n      return !1;\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e, t) {\n      return t = null == t ? r : t, !!t && (\"number\" == typeof e || o.test(e)) && e > -1 && e % 1 == 0 && e < t;\n    }var r = 9007199254740991,\n        o = /^(?:0|[1-9]\\d*)$/;e.exports = n;\n  }, function (e, t, n) {\n    var r = n(107),\n        o = n(109),\n        i = n(110),\n        a = i && i.isTypedArray,\n        s = a ? o(a) : r;e.exports = s;\n  }, function (e, t, n) {\n    function r(e) {\n      return a(e) && i(e.length) && !!P[o(e)];\n    }var o = n(80),\n        i = n(108),\n        a = n(87),\n        s = \"[object Arguments]\",\n        u = \"[object Array]\",\n        c = \"[object Boolean]\",\n        l = \"[object Date]\",\n        f = \"[object Error]\",\n        d = \"[object Function]\",\n        p = \"[object Map]\",\n        h = \"[object Number]\",\n        m = \"[object Object]\",\n        v = \"[object RegExp]\",\n        y = \"[object Set]\",\n        g = \"[object String]\",\n        b = \"[object WeakMap]\",\n        x = \"[object ArrayBuffer]\",\n        _ = \"[object DataView]\",\n        w = \"[object Float32Array]\",\n        O = \"[object Float64Array]\",\n        j = \"[object Int8Array]\",\n        M = \"[object Int16Array]\",\n        k = \"[object Int32Array]\",\n        S = \"[object Uint8Array]\",\n        C = \"[object Uint8ClampedArray]\",\n        T = \"[object Uint16Array]\",\n        F = \"[object Uint32Array]\",\n        P = {};P[w] = P[O] = P[j] = P[M] = P[k] = P[S] = P[C] = P[T] = P[F] = !0, P[s] = P[u] = P[x] = P[c] = P[_] = P[l] = P[f] = P[d] = P[p] = P[h] = P[m] = P[v] = P[y] = P[g] = P[b] = !1, e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      return \"number\" == typeof e && e > -1 && e % 1 == 0 && e <= r;\n    }var r = 9007199254740991;e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      return function (t) {\n        return e(t);\n      };\n    }e.exports = n;\n  }, function (e, t, n) {\n    (function (e) {\n      var r = n(83),\n          o = \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) && t && !t.nodeType && t,\n          i = o && \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && e && !e.nodeType && e,\n          a = i && i.exports === o,\n          s = a && r.process,\n          u = function () {\n        try {\n          return s && s.binding && s.binding(\"util\");\n        } catch (e) {}\n      }();e.exports = u;\n    }).call(t, n(103)(e));\n  }, function (e, t, n) {\n    function r(e) {\n      if (!o(e)) return i(e);var t = [];for (var n in Object(e)) {\n        s.call(e, n) && \"constructor\" != n && t.push(n);\n      }return t;\n    }var o = n(112),\n        i = n(113),\n        a = Object.prototype,\n        s = a.hasOwnProperty;e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      var t = e && e.constructor,\n          n = \"function\" == typeof t && t.prototype || r;return e === n;\n    }var r = Object.prototype;e.exports = n;\n  }, function (e, t, n) {\n    var r = n(114),\n        o = r(Object.keys, Object);e.exports = o;\n  }, function (e, t) {\n    function n(e, t) {\n      return function (n) {\n        return e(t(n));\n      };\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      return null != e && i(e.length) && !o(e);\n    }var o = n(89),\n        i = n(108);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return function (n, r) {\n        if (null == n) return n;if (!o(n)) return e(n, r);for (var i = n.length, a = t ? i : -1, s = Object(n); (t ? a-- : ++a < i) && r(s[a], a, s) !== !1;) {}return n;\n      };\n    }var o = n(115);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return \"function\" == typeof e ? e : o;\n    }var o = n(118);e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      return e;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      var r = null == e ? void 0 : o(e, t);return void 0 === r ? n : r;\n    }var o = n(120);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      t = o(t, e);for (var n = 0, r = t.length; null != e && n < r;) {\n        e = e[i(t[n++])];\n      }return n && n == r ? e : void 0;\n    }var o = n(121),\n        i = n(160);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return o(e) ? e : i(e, t) ? [e] : a(s(e));\n    }var o = n(86),\n        i = n(122),\n        a = n(124),\n        s = n(157);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      if (o(e)) return !1;var n = typeof e === \"undefined\" ? \"undefined\" : _typeof(e);return !(\"number\" != n && \"symbol\" != n && \"boolean\" != n && null != e && !i(e)) || s.test(e) || !a.test(e) || null != t && e in Object(t);\n    }var o = n(86),\n        i = n(123),\n        a = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n        s = /^\\w*$/;e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return \"symbol\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) || i(e) && o(e) == a;\n    }var o = n(80),\n        i = n(87),\n        a = \"[object Symbol]\";e.exports = r;\n  }, function (e, t, n) {\n    var r = n(125),\n        o = /^\\./,\n        i = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n        a = /\\\\(\\\\)?/g,\n        s = r(function (e) {\n      var t = [];return o.test(e) && t.push(\"\"), e.replace(i, function (e, n, r, o) {\n        t.push(r ? o.replace(a, \"$1\") : n || e);\n      }), t;\n    });e.exports = s;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = o(e, function (e) {\n        return n.size === i && n.clear(), e;\n      }),\n          n = t.cache;return t;\n    }var o = n(126),\n        i = 500;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      if (\"function\" != typeof e || null != t && \"function\" != typeof t) throw new TypeError(i);var n = function n() {\n        var r = arguments,\n            o = t ? t.apply(this, r) : r[0],\n            i = n.cache;if (i.has(o)) return i.get(o);var a = e.apply(this, r);return n.cache = i.set(o, a) || i, a;\n      };return n.cache = new (r.Cache || o)(), n;\n    }var o = n(127),\n        i = \"Expected a function\";r.Cache = o, e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = -1,\n          n = null == e ? 0 : e.length;for (this.clear(); ++t < n;) {\n        var r = e[t];this.set(r[0], r[1]);\n      }\n    }var o = n(128),\n        i = n(151),\n        a = n(154),\n        s = n(155),\n        u = n(156);r.prototype.clear = o, r.prototype.delete = i, r.prototype.get = a, r.prototype.has = s, r.prototype.set = u, e.exports = r;\n  }, function (e, t, n) {\n    function r() {\n      this.size = 0, this.__data__ = { hash: new o(), map: new (a || i)(), string: new o() };\n    }var o = n(129),\n        i = n(142),\n        a = n(150);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = -1,\n          n = null == e ? 0 : e.length;for (this.clear(); ++t < n;) {\n        var r = e[t];this.set(r[0], r[1]);\n      }\n    }var o = n(130),\n        i = n(138),\n        a = n(139),\n        s = n(140),\n        u = n(141);r.prototype.clear = o, r.prototype.delete = i, r.prototype.get = a, r.prototype.has = s, r.prototype.set = u, e.exports = r;\n  }, function (e, t, n) {\n    function r() {\n      this.__data__ = o ? o(null) : {}, this.size = 0;\n    }var o = n(131);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(132),\n        o = r(Object, \"create\");e.exports = o;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = i(e, t);return o(n) ? n : void 0;\n    }var o = n(133),\n        i = n(137);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      if (!a(e) || i(e)) return !1;var t = o(e) ? h : c;return t.test(s(e));\n    }var o = n(89),\n        i = n(134),\n        a = n(90),\n        s = n(136),\n        u = /[\\\\^$.*+?()[\\]{}|]/g,\n        c = /^\\[object .+?Constructor\\]$/,\n        l = Function.prototype,\n        f = Object.prototype,\n        d = l.toString,\n        p = f.hasOwnProperty,\n        h = RegExp(\"^\" + d.call(p).replace(u, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n    e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return !!i && i in e;\n    }var o = n(135),\n        i = function () {\n      var e = /[^.]+$/.exec(o && o.keys && o.keys.IE_PROTO || \"\");return e ? \"Symbol(src)_1.\" + e : \"\";\n    }();e.exports = r;\n  }, function (e, t, n) {\n    var r = n(82),\n        o = r[\"__core-js_shared__\"];e.exports = o;\n  }, function (e, t) {\n    function n(e) {\n      if (null != e) {\n        try {\n          return o.call(e);\n        } catch (e) {}try {\n          return e + \"\";\n        } catch (e) {}\n      }return \"\";\n    }var r = Function.prototype,\n        o = r.toString;e.exports = n;\n  }, function (e, t) {\n    function n(e, t) {\n      return null == e ? void 0 : e[t];\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      var t = this.has(e) && delete this.__data__[e];return this.size -= t ? 1 : 0, t;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = this.__data__;if (o) {\n        var n = t[e];return n === i ? void 0 : n;\n      }return s.call(t, e) ? t[e] : void 0;\n    }var o = n(131),\n        i = \"__lodash_hash_undefined__\",\n        a = Object.prototype,\n        s = a.hasOwnProperty;e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = this.__data__;return o ? void 0 !== t[e] : a.call(t, e);\n    }var o = n(131),\n        i = Object.prototype,\n        a = i.hasOwnProperty;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = this.__data__;return this.size += this.has(e) ? 0 : 1, n[e] = o && void 0 === t ? i : t, this;\n    }var o = n(131),\n        i = \"__lodash_hash_undefined__\";e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = -1,\n          n = null == e ? 0 : e.length;for (this.clear(); ++t < n;) {\n        var r = e[t];this.set(r[0], r[1]);\n      }\n    }var o = n(143),\n        i = n(144),\n        a = n(147),\n        s = n(148),\n        u = n(149);r.prototype.clear = o, r.prototype.delete = i, r.prototype.get = a, r.prototype.has = s, r.prototype.set = u, e.exports = r;\n  }, function (e, t) {\n    function n() {\n      this.__data__ = [], this.size = 0;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = this.__data__,\n          n = o(t, e);if (n < 0) return !1;var r = t.length - 1;return n == r ? t.pop() : a.call(t, n, 1), --this.size, !0;\n    }var o = n(145),\n        i = Array.prototype,\n        a = i.splice;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      for (var n = e.length; n--;) {\n        if (o(e[n][0], t)) return n;\n      }return -1;\n    }var o = n(146);e.exports = r;\n  }, function (e, t) {\n    function n(e, t) {\n      return e === t || e !== e && t !== t;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = this.__data__,\n          n = o(t, e);return n < 0 ? void 0 : t[n][1];\n    }var o = n(145);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return o(this.__data__, e) > -1;\n    }var o = n(145);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = this.__data__,\n          r = o(n, e);return r < 0 ? (++this.size, n.push([e, t])) : n[r][1] = t, this;\n    }var o = n(145);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(132),\n        o = n(82),\n        i = r(o, \"Map\");e.exports = i;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = o(this, e).delete(e);return this.size -= t ? 1 : 0, t;\n    }var o = n(152);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = e.__data__;return o(t) ? n[\"string\" == typeof t ? \"string\" : \"hash\"] : n.map;\n    }var o = n(153);e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      var t = typeof e === \"undefined\" ? \"undefined\" : _typeof(e);return \"string\" == t || \"number\" == t || \"symbol\" == t || \"boolean\" == t ? \"__proto__\" !== e : null === e;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      return o(this, e).get(e);\n    }var o = n(152);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return o(this, e).has(e);\n    }var o = n(152);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = o(this, e),\n          r = n.size;return n.set(e, t), this.size += n.size == r ? 0 : 1, this;\n    }var o = n(152);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return null == e ? \"\" : o(e);\n    }var o = n(158);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      if (\"string\" == typeof e) return e;if (a(e)) return i(e, r) + \"\";if (s(e)) return l ? l.call(e) : \"\";var t = e + \"\";return \"0\" == t && 1 / e == -u ? \"-0\" : t;\n    }var o = n(81),\n        i = n(159),\n        a = n(86),\n        s = n(123),\n        u = 1 / 0,\n        c = o ? o.prototype : void 0,\n        l = c ? c.toString : void 0;e.exports = r;\n  }, function (e, t) {\n    function n(e, t) {\n      for (var n = -1, r = null == e ? 0 : e.length, o = Array(r); ++n < r;) {\n        o[n] = t(e[n], n, e);\n      }return o;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      if (\"string\" == typeof e || o(e)) return e;var t = e + \"\";return \"0\" == t && 1 / e == -i ? \"-0\" : t;\n    }var o = n(123),\n        i = 1 / 0;e.exports = r;\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }var o = n(162),\n        i = r(o),\n        a = n(89),\n        s = r(a),\n        u = n(86),\n        c = r(u),\n        l = n(90),\n        f = r(l),\n        d = n(214),\n        p = r(d),\n        h = n(215),\n        m = r(h),\n        v = n(119),\n        y = r(v);e.exports.createDefaultObject = function (e) {\n      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};return (0, p.default)(e.fields, function (n) {\n        void 0 === (0, y.default)(t, n.model) && void 0 !== n.default && ((0, s.default)(n.default) ? (0, m.default)(t, n.model, n.default(n, e, t)) : (0, f.default)(n.default) || (0, c.default)(n.default) ? (0, m.default)(t, n.model, (0, i.default)(n.default)) : (0, m.default)(t, n.model, n.default));\n      }), t;\n    }, e.exports.getMultipleFields = function (e) {\n      var t = [];return (0, p.default)(e.fields, function (e) {\n        e.multi === !0 && t.push(e);\n      }), t;\n    }, e.exports.mergeMultiObjectFields = function (t, n) {\n      var r = {},\n          o = e.exports.getMultipleFields(t);return (0, p.default)(o, function (e) {\n        var t = void 0,\n            o = !0,\n            i = e.model;(0, p.default)(n, function (e) {\n          var n = (0, y.default)(e, i);o ? (t = n, o = !1) : t != n && (t = void 0);\n        }), (0, m.default)(r, i, t);\n      }), r;\n    }, e.exports.slugifyFormID = function (e) {\n      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\";return \"undefined\" != typeof e.id ? t + e.id : t + (e.inputName || e.label || e.model || \"\").toString().trim().toLowerCase().replace(/ |_/g, \"-\").replace(/-{2,}/g, \"-\").replace(/^-+|-+$/g, \"\").replace(/([^a-zA-Z0-9-]+)/g, \"\");\n    }, e.exports.slugify = function () {\n      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\";return e.toString().trim().replace(/ /g, \"-\").replace(/-{2,}/g, \"-\").replace(/^-+|-+$/g, \"\").replace(/([^a-zA-Z0-9-_\\/.\\/:]+)/g, \"\");\n    };\n  }, function (e, t, n) {\n    function r(e) {\n      return o(e, i | a);\n    }var o = n(163),\n        i = 1,\n        a = 4;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, S, C, T) {\n      var F,\n          D = t & O,\n          $ = t & j,\n          E = t & M;if (n && (F = C ? n(e, S, C, T) : n(e)), void 0 !== F) return F;if (!_(e)) return e;var N = b(e);if (N) {\n        if (F = v(e), !D) return l(e, F);\n      } else {\n        var L = m(e),\n            V = L == P || L == I;if (x(e)) return c(e, D);if (L == A || L == k || V && !C) {\n          if (F = $ || V ? {} : g(e), !D) return $ ? d(e, u(F, e)) : f(e, s(F, e));\n        } else {\n          if (!X[L]) return C ? e : {};F = y(e, L, r, D);\n        }\n      }T || (T = new o());var R = T.get(e);if (R) return R;T.set(e, F);var Y = E ? $ ? h : p : $ ? keysIn : w,\n          H = N ? void 0 : Y(e);return i(H || e, function (o, i) {\n        H && (i = o, o = e[i]), a(F, i, r(o, t, n, i, e, T));\n      }), F;\n    }var o = n(164),\n        i = n(92),\n        a = n(170),\n        s = n(173),\n        u = n(175),\n        c = n(179),\n        l = n(180),\n        f = n(181),\n        d = n(185),\n        p = n(189),\n        h = n(191),\n        m = n(192),\n        v = n(197),\n        y = n(198),\n        g = n(212),\n        b = n(86),\n        x = n(102),\n        _ = n(90),\n        w = n(97),\n        O = 1,\n        j = 2,\n        M = 4,\n        k = \"[object Arguments]\",\n        S = \"[object Array]\",\n        C = \"[object Boolean]\",\n        T = \"[object Date]\",\n        F = \"[object Error]\",\n        P = \"[object Function]\",\n        I = \"[object GeneratorFunction]\",\n        D = \"[object Map]\",\n        $ = \"[object Number]\",\n        A = \"[object Object]\",\n        E = \"[object RegExp]\",\n        N = \"[object Set]\",\n        L = \"[object String]\",\n        V = \"[object Symbol]\",\n        R = \"[object WeakMap]\",\n        Y = \"[object ArrayBuffer]\",\n        H = \"[object DataView]\",\n        U = \"[object Float32Array]\",\n        z = \"[object Float64Array]\",\n        q = \"[object Int8Array]\",\n        B = \"[object Int16Array]\",\n        G = \"[object Int32Array]\",\n        Z = \"[object Uint8Array]\",\n        W = \"[object Uint8ClampedArray]\",\n        J = \"[object Uint16Array]\",\n        K = \"[object Uint32Array]\",\n        X = {};X[k] = X[S] = X[Y] = X[H] = X[C] = X[T] = X[U] = X[z] = X[q] = X[B] = X[G] = X[D] = X[$] = X[A] = X[E] = X[N] = X[L] = X[V] = X[Z] = X[W] = X[J] = X[K] = !0, X[F] = X[P] = X[R] = !1, e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = this.__data__ = new o(e);this.size = t.size;\n    }var o = n(142),\n        i = n(165),\n        a = n(166),\n        s = n(167),\n        u = n(168),\n        c = n(169);r.prototype.clear = i, r.prototype.delete = a, r.prototype.get = s, r.prototype.has = u, r.prototype.set = c, e.exports = r;\n  }, function (e, t, n) {\n    function r() {\n      this.__data__ = new o(), this.size = 0;\n    }var o = n(142);e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      var t = this.__data__,\n          n = t.delete(e);return this.size = t.size, n;\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      return this.__data__.get(e);\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      return this.__data__.has(e);\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = this.__data__;if (n instanceof o) {\n        var r = n.__data__;if (!i || r.length < s - 1) return r.push([e, t]), this.size = ++n.size, this;n = this.__data__ = new a(r);\n      }return n.set(e, t), this.size = n.size, this;\n    }var o = n(142),\n        i = n(150),\n        a = n(127),\n        s = 200;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      var r = e[t];s.call(e, t) && i(r, n) && (void 0 !== n || t in e) || o(e, t, n);\n    }var o = n(171),\n        i = n(146),\n        a = Object.prototype,\n        s = a.hasOwnProperty;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      \"__proto__\" == t && o ? o(e, t, { configurable: !0, enumerable: !0, value: n, writable: !0 }) : e[t] = n;\n    }var o = n(172);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(132),\n        o = function () {\n      try {\n        var e = r(Object, \"defineProperty\");return e({}, \"\", {}), e;\n      } catch (e) {}\n    }();e.exports = o;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return e && o(t, i(t), e);\n    }var o = n(174),\n        i = n(97);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, r) {\n      var a = !n;n || (n = {});for (var s = -1, u = t.length; ++s < u;) {\n        var c = t[s],\n            l = r ? r(n[c], e[c], c, n, e) : void 0;void 0 === l && (l = e[c]), a ? i(n, c, l) : o(n, c, l);\n      }return n;\n    }var o = n(170),\n        i = n(171);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return e && o(t, i(t), e);\n    }var o = n(174),\n        i = n(176);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return a(e) ? o(e, !0) : i(e);\n    }var o = n(98),\n        i = n(177),\n        a = n(115);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      if (!o(e)) return a(e);var t = i(e),\n          n = [];for (var r in e) {\n        (\"constructor\" != r || !t && u.call(e, r)) && n.push(r);\n      }return n;\n    }var o = n(90),\n        i = n(112),\n        a = n(178),\n        s = Object.prototype,\n        u = s.hasOwnProperty;e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      var t = [];if (null != e) for (var n in Object(e)) {\n        t.push(n);\n      }return t;\n    }e.exports = n;\n  }, function (e, t, n) {\n    (function (e) {\n      function r(e, t) {\n        if (t) return e.slice();var n = e.length,\n            r = c ? c(n) : new e.constructor(n);return e.copy(r), r;\n      }var o = n(82),\n          i = \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) && t && !t.nodeType && t,\n          a = i && \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && e && !e.nodeType && e,\n          s = a && a.exports === i,\n          u = s ? o.Buffer : void 0,\n          c = u ? u.allocUnsafe : void 0;e.exports = r;\n    }).call(t, n(103)(e));\n  }, function (e, t) {\n    function n(e, t) {\n      var n = -1,\n          r = e.length;for (t || (t = Array(r)); ++n < r;) {\n        t[n] = e[n];\n      }return t;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return o(e, i(e), t);\n    }var o = n(174),\n        i = n(182);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(183),\n        o = n(184),\n        i = Object.prototype,\n        a = i.propertyIsEnumerable,\n        s = Object.getOwnPropertySymbols,\n        u = s ? function (e) {\n      return null == e ? [] : (e = Object(e), r(s(e), function (t) {\n        return a.call(e, t);\n      }));\n    } : o;e.exports = u;\n  }, function (e, t) {\n    function n(e, t) {\n      for (var n = -1, r = null == e ? 0 : e.length, o = 0, i = []; ++n < r;) {\n        var a = e[n];t(a, n, e) && (i[o++] = a);\n      }return i;\n    }e.exports = n;\n  }, function (e, t) {\n    function n() {\n      return [];\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return o(e, i(e), t);\n    }var o = n(174),\n        i = n(186);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(187),\n        o = n(188),\n        i = n(182),\n        a = n(184),\n        s = Object.getOwnPropertySymbols,\n        u = s ? function (e) {\n      for (var t = []; e;) {\n        r(t, i(e)), e = o(e);\n      }return t;\n    } : a;e.exports = u;\n  }, function (e, t) {\n    function n(e, t) {\n      for (var n = -1, r = t.length, o = e.length; ++n < r;) {\n        e[o + n] = t[n];\n      }return e;\n    }e.exports = n;\n  }, function (e, t, n) {\n    var r = n(114),\n        o = r(Object.getPrototypeOf, Object);e.exports = o;\n  }, function (e, t, n) {\n    function r(e) {\n      return o(e, a, i);\n    }var o = n(190),\n        i = n(182),\n        a = n(97);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      var r = t(e);return i(e) ? r : o(r, n(e));\n    }var o = n(187),\n        i = n(86);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return o(e, a, i);\n    }var o = n(190),\n        i = n(186),\n        a = n(176);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(193),\n        o = n(150),\n        i = n(194),\n        a = n(195),\n        s = n(196),\n        u = n(80),\n        c = n(136),\n        l = \"[object Map]\",\n        f = \"[object Object]\",\n        d = \"[object Promise]\",\n        p = \"[object Set]\",\n        h = \"[object WeakMap]\",\n        m = \"[object DataView]\",\n        v = c(r),\n        y = c(o),\n        g = c(i),\n        b = c(a),\n        x = c(s),\n        _ = u;(r && _(new r(new ArrayBuffer(1))) != m || o && _(new o()) != l || i && _(i.resolve()) != d || a && _(new a()) != p || s && _(new s()) != h) && (_ = function _(e) {\n      var t = u(e),\n          n = t == f ? e.constructor : void 0,\n          r = n ? c(n) : \"\";if (r) switch (r) {case v:\n          return m;case y:\n          return l;case g:\n          return d;case b:\n          return p;case x:\n          return h;}return t;\n    }), e.exports = _;\n  }, function (e, t, n) {\n    var r = n(132),\n        o = n(82),\n        i = r(o, \"DataView\");e.exports = i;\n  }, function (e, t, n) {\n    var r = n(132),\n        o = n(82),\n        i = r(o, \"Promise\");e.exports = i;\n  }, function (e, t, n) {\n    var r = n(132),\n        o = n(82),\n        i = r(o, \"Set\");e.exports = i;\n  }, function (e, t, n) {\n    var r = n(132),\n        o = n(82),\n        i = r(o, \"WeakMap\");e.exports = i;\n  }, function (e, t) {\n    function n(e) {\n      var t = e.length,\n          n = e.constructor(t);return t && \"string\" == typeof e[0] && o.call(e, \"index\") && (n.index = e.index, n.input = e.input), n;\n    }var r = Object.prototype,\n        o = r.hasOwnProperty;e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t, n, r) {\n      var F = e.constructor;switch (t) {case b:\n          return o(e);case f:case d:\n          return new F(+e);case x:\n          return i(e, r);case _:case w:case O:case j:case M:case k:case S:case C:case T:\n          return l(e, r);case p:\n          return a(e, r, n);case h:case y:\n          return new F(e);case m:\n          return s(e);case v:\n          return u(e, r, n);case g:\n          return c(e);}\n    }var o = n(199),\n        i = n(201),\n        a = n(202),\n        s = n(206),\n        u = n(207),\n        c = n(210),\n        l = n(211),\n        f = \"[object Boolean]\",\n        d = \"[object Date]\",\n        p = \"[object Map]\",\n        h = \"[object Number]\",\n        m = \"[object RegExp]\",\n        v = \"[object Set]\",\n        y = \"[object String]\",\n        g = \"[object Symbol]\",\n        b = \"[object ArrayBuffer]\",\n        x = \"[object DataView]\",\n        _ = \"[object Float32Array]\",\n        w = \"[object Float64Array]\",\n        O = \"[object Int8Array]\",\n        j = \"[object Int16Array]\",\n        M = \"[object Int32Array]\",\n        k = \"[object Uint8Array]\",\n        S = \"[object Uint8ClampedArray]\",\n        C = \"[object Uint16Array]\",\n        T = \"[object Uint32Array]\";e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = new e.constructor(e.byteLength);return new o(t).set(new o(e)), t;\n    }var o = n(200);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(82),\n        o = r.Uint8Array;e.exports = o;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = t ? o(e.buffer) : e.buffer;return new e.constructor(n, e.byteOffset, e.byteLength);\n    }var o = n(199);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      var r = t ? n(a(e), s) : a(e);return i(r, o, new e.constructor());\n    }var o = n(203),\n        i = n(204),\n        a = n(205),\n        s = 1;e.exports = r;\n  }, function (e, t) {\n    function n(e, t) {\n      return e.set(t[0], t[1]), e;\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e, t, n, r) {\n      var o = -1,\n          i = null == e ? 0 : e.length;for (r && i && (n = e[++o]); ++o < i;) {\n        n = t(n, e[o], o, e);\n      }return n;\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      var t = -1,\n          n = Array(e.size);return e.forEach(function (e, r) {\n        n[++t] = [r, e];\n      }), n;\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      var t = new e.constructor(e.source, r.exec(e));return t.lastIndex = e.lastIndex, t;\n    }var r = /\\w*$/;e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      var r = t ? n(a(e), s) : a(e);return i(r, o, new e.constructor());\n    }var o = n(208),\n        i = n(204),\n        a = n(209),\n        s = 1;e.exports = r;\n  }, function (e, t) {\n    function n(e, t) {\n      return e.add(t), e;\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      var t = -1,\n          n = Array(e.size);return e.forEach(function (e) {\n        n[++t] = e;\n      }), n;\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      return a ? Object(a.call(e)) : {};\n    }var o = n(81),\n        i = o ? o.prototype : void 0,\n        a = i ? i.valueOf : void 0;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      var n = t ? o(e.buffer) : e.buffer;return new e.constructor(n, e.byteOffset, e.length);\n    }var o = n(199);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return \"function\" != typeof e.constructor || a(e) ? {} : o(i(e));\n    }var o = n(213),\n        i = n(188),\n        a = n(112);e.exports = r;\n  }, function (e, t, n) {\n    var r = n(90),\n        o = Object.create,\n        i = function () {\n      function e() {}return function (t) {\n        if (!r(t)) return {};if (o) return o(t);e.prototype = t;var n = new e();return e.prototype = void 0, n;\n      };\n    }();e.exports = i;\n  }, function (e, t, n) {\n    e.exports = n(91);\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      return null == e ? e : o(e, t, n);\n    }var o = n(216);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, r) {\n      if (!s(e)) return e;t = i(t, e);for (var c = -1, l = t.length, f = l - 1, d = e; null != d && ++c < l;) {\n        var p = u(t[c]),\n            h = n;if (c != f) {\n          var m = d[p];h = r ? r(m, p, d) : void 0, void 0 === h && (h = s(m) ? m : a(t[c + 1]) ? [] : {});\n        }o(d, p, h), d = d[p];\n      }return e;\n    }var o = n(170),\n        i = n(121),\n        a = n(105),\n        s = n(90),\n        u = n(160);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return n(o(e));\n    }function o(e) {\n      return i[e] || function () {\n        throw new Error(\"Cannot find module '\" + e + \"'.\");\n      }();\n    }var i = { \"./fieldCheckbox.vue\": 218, \"./fieldChecklist.vue\": 248, \"./fieldInput.vue\": 253, \"./fieldLabel.vue\": 257, \"./fieldRadios.vue\": 261, \"./fieldSelect.vue\": 265, \"./fieldSubmit.vue\": 296, \"./fieldTextArea.vue\": 301, \"./fieldUpload.vue\": 305 };r.keys = function () {\n      return Object.keys(i);\n    }, r.resolve = o, e.exports = r, r.id = 217;\n  }, function (e, t, n) {\n    n(219);var r = n(3)(n(220), n(247), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(221),\n        i = r(o);t.default = { mixins: [i.default] };\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }function o(e) {\n      return (0, d.default)(e) ? null != x.default[e] ? x.default[e] : (console.warn(\"'\" + e + \"' is not a validator function!\"), null) : e;\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var i = n(5),\n        a = r(i),\n        s = n(222),\n        u = r(s),\n        c = n(86),\n        l = r(c),\n        f = n(79),\n        d = r(f),\n        p = n(89),\n        h = r(p),\n        m = n(91),\n        v = r(m),\n        y = n(119),\n        g = r(y),\n        b = n(225),\n        x = r(b),\n        _ = n(161);t.default = { props: [\"model\", \"schema\", \"formOptions\", \"disabled\"], data: function data() {\n        return { errors: [], debouncedValidateFunc: null, debouncedFormatFunction: null };\n      }, computed: { value: { cache: !1, get: function get() {\n            var e = void 0;return (0, h.default)(this.schema.get) ? e = this.schema.get(this.model) : this.model && this.schema.model && (e = (0, g.default)(this.model, this.schema.model)), this.formatValueToField(e);\n          }, set: function set(e) {\n            var t = this.value;e = this.formatValueToModel(e), (0, h.default)(e) ? e(e, t) : this.updateModelValue(e, t);\n          } } }, methods: { validate: function validate(e) {\n          var t = this;this.clearValidationErrors();var n = (0, g.default)(this.formOptions, \"validateAsync\", !1),\n              r = [];if (this.schema.validator && this.schema.readonly !== !0 && this.disabled !== !0) {\n            var i = [];(0, l.default)(this.schema.validator) ? (0, v.default)(this.schema.validator, function (e) {\n              i.push(o(e).bind(t));\n            }) : i.push(o(this.schema.validator).bind(this)), (0, v.default)(i, function (e) {\n              if (n) r.push(e(t.value, t.schema, t.model));else {\n                var o = e(t.value, t.schema, t.model);o && (0, h.default)(o.then) ? o.then(function (e) {\n                  e && (t.errors = t.errors.concat(e));var n = 0 == t.errors.length;t.$emit(\"validated\", n, t.errors, t);\n                }) : o && (r = r.concat(o));\n              }\n            });\n          }var s = function s(n) {\n            var r = [];(0, v.default)(n, function (e) {\n              (0, l.default)(e) && e.length > 0 ? r = r.concat(e) : (0, d.default)(e) && r.push(e);\n            }), (0, h.default)(t.schema.onValidated) && t.schema.onValidated.call(t, t.model, r, t.schema);var o = 0 == r.length;return e || t.$emit(\"validated\", o, r, t), t.errors = r, r;\n          };return n ? a.default.all(r).then(s) : s(r);\n        }, debouncedValidate: function debouncedValidate() {\n          (0, h.default)(this.debouncedValidateFunc) || (this.debouncedValidateFunc = (0, u.default)(this.validate.bind(this), (0, g.default)(this, \"$parent.options.validateDebounceTime\", 500))), this.debouncedValidateFunc();\n        }, updateModelValue: function updateModelValue(e, t) {\n          var n = !1;(0, h.default)(this.schema.set) ? (this.schema.set(this.model, e), n = !0) : this.schema.model && (this.setModelValueByPath(this.schema.model, e), n = !0), n && (this.$emit(\"model-updated\", e, this.schema.model), (0, h.default)(this.schema.onChanged) && this.schema.onChanged.call(this, this.model, e, t, this.schema), this.$parent.options && this.$parent.options.validateAfterChanged === !0 && (this.$parent.options.validateDebounceTime > 0 ? this.debouncedValidate() : this.validate()));\n        }, clearValidationErrors: function clearValidationErrors() {\n          this.errors.splice(0);\n        }, setModelValueByPath: function setModelValueByPath(e, t) {\n          var n = e.replace(/\\[(\\w+)\\]/g, \".$1\");n = n.replace(/^\\./, \"\");for (var r = this.model, o = n.split(\".\"), i = 0, a = o.length; i < a;) {\n            var s = o[i];if (!(i < a - 1)) return void this.$root.$set(r, s, t);void 0 !== r[s] ? r = r[s] : (this.$root.$set(r, s, {}), r = r[s]), ++i;\n          }\n        }, getFieldID: function getFieldID(e) {\n          var t = this.formOptions && this.formOptions.fieldIdPrefix ? this.formOptions.fieldIdPrefix : \"\";return (0, _.slugifyFormID)(e, t);\n        }, getFieldClasses: function getFieldClasses() {\n          return this.schema.fieldClasses || [];\n        }, formatValueToField: function formatValueToField(e) {\n          return e;\n        }, formatValueToModel: function formatValueToModel(e) {\n          return e;\n        } } };\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      function r(t) {\n        var n = g,\n            r = b;return g = b = void 0, j = t, _ = e.apply(r, n);\n      }function l(e) {\n        return j = e, w = setTimeout(p, t), M ? r(e) : _;\n      }function f(e) {\n        var n = e - O,\n            r = e - j,\n            o = t - n;return k ? c(o, x - r) : o;\n      }function d(e) {\n        var n = e - O,\n            r = e - j;return void 0 === O || n >= t || n < 0 || k && r >= x;\n      }function p() {\n        var e = i();return d(e) ? h(e) : void (w = setTimeout(p, f(e)));\n      }function h(e) {\n        return w = void 0, S && g ? r(e) : (g = b = void 0, _);\n      }function m() {\n        void 0 !== w && clearTimeout(w), j = 0, g = O = b = w = void 0;\n      }function v() {\n        return void 0 === w ? _ : h(i());\n      }function y() {\n        var e = i(),\n            n = d(e);if (g = arguments, b = this, O = e, n) {\n          if (void 0 === w) return l(O);if (k) return w = setTimeout(p, t), r(O);\n        }return void 0 === w && (w = setTimeout(p, t)), _;\n      }var g,\n          b,\n          x,\n          _,\n          w,\n          O,\n          j = 0,\n          M = !1,\n          k = !1,\n          S = !0;if (\"function\" != typeof e) throw new TypeError(s);return t = a(t) || 0, o(n) && (M = !!n.leading, k = \"maxWait\" in n, x = k ? u(a(n.maxWait) || 0, t) : x, S = \"trailing\" in n ? !!n.trailing : S), y.cancel = m, y.flush = v, y;\n    }var o = n(90),\n        i = n(223),\n        a = n(224),\n        s = \"Expected a function\",\n        u = Math.max,\n        c = Math.min;e.exports = r;\n  }, function (e, t, n) {\n    var r = n(82),\n        o = function o() {\n      return r.Date.now();\n    };e.exports = o;\n  }, function (e, t, n) {\n    function r(e) {\n      if (\"number\" == typeof e) return e;if (i(e)) return a;if (o(e)) {\n        var t = \"function\" == typeof e.valueOf ? e.valueOf() : e;e = o(t) ? t + \"\" : t;\n      }if (\"string\" != typeof e) return 0 === e ? e : +e;e = e.replace(s, \"\");var n = c.test(e);return n || l.test(e) ? f(e.slice(2), n ? 2 : 8) : u.test(e) ? a : +e;\n    }var o = n(90),\n        i = n(123),\n        a = NaN,\n        s = /^\\s+|\\s+$/g,\n        u = /^[-+]0x[0-9a-f]+$/i,\n        c = /^0b[01]+$/i,\n        l = /^0o[0-7]+$/i,\n        f = parseInt;e.exports = r;\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }function o(e, t) {\n      var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : j;return (0, b.default)(e) || \"\" === e ? t ? [i(n.fieldIsRequired)] : [] : null;\n    }function i(e) {\n      if (null != e && arguments.length > 1) for (var t = 1; t < arguments.length; t++) {\n        e = e.replace(\"{\" + (t - 1) + \"}\", arguments[t]);\n      }return e;\n    }var a = n(226),\n        s = r(a),\n        u = n(89),\n        c = r(u),\n        l = n(86),\n        f = r(l),\n        d = n(79),\n        p = r(d),\n        h = n(230),\n        m = r(h),\n        v = n(233),\n        y = r(v),\n        g = n(88),\n        b = r(g),\n        x = n(234),\n        _ = r(x),\n        w = n(246),\n        O = r(w),\n        j = { fieldIsRequired: \"This field is required!\", invalidFormat: \"Invalid format!\", numberTooSmall: \"The number is too small! Minimum: {0}\", numberTooBig: \"The number is too big! Maximum: {0}\", invalidNumber: \"Invalid number\", invalidInteger: \"The value is not an integer\", textTooSmall: \"The length of text is too small! Current: {0}, Minimum: {1}\", textTooBig: \"The length of text is too big! Current: {0}, Maximum: {1}\", thisNotText: \"This is not a text!\", thisNotArray: \"This is not an array!\", selectMinItems: \"Select minimum {0} items!\", selectMaxItems: \"Select maximum {0} items!\", invalidDate: \"Invalid date!\", dateIsEarly: \"The date is too early! Current: {0}, Minimum: {1}\", dateIsLate: \"The date is too late! Current: {0}, Maximum: {1}\", invalidEmail: \"Invalid e-mail address!\", invalidURL: \"Invalid URL!\", invalidCard: \"Invalid card format!\", invalidCardNumber: \"Invalid card number!\", invalidTextContainNumber: \"Invalid text! Cannot contains numbers or special characters\", invalidTextContainSpec: \"Invalid text! Cannot contains special characters\" },\n        M = { resources: j, required: function required(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j;return o(e, t.required, r);\n      }, number: function number(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;var s = [];return (0, y.default)(e) ? (!(0, b.default)(t.min) && e < t.min && s.push(i(r.numberTooSmall, t.min)), !(0, b.default)(t.max) && e > t.max && s.push(i(r.numberTooBig, t.max))) : s.push(i(r.invalidNumber)), s;\n      }, integer: function integer(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;var s = M.number(e, t, n, r);return (0, m.default)(e) || s.push(i(r.invalidInteger)), s;\n      }, double: function double(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);return null != a ? a : !(0, y.default)(e) || isNaN(e) ? [i(r.invalidNumber)] : void 0;\n      }, string: function string(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;var s = [];return (0, p.default)(e) ? (!(0, b.default)(t.min) && e.length < t.min && s.push(i(r.textTooSmall, e.length, t.min)), !(0, b.default)(t.max) && e.length > t.max && s.push(i(r.textTooBig, e.length, t.max))) : s.push(i(r.thisNotText)), s;\n      }, array: function array(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j;if (t.required) {\n          if (!(0, f.default)(e)) return [i(r.thisNotArray)];if (0 == e.length) return [i(r.fieldIsRequired)];\n        }if (!(0, b.default)(e)) {\n          if (!(0, b.default)(t.min) && e.length < t.min) return [i(r.selectMinItems, t.min)];if (!(0, b.default)(t.max) && e.length > t.max) return [i(r.selectMaxItems, t.max)];\n        }\n      }, date: function date(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;var s = new Date(e);if (!s) return [i(r.invalidDate)];var u = [];if (!(0, b.default)(t.min)) {\n          var c = new Date(t.min);s.valueOf() < c.valueOf() && u.push(i(r.dateIsEarly, O.default.format(s), O.default.format(c)));\n        }if (!(0, b.default)(t.max)) {\n          var l = new Date(t.max);s.valueOf() > l.valueOf() && u.push(i(r.dateIsLate, O.default.format(s), O.default.format(l)));\n        }return u;\n      }, regexp: function regexp(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;if (!(0, b.default)(t.pattern)) {\n          var s = new RegExp(t.pattern);if (!s.test(e)) return [i(r.invalidFormat)];\n        }\n      }, email: function email(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;var s = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;return s.test(e) ? void 0 : [i(r.invalidEmail)];\n      }, url: function url(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;var s = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)/g;return s.test(e) ? void 0 : [i(r.invalidURL)];\n      }, creditCard: function e(t, n, r) {\n        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            s = o(t, n.required, a);if (null != s) return s;var e = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n            u = t.replace(/[^0-9]+/g, \"\");if (!e.test(u)) return [i(a.invalidCard)];for (var c = 0, l = void 0, f = void 0, d = void 0, p = u.length - 1; p >= 0; p--) {\n          l = u.substring(p, p + 1), f = parseInt(l, 10), d ? (f *= 2, c += f >= 10 ? f % 10 + 1 : f) : c += f, d = !d;\n        }return c % 10 === 0 && u ? void 0 : [i(a.invalidCardNumber)];\n      }, alpha: function alpha(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;var s = /^[a-zA-Z]*$/;return s.test(e) ? void 0 : [i(r.invalidTextContainNumber)];\n      }, alphaNumeric: function alphaNumeric(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : j,\n            a = o(e, t.required, r);if (null != a) return a;var s = /^[a-zA-Z0-9]*$/;return s.test(e) ? void 0 : [i(r.invalidTextContainSpec)];\n      } };e.exports = M, (0, s.default)(e.exports).forEach(function (t) {\n      var n = e.exports[t];(0, c.default)(n) && (n.locale = function (e) {\n        return function (t, r, o) {\n          return n(t, r, o, (0, _.default)(e, j));\n        };\n      });\n    });\n  }, function (e, t, n) {\n    e.exports = { default: n(227), __esModule: !0 };\n  }, function (e, t, n) {\n    n(228), e.exports = n(16).Object.keys;\n  }, function (e, t, n) {\n    var r = n(51),\n        o = n(35);n(229)(\"keys\", function () {\n      return function (e) {\n        return o(r(e));\n      };\n    });\n  }, function (e, t, n) {\n    var r = n(14),\n        o = n(16),\n        i = n(25);e.exports = function (e, t) {\n      var n = (o.Object || {})[e] || Object[e],\n          a = {};a[e] = t(n), r(r.S + r.F * i(function () {\n        n(1);\n      }), \"Object\", a);\n    };\n  }, function (e, t, n) {\n    function r(e) {\n      return \"number\" == typeof e && e == o(e);\n    }var o = n(231);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = o(e),\n          n = t % 1;return t === t ? n ? t - n : t : 0;\n    }var o = n(232);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      if (!e) return 0 === e ? e : 0;if (e = o(e), e === i || e === -i) {\n        var t = e < 0 ? -1 : 1;return t * a;\n      }return e === e ? e : 0;\n    }var o = n(224),\n        i = 1 / 0,\n        a = 1.7976931348623157e308;e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return \"number\" == typeof e || i(e) && o(e) == a;\n    }var o = n(80),\n        i = n(87),\n        a = \"[object Number]\";e.exports = r;\n  }, function (e, t, n) {\n    var r = n(235),\n        o = n(236),\n        i = n(238),\n        a = n(245),\n        s = i(function (e) {\n      return e.push(void 0, a), r(o, void 0, e);\n    });e.exports = s;\n  }, function (e, t) {\n    function n(e, t, n) {\n      switch (n.length) {case 0:\n          return e.call(t);case 1:\n          return e.call(t, n[0]);case 2:\n          return e.call(t, n[0], n[1]);case 3:\n          return e.call(t, n[0], n[1], n[2]);}return e.apply(t, n);\n    }e.exports = n;\n  }, function (e, t, n) {\n    var r = n(174),\n        o = n(237),\n        i = n(176),\n        a = o(function (e, t, n, o) {\n      r(t, i(t), e, o);\n    });e.exports = a;\n  }, function (e, t, n) {\n    function r(e) {\n      return o(function (t, n) {\n        var r = -1,\n            o = n.length,\n            a = o > 1 ? n[o - 1] : void 0,\n            s = o > 2 ? n[2] : void 0;for (a = e.length > 3 && \"function\" == typeof a ? (o--, a) : void 0, s && i(n[0], n[1], s) && (a = o < 3 ? void 0 : a, o = 1), t = Object(t); ++r < o;) {\n          var u = n[r];u && e(t, u, r, a);\n        }return t;\n      });\n    }var o = n(238),\n        i = n(244);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return a(i(e, t, o), e + \"\");\n    }var o = n(118),\n        i = n(239),\n        a = n(240);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      return t = i(void 0 === t ? e.length - 1 : t, 0), function () {\n        for (var r = arguments, a = -1, s = i(r.length - t, 0), u = Array(s); ++a < s;) {\n          u[a] = r[t + a];\n        }a = -1;for (var c = Array(t + 1); ++a < t;) {\n          c[a] = r[a];\n        }return c[t] = n(u), o(e, this, c);\n      };\n    }var o = n(235),\n        i = Math.max;e.exports = r;\n  }, function (e, t, n) {\n    var r = n(241),\n        o = n(243),\n        i = o(r);e.exports = i;\n  }, function (e, t, n) {\n    var r = n(242),\n        o = n(172),\n        i = n(118),\n        a = o ? function (e, t) {\n      return o(e, \"toString\", { configurable: !0, enumerable: !1, value: r(t), writable: !0 });\n    } : i;e.exports = a;\n  }, function (e, t) {\n    function n(e) {\n      return function () {\n        return e;\n      };\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      var t = 0,\n          n = 0;return function () {\n        var a = i(),\n            s = o - (a - n);if (n = a, s > 0) {\n          if (++t >= r) return arguments[0];\n        } else t = 0;return e.apply(void 0, arguments);\n      };\n    }var r = 800,\n        o = 16,\n        i = Date.now;e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      if (!s(n)) return !1;var r = typeof t === \"undefined\" ? \"undefined\" : _typeof(t);return !!(\"number\" == r ? i(n) && a(t, n.length) : \"string\" == r && t in n) && o(n[t], e);\n    }var o = n(146),\n        i = n(115),\n        a = n(105),\n        s = n(90);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, r) {\n      return void 0 === e || o(e, i[n]) && !a.call(r, n) ? t : e;\n    }var o = n(146),\n        i = Object.prototype,\n        a = i.hasOwnProperty;e.exports = r;\n  }, function (e, t, n) {\n    var r;!function (o) {\n      \"use strict\";\n      function i(e, t) {\n        for (var n = [], r = 0, o = e.length; r < o; r++) {\n          n.push(e[r].substr(0, t));\n        }return n;\n      }function a(e) {\n        return function (t, n, r) {\n          var o = r[e].indexOf(n.charAt(0).toUpperCase() + n.substr(1).toLowerCase());~o && (t.month = o);\n        };\n      }function s(e, t) {\n        for (e = String(e), t = t || 2; e.length < t;) {\n          e = \"0\" + e;\n        }return e;\n      }var u = {},\n          c = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g,\n          l = /\\d\\d?/,\n          f = /\\d{3}/,\n          d = /\\d{4}/,\n          p = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i,\n          h = /\\[([^]*?)\\]/gm,\n          m = function m() {},\n          v = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n          y = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n          g = i(y, 3),\n          b = i(v, 3);u.i18n = { dayNamesShort: b, dayNames: v, monthNamesShort: g, monthNames: y, amPm: [\"am\", \"pm\"], DoFn: function DoFn(e) {\n          return e + [\"th\", \"st\", \"nd\", \"rd\"][e % 10 > 3 ? 0 : (e - e % 10 !== 10) * e % 10];\n        } };var x = { D: function D(e) {\n          return e.getDate();\n        }, DD: function DD(e) {\n          return s(e.getDate());\n        }, Do: function Do(e, t) {\n          return t.DoFn(e.getDate());\n        }, d: function d(e) {\n          return e.getDay();\n        }, dd: function dd(e) {\n          return s(e.getDay());\n        }, ddd: function ddd(e, t) {\n          return t.dayNamesShort[e.getDay()];\n        }, dddd: function dddd(e, t) {\n          return t.dayNames[e.getDay()];\n        }, M: function M(e) {\n          return e.getMonth() + 1;\n        }, MM: function MM(e) {\n          return s(e.getMonth() + 1);\n        }, MMM: function MMM(e, t) {\n          return t.monthNamesShort[e.getMonth()];\n        }, MMMM: function MMMM(e, t) {\n          return t.monthNames[e.getMonth()];\n        }, YY: function YY(e) {\n          return String(e.getFullYear()).substr(2);\n        }, YYYY: function YYYY(e) {\n          return e.getFullYear();\n        }, h: function h(e) {\n          return e.getHours() % 12 || 12;\n        }, hh: function hh(e) {\n          return s(e.getHours() % 12 || 12);\n        }, H: function H(e) {\n          return e.getHours();\n        }, HH: function HH(e) {\n          return s(e.getHours());\n        }, m: function m(e) {\n          return e.getMinutes();\n        }, mm: function mm(e) {\n          return s(e.getMinutes());\n        }, s: function s(e) {\n          return e.getSeconds();\n        }, ss: function ss(e) {\n          return s(e.getSeconds());\n        }, S: function S(e) {\n          return Math.round(e.getMilliseconds() / 100);\n        }, SS: function SS(e) {\n          return s(Math.round(e.getMilliseconds() / 10), 2);\n        }, SSS: function SSS(e) {\n          return s(e.getMilliseconds(), 3);\n        }, a: function a(e, t) {\n          return e.getHours() < 12 ? t.amPm[0] : t.amPm[1];\n        }, A: function A(e, t) {\n          return e.getHours() < 12 ? t.amPm[0].toUpperCase() : t.amPm[1].toUpperCase();\n        }, ZZ: function ZZ(e) {\n          var t = e.getTimezoneOffset();return (t > 0 ? \"-\" : \"+\") + s(100 * Math.floor(Math.abs(t) / 60) + Math.abs(t) % 60, 4);\n        } },\n          _ = { D: [l, function (e, t) {\n          e.day = t;\n        }], Do: [new RegExp(l.source + p.source), function (e, t) {\n          e.day = parseInt(t, 10);\n        }], M: [l, function (e, t) {\n          e.month = t - 1;\n        }], YY: [l, function (e, t) {\n          var n = new Date(),\n              r = +(\"\" + n.getFullYear()).substr(0, 2);e.year = \"\" + (t > 68 ? r - 1 : r) + t;\n        }], h: [l, function (e, t) {\n          e.hour = t;\n        }], m: [l, function (e, t) {\n          e.minute = t;\n        }], s: [l, function (e, t) {\n          e.second = t;\n        }], YYYY: [d, function (e, t) {\n          e.year = t;\n        }], S: [/\\d/, function (e, t) {\n          e.millisecond = 100 * t;\n        }], SS: [/\\d{2}/, function (e, t) {\n          e.millisecond = 10 * t;\n        }], SSS: [f, function (e, t) {\n          e.millisecond = t;\n        }], d: [l, m], ddd: [p, m], MMM: [p, a(\"monthNamesShort\")], MMMM: [p, a(\"monthNames\")], a: [p, function (e, t, n) {\n          var r = t.toLowerCase();r === n.amPm[0] ? e.isPm = !1 : r === n.amPm[1] && (e.isPm = !0);\n        }], ZZ: [/([\\+\\-]\\d\\d:?\\d\\d|Z)/, function (e, t) {\n          \"Z\" === t && (t = \"+00:00\");var n,\n              r = (t + \"\").match(/([\\+\\-]|\\d\\d)/gi);r && (n = +(60 * r[1]) + parseInt(r[2], 10), e.timezoneOffset = \"+\" === r[0] ? n : -n);\n        }] };_.dd = _.d, _.dddd = _.ddd, _.DD = _.D, _.mm = _.m, _.hh = _.H = _.HH = _.h, _.MM = _.M, _.ss = _.s, _.A = _.a, u.masks = { default: \"ddd MMM DD YYYY HH:mm:ss\", shortDate: \"M/D/YY\", mediumDate: \"MMM D, YYYY\", longDate: \"MMMM D, YYYY\", fullDate: \"dddd, MMMM D, YYYY\", shortTime: \"HH:mm\", mediumTime: \"HH:mm:ss\", longTime: \"HH:mm:ss.SSS\" }, u.format = function (e, t, n) {\n        var r = n || u.i18n;if (\"number\" == typeof e && (e = new Date(e)), \"[object Date]\" !== Object.prototype.toString.call(e) || isNaN(e.getTime())) throw new Error(\"Invalid Date in fecha.format\");t = u.masks[t] || t || u.masks.default;var o = [];return t = t.replace(h, function (e, t) {\n          return o.push(t), \"??\";\n        }), t = t.replace(c, function (t) {\n          return t in x ? x[t](e, r) : t.slice(1, t.length - 1);\n        }), t.replace(/\\?\\?/g, function () {\n          return o.shift();\n        });\n      }, u.parse = function (e, t, n) {\n        var r = n || u.i18n;if (\"string\" != typeof t) throw new Error(\"Invalid format in fecha.parse\");if (t = u.masks[t] || t, e.length > 1e3) return !1;var o = !0,\n            i = {};if (t.replace(c, function (t) {\n          if (_[t]) {\n            var n = _[t],\n                a = e.search(n[0]);~a ? e.replace(n[0], function (t) {\n              return n[1](i, t, r), e = e.substr(a + t.length), t;\n            }) : o = !1;\n          }return _[t] ? \"\" : t.slice(1, t.length - 1);\n        }), !o) return !1;var a = new Date();i.isPm === !0 && null != i.hour && 12 !== +i.hour ? i.hour = +i.hour + 12 : i.isPm === !1 && 12 === +i.hour && (i.hour = 0);var s;return null != i.timezoneOffset ? (i.minute = +(i.minute || 0) - +i.timezoneOffset, s = new Date(Date.UTC(i.year || a.getFullYear(), i.month || 0, i.day || 1, i.hour || 0, i.minute || 0, i.second || 0, i.millisecond || 0))) : s = new Date(i.year || a.getFullYear(), i.month || 0, i.day || 1, i.hour || 0, i.minute || 0, i.second || 0, i.millisecond || 0), s;\n      }, \"undefined\" != typeof e && e.exports ? e.exports = u : (r = function () {\n        return u;\n      }.call(t, n, t, e), !(void 0 !== r && (e.exports = r)));\n    }(this);\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"input\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], class: e.schema.fieldClasses, attrs: { id: e.getFieldID(e.schema), type: \"checkbox\", autocomplete: e.schema.autocomplete, disabled: e.disabled, name: e.schema.inputName }, domProps: { checked: Array.isArray(e.value) ? e._i(e.value, null) > -1 : e.value }, on: { click: function click(t) {\n              var n = e.value,\n                  r = t.target,\n                  o = !!r.checked;if (Array.isArray(n)) {\n                var i = null,\n                    a = e._i(n, i);o ? a < 0 && (e.value = n.concat(i)) : a > -1 && (e.value = n.slice(0, a).concat(n.slice(a + 1)));\n              } else e.value = o;\n            } } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(249);var r = n(3)(n(250), n(252), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(251),\n        i = r(o),\n        a = n(88),\n        s = r(a),\n        u = n(90),\n        c = r(u),\n        l = n(221),\n        f = r(l),\n        d = n(161);t.default = { mixins: [f.default], data: function data() {\n        return { comboExpanded: !1 };\n      }, computed: { items: function items() {\n          var e = this.schema.values;return \"function\" == typeof e ? e.apply(this, [this.model, this.schema]) : e;\n        }, selectedCount: function selectedCount() {\n          return this.value ? this.value.length : 0;\n        } }, methods: { getInputName: function getInputName(e) {\n          return this.schema && this.schema.inputName && this.schema.inputName.length > 0 ? (0, d.slugify)(this.schema.inputName + \"_\" + this.getItemValue(e)) : (0, d.slugify)(this.getItemValue(e));\n        }, getItemValue: function getItemValue(e) {\n          if ((0, c.default)(e)) {\n            if (\"undefined\" != typeof this.schema.checklistOptions && \"undefined\" != typeof this.schema.checklistOptions.value) return e[this.schema.checklistOptions.value];if (\"undefined\" != typeof e.value) return e.value;throw \"`value` is not defined. If you want to use another key name, add a `value` property under `checklistOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/checklist.html#checklist-field-with-object-values\";\n          }return e;\n        }, getItemName: function getItemName(e) {\n          if ((0, c.default)(e)) {\n            if (\"undefined\" != typeof this.schema.checklistOptions && \"undefined\" != typeof this.schema.checklistOptions.name) return e[this.schema.checklistOptions.name];if (\"undefined\" != typeof e.name) return e.name;throw \"`name` is not defined. If you want to use another key name, add a `name` property under `checklistOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/checklist.html#checklist-field-with-object-values\";\n          }return e;\n        }, isItemChecked: function isItemChecked(e) {\n          return this.value && this.value.indexOf(this.getItemValue(e)) != -1;\n        }, onChanged: function onChanged(e, t) {\n          if (!(0, s.default)(this.value) && Array.isArray(this.value) || (this.value = []), e.target.checked) {\n            var n = (0, i.default)(this.value);n.push(this.getItemValue(t)), this.value = n;\n          } else {\n            var r = (0, i.default)(this.value);r.splice(this.value.indexOf(this.getItemValue(t)), 1), this.value = r;\n          }\n        }, onExpandCombo: function onExpandCombo() {\n          this.comboExpanded = !this.comboExpanded;\n        } } };\n  }, function (e, t, n) {\n    function r(e) {\n      return o(e, i);\n    }var o = n(163),\n        i = 4;e.exports = r;\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"div\", { staticClass: \"wrapper\" }, [e.schema.listBox ? n(\"div\", { staticClass: \"listbox form-control\", attrs: { disabled: e.disabled } }, e._l(e.items, function (t) {\n          return n(\"div\", { staticClass: \"list-row\", class: { \"is-checked\": e.isItemChecked(t) } }, [n(\"label\", [n(\"input\", { attrs: { id: e.getFieldID(e.schema), type: \"checkbox\", disabled: e.disabled, name: e.getInputName(t) }, domProps: { checked: e.isItemChecked(t) }, on: { change: function change(n) {\n                e.onChanged(n, t);\n              } } }), e._v(e._s(e.getItemName(t)))])]);\n        })) : e._e(), e.schema.listBox ? e._e() : n(\"div\", { staticClass: \"combobox form-control\", attrs: { disabled: e.disabled } }, [n(\"div\", { staticClass: \"mainRow\", class: { expanded: e.comboExpanded }, on: { click: e.onExpandCombo } }, [n(\"div\", { staticClass: \"info\" }, [e._v(e._s(e.selectedCount) + \" selected\")]), n(\"div\", { staticClass: \"arrow\" })]), n(\"div\", { staticClass: \"dropList\" }, e._l(e.items, function (t) {\n          return e.comboExpanded ? n(\"div\", { staticClass: \"list-row\", class: { \"is-checked\": e.isItemChecked(t) } }, [n(\"label\", [n(\"input\", { attrs: { id: e.getFieldID(e.schema), type: \"checkbox\", disabled: e.disabled, name: e.getInputName(t) }, domProps: { checked: e.isItemChecked(t) }, on: { change: function change(n) {\n                e.onChanged(n, t);\n              } } }), e._v(e._s(e.getItemName(t)))])]) : e._e();\n        }))])]);\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(254);var r = n(3)(n(255), n(256), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(233),\n        i = r(o),\n        a = n(89),\n        s = r(a),\n        u = n(119),\n        c = r(u),\n        l = n(222),\n        f = r(l),\n        d = n(221),\n        p = r(d),\n        h = n(246),\n        m = r(h),\n        v = { date: \"YYYY-MM-DD\", datetime: \"YYYY-MM-DD HH:mm:ss\", \"datetime-local\": \"YYYY-MM-DDTHH:mm:ss\" };t.default = { mixins: [p.default], methods: { formatValueToModel: function formatValueToModel(e) {\n          var t = this;if (null != e) switch (this.schema.inputType.toLowerCase()) {case \"date\":case \"datetime\":case \"datetime-local\":case \"number\":case \"range\":\n              return function (n, r) {\n                t.debouncedFormatFunc(e, r);\n              };}return e;\n        }, formatDatetimeToModel: function formatDatetimeToModel(e, t) {\n          var n = v[this.schema.inputType.toLowerCase()],\n              r = m.default.parse(e, n);r !== !1 && (e = this.schema.format ? m.default.format(r, this.schema.format) : r.valueOf()), this.updateModelValue(e, t);\n        }, formatNumberToModel: function formatNumberToModel(e, t) {\n          (0, i.default)(e) || (e = NaN), this.updateModelValue(e, t);\n        }, onInput: function onInput(e) {\n          var t = e.target.value;switch (this.schema.inputType.toLowerCase()) {case \"number\":case \"range\":\n              (0, i.default)(e.target.valueAsNumber) && (t = e.target.valueAsNumber);}this.value = t;\n        }, onBlur: function onBlur() {\n          (0, s.default)(this.debouncedFormatFunc) && this.debouncedFormatFunc.flush();\n        } }, mounted: function mounted() {\n        var e = this;switch (this.schema.inputType.toLowerCase()) {case \"number\":case \"range\":\n            this.debouncedFormatFunc = (0, f.default)(function (t, n) {\n              e.formatNumberToModel(t, n);\n            }, parseInt((0, c.default)(this.schema, \"debounceFormatTimeout\", 1e3)), { trailing: !0, leading: !1 });break;case \"date\":case \"datetime\":case \"datetime-local\":\n            this.debouncedFormatFunc = (0, f.default)(function (t, n) {\n              e.formatDatetimeToModel(t, n);\n            }, parseInt((0, c.default)(this.schema, \"debounceFormatTimeout\", 1e3)), { trailing: !0, leading: !1 });}\n      }, created: function created() {\n        \"file\" == this.schema.inputType.toLowerCase() && console.warn(\"The 'file' type in input field is deprecated. Use 'file' field instead.\");\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"div\", { staticClass: \"wrapper\" }, [n(\"input\", { staticClass: \"form-control\", class: e.schema.fieldClasses, attrs: { id: e.getFieldID(e.schema), type: e.schema.inputType.toLowerCase(), disabled: e.disabled, accept: e.schema.accept, alt: e.schema.alt, autocomplete: e.schema.autocomplete, dirname: e.schema.dirname, formaction: e.schema.formaction, formenctype: e.schema.formenctype, formmethod: e.schema.formmethod, formnovalidate: e.schema.formnovalidate, formtarget: e.schema.formtarget, height: e.schema.height, list: e.schema.list, max: e.schema.max, maxlength: e.schema.maxlength, min: e.schema.min, minlength: e.schema.minlength, multiple: e.schema.multiple, name: e.schema.inputName, pattern: e.schema.pattern, placeholder: e.schema.placeholder, readonly: e.schema.readonly, required: e.schema.required, size: e.schema.size, src: e.schema.src, step: e.schema.step, width: e.schema.width, files: e.schema.files }, domProps: { value: e.value, checked: e.schema.checked }, on: { input: e.onInput, blur: e.onBlur, change: function change(t) {\n              e.schema.onChange || null;\n            } } }), \"color\" === e.schema.inputType.toLowerCase() || \"range\" === e.schema.inputType.toLowerCase() ? n(\"span\", { staticClass: \"helper\" }, [e._v(e._s(e.value))]) : e._e()]);\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(258);var r = n(3)(n(259), n(260), null, null);e.exports = r.exports;\n  }, 2, 220, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"span\", { class: e.schema.fieldClasses, attrs: { id: e.getFieldID(e.schema) } }, [e._v(e._s(e.value))]);\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(262);var r = n(3)(n(263), n(264), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(90),\n        i = r(o),\n        a = n(221),\n        s = r(a);t.default = { mixins: [s.default], computed: { items: function items() {\n          var e = this.schema.values;return \"function\" == typeof e ? e.apply(this, [this.model, this.schema]) : e;\n        }, id: function id() {\n          return this.schema.model;\n        } }, methods: { getItemValue: function getItemValue(e) {\n          if ((0, i.default)(e)) {\n            if (\"undefined\" != typeof this.schema.radiosOptions && \"undefined\" != typeof this.schema.radiosOptions.value) return e[this.schema.radiosOptions.value];if (\"undefined\" != typeof e.value) return e.value;throw \"`value` is not defined. If you want to use another key name, add a `value` property under `radiosOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/radios.html#radios-field-with-object-values\";\n          }return e;\n        }, getItemName: function getItemName(e) {\n          if ((0, i.default)(e)) {\n            if (\"undefined\" != typeof this.schema.radiosOptions && \"undefined\" != typeof this.schema.radiosOptions.name) return e[this.schema.radiosOptions.name];if (\"undefined\" != typeof e.name) return e.name;throw \"`name` is not defined. If you want to use another key name, add a `name` property under `radiosOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/radios.html#radios-field-with-object-values\";\n          }return e;\n        }, onSelection: function onSelection(e) {\n          this.value = this.getItemValue(e);\n        }, isItemChecked: function isItemChecked(e) {\n          var t = this.getItemValue(e);return t === this.value;\n        } } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"div\", { staticClass: \"radio-list\", attrs: { disabled: e.disabled } }, e._l(e.items, function (t) {\n          return n(\"label\", { class: { \"is-checked\": e.isItemChecked(t) } }, [n(\"input\", { class: e.schema.fieldClasses, attrs: { id: e.getFieldID(e.schema), type: \"radio\", disabled: e.disabled, name: e.id }, domProps: { value: e.getItemValue(t), checked: e.isItemChecked(t) }, on: { click: function click(n) {\n                e.onSelection(t);\n              } } }), e._v(e._s(e.getItemName(t)))]);\n        }));\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(266);var r = n(3)(n(267), n(295), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(268),\n        i = r(o),\n        a = n(88),\n        s = r(a),\n        u = n(90),\n        c = r(u),\n        l = n(221),\n        f = r(l);t.default = { mixins: [f.default], computed: { selectOptions: function selectOptions() {\n          return this.schema.selectOptions || {};\n        }, items: function items() {\n          var e = this.schema.values;return \"function\" == typeof e ? this.groupValues(e.apply(this, [this.model, this.schema])) : this.groupValues(e);\n        } }, methods: { formatValueToField: function formatValueToField(e) {\n          return (0, s.default)(e) ? null : e;\n        }, groupValues: function groupValues(e) {\n          var t = [],\n              n = {};return e.forEach(function (e) {\n            n = null, e.group && (0, c.default)(e) ? (n = (0, i.default)(t, function (t) {\n              return t.group == e.group;\n            }), n ? n.ops.push({ id: e.id, name: e.name }) : (n = { group: \"\", ops: [] }, n.group = e.group, n.ops.push({ id: e.id, name: e.name }), t.push(n))) : t.push(e);\n          }), t;\n        }, getGroupName: function getGroupName(e) {\n          if (e && e.group) return e.group;throw \"Group name is missing! https://icebob.gitbooks.io/vueformgenerator/content/fields/select.html#select-field-with-object-items\";\n        }, getItemValue: function getItemValue(e) {\n          if ((0, c.default)(e)) {\n            if (\"undefined\" != typeof this.schema.selectOptions && \"undefined\" != typeof this.schema.selectOptions.value) return e[this.schema.selectOptions.value];if (\"undefined\" != typeof e.id) return e.id;throw \"`id` is not defined. If you want to use another key name, add a `value` property under `selectOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/select.html#select-field-with-object-items\";\n          }return e;\n        }, getItemName: function getItemName(e) {\n          if ((0, c.default)(e)) {\n            if (\"undefined\" != typeof this.schema.selectOptions && \"undefined\" != typeof this.schema.selectOptions.name) return e[this.schema.selectOptions.name];if (\"undefined\" != typeof e.name) return e.name;throw \"`name` is not defined. If you want to use another key name, add a `name` property under `selectOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/select.html#select-field-with-object-items\";\n          }return e;\n        } } };\n  }, function (e, t, n) {\n    var r = n(269),\n        o = n(293),\n        i = r(o);e.exports = i;\n  }, function (e, t, n) {\n    function r(e) {\n      return function (t, n, r) {\n        var s = Object(t);if (!i(t)) {\n          var u = o(n, 3);t = a(t), n = function n(e) {\n            return u(s[e], e, s);\n          };\n        }var c = e(t, n, r);return c > -1 ? s[u ? t[c] : c] : void 0;\n      };\n    }var o = n(270),\n        i = n(115),\n        a = n(97);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return \"function\" == typeof e ? e : null == e ? a : \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) ? s(e) ? i(e[0], e[1]) : o(e) : u(e);\n    }var o = n(271),\n        i = n(286),\n        a = n(118),\n        s = n(86),\n        u = n(290);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = i(e);return 1 == t.length && t[0][2] ? a(t[0][0], t[0][1]) : function (n) {\n        return n === e || o(n, e, t);\n      };\n    }var o = n(272),\n        i = n(283),\n        a = n(285);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, r) {\n      var u = n.length,\n          c = u,\n          l = !r;if (null == e) return !c;for (e = Object(e); u--;) {\n        var f = n[u];if (l && f[2] ? f[1] !== e[f[0]] : !(f[0] in e)) return !1;\n      }for (; ++u < c;) {\n        f = n[u];var d = f[0],\n            p = e[d],\n            h = f[1];if (l && f[2]) {\n          if (void 0 === p && !(d in e)) return !1;\n        } else {\n          var m = new o();if (r) var v = r(p, h, d, e, t, m);if (!(void 0 === v ? i(h, p, a | s, r, m) : v)) return !1;\n        }\n      }return !0;\n    }var o = n(164),\n        i = n(273),\n        a = 1,\n        s = 2;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, a, s) {\n      return e === t || (null == e || null == t || !i(e) && !i(t) ? e !== e && t !== t : o(e, t, n, a, r, s));\n    }var o = n(274),\n        i = n(87);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, r, v, g) {\n      var b = c(e),\n          x = c(t),\n          _ = b ? h : u(e),\n          w = x ? h : u(t);_ = _ == p ? m : _, w = w == p ? m : w;var O = _ == m,\n          j = w == m,\n          M = _ == w;if (M && l(e)) {\n        if (!l(t)) return !1;b = !0, O = !1;\n      }if (M && !O) return g || (g = new o()), b || f(e) ? i(e, t, n, r, v, g) : a(e, t, _, n, r, v, g);if (!(n & d)) {\n        var k = O && y.call(e, \"__wrapped__\"),\n            S = j && y.call(t, \"__wrapped__\");if (k || S) {\n          var C = k ? e.value() : e,\n              T = S ? t.value() : t;return g || (g = new o()), v(C, T, n, r, g);\n        }\n      }return !!M && (g || (g = new o()), s(e, t, n, r, v, g));\n    }var o = n(164),\n        i = n(275),\n        a = n(281),\n        s = n(282),\n        u = n(192),\n        c = n(86),\n        l = n(102),\n        f = n(106),\n        d = 1,\n        p = \"[object Arguments]\",\n        h = \"[object Array]\",\n        m = \"[object Object]\",\n        v = Object.prototype,\n        y = v.hasOwnProperty;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, r, c, l) {\n      var f = n & s,\n          d = e.length,\n          p = t.length;if (d != p && !(f && p > d)) return !1;var h = l.get(e);if (h && l.get(t)) return h == t;var m = -1,\n          v = !0,\n          y = n & u ? new o() : void 0;for (l.set(e, t), l.set(t, e); ++m < d;) {\n        var g = e[m],\n            b = t[m];if (r) var x = f ? r(b, g, m, t, e, l) : r(g, b, m, e, t, l);if (void 0 !== x) {\n          if (x) continue;v = !1;break;\n        }if (y) {\n          if (!i(t, function (e, t) {\n            if (!a(y, t) && (g === e || c(g, e, n, r, l))) return y.push(t);\n          })) {\n            v = !1;break;\n          }\n        } else if (g !== b && !c(g, b, n, r, l)) {\n          v = !1;break;\n        }\n      }return l.delete(e), l.delete(t), v;\n    }var o = n(276),\n        i = n(279),\n        a = n(280),\n        s = 1,\n        u = 2;e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      var t = -1,\n          n = null == e ? 0 : e.length;for (this.__data__ = new o(); ++t < n;) {\n        this.add(e[t]);\n      }\n    }var o = n(127),\n        i = n(277),\n        a = n(278);r.prototype.add = r.prototype.push = i, r.prototype.has = a, e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      return this.__data__.set(e, r), this;\n    }var r = \"__lodash_hash_undefined__\";e.exports = n;\n  }, function (e, t) {\n    function n(e) {\n      return this.__data__.has(e);\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e, t) {\n      for (var n = -1, r = null == e ? 0 : e.length; ++n < r;) {\n        if (t(e[n], n, e)) return !0;\n      }return !1;\n    }e.exports = n;\n  }, function (e, t) {\n    function n(e, t) {\n      return e.has(t);\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t, n, r, o, O, M) {\n      switch (n) {case w:\n          if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset) return !1;e = e.buffer, t = t.buffer;case _:\n          return !(e.byteLength != t.byteLength || !O(new i(e), new i(t)));case d:case p:case v:\n          return a(+e, +t);case h:\n          return e.name == t.name && e.message == t.message;case y:case b:\n          return e == t + \"\";case m:\n          var k = u;case g:\n          var S = r & l;if (k || (k = c), e.size != t.size && !S) return !1;var C = M.get(e);if (C) return C == t;r |= f, M.set(e, t);var T = s(k(e), k(t), r, o, O, M);return M.delete(e), T;case x:\n          if (j) return j.call(e) == j.call(t);}return !1;\n    }var o = n(81),\n        i = n(200),\n        a = n(146),\n        s = n(275),\n        u = n(205),\n        c = n(209),\n        l = 1,\n        f = 2,\n        d = \"[object Boolean]\",\n        p = \"[object Date]\",\n        h = \"[object Error]\",\n        m = \"[object Map]\",\n        v = \"[object Number]\",\n        y = \"[object RegExp]\",\n        g = \"[object Set]\",\n        b = \"[object String]\",\n        x = \"[object Symbol]\",\n        _ = \"[object ArrayBuffer]\",\n        w = \"[object DataView]\",\n        O = o ? o.prototype : void 0,\n        j = O ? O.valueOf : void 0;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n, r, a, u) {\n      var c = n & i,\n          l = o(e),\n          f = l.length,\n          d = o(t),\n          p = d.length;if (f != p && !c) return !1;for (var h = f; h--;) {\n        var m = l[h];if (!(c ? m in t : s.call(t, m))) return !1;\n      }var v = u.get(e);if (v && u.get(t)) return v == t;var y = !0;u.set(e, t), u.set(t, e);for (var g = c; ++h < f;) {\n        m = l[h];var b = e[m],\n            x = t[m];if (r) var _ = c ? r(x, b, m, t, e, u) : r(b, x, m, e, t, u);if (!(void 0 === _ ? b === x || a(b, x, n, r, u) : _)) {\n          y = !1;break;\n        }g || (g = \"constructor\" == m);\n      }if (y && !g) {\n        var w = e.constructor,\n            O = t.constructor;w != O && \"constructor\" in e && \"constructor\" in t && !(\"function\" == typeof w && w instanceof w && \"function\" == typeof O && O instanceof O) && (y = !1);\n      }return u.delete(e), u.delete(t), y;\n    }var o = n(189),\n        i = 1,\n        a = Object.prototype,\n        s = a.hasOwnProperty;e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      for (var t = i(e), n = t.length; n--;) {\n        var r = t[n],\n            a = e[r];t[n] = [r, a, o(a)];\n      }return t;\n    }var o = n(284),\n        i = n(97);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return e === e && !o(e);\n    }var o = n(90);e.exports = r;\n  }, function (e, t) {\n    function n(e, t) {\n      return function (n) {\n        return null != n && n[e] === t && (void 0 !== t || e in Object(n));\n      };\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return s(e) && u(t) ? c(l(e), t) : function (n) {\n        var r = i(n, e);return void 0 === r && r === t ? a(n, e) : o(t, r, f | d);\n      };\n    }var o = n(273),\n        i = n(119),\n        a = n(287),\n        s = n(122),\n        u = n(284),\n        c = n(285),\n        l = n(160),\n        f = 1,\n        d = 2;e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t) {\n      return null != e && i(e, t, o);\n    }var o = n(288),\n        i = n(289);e.exports = r;\n  }, function (e, t) {\n    function n(e, t) {\n      return null != e && t in Object(e);\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      t = o(t, e);for (var r = -1, l = t.length, f = !1; ++r < l;) {\n        var d = c(t[r]);if (!(f = null != e && n(e, d))) break;e = e[d];\n      }return f || ++r != l ? f : (l = null == e ? 0 : e.length, !!l && u(l) && s(d, l) && (a(e) || i(e)));\n    }var o = n(121),\n        i = n(100),\n        a = n(86),\n        s = n(105),\n        u = n(108),\n        c = n(160);e.exports = r;\n  }, function (e, t, n) {\n    function r(e) {\n      return a(e) ? o(s(e)) : i(e);\n    }var o = n(291),\n        i = n(292),\n        a = n(122),\n        s = n(160);e.exports = r;\n  }, function (e, t) {\n    function n(e) {\n      return function (t) {\n        return null == t ? void 0 : t[e];\n      };\n    }e.exports = n;\n  }, function (e, t, n) {\n    function r(e) {\n      return function (t) {\n        return o(t, e);\n      };\n    }var o = n(120);e.exports = r;\n  }, function (e, t, n) {\n    function r(e, t, n) {\n      var r = null == e ? 0 : e.length;if (!r) return -1;var u = null == n ? 0 : a(n);return u < 0 && (u = s(r + u, 0)), o(e, i(t, 3), u);\n    }var o = n(294),\n        i = n(270),\n        a = n(231),\n        s = Math.max;e.exports = r;\n  }, function (e, t) {\n    function n(e, t, n, r) {\n      for (var o = e.length, i = n + (r ? 1 : -1); r ? i-- : ++i < o;) {\n        if (t(e[i], i, e)) return i;\n      }return -1;\n    }e.exports = n;\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"select\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], staticClass: \"form-control\", class: e.schema.fieldClasses, attrs: { disabled: e.disabled, name: e.schema.inputName, id: e.getFieldID(e.schema) }, on: { change: function change(t) {\n              e.value = Array.prototype.filter.call(t.target.options, function (e) {\n                return e.selected;\n              }).map(function (e) {\n                var t = \"_value\" in e ? e._value : e.value;return t;\n              })[0];\n            } } }, [e.selectOptions.hideNoneSelectedText ? e._e() : n(\"option\", { attrs: { disabled: e.schema.required }, domProps: { value: null } }, [e._v(e._s(e.selectOptions.noneSelectedText || \"<Nothing selected>\"))]), e._l(e.items, function (t) {\n          return [t.group ? n(\"optgroup\", { attrs: { label: e.getGroupName(t) } }, e._l(t.ops, function (r) {\n            return t.ops ? n(\"option\", { domProps: { value: e.getItemValue(r) } }, [e._v(e._s(e.getItemName(r)))]) : e._e();\n          })) : e._e(), t.group ? e._e() : n(\"option\", { domProps: { value: e.getItemValue(t) } }, [e._v(e._s(e.getItemName(t)))])];\n        })], 2);\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(297);var r = n(3)(n(298), n(300), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(299),\n        i = r(o),\n        a = n(89),\n        s = r(a),\n        u = n(221),\n        c = r(u);t.default = { mixins: [c.default], methods: { onClick: function onClick(e) {\n          var t = this;if (this.schema.validateBeforeSubmit === !0) {\n            e.preventDefault();var n = this.$parent.validate(),\n                r = function r(n) {\n              !(0, i.default)(n) && (0, s.default)(t.schema.onValidationError) ? t.schema.onValidationError(t.model, t.schema, n, e) : (0, s.default)(t.schema.onSubmit) && t.schema.onSubmit(t.model, t.schema, e);\n            };n && (0, s.default)(n.then) ? n.then(r) : r(n);\n          } else (0, s.default)(this.schema.onSubmit) && this.schema.onSubmit(this.model, this.schema, e);\n        } } };\n  }, function (e, t, n) {\n    function r(e) {\n      if (null == e) return !0;if (u(e) && (s(e) || \"string\" == typeof e || \"function\" == typeof e.splice || c(e) || f(e) || a(e))) return !e.length;var t = i(e);if (t == d || t == p) return !e.size;if (l(e)) return !o(e).length;for (var n in e) {\n        if (m.call(e, n)) return !1;\n      }return !0;\n    }var o = n(111),\n        i = n(192),\n        a = n(100),\n        s = n(86),\n        u = n(115),\n        c = n(102),\n        l = n(112),\n        f = n(106),\n        d = \"[object Map]\",\n        p = \"[object Set]\",\n        h = Object.prototype,\n        m = h.hasOwnProperty;e.exports = r;\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"input\", { class: e.schema.fieldClasses, attrs: { id: e.getFieldID(e.schema), type: \"submit\", name: e.schema.inputName, disabled: e.disabled }, domProps: { value: e.schema.buttonText }, on: { click: e.onClick } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(302);var r = n(3)(n(303), n(304), null, null);e.exports = r.exports;\n  }, 2, 220, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"textarea\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], staticClass: \"form-control\", class: e.schema.fieldClasses, attrs: { id: e.getFieldID(e.schema), disabled: e.disabled, maxlength: e.schema.max, minlength: e.schema.min, placeholder: e.schema.placeholder, readonly: e.schema.readonly, rows: e.schema.rows || 2, name: e.schema.inputName }, domProps: { value: e._s(e.value) }, on: { input: function input(t) {\n              t.target.composing || (e.value = t.target.value);\n            } } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(306);var r = n(3)(n(307), n(308), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(89),\n        i = r(o),\n        a = n(221),\n        s = r(a);t.default = { mixins: [s.default], methods: { onChange: function onChange(e) {\n          (0, i.default)(this.schema.onChanged) && this.schema.onChanged.call(this, this.model, this.schema, e, this);\n        } } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"div\", { staticClass: \"wrapper\" }, [n(\"input\", { staticClass: \"form-control\", attrs: { id: e.getFieldID(e.schema), type: \"file\", name: e.schema.inputName, accept: e.schema.accept, multiple: e.schema.multiple, placeholder: e.schema.placeholder, readonly: e.schema.readonly, required: e.schema.required, disabled: e.disabled }, on: { change: e.onChange } })]);\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    function r(e) {\n      return n(o(e));\n    }function o(e) {\n      return i[e] || function () {\n        throw new Error(\"Cannot find module '\" + e + \"'.\");\n      }();\n    }var i = { \"./fieldCleave.vue\": 310, \"./fieldDateTimePicker.vue\": 314, \"./fieldGoogleAddress.vue\": 326, \"./fieldImage.vue\": 330, \"./fieldMasked.vue\": 334, \"./fieldNoUiSlider.vue\": 338, \"./fieldPikaday.vue\": 342, \"./fieldRangeSlider.vue\": 346, \"./fieldSelectEx.vue\": 357, \"./fieldSpectrum.vue\": 361, \"./fieldStaticMap.vue\": 365, \"./fieldSwitch.vue\": 369, \"./fieldVueMultiSelect.vue\": 373 };r.keys = function () {\n      return Object.keys(i);\n    }, r.resolve = o, e.exports = r, r.id = 309;\n  }, function (e, t, n) {\n    n(311);var r = n(3)(n(312), n(313), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(234),\n        i = r(o),\n        a = n(221),\n        s = r(a);t.default = { mixins: [s.default], data: function data() {\n        return { cleave: null };\n      }, mounted: function mounted() {\n        this.$nextTick(function () {\n          var e = this;window.Cleave ? (this.cleave = new window.Cleave(this.$el, (0, i.default)(this.schema.cleaveOptions || {}, { creditCard: !1, phone: !1, phoneRegionCode: \"AU\", date: !1, datePattern: [\"d\", \"m\", \"Y\"], numeral: !1, numeralThousandsGroupStyle: \"thousand\", numeralDecimalScale: 2, numeralDecimalMark: \".\", blocks: [], delimiter: \" \", prefix: null, numericOnly: !1, uppercase: !1, lowercase: !1, maxLength: 0 })), this.cleave.properties && this.cleave.properties.hasOwnProperty(\"result\") ? this.$watch(\"cleave.properties.result\", function () {\n            e.value = e.cleave.properties.result;\n          }) : this.$el.addEventListener(\"input\", this.inputChange)) : console.warn(\"Cleave is missing. Please download from https://github.com/nosir/cleave.js/ and load the script in the HTML head section!\");\n        });\n      }, methods: { inputChange: function inputChange() {\n          this.value = this.$el.value;\n        } }, beforeDestroy: function beforeDestroy() {\n        this.cleave && (this.cleave.destroy(), this.$el.removeEventListener(\"input\", this.inputChange));\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"input\", { staticClass: \"form-control\", attrs: { type: \"text\", autocomplete: e.schema.autocomplete, disabled: e.disabled, placeholder: e.schema.placeholder, readonly: e.schema.readonly, name: e.schema.inputName, id: e.getFieldID(e.schema) }, domProps: { value: e.value } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(315);var r = n(3)(n(316), n(325), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(317),\n        i = r(o),\n        a = n(234),\n        s = r(a),\n        u = n(221),\n        c = r(u),\n        l = n(324),\n        f = r(l),\n        d = \"YYYY-MM-DD HH:mm:ss\";t.default = { mixins: [c.default], methods: (0, i.default)({ getDateFormat: function getDateFormat() {\n          return this.schema.dateTimePickerOptions && this.schema.dateTimePickerOptions.format ? this.schema.dateTimePickerOptions.format : d;\n        } }, f.default), mounted: function mounted() {\n        this.$nextTick(function () {\n          var e = this;if (window.$ && window.$.fn.datetimepicker) {\n            var t = this.$el.querySelector(\".form-control\");$(this.$el).datetimepicker((0, s.default)(this.schema.dateTimePickerOptions || {}, { format: d })).on(\"dp.change\", function () {\n              e.value = t.value;\n            });\n          } else console.warn(\"Bootstrap datetimepicker library is missing. Please download from https://eonasdan.github.io/bootstrap-datetimepicker/ and load the script and CSS in the HTML head section!\");\n        });\n      }, beforeDestroy: function beforeDestroy() {\n        window.$ && window.$.fn.datetimepicker && $(this.$el).data(\"DateTimePicker\").destroy();\n      } };\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }t.__esModule = !0;var o = n(318),\n        i = r(o);t.default = i.default || function (e) {\n      for (var t = 1; t < arguments.length; t++) {\n        var n = arguments[t];for (var r in n) {\n          Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n        }\n      }return e;\n    };\n  }, function (e, t, n) {\n    e.exports = { default: n(319), __esModule: !0 };\n  }, function (e, t, n) {\n    n(320), e.exports = n(16).Object.assign;\n  }, function (e, t, n) {\n    var r = n(14);r(r.S + r.F, \"Object\", { assign: n(321) });\n  }, function (e, t, n) {\n    \"use strict\";\n    var r = n(35),\n        o = n(322),\n        i = n(323),\n        a = n(51),\n        s = n(38),\n        u = Object.assign;e.exports = !u || n(25)(function () {\n      var e = {},\n          t = {},\n          n = Symbol(),\n          r = \"abcdefghijklmnopqrst\";return e[n] = 7, r.split(\"\").forEach(function (e) {\n        t[e] = e;\n      }), 7 != u({}, e)[n] || Object.keys(u({}, t)).join(\"\") != r;\n    }) ? function (e, t) {\n      for (var n = a(e), u = arguments.length, c = 1, l = o.f, f = i.f; u > c;) {\n        for (var d, p = s(arguments[c++]), h = l ? r(p).concat(l(p)) : r(p), m = h.length, v = 0; m > v;) {\n          f.call(p, d = h[v++]) && (n[d] = p[d]);\n        }\n      }return n;\n    } : u;\n  }, function (e, t) {\n    t.f = Object.getOwnPropertySymbols;\n  }, function (e, t) {\n    t.f = {}.propertyIsEnumerable;\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(246),\n        i = r(o);t.default = { formatValueToField: function formatValueToField(e) {\n        if (null != e) {\n          var t = this.schema.format ? i.default.parse(e, this.schema.format) : new Date(e);return i.default.format(t, this.getDateFormat());\n        }return e;\n      }, formatValueToModel: function formatValueToModel(e) {\n        if (null != e) {\n          var t = i.default.parse(e, this.getDateFormat());e = this.schema.format ? i.default.format(t, this.schema.format) : t.valueOf();\n        }return e;\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"div\", { staticClass: \"input-group date\" }, [n(\"input\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], staticClass: \"form-control\", attrs: { type: \"text\", autocomplete: e.schema.autocomplete, disabled: e.disabled, placeholder: e.schema.placeholder, readonly: e.schema.readonly, name: e.schema.inputName, id: e.getFieldID(e.schema) }, domProps: { value: e._s(e.value) }, on: { input: function input(t) {\n              t.target.composing || (e.value = t.target.value);\n            } } }), e._m(0)]);\n      }, staticRenderFns: [function () {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"span\", { staticClass: \"input-group-addon\" }, [n(\"span\", { staticClass: \"glyphicon glyphicon-calendar\" })]);\n      }] };\n  }, function (e, t, n) {\n    n(327);var r = n(3)(n(328), n(329), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(89),\n        i = r(o),\n        a = n(221),\n        s = r(a);t.default = { mixins: [s.default], data: function data() {\n        return { autocomplete: \"\", inputs: { street_number: \"long_name\", route: \"long_name\", country: \"long_name\", administrative_area_level_1: \"long_name\", administrative_area_level_2: \"long_name\", locality: \"long_name\", postal_code: \"short_name\" } };\n      }, mounted: function mounted() {\n        this.$nextTick(function () {\n          window.google && window.google.maps && window.google.maps.places && window.google.maps.places.Autocomplete ? (this.autocomplete = new google.maps.places.Autocomplete(this.$el, { types: [\"geocode\"] }), this.autocomplete.addListener(\"place_changed\", this.pipeAddress)) : console.warn(\"Google Maps API is missing. Please add https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&libraries=places script in the HTML head section!\");\n        });\n      }, methods: { pipeAddress: function pipeAddress() {\n          var e = this.autocomplete.getPlace();if (e) {\n            this.value = e.formatted_address;var t = {};if (void 0 !== e.address_components) for (var n = 0; n < e.address_components.length; n++) {\n              var r = e.address_components[n].types[0];this.inputs[r] && (t[r] = e.address_components[n][this.inputs[r]]);\n            }(0, i.default)(this.schema.onPlaceChanged) && this.schema.onPlaceChanged(this.value, t, e, this.model, this.schema);\n          }\n        }, geolocate: function geolocate() {\n          var e = this;navigator.geolocation && navigator.geolocation.getCurrentPosition(function (t) {\n            var n = { lat: t.coords.latitude, lng: t.coords.longitude },\n                r = new window.google.maps.Circle({ center: n, radius: t.coords.accuracy });e.autocomplete.setBounds(r.getBounds());\n          });\n        } } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"input\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], staticClass: \"form-control\", attrs: { type: \"text\", autocomplete: e.schema.autocomplete, disabled: e.disabled, placeholder: e.schema.placeholder, readonly: e.schema.readonly, name: e.schema.inputName, debounce: \"500\", id: e.getFieldID(e.schema) }, domProps: { value: e._s(e.value) }, on: { focus: function focus(t) {\n              e.geolocate();\n            }, input: function input(t) {\n              t.target.composing || (e.value = t.target.value);\n            } } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(331);var r = n(3)(n(332), n(333), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(221),\n        i = r(o);t.default = { mixins: [i.default], computed: { previewStyle: function previewStyle() {\n          return this.schema.preview !== !1 ? { display: \"block\", \"background-image\": null != this.value ? \"url(\" + this.value + \")\" : \"none\" } : { display: \"none\" };\n        }, wrappedValue: { get: function get() {\n            return this.value && 0 == this.value.indexOf(\"data\") ? \"<inline base64 image>\" : this.value;\n          }, set: function set(e) {\n            e && 0 == e.indexOf(\"http\") && (this.value = e);\n          } } }, watch: { model: function model() {\n          this.$el.querySelector(\"input.file\").value = \"\";\n        } }, methods: { remove: function remove() {\n          this.value = \"\";\n        }, fileChanged: function fileChanged(e) {\n          var t = this,\n              n = new FileReader();n.onload = function (e) {\n            t.value = e.target.result;\n          }, e.target.files && e.target.files.length > 0 && n.readAsDataURL(e.target.files[0]);\n        } } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"div\", { staticClass: \"wrapper\" }, [n(\"input\", { directives: [{ name: \"show\", rawName: \"v-show\", value: e.schema.hideInput !== !0, expression: \"schema.hideInput !== true\" }, { name: \"model\", rawName: \"v-model\", value: e.wrappedValue, expression: \"wrappedValue\" }], staticClass: \"form-control link\", attrs: { type: \"text\", autocomplete: e.schema.autocomplete, disabled: e.disabled, placeholder: e.schema.placeholder, readonly: e.schema.readonly }, domProps: { value: e._s(e.wrappedValue) }, on: { input: function input(t) {\n              t.target.composing || (e.wrappedValue = t.target.value);\n            } } }), e.schema.browse !== !1 ? n(\"input\", { staticClass: \"form-control file\", attrs: { type: \"file\", disabled: e.disabled, name: e.schema.inputName }, on: { change: e.fileChanged } }) : e._e(), n(\"div\", { staticClass: \"preview\", style: e.previewStyle }, [n(\"div\", { staticClass: \"remove\", attrs: { title: \"Remove image\"\n          }, on: { click: e.remove } })])]);\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(335);var r = n(3)(n(336), n(337), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(221),\n        i = r(o);t.default = { mixins: [i.default], mounted: function mounted() {\n        this.$nextTick(function () {\n          window.$ && window.$.fn.mask ? $(this.$el).unmask().mask(this.schema.mask, this.schema.maskOptions) : console.warn(\"JQuery MaskedInput library is missing. Please download from https://github.com/digitalBush/jquery.maskedinput and load the script in the HTML head section!\");\n        });\n      }, beforeDestroy: function beforeDestroy() {\n        window.$ && window.$.fn.mask && $(this.$el).unmask();\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"input\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], staticClass: \"form-control\", attrs: { type: \"text\", autocomplete: e.schema.autocomplete, disabled: e.disabled, placeholder: e.schema.placeholder, readonly: e.schema.readonly, name: e.schema.inputName, id: e.getFieldID(e.schema) }, domProps: { value: e._s(e.value) }, on: { input: function input(t) {\n              t.target.composing || (e.value = t.target.value);\n            } } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(339);var r = n(3)(n(340), n(341), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(234),\n        i = r(o),\n        a = n(86),\n        s = r(a),\n        u = n(221),\n        c = r(u);t.default = { mixins: [c.default], data: function data() {\n        return { slider: null };\n      }, watch: { model: function model() {\n          window.noUiSlider && this.slider && this.slider.noUiSlider && this.slider.noUiSlider.set(this.value);\n        } }, computed: { containPips: function containPips() {\n          return this.schema.noUiSliderOptions && \"undefined\" != typeof this.schema.noUiSliderOptions.pips;\n        }, containTooltip: function containTooltip() {\n          return this.schema.noUiSliderOptions && this.schema.noUiSliderOptions.tooltips;\n        } }, methods: { onChange: function onChange(e) {\n          (0, s.default)(e) ? this.value = [parseFloat(e[0]), parseFloat(e[1])] : this.value = parseFloat(e);\n        }, formatValueToField: function formatValueToField(e) {\n          null !== this.slider && \"undefined\" != typeof this.slider.noUiSlider && this.slider.noUiSlider.set(e);\n        }, formatValueToModel: function formatValueToModel(e) {\n          if (\"undefined\" != typeof this.slider.noUiSlider) return e instanceof Array ? [Number(e[0]), Number(e[1])] : Number(e);\n        }, getStartValue: function getStartValue() {\n          return null != this.value ? this.value : \"undefined\" != typeof this.schema.noUiSliderOptions && this.schema.noUiSliderOptions.double ? [this.schema.min, this.schema.min] : this.schema.min;\n        } }, mounted: function mounted() {\n        this.$nextTick(function () {\n          window.noUiSlider ? (this.slider = this.$el, window.noUiSlider.create(this.slider, (0, i.default)(this.schema.noUiSliderOptions || {}, { start: this.getStartValue(), range: { min: this.schema.min, max: this.schema.max } })), this.slider.noUiSlider.on(\"change\", this.onChange.bind(this))) : console.warn(\"noUiSlider is missing. Please download from https://github.com/leongersen/noUiSlider and load the script and CSS in the HTML head section!\");\n        });\n      }, beforeDestroy: function beforeDestroy() {\n        this.slider && this.slider.noUiSlider.off(\"change\");\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"div\", { staticClass: \"slider\", class: { \"contain-pips\": e.containPips, \"contain-tooltip\": e.containTooltip }, attrs: { disabled: e.disabled } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(343);var r = n(3)(n(344), n(345), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(317),\n        i = r(o),\n        a = n(119),\n        s = r(a),\n        u = n(234),\n        c = r(u),\n        l = n(221),\n        f = r(l),\n        d = n(324),\n        p = r(d),\n        h = \"YYYY-MM-DD\";t.default = { mixins: [f.default], data: function data() {\n        return { picker: null, options: null };\n      }, methods: (0, i.default)({ getDateFormat: function getDateFormat() {\n          return (0, s.default)(this.schema, \"pikadayOptions.format\", h);\n        } }, p.default, { initialize: function initialize(e) {\n          var t = this;this.picker && this.picker.destroy && this.picker.destroy(), this.$nextTick(function () {\n            window.Pikaday ? (t.options = (0, c.default)({}, e, { field: t.$el, onSelect: function onSelect() {\n                t.value = t.picker.toString();\n              } }), t.picker = new window.Pikaday(t.options)) : console.warn(\"Pikaday is missing. Please download from https://github.com/dbushell/Pikaday/ and load the script and CSS in the HTML head section!\");\n          });\n        } }), mounted: function mounted() {\n        this.initialize((0, s.default)(this.schema, \"pikadayOptions\", {}));\n      }, beforeDestroy: function beforeDestroy() {\n        this.picker && this.picker.destroy();\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"input\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], staticClass: \"form-control\", attrs: { type: \"text\", autocomplete: e.schema.autocomplete, disabled: e.disabled, placeholder: e.schema.placeholder, readonly: e.schema.readonly, name: e.schema.inputName }, domProps: { value: e._s(e.value) }, on: { input: function input(t) {\n              t.target.composing || (e.value = t.target.value);\n            } } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(347);var r = n(3)(n(348), n(356), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(349),\n        i = r(o),\n        a = n(86),\n        s = r(a),\n        u = n(234),\n        c = r(u),\n        l = n(221),\n        f = r(l);t.default = { mixins: [f.default], data: function data() {\n        return { slider: null };\n      }, watch: { model: function model() {\n          if (window.$ && window.$.fn.ionRangeSlider) {\n            var e = void 0,\n                t = void 0;if ((0, s.default)(this.value)) {\n              var n = (0, i.default)(this.value, 2);e = n[0], t = n[1];\n            } else e = this.value;this.slider && this.slider.update({ from: e, to: t });\n          }\n        } }, mounted: function mounted() {\n        this.$nextTick(function () {\n          if (window.$ && window.$.fn.ionRangeSlider) {\n            var e = void 0,\n                t = void 0;if ((0, s.default)(this.value)) {\n              var n = (0, i.default)(this.value, 2);e = n[0], t = n[1];\n            } else e = this.value;var r = this;$(this.$el).ionRangeSlider((0, c.default)(this.schema.rangeSliderOptions || {}, { type: \"single\", grid: !0, hide_min_max: !0, from: e, to: t, onChange: function onChange(e) {\n                \"double\" == r.slider.options.type ? r.value = [e.from, e.to] : r.value = e.from;\n              } })), this.slider = $(this.$el).data(\"ionRangeSlider\");\n          } else console.warn(\"ion.rangeSlider library is missing. Please download from https://github.com/IonDen/ion.rangeSlider and load the script and CSS in the HTML head section!\");\n        });\n      }, beforeDestroy: function beforeDestroy() {\n        this.slider && this.slider.destroy();\n      } };\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }t.__esModule = !0;var o = n(350),\n        i = r(o),\n        a = n(353),\n        s = r(a);t.default = function () {\n      function e(e, t) {\n        var n = [],\n            r = !0,\n            o = !1,\n            i = void 0;try {\n          for (var a, u = (0, s.default)(e); !(r = (a = u.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0) {}\n        } catch (e) {\n          o = !0, i = e;\n        } finally {\n          try {\n            !r && u.return && u.return();\n          } finally {\n            if (o) throw i;\n          }\n        }return n;\n      }return function (t, n) {\n        if (Array.isArray(t)) return t;if ((0, i.default)(Object(t))) return e(t, n);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      };\n    }();\n  }, function (e, t, n) {\n    e.exports = { default: n(351), __esModule: !0 };\n  }, function (e, t, n) {\n    n(52), n(8), e.exports = n(352);\n  }, function (e, t, n) {\n    var r = n(57),\n        o = n(49)(\"iterator\"),\n        i = n(31);e.exports = n(16).isIterable = function (e) {\n      var t = Object(e);return void 0 !== t[o] || \"@@iterator\" in t || i.hasOwnProperty(r(t));\n    };\n  }, function (e, t, n) {\n    e.exports = { default: n(354), __esModule: !0 };\n  }, function (e, t, n) {\n    n(52), n(8), e.exports = n(355);\n  }, function (e, t, n) {\n    var r = n(21),\n        o = n(62);e.exports = n(16).getIterator = function (e) {\n      var t = o(e);if (\"function\" != typeof t) throw TypeError(e + \" is not iterable!\");return r(t.call(e));\n    };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"input\", { attrs: { type: \"text\", autocomplete: e.schema.autocomplete, \"data-disable\": e.disabled, \"data-max\": e.schema.max, \"data-min\": e.schema.min, \"data-step\": e.schema.step, placeholder: e.schema.placeholder, readonly: e.schema.readonly, name: e.schema.inputName } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(358);var r = n(3)(n(359), n(360), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(90),\n        i = r(o),\n        a = n(221),\n        s = r(a);t.default = { mixins: [s.default], computed: { items: function items() {\n          var e = this.schema.values;return \"function\" == typeof e ? e.apply(this, [this.model, this.schema]) : e;\n        } }, methods: { getItemValue: function getItemValue(e) {\n          if ((0, i.default)(e)) {\n            if (\"undefined\" != typeof this.schema.selectOptions && \"undefined\" != typeof this.schema.selectOptions.value) return e[this.schema.selectOptions.value];if (\"undefined\" != typeof e.id) return e.id;throw \"`id` is not defined. If you want to use another key name, add a `value` property under `selectOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/select.html#select-field-with-object-items\";\n          }return e;\n        }, getItemName: function getItemName(e) {\n          if ((0, i.default)(e)) {\n            if (\"undefined\" != typeof this.schema.selectOptions && \"undefined\" != typeof this.schema.selectOptions.name) return e[this.schema.selectOptions.name];if (\"undefined\" != typeof e.name) return e.name;throw \"`name` is not defined. If you want to use another key name, add a `name` property under `selectOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/select.html#select-field-with-object-items\";\n          }return e;\n        } }, watch: { model: function model() {\n          $.fn.selectpicker && $(this.$el).selectpicker(\"refresh\");\n        } }, mounted: function mounted() {\n        this.$nextTick(function () {\n          $.fn.selectpicker ? $(this.$el).selectpicker(\"destroy\").selectpicker(this.schema.selectOptions) : console.warn(\"Bootstrap-select library is missing. Please download from https://silviomoreto.github.io/bootstrap-select/ and load the script and CSS in the HTML head section!\");\n        });\n      }, beforeDestroy: function beforeDestroy() {\n        $.fn.selectpicker && $(this.$el).selectpicker(\"destroy\");\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"select\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], staticClass: \"selectpicker\", attrs: { disabled: e.disabled, multiple: e.schema.multiSelect, title: e.schema.placeholder, \"data-width\": \"100%\", name: e.schema.inputName }, on: { change: function change(t) {\n              e.value = Array.prototype.filter.call(t.target.options, function (e) {\n                return e.selected;\n              }).map(function (e) {\n                var t = \"_value\" in e ? e._value : e.value;return t;\n              })[0];\n            } } }, [e.schema.multiSelect !== !0 ? n(\"option\", { attrs: { disabled: e.schema.required }, domProps: { value: null, selected: void 0 == e.value } }) : e._e(), e._l(e.items, function (t) {\n          return n(\"option\", { domProps: { value: e.getItemValue(t) } }, [e._v(e._s(e.getItemName(t)))]);\n        })], 2);\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(362);var r = n(3)(n(363), n(364), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(234),\n        i = r(o),\n        a = n(221),\n        s = r(a);t.default = { mixins: [s.default], data: function data() {\n        return { picker: null };\n      }, watch: { model: function model() {\n          window.$ && window.$.fn.spectrum && this.picker.spectrum(\"set\", this.value);\n        }, disabled: function disabled(e) {\n          e ? this.picker.spectrum(\"disable\") : this.picker.spectrum(\"enable\");\n        } }, mounted: function mounted() {\n        this.$nextTick(function () {\n          var e = this;window.$ && window.$.fn.spectrum ? (this.picker = $(this.$el).spectrum(\"destroy\").spectrum((0, i.default)(this.schema.colorOptions || {}, { showInput: !0, showAlpha: !0, disabled: this.schema.disabled, allowEmpty: !this.schema.required, preferredFormat: \"hex\", change: function change(t) {\n              e.value = t ? t.toString() : null;\n            } })), this.picker.spectrum(\"set\", this.value)) : console.warn(\"Spectrum color library is missing. Please download from http://bgrins.github.io/spectrum/ and load the script and CSS in the HTML head section!\");\n        });\n      }, beforeDestroy: function beforeDestroy() {\n        this.picker && this.picker.spectrum(\"destroy\");\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"input\", { attrs: { type: \"text\", autocomplete: e.schema.autocomplete, disabled: e.disabled, placeholder: e.schema.placeholder, readonly: e.schema.readonly, name: e.schema.inputName, id: e.getFieldID(e.schema) } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(366);var r = n(3)(n(367), n(368), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(353),\n        i = r(o),\n        a = n(234),\n        s = r(a),\n        u = n(221),\n        c = r(u);t.default = { mixins: [c.default], computed: { mapLink: function mapLink() {\n          if (this.value) {\n            var e = void 0,\n                t = void 0,\n                n = (0, s.default)(this.schema.staticMapOptions || {}, { lat: \"lat\", lng: \"lng\", zoom: 8, sizeX: 640, sizeY: 640 });e = this.value[n.lat], t = this.value[n.lng];var r = \"http://maps.googleapis.com/maps/api/staticmap?center=\" + e + \",\" + t + \"&zoom=\" + n.zoom + \"&size=\" + n.sizeX + \"x\" + n.sizeY,\n                o = [\"scale\", \"format\", \"maptype\", \"language\", \"region\", \"markers\", \"path\", \"visible\", \"style\", \"key\", \"signature\"],\n                a = !0,\n                u = !1,\n                c = void 0;try {\n              for (var l, f = (0, i.default)(o); !(a = (l = f.next()).done); a = !0) {\n                var d = l.value;\"undefined\" != typeof n[d] && (r += \"&\" + d + \"=\" + n[d]);\n              }\n            } catch (e) {\n              u = !0, c = e;\n            } finally {\n              try {\n                !a && f.return && f.return();\n              } finally {\n                if (u) throw c;\n              }\n            }if (e && t) return r;\n          }\n        } } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"img\", { attrs: { src: e.mapLink } });\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    n(370);var r = n(3)(n(371), n(372), null, null);e.exports = r.exports;\n  }, 2, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(221),\n        i = r(o);t.default = { mixins: [i.default], methods: { formatValueToField: function formatValueToField(e) {\n          return null != e && this.schema.valueOn ? e == this.schema.valueOn : e;\n        }, formatValueToModel: function formatValueToModel(e) {\n          return null != e && this.schema.valueOn ? e ? this.schema.valueOn : this.schema.valueOff : e;\n        } } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"label\", [n(\"input\", { directives: [{ name: \"model\", rawName: \"v-model\", value: e.value, expression: \"value\" }], attrs: { type: \"checkbox\", autocomplete: e.schema.autocomplete, disabled: e.disabled, name: e.schema.inputName, id: e.getFieldID(e.schema) }, domProps: { checked: Array.isArray(e.value) ? e._i(e.value, null) > -1 : e.value }, on: { click: function click(t) {\n              var n = e.value,\n                  r = t.target,\n                  o = !!r.checked;if (Array.isArray(n)) {\n                var i = null,\n                    a = e._i(n, i);o ? a < 0 && (e.value = n.concat(i)) : a > -1 && (e.value = n.slice(0, a).concat(n.slice(a + 1)));\n              } else e.value = o;\n            } } }), n(\"span\", { staticClass: \"label\", attrs: { \"data-on\": e.schema.textOn || \"On\", \"data-off\": e.schema.textOff || \"Off\", for: e.getFieldID(e.schema) } }), n(\"span\", { staticClass: \"handle\" })]);\n      }, staticRenderFns: [] };\n  }, function (e, t, n) {\n    var r = n(3)(n(374), n(375), null, null);e.exports = r.exports;\n  }, function (e, t, n) {\n    \"use strict\";\n    function r(e) {\n      return e && e.__esModule ? e : { default: e };\n    }Object.defineProperty(t, \"__esModule\", { value: !0 });var o = n(221),\n        i = r(o);t.default = { mixins: [i.default], computed: { selectOptions: function selectOptions() {\n          return this.schema.selectOptions || {};\n        }, options: function options() {\n          var e = this.schema.values;return \"function\" == typeof e ? e.apply(this, [this.model, this.schema]) : e;\n        }, customLabel: function customLabel() {\n          return \"undefined\" != typeof this.schema.selectOptions && \"undefined\" != typeof this.schema.selectOptions.customLabel && \"function\" == typeof this.schema.selectOptions.customLabel ? this.schema.selectOptions.customLabel : void 0;\n        } }, methods: { updateSelected: function updateSelected(e) {\n          this.value = e;\n        }, addTag: function addTag(e, t) {\n          var n = this.selectOptions.onNewTag;\"function\" == typeof n && n(e, t, this.options, this.value);\n        }, onSearchChange: function onSearchChange(e, t) {\n          var n = this.selectOptions.onSearch;\"function\" == typeof n && n(e, t, this.options);\n        }, onSelect: function onSelect() {}, onRemove: function onRemove() {}, onOpen: function onOpen() {}, onClose: function onClose() {} }, created: function created() {\n        this.$root.$options.components.multiselect || console.error(\"'vue-multiselect' is missing. Please download from https://github.com/monterail/vue-multiselect and register the component globally!\");\n      } };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return n(\"multiselect\", { attrs: { id: e.selectOptions.id, options: e.options, value: e.value, multiple: e.selectOptions.multiple, \"track-by\": e.selectOptions.trackBy || null, label: e.selectOptions.label || null, searchable: e.selectOptions.searchable, \"clear-on-select\": e.selectOptions.clearOnSelect, \"hide-selected\": e.selectOptions.hideSelected, placeholder: e.schema.placeholder, \"allow-empty\": e.selectOptions.allowEmpty, \"reset-after\": e.selectOptions.resetAfter, \"close-on-select\": e.selectOptions.closeOnSelect, \"custom-label\": e.customLabel, taggable: e.selectOptions.taggable, \"tag-placeholder\": e.selectOptions.tagPlaceholder, max: e.schema.max || null, \"options-limit\": e.selectOptions.optionsLimit, \"group-values\": e.selectOptions.groupValues, \"group-label\": e.selectOptions.groupLabel, \"block-keys\": e.selectOptions.blockKeys, \"internal-search\": e.selectOptions.internalSearch, \"select-label\": e.selectOptions.selectLabel, \"selected-label\": e.selectOptions.selectedLabel, \"deselect-label\": e.selectOptions.deselectLabel, \"show-labels\": e.selectOptions.showLabels, limit: e.selectOptions.limit, \"limit-text\": e.selectOptions.limitText, loading: e.selectOptions.loading, disabled: e.disabled, \"max-height\": e.selectOptions.maxHeight, \"show-pointer\": e.selectOptions.showPointer, \"option-height\": e.selectOptions.optionHeight }, on: { input: e.updateSelected, select: e.onSelect, remove: e.onRemove, \"search-change\": e.onSearchChange, tag: e.addTag, open: e.onOpen, close: e.onClose } });\n      }, staticRenderFns: [] };\n  }, function (e, t) {\n    e.exports = { render: function render() {\n        var e = this,\n            t = e.$createElement,\n            n = e._self._c || t;return null != e.schema ? n(\"div\", { staticClass: \"vue-form-generator\" }, [e.schema.fields ? n(e.tag, { tag: \"fieldset\" }, [e._l(e.fields, function (t) {\n          return [e.fieldVisible(t) ? n(\"div\", { staticClass: \"form-group\", class: e.getFieldRowClasses(t) }, [e.fieldTypeHasLabel(t) ? n(\"label\", { class: t.labelClasses, attrs: { for: e.getFieldID(t) } }, [e._v(e._s(t.label)), t.help ? n(\"span\", { staticClass: \"help\" }, [n(\"i\", { staticClass: \"icon\" }), n(\"div\", { staticClass: \"helpText\", domProps: { innerHTML: e._s(t.help) } })]) : e._e()]) : e._e(), n(\"div\", { staticClass: \"field-wrap\" }, [n(e.getFieldType(t), { tag: \"component\", attrs: { disabled: e.fieldDisabled(t), model: e.model, schema: t, formOptions: e.options }, on: { \"model-updated\": e.modelUpdated, validated: e.onFieldValidated } }), e.buttonVisibility(t) ? n(\"div\", { staticClass: \"buttons\" }, e._l(t.buttons, function (r) {\n            return n(\"button\", { class: r.classes, on: { click: function click(n) {\n                  e.buttonClickHandler(r, t, n);\n                } } }, [e._v(e._s(r.label))]);\n          })) : e._e()], 1), t.hint ? n(\"div\", { staticClass: \"hint\" }, [e._v(e._s(e.fieldHint(t)))]) : e._e(), e.fieldErrors(t).length > 0 ? n(\"div\", { staticClass: \"errors help-block\" }, e._l(e.fieldErrors(t), function (t, r) {\n            return n(\"span\", { attrs: { \"track-by\": \"index\" }, domProps: { innerHTML: e._s(t) } });\n          })) : e._e()]) : e._e()];\n        })], 2) : e._e(), e._l(e.groups, function (t) {\n          return [n(e.tag, { tag: \"fieldset\", class: e.getFieldRowClasses(t) }, [t.legend ? n(\"legend\", [e._v(e._s(t.legend))]) : e._e(), e._l(t.fields, function (t) {\n            return [e.fieldVisible(t) ? n(\"div\", { staticClass: \"form-group\", class: e.getFieldRowClasses(t) }, [e.fieldTypeHasLabel(t) ? n(\"label\", { class: t.labelClasses, attrs: { for: e.getFieldID(t) } }, [e._v(e._s(t.label)), t.help ? n(\"span\", { staticClass: \"help\" }, [n(\"i\", { staticClass: \"icon\" }), n(\"div\", { staticClass: \"helpText\", domProps: { innerHTML: e._s(t.help) } })]) : e._e()]) : e._e(), n(\"div\", { staticClass: \"field-wrap\" }, [n(e.getFieldType(t), { tag: \"component\", attrs: { disabled: e.fieldDisabled(t), model: e.model, schema: t, formOptions: e.options }, on: { \"model-updated\": e.modelUpdated, validated: e.onFieldValidated } }), e.buttonVisibility(t) ? n(\"div\", { staticClass: \"buttons\" }, e._l(t.buttons, function (r) {\n              return n(\"button\", { class: r.classes, on: { click: function click(n) {\n                    e.buttonClickHandler(r, t, n);\n                  } } }, [e._v(e._s(r.label))]);\n            })) : e._e()], 1), t.hint ? n(\"div\", { staticClass: \"hint\" }, [e._v(e._s(t.hint))]) : e._e(), e.fieldErrors(t).length > 0 ? n(\"div\", { staticClass: \"errors help-block\" }, e._l(e.fieldErrors(t), function (t, r) {\n              return n(\"span\", { attrs: { \"track-by\": \"index\" }, domProps: { innerHTML: e._s(t) } });\n            })) : e._e()]) : e._e()];\n          })], 2)];\n        })], 2) : e._e();\n      }, staticRenderFns: [] };\n  }]));\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./admin/vue-components/vue-form-generator/dist/vfg.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./public/vue-components/FloForm.vue":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./public/vue-components/FloForm.vue ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.common.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _vueFormGenerator = __webpack_require__(/*! ../../admin/vue-components/vue-form-generator */ \"./admin/vue-components/vue-form-generator/dist/vfg.js\");\n\nvar _vueFormGenerator2 = _interopRequireDefault(_vueFormGenerator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.Vue = _vue2.default;\n\n//import CircularJSON from \"circular-json\";\n//import VueFormGenerator from \"vue-form-generator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n_vue2.default.use(_vueFormGenerator2.default);\n\n//console.log(JSON.parse(flo_form_schema));\n\n/**\n *\n * custom field for flo captcha - flocaptcha\n *\n */\nif (typeof forms_options !== 'undefined' && forms_options['enable-captcha'] && forms_options['enable-captcha'] != '0') {\n\t_vue2.default.component(\"field-flocaptcha\", {\n\t\ttemplate: '<div class=\"flo-g-recaptcha\" style=\"width: 100%; text-align: center;\"> <div> <div style=\"display: inline-block\" class=\"g-recaptcha\" data-sitekey=\"' + forms_options.g_site_key + '\"></div> </div> </div>',\n\t\tmixins: [_vueFormGenerator2.default.abstractField]\n\t});\n}\n\nexports.default = {\n\tcomponents: {\n\t\t\"vue-form-generator\": _vueFormGenerator2.default.component\n\t},\n\n\tdata: function data() {\n\n\t\t//flo_form_schema, and flo_form_model and forms_options are localized from PHP\n\n\t\t// honeypot input to fight spam\n\t\tvar flo_honeypot = {\n\t\t\t\"field_id\": 'flohp',\n\t\t\t\"model\": \"field_flohp\", // flohp = flo honeypot\n\t\t\t\"styleClasses\": \"flohp\", // the class used to hide the field\n\t\t\t\"placeholder\": \"\",\n\t\t\t\"required\": false,\n\t\t\t\"type\": \"input\",\n\t\t\t\"inputType\": 'text',\n\t\t\t\"label\": 'Flo contact phone',\n\t\t\t\"attributes\": {\n\t\t\t\tinput: {\n\t\t\t\t\tclass: \"form-control\",\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\tenable_conditional_logic: false,\n\t\t\t\t\trequired: false\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar the_schema = JSON.parse(eval('flo_form_schema_' + this.$attrs.form_id));\n\t\tvar firstGroupFields = the_schema.groups[0];\n\n\t\tfirstGroupFields.fields.push(flo_honeypot);\n\n\t\treturn {\n\t\t\t//model: {},\n\t\t\tmodel: JSON.parse(eval('flo_form_model_' + this.$attrs.form_id)),\n\t\t\tschema: the_schema,\n\t\t\tisProVersion: formData.is_pro_version,\n\t\t\tformOptions: {\n\t\t\t\tvalidateAfterLoad: false,\n\t\t\t\tvalidateAfterChanged: true,\n\t\t\t\tvalidateDebounceTime: 1200\n\t\t\t},\n\n\t\t\tfieldsWidth: {\n\t\t\t\t'100%': '100',\n\t\t\t\t'50%': '50',\n\t\t\t\t'33%': '33',\n\t\t\t\t'25%': '25'\n\t\t\t},\n\t\t\tformStyling: eval('form_styling_' + this.$attrs.form_id),\n\t\t\tformSettings: eval('flo_form_settings_' + this.$attrs.form_id),\n\t\t\tbtnPosition: \"auto\",\n\t\t\tbtnTextColorValue: \"#ffffff\",\n\t\t\tbtnBorderColorValue: \"#000000\",\n\t\t\tbtnBgColorValue: \"#000000\",\n\t\t\tbtnTextColorValueHover: \"#ffffff\",\n\t\t\tbtnBorderColorValueHover: \"#000000\",\n\t\t\tinputbgColorValue: \"#ffffff\",\n\t\t\tbtnBgColorValueHover: \"#000000\",\n\t\t\tisValid: false,\n\t\t\tvalidationErrors: [],\n\t\t\tformsOptions: forms_options\n\t\t};\n\t},\n\n\tmounted: function mounted() {\n\n\t\tvar groups_size = this.schema.groups.length;\n\t\t// initialize the Submit button text color and bgcolor\n\n\t\tthis.btnTextColorValue = this.schema.groups[groups_size - 1].fields[0].attributes.input.text_color;\n\t\tthis.btnBorderColorValue = this.schema.groups[groups_size - 1].fields[0].attributes.input.border_color;\n\t\tthis.btnBgColorValue = this.schema.groups[groups_size - 1].fields[0].attributes.input.bg_color;\n\t\tthis.btnTextColorValueHover = this.schema.groups[groups_size - 1].fields[0].attributes.input.text_color_hover;\n\t\tthis.btnBorderColorValueHover = this.schema.groups[groups_size - 1].fields[0].attributes.input.border_color_hover;\n\t\tthis.btnBgColorValueHover = this.schema.groups[groups_size - 1].fields[0].attributes.input.bg_color_hover;\n\t\tthis.btnPosition = this.schema.groups[groups_size - 1].fields[0].attributes.input.button_position;\n\n\t\t// insert captcha before the submit button\n\t\tvar flo_captcha = {\n\t\t\ttype: \"flocaptcha\",\n\t\t\tlabel: \"\",\n\t\t\tmodel: \"flocaptcha\"\n\t\t};\n\n\t\tif (forms_options['enable-captcha'] && forms_options['enable-captcha'] != '0') {\n\t\t\tthis.schema.groups[groups_size - 1].fields.splice(0, 0, flo_captcha);\n\t\t}\n\n\t\t/*utm_campaign colection experiment*/\n\t\t// console.log(this.schema.groups);\n\t\t// console.log(this.model);\n\t\t// var urlParams = new URLSearchParams(window.location.search);\n\t\t// console.log('urlParams',urlParams);\n\t\t// if(typeof this.schema.groups != 'undefined') {\n\t\t// \tlet that = this;\n\t\t//\n\t\t// \tthis.schema.groups.forEach(function (group, group_index) {\n\t\t//\n\t\t// \t\tif(typeof group.fields  != 'undefined') {\n\t\t// \t\t\tgroup.fields.forEach(function (field) {\n\t\t// \t\t\t\tif(field.label == 'utm_campaign'){\n\t\t// \t\t\t\t\t//field.label\n\t\t// \t\t\t\t\tthat.model[field.model] = \"test_utm_campaign\"\n\t\t// \t\t\t\t}\n\t\t// \t\t\t})\n\t\t// \t\t}\n\t\t// \t})\n\t\t// }\n\t},\n\n\n\t/**\n  * Check the conditonal logic settings for the passed field and add\n  * or remove the class that hides a given field\n  */\n\tmethods: {\n\t\tonValidated: function onValidated(isValid, errors) {\n\t\t\t//console.log(\"Validation result: \", isValid, \", Errors:\", errors);\n\n\t\t\tif (!isValid) {\n\t\t\t\t// for any field which is invalid we will check its classes\n\n\t\t\t\tvar field_ids_to_remove = [];\n\t\t\t\terrors.forEach(function (error, error_index) {\n\t\t\t\t\tvar field_classes = error.field.styleClasses;\n\n\t\t\t\t\tif (field_classes.search('hidden-field') != -1) {\n\t\t\t\t\t\t// if the field has the class 'hidden-field', we ignore any validation errors\n\n\t\t\t\t\t\tfield_ids_to_remove.push(error.field.field_id);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tfield_ids_to_remove.forEach(function (err_field_id, err_field_id_index) {\n\n\t\t\t\t\t// use reducer to remove\n\t\t\t\t\terrors.reduce(function (list, current_error, index) {\n\t\t\t\t\t\tif (current_error.field.field_id == err_field_id) list.push(index);\n\t\t\t\t\t\treturn list;\n\t\t\t\t\t}, []).reverse().forEach(function (index) {\n\t\t\t\t\t\terrors.splice(index, 1); // remove the error found by the reducer that has the field_id equal to the current iteration err_field_id\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (!errors.length) {\n\t\t\t\t\t// if there are no errors, set isValid to true\n\t\t\t\t\tthis.isValid = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.isValid = isValid;\n\t\t\t\t}\n\n\t\t\t\tthis.validationErrors = errors;\n\t\t\t} else {\n\t\t\t\tthis.isValid = isValid;\n\t\t\t\tthis.validationErrors = errors;\n\t\t\t}\n\t\t},\n\n\n\t\tcondLogicClass: function condLogicClass(field) {\n\n\t\t\tvar that = this;\n\t\t\tvar field_logic_obj = []; // store here the truth evaluation from each conditonal logic group\n\n\t\t\tif (typeof field.attributes !== 'undefined' && field.attributes.input.enable_conditional_logic) {\n\t\t\t\t// cond logic enabled\n\n\t\t\t\t// conditional logic groups\n\t\t\t\tvar cl_groups = field.attributes.input.conditional_logic_groups;\n\n\t\t\t\tcl_groups.forEach(function (cl_group, cl_group_index) {\n\t\t\t\t\tvar logic_obj = [];\n\n\t\t\t\t\tcl_group.rules.forEach(function (rule, rule_index) {\n\t\t\t\t\t\tvar rule_evaluation = that.checkCondLogicPropertyToValue(rule);\n\n\t\t\t\t\t\tlogic_obj.push({ 'truth': rule_evaluation, 'next_operator': rule.next_rule_operator });\n\t\t\t\t\t});\n\t\t\t\t\t// console.log(logic_obj);\n\t\t\t\t\t// console.log(that.evaluateTruth(logic_obj))\n\n\t\t\t\t\tif (cl_group.next_group_operator == 'and' || cl_group.next_group_operator == '&amp;&amp;') {\n\t\t\t\t\t\tcl_group.next_group_operator = ' && ';\n\t\t\t\t\t}\n\n\t\t\t\t\tfield_logic_obj.push({\n\t\t\t\t\t\t'truth': that.evaluateTruth(logic_obj),\n\t\t\t\t\t\t'next_operator': cl_group.next_group_operator\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t//console.log('Overall: ',that.evaluateTruth(field_logic_obj) )\n\n\t\t\t\tvar current_field_class = field.styleClasses,\n\t\t\t\t    updated_field_class = '';\n\n\t\t\t\tif (that.evaluateTruth(field_logic_obj)) {\n\t\t\t\t\t// remove hidden class\n\t\t\t\t\tupdated_field_class = current_field_class.replace(\"hidden-field\", \"\");\n\t\t\t\t} else {\n\t\t\t\t\t// add hidden class\n\t\t\t\t\tif (!current_field_class.includes('hidden-field')) {\n\t\t\t\t\t\tupdated_field_class = current_field_class + ' hidden-field';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdated_field_class = current_field_class;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfield.styleClasses = updated_field_class;\n\t\t\t}\n\t\t},\n\n\t\tcheckConditionalLogicClass: function checkConditionalLogicClass() {\n\t\t\tvar that = this;\n\n\t\t\tif (typeof this.schema.groups != 'undefined') {\n\n\t\t\t\tthis.schema.groups.forEach(function (group, group_index) {\n\n\t\t\t\t\tif (typeof group.fields != 'undefined') {\n\t\t\t\t\t\tgroup.fields.forEach(function (field) {\n\t\t\t\t\t\t\tthat.condLogicClass(field);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\tevaluateTruth: function evaluateTruth(logic_obj) {\n\t\t\tvar truth_str = '';\n\t\t\tlogic_obj.forEach(function (logic_operator, index) {\n\t\t\t\ttruth_str += logic_operator.truth;\n\t\t\t\tif (index != logic_obj.length - 1) {\n\n\t\t\t\t\tif (logic_operator.next_operator == '&amp;&amp;' || logic_operator.next_operator == 'and') {\n\t\t\t\t\t\tlogic_operator.next_operator = '&& ';\n\t\t\t\t\t}\n\n\t\t\t\t\ttruth_str += \" \" + logic_operator.next_operator;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn eval(truth_str);\n\t\t},\n\n\t\t/**\n   *\n   * Having a conditional logic rule, we take it's value and the rule property, and check against the model value\n   *\n   */\n\n\t\tcheckCondLogicPropertyToValue: function checkCondLogicPropertyToValue(rule) {\n\t\t\tvar model = this.model; // model - where the for field's values are stored\n\t\t\tvar field_model_val = ''; // default init value\n\t\t\tvar properties_maping = { 'is': '===', 'is_not': '!==', 'greater_than': '>', 'less_than': '<', 'contains': 'contains', 'starts_with': 'starts with', 'ends_with': 'ends with' };\n\n\t\t\tif (typeof this.model['field_' + rule.rule_select] != 'undefined') {\n\t\t\t\tfield_model_val = this.model['field_' + rule.rule_select];\n\t\t\t}\n\n\t\t\tswitch (rule.rule_property) {\n\t\t\t\tcase 'contains':\n\t\t\t\t\tif (typeof field_model_val != 'undefined' && field_model_val != '' && field_model_val != null && field_model_val.includes(rule.rule_input)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'starts_with':\n\t\t\t\t\tif (field_model_val.toString().startsWith(rule.rule_input)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ends_with':\n\t\t\t\t\tif (field_model_val.toString().endsWith(rule.rule_input)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar rule_property = properties_maping[rule.rule_property];\n\n\t\t\t\t\t// we have 'NaN' when a 'number' field is used and something is entered, then the field value is removed\n\t\t\t\t\tif (field_model_val == null || field_model_val.toString() == 'NaN') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = void 0;\n\n\t\t\t\t\t// for the checklist elements we have a special case because all the selected values are in an array\n\t\t\t\t\tif (Array.isArray(field_model_val) && field_model_val.length > 1) {\n\t\t\t\t\t\t// we have a checkbox list\n\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tfield_model_val.forEach(function (list_elem_val) {\n\n\t\t\t\t\t\t\tvar list_elem_comparision = eval('\"' + (list_elem_val.toString().toLowerCase() + '\"' + ' ' + rule_property + ' \"' + rule.rule_input.toString().toLowerCase() + '\"'));\n\n\t\t\t\t\t\t\tif (list_elem_comparision) {\n\t\t\t\t\t\t\t\t// if at least one of the checklist values coresponds to the selected criteria, we consider that we have matched the condition\n\t\t\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = eval('\"' + (field_model_val.toString().toLowerCase() + '\"' + ' ' + rule_property + ' \"' + rule.rule_input.toString().toLowerCase() + '\"'));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t\treturn false; //return 'false' if we did not return anything until this moment\n\t\t},\n\n\t\tgetStylingClass: function getStylingClass(formStyling) {\n\t\t\tvar custom_classes = '';\n\n\t\t\tif (this.isProVersion == 1) {\n\t\t\t\tcustom_classes += ' ff-pro ';\n\n\t\t\t\tif (formStyling.use_custom_colors == 1) {\n\t\t\t\t\tcustom_classes += ' flo-form--custom-colors ';\n\t\t\t\t}\n\n\t\t\t\tif (formStyling.use_custom_fonts == 1) {\n\t\t\t\t\tcustom_classes += ' flo-form--custom-fonts ';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn custom_classes;\n\t\t},\n\n\t\trenderStylingData: function renderStylingData(formStyling) {\n\n\t\t\tif (this.isProVersion !== '1') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tvar data_string = '';\n\n\t\t\t// add in the array below the new elements which have font options\n\t\t\tvar fonOptionsData = ['label', 'input', 'hint', 'button'];\n\n\t\t\tfonOptionsData.forEach(function (fontOption, fontOption_index) {\n\t\t\t\tif (typeof formStyling[fontOption] !== 'undefined' && typeof formStyling[fontOption].font !== 'undefined') {\n\t\t\t\t\tdata_string += ' ; --data-' + fontOption + '-font: ' + formStyling[fontOption].font;\n\t\t\t\t}\n\n\t\t\t\tif (typeof formStyling[fontOption] !== 'undefined' && typeof formStyling[fontOption].font_size !== 'undefined') {\n\t\t\t\t\tdata_string += ' ; --data-' + fontOption + '-font-size: ' + formStyling[fontOption].font_size / 16 + 'rem ';\n\t\t\t\t}\n\n\t\t\t\tif (typeof formStyling[fontOption] !== 'undefined' && typeof formStyling[fontOption].letter_spacing !== 'undefined') {\n\t\t\t\t\tdata_string += ' ; --data-' + fontOption + '-letter-spacing: ' + formStyling[fontOption].letter_spacing + 'px ';\n\t\t\t\t}\n\n\t\t\t\tif (typeof formStyling[fontOption] !== 'undefined' && typeof formStyling[fontOption].line_height !== 'undefined') {\n\t\t\t\t\tdata_string += ' ; --data-' + fontOption + '-line-height: ' + formStyling[fontOption].line_height + 'em ';\n\t\t\t\t}\n\n\t\t\t\tif (typeof formStyling[fontOption] !== 'undefined' && typeof formStyling[fontOption].italic !== 'undefined' && formStyling[fontOption].italic == 1) {\n\t\t\t\t\tdata_string += ' ; --data-' + fontOption + '-italic: italic';\n\t\t\t\t}\n\t\t\t\tif (typeof formStyling[fontOption] !== 'undefined' && typeof formStyling[fontOption].bold !== 'undefined' && formStyling[fontOption].bold == 1) {\n\t\t\t\t\tdata_string += ' ; --data-' + fontOption + '-bold: bold';\n\t\t\t\t}\n\t\t\t\tif (typeof formStyling[fontOption] !== 'undefined' && typeof formStyling[fontOption].italic !== 'undefined' && formStyling[fontOption].underline == 1) {\n\t\t\t\t\tdata_string += ' ; --data-' + fontOption + '-underline: underline';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (typeof formStyling.button !== 'undefined' && typeof formStyling.button.padding_y !== 'undefined') {\n\t\t\t\tdata_string += ' ; --data-button-padding-y: ' + formStyling.button.padding_y + 'px ';\n\t\t\t}\n\n\t\t\tif (typeof formStyling.button !== 'undefined' && typeof formStyling.button.button_width !== 'undefined') {\n\t\t\t\tdata_string += ' ; --data-button-width: ' + formStyling.button.button_width + 'px ';\n\t\t\t}\n\n\t\t\tif (typeof formStyling.button !== 'undefined' && typeof formStyling.button.border_radius !== 'undefined') {\n\t\t\t\tdata_string += ' ; --data-button-border-radius: ' + formStyling.button.border_radius + 'px ';\n\t\t\t}\n\n\t\t\tif (typeof formStyling.button !== 'undefined' && typeof formStyling.button.border_width !== 'undefined') {\n\t\t\t\tdata_string += ' ; --data-button-border-width: ' + formStyling.button.border_width + 'px ';\n\t\t\t}\n\n\t\t\tif (typeof formStyling.button !== 'undefined' && typeof formStyling.button.border_width !== 'undefined') {\n\t\t\t\tdata_string += ' ; --data-button-border-width: ' + formStyling.button.border_width + 'px ';\n\t\t\t}\n\n\t\t\tif (typeof formStyling.button !== 'undefined' && typeof formStyling.button.line_height !== 'undefined') {\n\t\t\t\tdata_string += ' ; --data-button-line-height: ' + formStyling.button.line_height + 'em ';\n\t\t\t}\n\n\t\t\tif (typeof this.formSettings.padding !== 'undefined' && typeof this.formSettings.padding.top !== 'undefined') {\n\t\t\t\tdata_string += ' ; --data-form-padding-top: ' + this.formSettings.padding.top + 'px; ';\n\t\t\t}\n\t\t\tif (typeof this.formSettings.padding !== 'undefined' && typeof this.formSettings.padding.right !== 'undefined') {\n\t\t\t\tdata_string += ' --data-form-padding-right: ' + this.formSettings.padding.right + 'px; ';\n\t\t\t}\n\t\t\tif (typeof this.formSettings.padding !== 'undefined' && typeof this.formSettings.padding.bottom !== 'undefined') {\n\t\t\t\tdata_string += ' --data-form-padding-bottom: ' + this.formSettings.padding.bottom + 'px; ';\n\t\t\t}\n\t\t\tif (typeof this.formSettings.padding !== 'undefined' && typeof this.formSettings.padding.left !== 'undefined') {\n\t\t\t\tdata_string += ' --data-form-padding-left: ' + this.formSettings.padding.left + 'px; ';\n\t\t\t}\n\n\t\t\tif (typeof this.formSettings.mobile_padding !== 'undefined' && typeof this.formSettings.mobile_padding.top !== 'undefined') {\n\t\t\t\tdata_string += ' ; --data-form-mobile_padding-top: ' + this.formSettings.mobile_padding.top + 'px; ';\n\t\t\t}\n\t\t\tif (typeof this.formSettings.mobile_padding !== 'undefined' && typeof this.formSettings.mobile_padding.right !== 'undefined') {\n\t\t\t\tdata_string += ' --data-form-mobile_padding-right: ' + this.formSettings.mobile_padding.right + 'px; ';\n\t\t\t}\n\t\t\tif (typeof this.formSettings.mobile_padding !== 'undefined' && typeof this.formSettings.mobile_padding.bottom !== 'undefined') {\n\t\t\t\tdata_string += ' --data-form-mobile_padding-bottom: ' + this.formSettings.mobile_padding.bottom + 'px; ';\n\t\t\t}\n\t\t\tif (typeof this.formSettings.mobile_padding !== 'undefined' && typeof this.formSettings.mobile_padding.left !== 'undefined') {\n\t\t\t\tdata_string += ' --data-form-mobile_padding-left: ' + this.formSettings.mobile_padding.left + 'px; ';\n\t\t\t}\n\n\t\t\tif (typeof this.formSettings.styling !== 'undefined' && typeof this.formSettings.styling.formbg_color !== 'undefined') {\n\t\t\t\tdata_string += ' --data-form-bgcolor: ' + this.formSettings.styling.formbg_color + '; ';\n\t\t\t}\n\n\t\t\treturn data_string;\n\t\t},\n\n\t\tget_browser_meta: function get_browser_meta() {\n\t\t\tvar unknown = '-';\n\n\t\t\t// screen\n\t\t\tvar screenSize = '';\n\t\t\tif (screen.width) {\n\t\t\t\tvar width = screen.width ? screen.width : '';\n\t\t\t\tvar height = screen.height ? screen.height : '';\n\t\t\t\tscreenSize += '' + width + \" x \" + height;\n\t\t\t}\n\n\t\t\t// browser\n\t\t\tvar nVer = navigator.appVersion;\n\t\t\tvar nAgt = navigator.userAgent;\n\t\t\tvar browser = navigator.appName;\n\t\t\tvar version = '' + parseFloat(navigator.appVersion);\n\t\t\tvar majorVersion = parseInt(navigator.appVersion, 10);\n\t\t\tvar nameOffset, verOffset, ix;\n\n\t\t\t// Opera\n\t\t\tif ((verOffset = nAgt.indexOf('Opera')) != -1) {\n\t\t\t\tbrowser = 'Opera';\n\t\t\t\tversion = nAgt.substring(verOffset + 6);\n\t\t\t\tif ((verOffset = nAgt.indexOf('Version')) != -1) {\n\t\t\t\t\tversion = nAgt.substring(verOffset + 8);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Opera Next\n\t\t\tif ((verOffset = nAgt.indexOf('OPR')) != -1) {\n\t\t\t\tbrowser = 'Opera';\n\t\t\t\tversion = nAgt.substring(verOffset + 4);\n\t\t\t}\n\t\t\t// Edge\n\t\t\telse if ((verOffset = nAgt.indexOf('Edge')) != -1) {\n\t\t\t\t\tbrowser = 'Microsoft Edge';\n\t\t\t\t\tversion = nAgt.substring(verOffset + 5);\n\t\t\t\t}\n\t\t\t\t// MSIE\n\t\t\t\telse if ((verOffset = nAgt.indexOf('MSIE')) != -1) {\n\t\t\t\t\t\tbrowser = 'Microsoft Internet Explorer';\n\t\t\t\t\t\tversion = nAgt.substring(verOffset + 5);\n\t\t\t\t\t}\n\t\t\t\t\t// Chrome\n\t\t\t\t\telse if ((verOffset = nAgt.indexOf('Chrome')) != -1) {\n\t\t\t\t\t\t\tbrowser = 'Chrome';\n\t\t\t\t\t\t\tversion = nAgt.substring(verOffset + 7);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Safari\n\t\t\t\t\t\telse if ((verOffset = nAgt.indexOf('Safari')) != -1) {\n\t\t\t\t\t\t\t\tbrowser = 'Safari';\n\t\t\t\t\t\t\t\tversion = nAgt.substring(verOffset + 7);\n\t\t\t\t\t\t\t\tif ((verOffset = nAgt.indexOf('Version')) != -1) {\n\t\t\t\t\t\t\t\t\tversion = nAgt.substring(verOffset + 8);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Firefox\n\t\t\t\t\t\t\telse if ((verOffset = nAgt.indexOf('Firefox')) != -1) {\n\t\t\t\t\t\t\t\t\tbrowser = 'Firefox';\n\t\t\t\t\t\t\t\t\tversion = nAgt.substring(verOffset + 8);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// MSIE 11+\n\t\t\t\t\t\t\t\telse if (nAgt.indexOf('Trident/') != -1) {\n\t\t\t\t\t\t\t\t\t\tbrowser = 'Microsoft Internet Explorer';\n\t\t\t\t\t\t\t\t\t\tversion = nAgt.substring(nAgt.indexOf('rv:') + 3);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Other browsers\n\t\t\t\t\t\t\t\t\telse if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\n\t\t\t\t\t\t\t\t\t\t\tbrowser = nAgt.substring(nameOffset, verOffset);\n\t\t\t\t\t\t\t\t\t\t\tversion = nAgt.substring(verOffset + 1);\n\t\t\t\t\t\t\t\t\t\t\tif (browser.toLowerCase() == browser.toUpperCase()) {\n\t\t\t\t\t\t\t\t\t\t\t\tbrowser = navigator.appName;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t// trim the version string\n\t\t\tif ((ix = version.indexOf(';')) != -1) version = version.substring(0, ix);\n\t\t\tif ((ix = version.indexOf(' ')) != -1) version = version.substring(0, ix);\n\t\t\tif ((ix = version.indexOf(')')) != -1) version = version.substring(0, ix);\n\n\t\t\tmajorVersion = parseInt('' + version, 10);\n\t\t\tif (isNaN(majorVersion)) {\n\t\t\t\tversion = '' + parseFloat(navigator.appVersion);\n\t\t\t\tmajorVersion = parseInt(navigator.appVersion, 10);\n\t\t\t}\n\n\t\t\t// mobile version\n\t\t\tvar mobile = /Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(nVer);\n\n\t\t\t// cookie\n\t\t\tvar cookieEnabled = navigator.cookieEnabled ? true : false;\n\n\t\t\tif (typeof navigator.cookieEnabled == 'undefined' && !cookieEnabled) {\n\t\t\t\tdocument.cookie = 'testcookie';\n\t\t\t\tcookieEnabled = document.cookie.indexOf('testcookie') != -1 ? true : false;\n\t\t\t}\n\n\t\t\t// system\n\t\t\tvar os = unknown;\n\t\t\tvar clientStrings = [{ s: 'Windows 10', r: /(Windows 10.0|Windows NT 10.0)/ }, { s: 'Windows 8.1', r: /(Windows 8.1|Windows NT 6.3)/ }, { s: 'Windows 8', r: /(Windows 8|Windows NT 6.2)/ }, { s: 'Windows 7', r: /(Windows 7|Windows NT 6.1)/ }, { s: 'Windows Vista', r: /Windows NT 6.0/ }, { s: 'Windows Server 2003', r: /Windows NT 5.2/ }, { s: 'Windows XP', r: /(Windows NT 5.1|Windows XP)/ }, { s: 'Windows 2000', r: /(Windows NT 5.0|Windows 2000)/ }, { s: 'Windows ME', r: /(Win 9x 4.90|Windows ME)/ }, { s: 'Windows 98', r: /(Windows 98|Win98)/ }, { s: 'Windows 95', r: /(Windows 95|Win95|Windows_95)/ }, { s: 'Windows NT 4.0', r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/ }, { s: 'Windows CE', r: /Windows CE/ }, { s: 'Windows 3.11', r: /Win16/ }, { s: 'Android', r: /Android/ }, { s: 'Open BSD', r: /OpenBSD/ }, { s: 'Sun OS', r: /SunOS/ }, { s: 'Linux', r: /(Linux|X11)/ }, { s: 'iOS', r: /(iPhone|iPad|iPod)/ }, { s: 'Mac OS X', r: /Mac OS X/ }, { s: 'Mac OS', r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/ }, { s: 'QNX', r: /QNX/ }, { s: 'UNIX', r: /UNIX/ }, { s: 'BeOS', r: /BeOS/ }, { s: 'OS/2', r: /OS\\/2/ }, { s: 'Search Bot', r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/ }];\n\t\t\tfor (var id in clientStrings) {\n\t\t\t\tvar cs = clientStrings[id];\n\t\t\t\tif (cs.r.test(nAgt)) {\n\t\t\t\t\tos = cs.s;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar osVersion = unknown;\n\n\t\t\tif (/Windows/.test(os)) {\n\t\t\t\tosVersion = /Windows (.*)/.exec(os)[1];\n\t\t\t\tos = 'Windows';\n\t\t\t}\n\n\t\t\tswitch (os) {\n\t\t\t\tcase 'Mac OS X':\n\t\t\t\t\tosVersion = /Mac OS X (10[\\.\\_\\d]+)/.exec(nAgt)[1];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Android':\n\t\t\t\t\tosVersion = /Android ([\\.\\_\\d]+)/.exec(nAgt)[1];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'iOS':\n\t\t\t\t\tosVersion = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(nVer);\n\t\t\t\t\tosVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// flash (you'll need to include swfobject)\n\t\t\t/* script src=\"//ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js\" */\n\t\t\tvar flashVersion = 'no check';\n\t\t\tif (typeof swfobject != 'undefined') {\n\t\t\t\tvar fv = swfobject.getFlashPlayerVersion();\n\t\t\t\tif (fv.major > 0) {\n\t\t\t\t\tflashVersion = fv.major + '.' + fv.minor + ' r' + fv.release;\n\t\t\t\t} else {\n\t\t\t\t\tflashVersion = unknown;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar jscd = {\n\t\t\t\tscreen: screenSize,\n\t\t\t\tbrowser: browser,\n\t\t\t\tbrowserVersion: version,\n\t\t\t\tbrowserMajorVersion: majorVersion,\n\t\t\t\tmobile: mobile,\n\t\t\t\tos: os,\n\t\t\t\tosVersion: osVersion,\n\t\t\t\tcookies: cookieEnabled,\n\t\t\t\tflashVersion: flashVersion\n\t\t\t};\n\n\t\t\treturn jscd;\n\t\t}\n\n\t},\n\n\tcreated: function created() {\n\t\t/*===================================================\n  =         Delete the Remove Field Button            =\n  = \t\t\t\t\t\t\tfrom the front End  \t\t\t\t\t\t\t  =\n  = Remove Button =\n  ===================================================*/\n\t\tvar that = this;\n\n\t\tif (typeof this.schema.groups != 'undefined') {\n\t\t\tthis.schema.groups.forEach(function (group, group_index) {\n\n\t\t\t\tif (typeof group.fields != 'undefined') {\n\t\t\t\t\tvar elements_50 = 0,\n\t\t\t\t\t    elements_33 = 0,\n\t\t\t\t\t    elements_25 = 0;\n\n\t\t\t\t\tgroup.fields.forEach(function (field) {\n\n\t\t\t\t\t\t// Add helper classes for the 50%, 33% and 25% width elements\n\t\t\t\t\t\t// these classes will be used to set the paddings properly\n\t\t\t\t\t\tif (that.isProVersion == 1 && that.formSettings.padding.left != 0 && that.formSettings.padding.right != 0) {\n\t\t\t\t\t\t\t// should work only for PRO and when the left and right padding is NOT 0(zero)\n\t\t\t\t\t\t\tif (field.styleClasses.includes('width-50')) {\n\t\t\t\t\t\t\t\telements_50++;\n\n\t\t\t\t\t\t\t\tif (1 == elements_50 % 2) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-50-1 ';\n\t\t\t\t\t\t\t\t} else if (0 == elements_50 % 2) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-50-2 ';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (field.styleClasses.includes('width-33')) {\n\t\t\t\t\t\t\t\telements_33++;\n\t\t\t\t\t\t\t\tif (1 == elements_33 % 3) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-33-1 ';\n\t\t\t\t\t\t\t\t} else if (2 == elements_33 % 3) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-33-2 ';\n\t\t\t\t\t\t\t\t} else if (0 == elements_33 % 3) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-33-3 ';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (field.styleClasses.includes('width-25')) {\n\t\t\t\t\t\t\t\telements_25++;\n\t\t\t\t\t\t\t\tif (1 == elements_25 % 4) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-25-1 ';\n\t\t\t\t\t\t\t\t} else if (2 == elements_25 % 4) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-25-2 ';\n\t\t\t\t\t\t\t\t} else if (3 == elements_25 % 4) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-25-3 ';\n\t\t\t\t\t\t\t\t} else if (0 == elements_25 % 4) {\n\t\t\t\t\t\t\t\t\tfield.styleClasses = field.styleClasses + ' width-25-4 ';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// for the section break add the data attributes for the bottom and top margin\n\t\t\t\t\t\tif (field.type == 'label' && field.styleClasses.includes('flo-section-break')) {\n\t\t\t\t\t\t\tvar margin_top = void 0,\n\t\t\t\t\t\t\t    margin_bottom = void 0;\n\t\t\t\t\t\t\tif (typeof field.margin_top != 'undefined') {\n\t\t\t\t\t\t\t\tmargin_top = field.margin_top;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (typeof field.margin_bottom != 'undefined') {\n\t\t\t\t\t\t\t\tmargin_bottom = field.margin_bottom;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (typeof field.help != 'undefined') {\n\t\t\t\t\t\t\t\tfield.help = \"<hr class='flo-section-break' style='--data-margin-top: \" + margin_top + \"px; --data-margin-bottom: \" + margin_bottom + \"px; '>\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// for the Message Field:\n\t\t\t\t\t\t// initially we were storing the value for this field in the 'label' property\n\t\t\t\t\t\t// but that does not allow to use HTML markup.\n\t\t\t\t\t\t// therefore we decided to switch to 'help' property\n\t\t\t\t\t\tif (field.type == 'label' && !field.styleClasses.includes('flo-section-break')) {\n\t\t\t\t\t\t\tif (field.label && field.label != '') {\n\t\t\t\t\t\t\t\t// safely transfer the content from the 'label' to 'help' property and empty the 'label' property\n\t\t\t\t\t\t\t\tfield.help = field.label;\n\t\t\t\t\t\t\t\tfield.label = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (field.type != 'submit') {\n\n\t\t\t\t\t\t\tfield.buttons = ''; // set the buttons to empty string - this way we remove it\n\n\t\t\t\t\t\t\t// conditipnal login init\n\t\t\t\t\t\t\tthat.condLogicClass(field);\n\n\t\t\t\t\t\t\tif (field.type == 'upload') {\n\n\t\t\t\t\t\t\t\tvar this_field = field;\n\n\t\t\t\t\t\t\t\tfield.onChanged = function (model, newVal, oldVal, field) {\n\t\t\t\t\t\t\t\t\tthat.checkConditionalLogicClass();\n\n\t\t\t\t\t\t\t\t\tvar fi = document.getElementById('upload-' + newVal.field_id); // GET THE FILE INPUT.\n\n\t\t\t\t\t\t\t\t\t// VALIDATE OR CHECK IF ANY FILE IS SELECTED.\n\t\t\t\t\t\t\t\t\tif (fi.files.length > 0) {\n\n\t\t\t\t\t\t\t\t\t\t// RUN A LOOP TO CHECK EACH SELECTED FILE.\n\t\t\t\t\t\t\t\t\t\tfor (var i = 0; i <= fi.files.length - 1; i++) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar fsize = fi.files.item(i).size; // THE SIZE OF THE FILE.\n\n\t\t\t\t\t\t\t\t\t\t\tthis_field.validator = function (value) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (fsize > formData.max_upload_size) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn [\"Uploaded file has exceeded the allowed max upload size.\"];\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tif (this_field.required) {\n\t\t\t\t\t\t\t\t\t\t\tthis_field.validator = 'required';\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tthis_field.validator = function (value) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfield.onChanged = function (model, newVal, oldVal, field) {\n\t\t\t\t\t\t\t\t\tthat.checkConditionalLogicClass();\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check the required input attribute\n\t\t\t\t\t\t\tvar field_attr = field.attributes.input;\n\n\t\t\t\t\t\t\tif (typeof field_attr.required != 'undefined') {\n\t\t\t\t\t\t\t\tif (field_attr.required) {\n\t\t\t\t\t\t\t\t\t// the the required  attribute => set the 'required' property for the current field\n\t\t\t\t\t\t\t\t\tfield.required = field_attr.required;\n\n\t\t\t\t\t\t\t\t\tif (typeof field.validator != 'undefined') {\n\t\t\t\t\t\t\t\t\t\tif (!field.validator.includes('required')) {\n\t\t\t\t\t\t\t\t\t\t\tfield.validator.push(\"required\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tfield.validator = [\"required\"];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// if the label is empty we delete it\n\t\t\t\t\t\t\t\t\t// this is done especially to avoid shoing the '*' for required fields without the labels\n\t\t\t\t\t\t\t\t\t// exceptions are fields with field.help property -> Single checkboxes\n\t\t\t\t\t\t\t\t\tif (typeof field.label !== 'undefined' && field.label == '' && typeof field.help == 'undefined') {\n\t\t\t\t\t\t\t\t\t\t// console.log('field.label: ', field.label)\n\t\t\t\t\t\t\t\t\t\t// console.log('field.help: ', field.help)\n\t\t\t\t\t\t\t\t\t\tdelete field.label;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (field.type == 'input' && field.inputType == 'email') {\n\n\t\t\t\t\t\t\t\t\t\t// for some reason the required message shows up twice after the 'email' validator is pushed.\n\t\t\t\t\t\t\t\t\t\t// therefore we have to remove it\n\t\t\t\t\t\t\t\t\t\tvar required_validator_index = field.validator.indexOf('required'); // find the index\n\t\t\t\t\t\t\t\t\t\tif (required_validator_index > -1) {\n\t\t\t\t\t\t\t\t\t\t\tfield.validator.splice(required_validator_index, 1); // remove the required_validator\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tfield.validator.push('email');\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// for the checkbox we need a special case - to verify the value as well\n\t\t\t\t\t\t\t\t\tif (field.type == 'checkbox') {\n\n\t\t\t\t\t\t\t\t\t\tfield.validator = function (value) {\n\t\t\t\t\t\t\t\t\t\t\t//console.log('value: ', value);\n\n\t\t\t\t\t\t\t\t\t\t\tif (value !== true) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [\"This field is required!\"];\n\t\t\t\t\t\t\t\t\t\t\t\t//return [ wp.i18n.__( \"This field is required!\", 'flo-forms' ) ];\n\t\t\t\t\t\t\t\t\t\t\t\t//return [this.__(\"List Items\", \"flo-forms\")];\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (field.type == 'checklist') {\n\n\t\t\t\t\t\t\t\t\t\tfield.validator = function (value) {\n\n\t\t\t\t\t\t\t\t\t\t\tif (typeof value == 'undefined' || !value.length) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [\"This field is required!\"];\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (field.inputType == 'email') {\n\t\t\t\t\t\t\t\tif (typeof field.validator == 'undefined') {\n\t\t\t\t\t\t\t\t\tfield.validator = [\"email\"];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfield.onSubmit = function () {\n\n\t\t\t\t\t\t\t\tif (that.isValid) {\n\t\t\t\t\t\t\t\t\tvar $this = jQuery(that.$el).parents('.flo-form');\n\n\t\t\t\t\t\t\t\t\t$this.find('.flo-response').html('');\n\t\t\t\t\t\t\t\t\t$this.find('.flo-response-error').html('');\n\t\t\t\t\t\t\t\t\tjQuery('.g-recaptcha').removeClass('invalid');\n\t\t\t\t\t\t\t\t\t$this.find('.flo.overlay-loader').show();\n\t\t\t\t\t\t\t\t\tjQuery('.app-flo-forms .flo-response').html('');\n\n\t\t\t\t\t\t\t\t\tvar browser_meta = '';\n\t\t\t\t\t\t\t\t\t// temporarily disable this\n\t\t\t\t\t\t\t\t\t// browser_meta = JSON.stringify(that.get_browser_meta());\n\t\t\t\t\t\t\t\t\t// browser_meta = '&browser_meta='+browser_meta;\n\n\t\t\t\t\t\t\t\t\tjQuery(\".field-submit input\").prop('disabled', true);\n\n\t\t\t\t\t\t\t\t\t// prepare ajax data:\n\t\t\t\t\t\t\t\t\tvar data = new FormData($this[0]);\n\n\t\t\t\t\t\t\t\t\tdata.append(\"action\", \"flo_form_submit\");\n\n\t\t\t\t\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t\t\t\t\t\turl: formData.ajaxurl,\n\t\t\t\t\t\t\t\t\t\t//data: '&action=flo_form_submit&formNonce='+formData.formNonce+'&'+data+browser_meta,\n\t\t\t\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\t\t\t\ttype: 'POST',\n\t\t\t\t\t\t\t\t\t\tdataType: \"json\",\n\t\t\t\t\t\t\t\t\t\t//////////////////////\n\t\t\t\t\t\t\t\t\t\tprocessData: false, // Don't process the files\n\t\t\t\t\t\t\t\t\t\tcontentType: false, // Set content type to false as jQuery will tell the server its a query string request\n\t\t\t\t\t\t\t\t\t\t//////////////////////\n\t\t\t\t\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\t\t\t\t\tsuccess: function success(json) {\n\t\t\t\t\t\t\t\t\t\t\t$this.find('.flo.overlay-loader').hide();\n\t\t\t\t\t\t\t\t\t\t\t//console.log(json);\n\n\t\t\t\t\t\t\t\t\t\t\tif (json.error) {\n\t\t\t\t\t\t\t\t\t\t\t\t//$this.find('.flo-response').html(json.error);\n\t\t\t\t\t\t\t\t\t\t\t\t$this.find('.flo-response-error').html(json.error);\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (json.error.includes('Please complete captcha verification')) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tjQuery('.g-recaptcha').addClass('invalid');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if (json.confirmation_opt && json.confirmation_opt == 'text_confirmation') {\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (json.warning_msg) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t$this.find('.flo-response-error').html(json.warning_msg);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t$this.find('.flo-response').html(json.success_msg);\n\t\t\t\t\t\t\t\t\t\t\t\tthat.model = {}; // reset the form\n\n\t\t\t\t\t\t\t\t\t\t\t\t// reset the file fileds\n\t\t\t\t\t\t\t\t\t\t\t\t$this.find('.field-upload input[type=file]').val('');\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (jQuery('.g-recaptcha').length) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tgrecaptcha.reset(); // reset captcha\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t$this.find('.flo-response').show();\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery('.app-flo-forms .panel-body').addClass('response-mode');\n\t\t\t\t\t\t\t\t\t\t\t\t// jQuery('.app-flo-forms .flo-response').show();\n\n\t\t\t\t\t\t\t\t\t\t\t\tdocument.querySelector('.app-flo-forms_' + that.$attrs.form_id + ' .flo-response').scrollIntoView({\n\t\t\t\t\t\t\t\t\t\t\t\t\tbehavior: 'smooth'\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\t// hide the message in 5 sec\n\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t\t\t\t\t\tjQuery('.app-flo-forms .panel-body').removeClass('response-mode');\n\t\t\t\t\t\t\t\t\t\t\t\t\tjQuery('.app-flo-forms .flo-response').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t}, 7000);\n\t\t\t\t\t\t\t\t\t\t\t} else if (json.confirmation_opt && json.confirmation_opt == 'page_confirmation') {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location = json.success_page;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tjQuery(\".field-submit input\").prop('disabled', false);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t//console.log(that.validationErrors)\n\n\t\t\t\t\t\t\t\t\t// scroll to the element that did not pass the validation\n\n\t\t\t\t\t\t\t\t\tif (that.validationErrors.length) {\n\t\t\t\t\t\t\t\t\t\tdocument.querySelector('.fid_' + that.validationErrors[0].field.field_id).scrollIntoView({\n\t\t\t\t\t\t\t\t\t\t\tbehavior: 'smooth'\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/*=====  End of fix the Remove Field Button  ======*/\n\t}\n\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcHVibGljL3Z1ZS1jb21wb25lbnRzL0Zsb0Zvcm0udnVlPzdmMWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBMEJBOzs7O0FBTUE7Ozs7OztBQUxBOztBQUdBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOztBQUVBOztBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQSxzTkFEQTtBQUVBO0FBRkE7QUFJQTs7a0JBRUE7QUFDQTtBQUNBO0FBREEsRUFEQTs7QUFLQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esc0JBREE7QUFFQSx5QkFGQSxFQUVBO0FBQ0EsMEJBSEEsRUFHQTtBQUNBLG9CQUpBO0FBS0Esb0JBTEE7QUFNQSxrQkFOQTtBQU9BLHNCQVBBO0FBUUEsK0JBUkE7QUFTQTtBQUNBO0FBQ0EsMEJBREE7QUFFQSxrQkFGQTtBQUdBLG9DQUhBO0FBSUE7QUFKQTtBQURBO0FBVEE7O0FBbUJBO0FBQ0E7O0FBRUE7O0FBR0E7QUFDQTtBQUNBLG1FQUZBO0FBR0EscUJBSEE7QUFJQSx3Q0FKQTtBQUtBO0FBQ0EsNEJBREE7QUFFQSw4QkFGQTtBQUdBO0FBSEEsSUFMQTs7QUFXQTtBQUNBLGlCQURBO0FBRUEsZUFGQTtBQUdBLGVBSEE7QUFJQTtBQUpBLElBWEE7QUFpQkEsMkRBakJBO0FBa0JBLGlFQWxCQTtBQW1CQSxzQkFuQkE7QUFvQkEsK0JBcEJBO0FBcUJBLGlDQXJCQTtBQXNCQSw2QkF0QkE7QUF1QkEsb0NBdkJBO0FBd0JBLHNDQXhCQTtBQXlCQSwrQkF6QkE7QUEwQkEsa0NBMUJBO0FBMkJBLGlCQTNCQTtBQTRCQSx1QkE1QkE7QUE2QkE7QUE3QkE7QUFnQ0EsRUFuRUE7O0FBcUVBLFFBckVBLHFCQXFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFEQTtBQUVBLFlBRkE7QUFHQTtBQUhBOztBQU1BO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFqSEE7OztBQW1IQTs7OztBQUlBO0FBRUEsYUFGQSx1QkFFQSxPQUZBLEVBRUEsTUFGQSxFQUVBO0FBQ0E7O0FBRUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FSQTs7QUFXQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BSEEsRUFHQSxFQUhBLEVBR0EsT0FIQSxHQUdBLE9BSEEsQ0FHQTtBQUNBLDhCQURBLENBQ0E7QUFDQSxNQUxBO0FBUUEsS0FYQTs7QUFhQTtBQUFBO0FBQ0E7QUFDQSxLQUZBLE1BRUE7QUFDQTtBQUNBOztBQUVBO0FBRUEsSUFuQ0EsTUFtQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQTVDQTs7O0FBOENBOztBQUVBO0FBQ0EsNEJBSEEsQ0FHQTs7QUFFQTtBQUFBOztBQUVBO0FBQ0E7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBR0EsTUFOQTtBQU9BO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNENBREE7QUFFQTtBQUZBO0FBSUEsS0FyQkE7O0FBdUJBOztBQUVBO0FBQUEsUUFDQSx3QkFEQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxLQUhBLE1BR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUZBLE1BRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFFQTtBQUNBLEdBcEdBOztBQXNHQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BRkE7QUFHQTtBQUNBLEtBUEE7QUFRQTtBQUVBLEdBckhBOztBQXVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFWQTs7QUFZQTtBQUNBLEdBdElBOztBQXdJQTs7Ozs7O0FBTUE7QUFDQSwwQkFEQSxDQUNBO0FBQ0EsNEJBRkEsQ0FFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUFBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSxPQVBBO0FBU0EsTUFaQSxNQVlBO0FBQ0E7QUFDQTs7QUFFQTs7QUEzQ0E7O0FBK0NBLGdCQXhEQSxDQXdEQTtBQUVBLEdBeE1BOztBQTJNQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0EsR0E1TkE7O0FBOE5BOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBLElBN0JBOztBQWlDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBalVBOztBQW1VQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQSxRQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQSxTQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQSxVQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQSxXQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQSxZQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQSxhQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQSxjQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUNBLHdEQURBLEVBRUEsdURBRkEsRUFHQSxtREFIQSxFQUlBLG1EQUpBLEVBS0EsMkNBTEEsRUFNQSxpREFOQSxFQU9BLHFEQVBBLEVBUUEseURBUkEsRUFTQSxrREFUQSxFQVVBLDRDQVZBLEVBV0EsdURBWEEsRUFZQSx3RUFaQSxFQWFBLG9DQWJBLEVBY0EsaUNBZEEsRUFlQSw4QkFmQSxFQWdCQSwrQkFoQkEsRUFpQkEsMkJBakJBLEVBa0JBLGdDQWxCQSxFQW1CQSxxQ0FuQkEsRUFvQkEsZ0NBcEJBLEVBcUJBLDZEQXJCQSxFQXNCQSxzQkF0QkEsRUF1QkEsd0JBdkJBLEVBd0JBLHdCQXhCQSxFQXlCQSx5QkF6QkEsRUEwQkEsc0dBMUJBO0FBNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQVpBOztBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FGQSxNQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0Esc0JBREE7QUFFQSxvQkFGQTtBQUdBLDJCQUhBO0FBSUEscUNBSkE7QUFLQSxrQkFMQTtBQU1BLFVBTkE7QUFPQSx3QkFQQTtBQVFBLDBCQVJBO0FBU0E7QUFUQTs7QUFZQTtBQUNBOztBQXpmQSxFQXZIQTs7QUFvbkJBO0FBQ0E7Ozs7O0FBS0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQUE7QUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBRkEsTUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FGQSxNQUVBO0FBQ0E7QUFDQSxTQUZBLE1BRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBRkEsTUFFQTtBQUNBO0FBQ0EsU0FGQSxNQUVBO0FBQ0E7QUFDQSxTQUZBLE1BRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7O0FBRUEsMEJBRkEsQ0FFQTs7QUFFQTtBQUNBOztBQUVBOztBQUdBOztBQUVBO0FBQ0E7O0FBRUEsdUVBSEEsQ0FHQTs7QUFFQTtBQUNBOztBQUdBO0FBQ0E7O0FBRUEsNkNBRkEsQ0FFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsYUFGQSxNQUVBO0FBQ0E7QUFDQTtBQUNBLFlBUEE7QUFTQTtBQUNBLFVBbEJBLE1Ba0JBOztBQUVBO0FBQ0E7QUFDQSxXQUZBLE1BRUE7QUFDQTtBQUNBO0FBQ0EsWUFGQTtBQUdBO0FBRUE7QUFFQSxTQXBDQTtBQXFDQSxRQTFDQSxNQTBDQTtBQUNBO0FBQ0E7QUFDQSxTQUZBO0FBR0E7O0FBR0E7QUFDQTs7QUFHQTtBQUNBO0FBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBSkEsTUFJQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsNkVBSkEsQ0FJQTtBQUNBO0FBQ0EsK0RBREEsQ0FDQTtBQUNBOztBQUVBO0FBQ0E7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFKQSxNQUlBO0FBQ0E7QUFDQTtBQUVBLFdBWEE7QUFZQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsWUFGQSxNQUVBO0FBQ0E7QUFDQTtBQUVBLFdBUkE7QUFVQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLE9BdElBLE1Bc0lBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUdBOztBQUVBO0FBQ0EsK0JBREE7QUFFQTtBQUNBLG9CQUhBO0FBSUEsc0JBSkE7QUFLQSwwQkFMQTtBQU1BO0FBQ0EsNEJBUEEsRUFPQTtBQUNBLDRCQVJBLEVBUUE7QUFDQTtBQUNBLHNCQVZBO0FBV0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFHQSxZQVRBLE1BU0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBUEEsQ0FPQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0NBREEsQ0FDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBREE7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQSxhQUpBLEVBSUEsSUFKQTtBQU1BLFlBL0JBLE1BK0JBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQTVEQTtBQWdFQSxTQXRGQSxNQXNGQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFFQTtBQUVBLFFBckdBO0FBc0dBO0FBRUEsTUFsVEE7QUFtVEE7QUFDQSxJQXpUQTtBQTJUQTtBQUNBO0FBQ0E7O0FBMTdCQSxDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3B1YmxpYy92dWUtY29tcG9uZW50cy9GbG9Gb3JtLnZ1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cblxuXHQ8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiPlxuXG5cdFx0PGRpdiBjbGFzcz1cImZvcm0tcHJldmlldyB0b3BMYWJlbCBcIiB2LWJpbmQ6Y2xhc3M9XCJ7ICd0d28tY29sdW1ucyc6IHNjaGVtYS5ncm91cHMubGVuZ3RoID09IDMgfVwiPlxuXHRcdFx0PHZ1ZS1mb3JtLWdlbmVyYXRvciA6c2NoZW1hPVwic2NoZW1hXCIgOm1vZGVsPVwibW9kZWxcIiB0YWc9XCJzZWN0aW9uXCIgOm9wdGlvbnM9XCJmb3JtT3B0aW9uc1wiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDpzdHlsZT1cIictLWRhdGEtYnRuLWNvbG9yOiAnK2J0blRleHRDb2xvclZhbHVlKyc7IC0tZGF0YS1idG4tYmdjb2xvcjogJysgYnRuQmdDb2xvclZhbHVlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCsgJzsgLS1kYXRhLWJ0bi1ib3JkZXItY29sb3I6ICcrIGJ0bkJvcmRlckNvbG9yVmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KyAnOyAtLWRhdGEtYnRuLWNvbG9yLWhvdmVyOiAnK2J0blRleHRDb2xvclZhbHVlSG92ZXIrJzsgLS1kYXRhLWJ0bi1iZ2NvbG9yLWhvdmVyOiAnKyBidG5CZ0NvbG9yVmFsdWVIb3ZlclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQrICc7IC0tZGF0YS1idG4tYm9yZGVyLWNvbG9yLWhvdmVyOiAnKyBidG5Cb3JkZXJDb2xvclZhbHVlSG92ZXIgKyAnOyAtLWRhdGEtaW5wdXRiZy1jb2xvcjogJysgZm9ybVN0eWxpbmcuaW5wdXRiZ19jb2xvclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQrICc7IC0tZGF0YS1sYWJlbC1jb2xvcjogJyArIGZvcm1TdHlsaW5nLmxhYmVsX2NvbG9yICsgJzsgLS1kYXRhLWlucHV0LWNvbG9yOiAnKyBmb3JtU3R5bGluZy5pbnB1dF9jb2xvclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQrICc7IC0tZGF0YS1ib3JkZXItY29sb3I6ICcrIGZvcm1TdHlsaW5nLmJvcmRlcl9jb2xvciArICc7IC0tZGF0YS1wbGFjZWhvbGRlci1jb2xvcjogJysgZm9ybVN0eWxpbmcucGxhY2Vob2xkZXJfY29sb3Jcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KyAnOyAtLWRhdGEtaGludC1jb2xvcjogJysgZm9ybVN0eWxpbmcuaGludF9jb2xvciArIHJlbmRlclN0eWxpbmdEYXRhKGZvcm1TdHlsaW5nKSBcIlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDpjbGFzcz1cIididG4tcG9zaXRpb24tLScrYnRuUG9zaXRpb24gKyBnZXRTdHlsaW5nQ2xhc3MoZm9ybVN0eWxpbmcpXCIgQHZhbGlkYXRlZD1cIm9uVmFsaWRhdGVkXCI+PC92dWUtZm9ybS1nZW5lcmF0b3I+XG5cblx0XHRcdDx0ZXh0YXJlYSBjbGFzcz1cImZsby1mb3JtLWRhdGFcIiB2LWlmPVwibW9kZWxcIiB2LWh0bWw9XCJtb2RlbFwiIG5hbWU9XCJmbG8tZm9ybS1tb2RlbFwiPjwvdGV4dGFyZWE+XG5cdFx0ICA8dGV4dGFyZWEgY2xhc3M9XCJmbG8tZm9ybS1kYXRhXCIgdi1pZj1cInNjaGVtYS5ncm91cHNbMF0uZmllbGRzLmxlbmd0aFwiIHYtaHRtbD1cInNjaGVtYVwiIG5hbWU9XCJmbG8tZm9ybS1zY2hlbWFcIj48L3RleHRhcmVhPlxuXHRcdDwvZGl2PlxuXG5cdDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG53aW5kb3cuVnVlID0gVnVlO1xuXG5cbi8vaW1wb3J0IENpcmN1bGFySlNPTiBmcm9tIFwiY2lyY3VsYXItanNvblwiO1xuLy9pbXBvcnQgVnVlRm9ybUdlbmVyYXRvciBmcm9tIFwidnVlLWZvcm0tZ2VuZXJhdG9yXCI7XG5pbXBvcnQgVnVlRm9ybUdlbmVyYXRvciBmcm9tICcuLi8uLi9hZG1pbi92dWUtY29tcG9uZW50cy92dWUtZm9ybS1nZW5lcmF0b3InO1xuXG5WdWUudXNlKFZ1ZUZvcm1HZW5lcmF0b3IpO1xuXG4vL2NvbnNvbGUubG9nKEpTT04ucGFyc2UoZmxvX2Zvcm1fc2NoZW1hKSk7XG5cbi8qKlxuICpcbiAqIGN1c3RvbSBmaWVsZCBmb3IgZmxvIGNhcHRjaGEgLSBmbG9jYXB0Y2hhXG4gKlxuICovXG5pZih0eXBlb2YgZm9ybXNfb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcgJiYgIGZvcm1zX29wdGlvbnNbJ2VuYWJsZS1jYXB0Y2hhJ10gJiYgZm9ybXNfb3B0aW9uc1snZW5hYmxlLWNhcHRjaGEnXSAhPSAnMCcpIHtcblx0VnVlLmNvbXBvbmVudChcImZpZWxkLWZsb2NhcHRjaGFcIiwge1xuXHQgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwiZmxvLWctcmVjYXB0Y2hhXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgdGV4dC1hbGlnbjogY2VudGVyO1wiPiA8ZGl2PiA8ZGl2IHN0eWxlPVwiZGlzcGxheTogaW5saW5lLWJsb2NrXCIgY2xhc3M9XCJnLXJlY2FwdGNoYVwiIGRhdGEtc2l0ZWtleT1cIicrZm9ybXNfb3B0aW9ucy5nX3NpdGVfa2V5KydcIj48L2Rpdj4gPC9kaXY+IDwvZGl2PicsXG5cdCAgICBtaXhpbnM6IFsgVnVlRm9ybUdlbmVyYXRvci5hYnN0cmFjdEZpZWxkIF1cblx0fSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXHRjb21wb25lbnRzOiB7XG4gICAgICBcInZ1ZS1mb3JtLWdlbmVyYXRvclwiOiBWdWVGb3JtR2VuZXJhdG9yLmNvbXBvbmVudFxuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcblxuXHQgICAgLy9mbG9fZm9ybV9zY2hlbWEsIGFuZCBmbG9fZm9ybV9tb2RlbCBhbmQgZm9ybXNfb3B0aW9ucyBhcmUgbG9jYWxpemVkIGZyb20gUEhQXG5cblx0XHRcdC8vIGhvbmV5cG90IGlucHV0IHRvIGZpZ2h0IHNwYW1cblx0XHRcdGxldCBmbG9faG9uZXlwb3QgPSB7XG5cdFx0XHRcdFx0XCJmaWVsZF9pZFwiOiAnZmxvaHAnLFxuXHRcdFx0XHRcdFwibW9kZWxcIjogXCJmaWVsZF9mbG9ocFwiLCAvLyBmbG9ocCA9IGZsbyBob25leXBvdFxuXHRcdFx0XHRcdFwic3R5bGVDbGFzc2VzXCI6IFwiZmxvaHBcIiwgLy8gdGhlIGNsYXNzIHVzZWQgdG8gaGlkZSB0aGUgZmllbGRcblx0XHRcdFx0XHRcInBsYWNlaG9sZGVyXCI6IFwiXCIsXG5cdFx0XHRcdFx0XCJyZXF1aXJlZFwiOiBmYWxzZSxcblx0XHRcdFx0XHRcInR5cGVcIjogXCJpbnB1dFwiLFxuXHRcdFx0XHRcdFwiaW5wdXRUeXBlXCI6ICd0ZXh0Jyxcblx0XHRcdFx0XHRcImxhYmVsXCI6ICdGbG8gY29udGFjdCBwaG9uZScsXG5cdFx0XHRcdFx0XCJhdHRyaWJ1dGVzXCI6IHtcblx0ICAgICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGVuYWJsZV9jb25kaXRpb25hbF9sb2dpYzogZmFsc2UsXG4gICAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0bGV0IHRoZV9zY2hlbWEgPSBcdEpTT04ucGFyc2UoZXZhbCggJ2Zsb19mb3JtX3NjaGVtYV8nICsgdGhpcy4kYXR0cnMuZm9ybV9pZCkgKVxuXHRcdFx0bGV0IGZpcnN0R3JvdXBGaWVsZHMgPSB0aGVfc2NoZW1hLmdyb3Vwc1swXVxuXG5cdFx0XHRmaXJzdEdyb3VwRmllbGRzLmZpZWxkcy5wdXNoKGZsb19ob25leXBvdCk7XG5cblxuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICAvL21vZGVsOiB7fSxcblx0ICAgICAgICBtb2RlbDogSlNPTi5wYXJzZShldmFsKCdmbG9fZm9ybV9tb2RlbF8nICsgIHRoaXMuJGF0dHJzLmZvcm1faWQpICksXG5cdCAgICAgICAgc2NoZW1hOiB0aGVfc2NoZW1hLFxuXHRcdFx0XHRcdGlzUHJvVmVyc2lvbjogZm9ybURhdGEuaXNfcHJvX3ZlcnNpb24sXG5cdCAgICAgICAgZm9ybU9wdGlvbnM6IHtcblx0ICAgICAgICAgIHZhbGlkYXRlQWZ0ZXJMb2FkOiBmYWxzZSxcblx0XHRcdFx0XHRcdHZhbGlkYXRlQWZ0ZXJDaGFuZ2VkOiB0cnVlLFxuXHRcdFx0XHRcdFx0dmFsaWRhdGVEZWJvdW5jZVRpbWU6IDEyMDBcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZmllbGRzV2lkdGg6IHtcblx0ICAgICAgICAgICcxMDAlJzonMTAwJyxcblx0ICAgICAgICAgICc1MCUnOic1MCcsXG5cdCAgICAgICAgICAnMzMlJzonMzMnLFxuXHQgICAgICAgICAgJzI1JSc6JzI1J1xuXHQgICAgICAgIH0sXG5cdFx0XHRcdFx0Zm9ybVN0eWxpbmc6IGV2YWwoJ2Zvcm1fc3R5bGluZ18nICsgdGhpcy4kYXR0cnMuZm9ybV9pZCksXG5cdFx0XHRcdCAgZm9ybVNldHRpbmdzOiBldmFsKCdmbG9fZm9ybV9zZXR0aW5nc18nICsgdGhpcy4kYXR0cnMuZm9ybV9pZCksXG5cdCAgICAgICAgYnRuUG9zaXRpb246IFwiYXV0b1wiLFxuXHQgICAgICAgIGJ0blRleHRDb2xvclZhbHVlOiBcIiNmZmZmZmZcIixcblx0XHRcdFx0XHRidG5Cb3JkZXJDb2xvclZhbHVlOiBcIiMwMDAwMDBcIixcblx0ICAgICAgICBidG5CZ0NvbG9yVmFsdWU6IFwiIzAwMDAwMFwiLFxuXHRcdFx0XHRcdGJ0blRleHRDb2xvclZhbHVlSG92ZXI6IFwiI2ZmZmZmZlwiLFxuXHRcdFx0XHRcdGJ0bkJvcmRlckNvbG9yVmFsdWVIb3ZlcjogXCIjMDAwMDAwXCIsXG5cdFx0XHRcdFx0aW5wdXRiZ0NvbG9yVmFsdWU6IFwiI2ZmZmZmZlwiLFxuXHRcdFx0XHRcdGJ0bkJnQ29sb3JWYWx1ZUhvdmVyOiBcIiMwMDAwMDBcIixcblx0ICAgICAgICBpc1ZhbGlkOiBmYWxzZSxcblx0ICAgICAgICB2YWxpZGF0aW9uRXJyb3JzOiBbXSxcblx0ICAgICAgICBmb3Jtc09wdGlvbnM6IGZvcm1zX29wdGlvbnNcblx0ICAgIH1cblxuXHQgIH0sXG5cblx0ICBtb3VudGVkKCkge1xuXG5cdCAgICBsZXQgZ3JvdXBzX3NpemUgPSB0aGlzLnNjaGVtYS5ncm91cHMubGVuZ3RoXG5cdCAgICAvLyBpbml0aWFsaXplIHRoZSBTdWJtaXQgYnV0dG9uIHRleHQgY29sb3IgYW5kIGJnY29sb3JcblxuXHQgICAgdGhpcy5idG5UZXh0Q29sb3JWYWx1ZSA9IHRoaXMuc2NoZW1hLmdyb3Vwc1tncm91cHNfc2l6ZS0xXS5maWVsZHNbMF0uYXR0cmlidXRlcy5pbnB1dC50ZXh0X2NvbG9yXG5cdFx0XHR0aGlzLmJ0bkJvcmRlckNvbG9yVmFsdWUgPSB0aGlzLnNjaGVtYS5ncm91cHNbZ3JvdXBzX3NpemUtMV0uZmllbGRzWzBdLmF0dHJpYnV0ZXMuaW5wdXQuYm9yZGVyX2NvbG9yXG5cdCAgICB0aGlzLmJ0bkJnQ29sb3JWYWx1ZSA9IHRoaXMuc2NoZW1hLmdyb3Vwc1tncm91cHNfc2l6ZS0xXS5maWVsZHNbMF0uYXR0cmlidXRlcy5pbnB1dC5iZ19jb2xvclxuXHRcdFx0dGhpcy5idG5UZXh0Q29sb3JWYWx1ZUhvdmVyID0gdGhpcy5zY2hlbWEuZ3JvdXBzW2dyb3Vwc19zaXplLTFdLmZpZWxkc1swXS5hdHRyaWJ1dGVzLmlucHV0LnRleHRfY29sb3JfaG92ZXJcblx0XHRcdHRoaXMuYnRuQm9yZGVyQ29sb3JWYWx1ZUhvdmVyID0gdGhpcy5zY2hlbWEuZ3JvdXBzW2dyb3Vwc19zaXplLTFdLmZpZWxkc1swXS5hdHRyaWJ1dGVzLmlucHV0LmJvcmRlcl9jb2xvcl9ob3ZlclxuXHRcdFx0dGhpcy5idG5CZ0NvbG9yVmFsdWVIb3ZlciA9IHRoaXMuc2NoZW1hLmdyb3Vwc1tncm91cHNfc2l6ZS0xXS5maWVsZHNbMF0uYXR0cmlidXRlcy5pbnB1dC5iZ19jb2xvcl9ob3ZlclxuXHQgICAgdGhpcy5idG5Qb3NpdGlvbiA9IHRoaXMuc2NoZW1hLmdyb3Vwc1tncm91cHNfc2l6ZS0xXS5maWVsZHNbMF0uYXR0cmlidXRlcy5pbnB1dC5idXR0b25fcG9zaXRpb25cblxuXHQgICAgLy8gaW5zZXJ0IGNhcHRjaGEgYmVmb3JlIHRoZSBzdWJtaXQgYnV0dG9uXG5cdCAgICBsZXQgZmxvX2NhcHRjaGEgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICAgdHlwZTogXCJmbG9jYXB0Y2hhXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICAgbGFiZWw6IFwiXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICAgbW9kZWw6IFwiZmxvY2FwdGNoYVwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdGlmKGZvcm1zX29wdGlvbnNbJ2VuYWJsZS1jYXB0Y2hhJ10gJiYgZm9ybXNfb3B0aW9uc1snZW5hYmxlLWNhcHRjaGEnXSAhPSAnMCcpIHtcblx0XHRcdFx0dGhpcy5zY2hlbWEuZ3JvdXBzW2dyb3Vwc19zaXplLTFdLmZpZWxkcy5zcGxpY2UoMCwwLCBmbG9fY2FwdGNoYSlcblx0XHRcdH1cblxuXHRcdFx0Lyp1dG1fY2FtcGFpZ24gY29sZWN0aW9uIGV4cGVyaW1lbnQqL1xuXHQgICAgLy8gY29uc29sZS5sb2codGhpcy5zY2hlbWEuZ3JvdXBzKTtcblx0XHRcdC8vIGNvbnNvbGUubG9nKHRoaXMubW9kZWwpO1xuXHRcdFx0Ly8gdmFyIHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG5cdFx0XHQvLyBjb25zb2xlLmxvZygndXJsUGFyYW1zJyx1cmxQYXJhbXMpO1xuXHRcdFx0Ly8gaWYodHlwZW9mIHRoaXMuc2NoZW1hLmdyb3VwcyAhPSAndW5kZWZpbmVkJykge1xuXHRcdFx0Ly8gXHRsZXQgdGhhdCA9IHRoaXM7XG5cdFx0XHQvL1xuXHRcdFx0Ly8gXHR0aGlzLnNjaGVtYS5ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXAsIGdyb3VwX2luZGV4KSB7XG5cdFx0XHQvL1xuXHRcdFx0Ly8gXHRcdGlmKHR5cGVvZiBncm91cC5maWVsZHMgICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0XHQvLyBcdFx0XHRncm91cC5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcblx0XHRcdC8vIFx0XHRcdFx0aWYoZmllbGQubGFiZWwgPT0gJ3V0bV9jYW1wYWlnbicpe1xuXHRcdFx0Ly8gXHRcdFx0XHRcdC8vZmllbGQubGFiZWxcblx0XHRcdC8vIFx0XHRcdFx0XHR0aGF0Lm1vZGVsW2ZpZWxkLm1vZGVsXSA9IFwidGVzdF91dG1fY2FtcGFpZ25cIlxuXHRcdFx0Ly8gXHRcdFx0XHR9XG5cdFx0XHQvLyBcdFx0XHR9KVxuXHRcdFx0Ly8gXHRcdH1cblx0XHRcdC8vIFx0fSlcblx0XHRcdC8vIH1cblx0ICB9LFxuXG5cdCAgLyoqXG5cdCAgICogQ2hlY2sgdGhlIGNvbmRpdG9uYWwgbG9naWMgc2V0dGluZ3MgZm9yIHRoZSBwYXNzZWQgZmllbGQgYW5kIGFkZFxuXHQgICAqIG9yIHJlbW92ZSB0aGUgY2xhc3MgdGhhdCBoaWRlcyBhIGdpdmVuIGZpZWxkXG5cdCAgICovXG5cdCAgbWV0aG9kczoge1xuXG5cdFx0XHRvblZhbGlkYXRlZChpc1ZhbGlkLCBlcnJvcnMpIHtcblx0ICBcdFx0Ly9jb25zb2xlLmxvZyhcIlZhbGlkYXRpb24gcmVzdWx0OiBcIiwgaXNWYWxpZCwgXCIsIEVycm9yczpcIiwgZXJyb3JzKTtcblxuXHQgIFx0XHRpZighaXNWYWxpZCkgeyAvLyBmb3IgYW55IGZpZWxkIHdoaWNoIGlzIGludmFsaWQgd2Ugd2lsbCBjaGVjayBpdHMgY2xhc3Nlc1xuXG5cdCAgXHRcdFx0bGV0IGZpZWxkX2lkc190b19yZW1vdmUgPSBbXVxuXHQgIFx0XHRcdGVycm9ycy5mb3JFYWNoKChlcnJvciwgZXJyb3JfaW5kZXggKSA9PiB7XG5cdCAgXHRcdFx0XHRsZXQgZmllbGRfY2xhc3NlcyA9IGVycm9yLmZpZWxkLnN0eWxlQ2xhc3NlcztcblxuXHQgIFx0XHRcdFx0aWYoZmllbGRfY2xhc3Nlcy5zZWFyY2goJ2hpZGRlbi1maWVsZCcpICE9IC0xKSB7XG5cdFx0ICBcdFx0XHRcdC8vIGlmIHRoZSBmaWVsZCBoYXMgdGhlIGNsYXNzICdoaWRkZW4tZmllbGQnLCB3ZSBpZ25vcmUgYW55IHZhbGlkYXRpb24gZXJyb3JzXG5cblx0XHQgIFx0XHRcdFx0ZmllbGRfaWRzX3RvX3JlbW92ZS5wdXNoKGVycm9yLmZpZWxkLmZpZWxkX2lkKVxuXHRcdCAgXHRcdFx0fVxuXHQgIFx0XHRcdH0pXG5cblxuXHQgIFx0XHRcdGZpZWxkX2lkc190b19yZW1vdmUuZm9yRWFjaCgoZXJyX2ZpZWxkX2lkLCBlcnJfZmllbGRfaWRfaW5kZXggKSA9PiB7XG5cblx0ICBcdFx0XHRcdC8vIHVzZSByZWR1Y2VyIHRvIHJlbW92ZVxuXHQgIFx0XHRcdFx0ZXJyb3JzLnJlZHVjZShmdW5jdGlvbihsaXN0LCBjdXJyZW50X2Vycm9yLCBpbmRleCkge1xuXHRcdFx0XHRcdFx0ICAgIGlmIChjdXJyZW50X2Vycm9yLmZpZWxkLmZpZWxkX2lkID09IGVycl9maWVsZF9pZCkgbGlzdC5wdXNoKGluZGV4KTtcblx0XHRcdFx0XHRcdCAgICByZXR1cm4gbGlzdDtcblx0XHRcdFx0XHRcdH0sIFtdKS5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0XHRcdFx0ICAgIGVycm9ycy5zcGxpY2UoaW5kZXgsMSk7IC8vIHJlbW92ZSB0aGUgZXJyb3IgZm91bmQgYnkgdGhlIHJlZHVjZXIgdGhhdCBoYXMgdGhlIGZpZWxkX2lkIGVxdWFsIHRvIHRoZSBjdXJyZW50IGl0ZXJhdGlvbiBlcnJfZmllbGRfaWRcblx0XHRcdFx0XHRcdH0pO1xuXG5cblx0ICBcdFx0XHR9KVxuXG5cdCAgXHRcdFx0aWYoIWVycm9ycy5sZW5ndGgpeyAvLyBpZiB0aGVyZSBhcmUgbm8gZXJyb3JzLCBzZXQgaXNWYWxpZCB0byB0cnVlXG4gIFx0IFx0XHRcdFx0dGhpcy5pc1ZhbGlkID0gdHJ1ZVxuICBcdCBcdFx0XHR9ZWxzZXtcbiAgXHQgXHRcdFx0XHR0aGlzLmlzVmFsaWQgPSBpc1ZhbGlkXG4gIFx0IFx0XHRcdH1cblxuXHQgIFx0XHRcdHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IGVycm9yc1xuXG5cdCAgXHRcdH1lbHNle1xuXHQgIFx0XHRcdHRoaXMuaXNWYWxpZCA9IGlzVmFsaWRcbiAgXHQgXHRcdFx0dGhpcy52YWxpZGF0aW9uRXJyb3JzID0gZXJyb3JzXG5cdCAgXHRcdH1cblx0XHQgIH0sXG5cblx0ICBcdGNvbmRMb2dpY0NsYXNzOiBmdW5jdGlvbihmaWVsZCkge1xuXG5cdCAgXHRcdGxldCB0aGF0ID0gdGhpc1xuXHQgIFx0XHRsZXQgZmllbGRfbG9naWNfb2JqID0gW10gLy8gc3RvcmUgaGVyZSB0aGUgdHJ1dGggZXZhbHVhdGlvbiBmcm9tIGVhY2ggY29uZGl0b25hbCBsb2dpYyBncm91cFxuXG5cdCAgXHRcdGlmKCB0eXBlb2YgZmllbGQuYXR0cmlidXRlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZmllbGQuYXR0cmlidXRlcy5pbnB1dC5lbmFibGVfY29uZGl0aW9uYWxfbG9naWMpIHsgLy8gY29uZCBsb2dpYyBlbmFibGVkXG5cblx0ICBcdFx0XHQvLyBjb25kaXRpb25hbCBsb2dpYyBncm91cHNcblx0ICBcdFx0XHRsZXQgY2xfZ3JvdXBzID0gZmllbGQuYXR0cmlidXRlcy5pbnB1dC5jb25kaXRpb25hbF9sb2dpY19ncm91cHNcblxuXG5cdCAgXHRcdFx0Y2xfZ3JvdXBzLmZvckVhY2goIGZ1bmN0aW9uKGNsX2dyb3VwLCBjbF9ncm91cF9pbmRleCl7XG5cdCAgXHRcdFx0XHRsZXQgbG9naWNfb2JqID0gW11cblxuXHQgIFx0XHRcdFx0Y2xfZ3JvdXAucnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlLCBydWxlX2luZGV4KXtcblx0ICBcdFx0XHRcdFx0bGV0IHJ1bGVfZXZhbHVhdGlvbiA9IHRoYXQuY2hlY2tDb25kTG9naWNQcm9wZXJ0eVRvVmFsdWUocnVsZSlcblxuXHQgIFx0XHRcdFx0XHRsb2dpY19vYmoucHVzaCh7J3RydXRoJzpydWxlX2V2YWx1YXRpb24sICduZXh0X29wZXJhdG9yJyA6IHJ1bGUubmV4dF9ydWxlX29wZXJhdG9yIH0pXG5cblxuXHQgIFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGxvZ2ljX29iaik7XG5cdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyh0aGF0LmV2YWx1YXRlVHJ1dGgobG9naWNfb2JqKSlcblxuXHQgIFx0XHRcdFx0aWYoY2xfZ3JvdXAubmV4dF9ncm91cF9vcGVyYXRvciA9PSAnYW5kJyB8fCBjbF9ncm91cC5uZXh0X2dyb3VwX29wZXJhdG9yID09ICcmYW1wOyZhbXA7Jykge1xuXHRcdFx0XHRcdFx0XHRjbF9ncm91cC5uZXh0X2dyb3VwX29wZXJhdG9yID0gJyAmJiAnXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGZpZWxkX2xvZ2ljX29iai5wdXNoKHtcblx0XHRcdFx0XHRcdFx0J3RydXRoJzp0aGF0LmV2YWx1YXRlVHJ1dGgobG9naWNfb2JqKSxcblx0XHRcdFx0XHRcdFx0J25leHRfb3BlcmF0b3InIDogY2xfZ3JvdXAubmV4dF9ncm91cF9vcGVyYXRvclxuXHRcdFx0XHRcdFx0fSlcblx0ICBcdFx0XHR9KVxuXG5cdCAgXHRcdFx0Ly9jb25zb2xlLmxvZygnT3ZlcmFsbDogJyx0aGF0LmV2YWx1YXRlVHJ1dGgoZmllbGRfbG9naWNfb2JqKSApXG5cblx0ICBcdFx0XHRsZXQgY3VycmVudF9maWVsZF9jbGFzcyA9IGZpZWxkLnN0eWxlQ2xhc3Nlcyxcblx0ICBcdFx0XHRcdFx0dXBkYXRlZF9maWVsZF9jbGFzcyA9ICcnXG5cblx0ICBcdFx0XHRpZih0aGF0LmV2YWx1YXRlVHJ1dGgoZmllbGRfbG9naWNfb2JqKSkge1xuXHQgIFx0XHRcdFx0Ly8gcmVtb3ZlIGhpZGRlbiBjbGFzc1xuXHQgIFx0XHRcdFx0dXBkYXRlZF9maWVsZF9jbGFzcyA9IGN1cnJlbnRfZmllbGRfY2xhc3MucmVwbGFjZShcImhpZGRlbi1maWVsZFwiLCBcIlwiKVxuXHQgIFx0XHRcdH1lbHNle1xuXHQgIFx0XHRcdFx0Ly8gYWRkIGhpZGRlbiBjbGFzc1xuXHQgIFx0XHRcdFx0aWYoIWN1cnJlbnRfZmllbGRfY2xhc3MuaW5jbHVkZXMoJ2hpZGRlbi1maWVsZCcpKXtcblx0ICBcdFx0XHRcdFx0dXBkYXRlZF9maWVsZF9jbGFzcyA9IGN1cnJlbnRfZmllbGRfY2xhc3MgKyAnIGhpZGRlbi1maWVsZCc7XG5cdCAgXHRcdFx0XHR9ZWxzZXtcblx0ICBcdFx0XHRcdFx0dXBkYXRlZF9maWVsZF9jbGFzcyA9IGN1cnJlbnRfZmllbGRfY2xhc3Ncblx0ICBcdFx0XHRcdH1cblx0ICBcdFx0XHR9XG5cblx0ICBcdFx0XHRmaWVsZC5zdHlsZUNsYXNzZXMgPSB1cGRhdGVkX2ZpZWxkX2NsYXNzXG5cblx0ICBcdFx0fVxuXHQgIFx0fSxcblxuXHQgIFx0Y2hlY2tDb25kaXRpb25hbExvZ2ljQ2xhc3M6IGZ1bmN0aW9uKCkge1xuXHQgIFx0XHRsZXQgdGhhdCA9IHRoaXNcblxuXHQgIFx0XHRpZih0eXBlb2YgdGhpcy5zY2hlbWEuZ3JvdXBzICE9ICd1bmRlZmluZWQnKSB7XG5cblx0XHQgICAgICB0aGlzLnNjaGVtYS5ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXAsIGdyb3VwX2luZGV4KSB7XG5cblx0XHQgICAgICAgIGlmKHR5cGVvZiBncm91cC5maWVsZHMgICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0ICAgICAgICAgIGdyb3VwLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuXHRcdCAgICAgICAgICBcdHRoYXQuY29uZExvZ2ljQ2xhc3MoZmllbGQpXG5cdFx0ICAgICAgICAgIH0pXG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgfSlcblx0XHQgICAgfVxuXG5cdCAgXHR9LFxuXG5cdCAgXHRldmFsdWF0ZVRydXRoOiBmdW5jdGlvbihsb2dpY19vYmopIHtcblx0ICBcdFx0bGV0IHRydXRoX3N0ciA9ICcnXG5cdCAgXHRcdGxvZ2ljX29iai5mb3JFYWNoKCBmdW5jdGlvbiAobG9naWNfb3BlcmF0b3IsIGluZGV4KSB7XG5cdCAgXHRcdFx0dHJ1dGhfc3RyICs9IGxvZ2ljX29wZXJhdG9yLnRydXRoO1xuXHQgIFx0XHRcdGlmKGluZGV4ICE9IGxvZ2ljX29iai5sZW5ndGggLSAxKXtcblxuXHRcdFx0XHRcdFx0aWYobG9naWNfb3BlcmF0b3IubmV4dF9vcGVyYXRvciA9PSAnJmFtcDsmYW1wOycgfHwgbG9naWNfb3BlcmF0b3IubmV4dF9vcGVyYXRvciA9PSAnYW5kJykge1xuXHRcdFx0XHRcdFx0XHRsb2dpY19vcGVyYXRvci5uZXh0X29wZXJhdG9yID0gJyYmICdcblx0XHRcdFx0XHRcdH1cblxuXHQgIFx0XHRcdFx0dHJ1dGhfc3RyICs9IFwiIFwiICtsb2dpY19vcGVyYXRvci5uZXh0X29wZXJhdG9yXG5cdCAgXHRcdFx0fVxuXHQgIFx0XHR9KVxuXG5cdCAgXHRcdHJldHVybiBldmFsKHRydXRoX3N0cik7XG5cdCAgXHR9LFxuXG5cdCAgXHQvKipcblx0ICBcdCAqXG5cdCAgXHQgKiBIYXZpbmcgYSBjb25kaXRpb25hbCBsb2dpYyBydWxlLCB3ZSB0YWtlIGl0J3MgdmFsdWUgYW5kIHRoZSBydWxlIHByb3BlcnR5LCBhbmQgY2hlY2sgYWdhaW5zdCB0aGUgbW9kZWwgdmFsdWVcblx0ICBcdCAqXG5cdCAgXHQgKi9cblxuXHQgIFx0Y2hlY2tDb25kTG9naWNQcm9wZXJ0eVRvVmFsdWU6IGZ1bmN0aW9uKHJ1bGUpIHtcblx0ICBcdFx0bGV0IG1vZGVsID0gdGhpcy5tb2RlbCAvLyBtb2RlbCAtIHdoZXJlIHRoZSBmb3IgZmllbGQncyB2YWx1ZXMgYXJlIHN0b3JlZFxuXHQgIFx0XHRsZXQgZmllbGRfbW9kZWxfdmFsID0gJycgLy8gZGVmYXVsdCBpbml0IHZhbHVlXG5cdCAgXHRcdGxldCBwcm9wZXJ0aWVzX21hcGluZyA9IHsnaXMnIDogJz09PScsICdpc19ub3QnIDogJyE9PScsICdncmVhdGVyX3RoYW4nIDogJz4nLCAnbGVzc190aGFuJyA6ICc8JywgJ2NvbnRhaW5zJyA6ICdjb250YWlucycsICdzdGFydHNfd2l0aCcgOiAnc3RhcnRzIHdpdGgnLCAnZW5kc193aXRoJyA6ICdlbmRzIHdpdGgnfVxuXG5cdCAgXHRcdGlmKHR5cGVvZiB0aGlzLm1vZGVsWydmaWVsZF8nK3J1bGUucnVsZV9zZWxlY3RdICE9ICd1bmRlZmluZWQnKSB7XG5cdCAgXHRcdFx0ZmllbGRfbW9kZWxfdmFsID0gdGhpcy5tb2RlbFsnZmllbGRfJytydWxlLnJ1bGVfc2VsZWN0XVxuXHQgIFx0XHR9XG5cblx0ICBcdFx0c3dpdGNoKHJ1bGUucnVsZV9wcm9wZXJ0eSkge1xuXHRcdFx0ICAgIGNhc2UgJ2NvbnRhaW5zJzpcblx0XHRcdCAgICBcdCAgaWYoICh0eXBlb2YgZmllbGRfbW9kZWxfdmFsICE9ICd1bmRlZmluZWQnKSAmJiBmaWVsZF9tb2RlbF92YWwgIT0gJycgJiYgZmllbGRfbW9kZWxfdmFsICE9IG51bGwgJiYgZmllbGRfbW9kZWxfdmFsLmluY2x1ZGVzKHJ1bGUucnVsZV9pbnB1dCkgKXtcblx0XHRcdCAgICAgICAgXHRyZXR1cm4gdHJ1ZTtcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgYnJlYWs7XG5cdFx0XHQgICAgY2FzZSAnc3RhcnRzX3dpdGgnOlxuXHRcdFx0ICAgIFx0XHRpZihmaWVsZF9tb2RlbF92YWwudG9TdHJpbmcoKS5zdGFydHNXaXRoKHJ1bGUucnVsZV9pbnB1dCkpe1xuXHRcdFx0ICAgICAgICBcdHJldHVybiB0cnVlO1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICBicmVhaztcblx0XHRcdCAgICBjYXNlICdlbmRzX3dpdGgnOlxuXHRcdFx0ICAgICAgICBpZihmaWVsZF9tb2RlbF92YWwudG9TdHJpbmcoKS5lbmRzV2l0aChydWxlLnJ1bGVfaW5wdXQpKXtcblx0XHRcdCAgICAgICAgXHRyZXR1cm4gdHJ1ZTtcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgYnJlYWs7XG5cdFx0XHQgICAgZGVmYXVsdDpcblx0XHRcdCAgICBcdGxldCBydWxlX3Byb3BlcnR5ID0gcHJvcGVydGllc19tYXBpbmdbcnVsZS5ydWxlX3Byb3BlcnR5XVxuXG5cdFx0XHQgICAgXHQvLyB3ZSBoYXZlICdOYU4nIHdoZW4gYSAnbnVtYmVyJyBmaWVsZCBpcyB1c2VkIGFuZCBzb21ldGhpbmcgaXMgZW50ZXJlZCwgdGhlbiB0aGUgZmllbGQgdmFsdWUgaXMgcmVtb3ZlZFxuXHRcdFx0ICAgIFx0aWYoIGZpZWxkX21vZGVsX3ZhbCA9PSBudWxsIHx8IGZpZWxkX21vZGVsX3ZhbC50b1N0cmluZygpID09ICdOYU4nKXtcblx0XHRcdCAgICBcdFx0cmV0dXJuIGZhbHNlXG5cdFx0XHQgICAgXHR9XG5cblx0XHRcdCAgICBcdGxldCByZXN1bHRcblxuXHRcdFx0ICAgIFx0Ly8gZm9yIHRoZSBjaGVja2xpc3QgZWxlbWVudHMgd2UgaGF2ZSBhIHNwZWNpYWwgY2FzZSBiZWNhdXNlIGFsbCB0aGUgc2VsZWN0ZWQgdmFsdWVzIGFyZSBpbiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShmaWVsZF9tb2RlbF92YWwpICYmIGZpZWxkX21vZGVsX3ZhbC5sZW5ndGggPiAxKSB7IC8vIHdlIGhhdmUgYSBjaGVja2JveCBsaXN0XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gZmFsc2Vcblx0XHRcdFx0XHRcdFx0ZmllbGRfbW9kZWxfdmFsLmZvckVhY2goKGxpc3RfZWxlbV92YWwpID0+IHtcblxuXHRcdFx0XHRcdFx0XHRcdGxldCBsaXN0X2VsZW1fY29tcGFyaXNpb24gPSBldmFsKCAnXCInKyhsaXN0X2VsZW1fdmFsLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSsnXCInKycgJysgcnVsZV9wcm9wZXJ0eSArJyBcIicrcnVsZS5ydWxlX2lucHV0LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSArICdcIicpIClcblxuXHRcdFx0XHRcdFx0XHRcdGlmKGxpc3RfZWxlbV9jb21wYXJpc2lvbikgeyAvLyBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGNoZWNrbGlzdCB2YWx1ZXMgY29yZXNwb25kcyB0byB0aGUgc2VsZWN0ZWQgY3JpdGVyaWEsIHdlIGNvbnNpZGVyIHRoYXQgd2UgaGF2ZSBtYXRjaGVkIHRoZSBjb25kaXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdCA9IHRydWVcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pXG5cblx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQgPSBldmFsKCAnXCInKyhmaWVsZF9tb2RlbF92YWwudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKydcIicrJyAnKyBydWxlX3Byb3BlcnR5ICsnIFwiJytydWxlLnJ1bGVfaW5wdXQudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpICsgJ1wiJykgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0ICAgICAgcmV0dXJuIHJlc3VsdFxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2UgLy9yZXR1cm4gJ2ZhbHNlJyBpZiB3ZSBkaWQgbm90IHJldHVybiBhbnl0aGluZyB1bnRpbCB0aGlzIG1vbWVudFxuXG5cdCAgXHR9LFxuXG5cblx0XHRcdGdldFN0eWxpbmdDbGFzczogZnVuY3Rpb24oZm9ybVN0eWxpbmcpIHtcblx0XHRcdFx0bGV0IGN1c3RvbV9jbGFzc2VzID0gJydcblxuXHRcdFx0XHRpZih0aGlzLmlzUHJvVmVyc2lvbiA9PSAxKSB7XG5cdFx0XHRcdFx0Y3VzdG9tX2NsYXNzZXMgKz0gJyBmZi1wcm8gJ1xuXG5cdFx0XHRcdFx0aWYoZm9ybVN0eWxpbmcudXNlX2N1c3RvbV9jb2xvcnMgPT0gMSkge1xuXHRcdFx0XHRcdFx0Y3VzdG9tX2NsYXNzZXMgKz0gJyBmbG8tZm9ybS0tY3VzdG9tLWNvbG9ycyAnXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoZm9ybVN0eWxpbmcudXNlX2N1c3RvbV9mb250cyA9PSAxKSB7XG5cdFx0XHRcdFx0XHRjdXN0b21fY2xhc3NlcyArPSAnIGZsby1mb3JtLS1jdXN0b20tZm9udHMgJ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0cmV0dXJuIGN1c3RvbV9jbGFzc2VzXG5cdFx0XHR9LFxuXG5cdFx0XHRyZW5kZXJTdHlsaW5nRGF0YTogZnVuY3Rpb24oZm9ybVN0eWxpbmcpIHtcblxuXHRcdFx0XHRpZiggdGhpcy5pc1Byb1ZlcnNpb24gIT09ICcxJykge1xuXHRcdFx0XHRcdHJldHVybiAnJztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBkYXRhX3N0cmluZyA9ICcnXG5cblx0XHRcdFx0Ly8gYWRkIGluIHRoZSBhcnJheSBiZWxvdyB0aGUgbmV3IGVsZW1lbnRzIHdoaWNoIGhhdmUgZm9udCBvcHRpb25zXG5cdFx0XHRcdGxldCBmb25PcHRpb25zRGF0YSA9IFsnbGFiZWwnLCdpbnB1dCcsJ2hpbnQnLCdidXR0b24nXVxuXG5cdFx0XHRcdGZvbk9wdGlvbnNEYXRhLmZvckVhY2goKGZvbnRPcHRpb24sZm9udE9wdGlvbl9pbmRleCkgPT4ge1xuXHRcdFx0XHRcdGlmKCB0eXBlb2YgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBmb3JtU3R5bGluZ1tmb250T3B0aW9uXS5mb250ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0ZGF0YV9zdHJpbmcgKz0gJyA7IC0tZGF0YS0nK2ZvbnRPcHRpb24rJy1mb250OiAnICsgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0uZm9udDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZih0eXBlb2YgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBmb3JtU3R5bGluZ1tmb250T3B0aW9uXS5mb250X3NpemUgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIDsgLS1kYXRhLScrZm9udE9wdGlvbisnLWZvbnQtc2l6ZTogJyArIGZvcm1TdHlsaW5nW2ZvbnRPcHRpb25dLmZvbnRfc2l6ZS8xNiArICdyZW0gJztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiggdHlwZW9mIGZvcm1TdHlsaW5nW2ZvbnRPcHRpb25dICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0ubGV0dGVyX3NwYWNpbmcgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIDsgLS1kYXRhLScrZm9udE9wdGlvbisnLWxldHRlci1zcGFjaW5nOiAnICsgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0ubGV0dGVyX3NwYWNpbmcgKyAncHggJztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiggdHlwZW9mIGZvcm1TdHlsaW5nW2ZvbnRPcHRpb25dICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0ubGluZV9oZWlnaHQgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIDsgLS1kYXRhLScrZm9udE9wdGlvbisnLWxpbmUtaGVpZ2h0OiAnICsgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0ubGluZV9oZWlnaHQgKyAnZW0gJztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiggdHlwZW9mIGZvcm1TdHlsaW5nW2ZvbnRPcHRpb25dICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0uaXRhbGljICE9PSAndW5kZWZpbmVkJyAmJiBmb3JtU3R5bGluZ1tmb250T3B0aW9uXS5pdGFsaWMgPT0gMSkge1xuXHRcdFx0XHRcdFx0ZGF0YV9zdHJpbmcgKz0gJyA7IC0tZGF0YS0nK2ZvbnRPcHRpb24rJy1pdGFsaWM6IGl0YWxpYyc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKCB0eXBlb2YgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBmb3JtU3R5bGluZ1tmb250T3B0aW9uXS5ib2xkICE9PSAndW5kZWZpbmVkJyAmJiBmb3JtU3R5bGluZ1tmb250T3B0aW9uXS5ib2xkID09IDEpIHtcblx0XHRcdFx0XHRcdGRhdGFfc3RyaW5nICs9ICcgOyAtLWRhdGEtJytmb250T3B0aW9uKyctYm9sZDogYm9sZCc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKCB0eXBlb2YgZm9ybVN0eWxpbmdbZm9udE9wdGlvbl0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBmb3JtU3R5bGluZ1tmb250T3B0aW9uXS5pdGFsaWMgIT09ICd1bmRlZmluZWQnICYmIGZvcm1TdHlsaW5nW2ZvbnRPcHRpb25dLnVuZGVybGluZSA9PSAxKSB7XG5cdFx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIDsgLS1kYXRhLScrZm9udE9wdGlvbisnLXVuZGVybGluZTogdW5kZXJsaW5lJztcblx0XHRcdFx0XHR9XG5cblxuXG5cdFx0XHRcdH0pXG5cblxuXG5cdFx0XHRcdGlmKHR5cGVvZiBmb3JtU3R5bGluZy5idXR0b24gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBmb3JtU3R5bGluZy5idXR0b24ucGFkZGluZ195ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdGRhdGFfc3RyaW5nICs9ICcgOyAtLWRhdGEtYnV0dG9uLXBhZGRpbmcteTogJyArIGZvcm1TdHlsaW5nLmJ1dHRvbi5wYWRkaW5nX3kgKyAncHggJztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHR5cGVvZiBmb3JtU3R5bGluZy5idXR0b24gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBmb3JtU3R5bGluZy5idXR0b24uYnV0dG9uX3dpZHRoICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdGRhdGFfc3RyaW5nICs9ICcgOyAtLWRhdGEtYnV0dG9uLXdpZHRoOiAnICsgZm9ybVN0eWxpbmcuYnV0dG9uLmJ1dHRvbl93aWR0aCArICdweCAnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYodHlwZW9mIGZvcm1TdHlsaW5nLmJ1dHRvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGZvcm1TdHlsaW5nLmJ1dHRvbi5ib3JkZXJfcmFkaXVzICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdGRhdGFfc3RyaW5nICs9ICcgOyAtLWRhdGEtYnV0dG9uLWJvcmRlci1yYWRpdXM6ICcgKyBmb3JtU3R5bGluZy5idXR0b24uYm9yZGVyX3JhZGl1cyArICdweCAnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYodHlwZW9mIGZvcm1TdHlsaW5nLmJ1dHRvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGZvcm1TdHlsaW5nLmJ1dHRvbi5ib3JkZXJfd2lkdGggIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0ZGF0YV9zdHJpbmcgKz0gJyA7IC0tZGF0YS1idXR0b24tYm9yZGVyLXdpZHRoOiAnICsgZm9ybVN0eWxpbmcuYnV0dG9uLmJvcmRlcl93aWR0aCArICdweCAnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYodHlwZW9mIGZvcm1TdHlsaW5nLmJ1dHRvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGZvcm1TdHlsaW5nLmJ1dHRvbi5ib3JkZXJfd2lkdGghPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIDsgLS1kYXRhLWJ1dHRvbi1ib3JkZXItd2lkdGg6ICcgKyBmb3JtU3R5bGluZy5idXR0b24uYm9yZGVyX3dpZHRoICsgJ3B4ICc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiggdHlwZW9mIGZvcm1TdHlsaW5nLmJ1dHRvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGZvcm1TdHlsaW5nLmJ1dHRvbi5saW5lX2hlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIDsgLS1kYXRhLWJ1dHRvbi1saW5lLWhlaWdodDogJyArIGZvcm1TdHlsaW5nLmJ1dHRvbi5saW5lX2hlaWdodCArICdlbSAnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIHR5cGVvZiB0aGlzLmZvcm1TZXR0aW5ncy5wYWRkaW5nICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpcy5mb3JtU2V0dGluZ3MucGFkZGluZy50b3AhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIDsgLS1kYXRhLWZvcm0tcGFkZGluZy10b3A6ICcgKyB0aGlzLmZvcm1TZXR0aW5ncy5wYWRkaW5nLnRvcCsgJ3B4OyAnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKCB0eXBlb2YgdGhpcy5mb3JtU2V0dGluZ3MucGFkZGluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMuZm9ybVNldHRpbmdzLnBhZGRpbmcucmlnaHQhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIC0tZGF0YS1mb3JtLXBhZGRpbmctcmlnaHQ6ICcgKyB0aGlzLmZvcm1TZXR0aW5ncy5wYWRkaW5nLnJpZ2h0KyAncHg7ICc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoIHR5cGVvZiB0aGlzLmZvcm1TZXR0aW5ncy5wYWRkaW5nICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpcy5mb3JtU2V0dGluZ3MucGFkZGluZy5ib3R0b20hPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIC0tZGF0YS1mb3JtLXBhZGRpbmctYm90dG9tOiAnICsgdGhpcy5mb3JtU2V0dGluZ3MucGFkZGluZy5ib3R0b20rICdweDsgJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiggdHlwZW9mIHRoaXMuZm9ybVNldHRpbmdzLnBhZGRpbmcgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLmZvcm1TZXR0aW5ncy5wYWRkaW5nLmxlZnQhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIC0tZGF0YS1mb3JtLXBhZGRpbmctbGVmdDogJyArIHRoaXMuZm9ybVNldHRpbmdzLnBhZGRpbmcubGVmdCsgJ3B4OyAnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIHR5cGVvZiB0aGlzLmZvcm1TZXR0aW5ncy5tb2JpbGVfcGFkZGluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMuZm9ybVNldHRpbmdzLm1vYmlsZV9wYWRkaW5nLnRvcCE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdGRhdGFfc3RyaW5nICs9ICcgOyAtLWRhdGEtZm9ybS1tb2JpbGVfcGFkZGluZy10b3A6ICcgKyB0aGlzLmZvcm1TZXR0aW5ncy5tb2JpbGVfcGFkZGluZy50b3ArICdweDsgJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiggdHlwZW9mIHRoaXMuZm9ybVNldHRpbmdzLm1vYmlsZV9wYWRkaW5nICAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMuZm9ybVNldHRpbmdzLm1vYmlsZV9wYWRkaW5nLnJpZ2h0IT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0ZGF0YV9zdHJpbmcgKz0gJyAtLWRhdGEtZm9ybS1tb2JpbGVfcGFkZGluZy1yaWdodDogJyArIHRoaXMuZm9ybVNldHRpbmdzLm1vYmlsZV9wYWRkaW5nLnJpZ2h0KyAncHg7ICc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoIHR5cGVvZiB0aGlzLmZvcm1TZXR0aW5ncy5tb2JpbGVfcGFkZGluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMuZm9ybVNldHRpbmdzLm1vYmlsZV9wYWRkaW5nLmJvdHRvbSE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdGRhdGFfc3RyaW5nICs9ICcgLS1kYXRhLWZvcm0tbW9iaWxlX3BhZGRpbmctYm90dG9tOiAnICsgdGhpcy5mb3JtU2V0dGluZ3MubW9iaWxlX3BhZGRpbmcuYm90dG9tKyAncHg7ICc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoIHR5cGVvZiB0aGlzLmZvcm1TZXR0aW5ncy5tb2JpbGVfcGFkZGluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMuZm9ybVNldHRpbmdzLm1vYmlsZV9wYWRkaW5nLmxlZnQhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIC0tZGF0YS1mb3JtLW1vYmlsZV9wYWRkaW5nLWxlZnQ6ICcgKyB0aGlzLmZvcm1TZXR0aW5ncy5tb2JpbGVfcGFkZGluZy5sZWZ0KyAncHg7ICc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiggdHlwZW9mIHRoaXMuZm9ybVNldHRpbmdzLnN0eWxpbmcgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLmZvcm1TZXR0aW5ncy5zdHlsaW5nLmZvcm1iZ19jb2xvciAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkYXRhX3N0cmluZyArPSAnIC0tZGF0YS1mb3JtLWJnY29sb3I6ICcgKyB0aGlzLmZvcm1TZXR0aW5ncy5zdHlsaW5nLmZvcm1iZ19jb2xvciArICc7ICc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZGF0YV9zdHJpbmdcblx0XHRcdH0sXG5cblx0XHRcdGdldF9icm93c2VyX21ldGE6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0dmFyIHVua25vd24gPSAnLSc7XG5cblx0XHRcdFx0XHQvLyBzY3JlZW5cblx0XHRcdFx0XHR2YXIgc2NyZWVuU2l6ZSA9ICcnO1xuXHRcdFx0XHRcdGlmIChzY3JlZW4ud2lkdGgpIHtcblx0XHRcdFx0XHRcdHZhciB3aWR0aCA9IChzY3JlZW4ud2lkdGgpID8gc2NyZWVuLndpZHRoIDogJyc7XG5cdFx0XHRcdFx0XHR2YXIgaGVpZ2h0ID0gKHNjcmVlbi5oZWlnaHQpID8gc2NyZWVuLmhlaWdodCA6ICcnO1xuXHRcdFx0XHRcdFx0c2NyZWVuU2l6ZSArPSAnJyArIHdpZHRoICsgXCIgeCBcIiArIGhlaWdodDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBicm93c2VyXG5cdFx0XHRcdFx0dmFyIG5WZXIgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbjtcblx0XHRcdFx0XHR2YXIgbkFndCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5cdFx0XHRcdFx0dmFyIGJyb3dzZXIgPSBuYXZpZ2F0b3IuYXBwTmFtZTtcblx0XHRcdFx0XHR2YXIgdmVyc2lvbiA9ICcnICsgcGFyc2VGbG9hdChuYXZpZ2F0b3IuYXBwVmVyc2lvbik7XG5cdFx0XHRcdFx0dmFyIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KG5hdmlnYXRvci5hcHBWZXJzaW9uLCAxMCk7XG5cdFx0XHRcdFx0dmFyIG5hbWVPZmZzZXQsIHZlck9mZnNldCwgaXg7XG5cblx0XHRcdFx0XHQvLyBPcGVyYVxuXHRcdFx0XHRcdGlmICgodmVyT2Zmc2V0ID0gbkFndC5pbmRleE9mKCdPcGVyYScpKSAhPSAtMSkge1xuXHRcdFx0XHRcdFx0YnJvd3NlciA9ICdPcGVyYSc7XG5cdFx0XHRcdFx0XHR2ZXJzaW9uID0gbkFndC5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgNik7XG5cdFx0XHRcdFx0XHRpZiAoKHZlck9mZnNldCA9IG5BZ3QuaW5kZXhPZignVmVyc2lvbicpKSAhPSAtMSkge1xuXHRcdFx0XHRcdFx0XHR2ZXJzaW9uID0gbkFndC5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgOCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIE9wZXJhIE5leHRcblx0XHRcdFx0XHRpZiAoKHZlck9mZnNldCA9IG5BZ3QuaW5kZXhPZignT1BSJykpICE9IC0xKSB7XG5cdFx0XHRcdFx0XHRicm93c2VyID0gJ09wZXJhJztcblx0XHRcdFx0XHRcdHZlcnNpb24gPSBuQWd0LnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gRWRnZVxuXHRcdFx0XHRcdGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSBuQWd0LmluZGV4T2YoJ0VkZ2UnKSkgIT0gLTEpIHtcblx0XHRcdFx0XHRcdGJyb3dzZXIgPSAnTWljcm9zb2Z0IEVkZ2UnO1xuXHRcdFx0XHRcdFx0dmVyc2lvbiA9IG5BZ3Quc3Vic3RyaW5nKHZlck9mZnNldCArIDUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBNU0lFXG5cdFx0XHRcdFx0ZWxzZSBpZiAoKHZlck9mZnNldCA9IG5BZ3QuaW5kZXhPZignTVNJRScpKSAhPSAtMSkge1xuXHRcdFx0XHRcdFx0YnJvd3NlciA9ICdNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXInO1xuXHRcdFx0XHRcdFx0dmVyc2lvbiA9IG5BZ3Quc3Vic3RyaW5nKHZlck9mZnNldCArIDUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBDaHJvbWVcblx0XHRcdFx0XHRlbHNlIGlmICgodmVyT2Zmc2V0ID0gbkFndC5pbmRleE9mKCdDaHJvbWUnKSkgIT0gLTEpIHtcblx0XHRcdFx0XHRcdGJyb3dzZXIgPSAnQ2hyb21lJztcblx0XHRcdFx0XHRcdHZlcnNpb24gPSBuQWd0LnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA3KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gU2FmYXJpXG5cdFx0XHRcdFx0ZWxzZSBpZiAoKHZlck9mZnNldCA9IG5BZ3QuaW5kZXhPZignU2FmYXJpJykpICE9IC0xKSB7XG5cdFx0XHRcdFx0XHRicm93c2VyID0gJ1NhZmFyaSc7XG5cdFx0XHRcdFx0XHR2ZXJzaW9uID0gbkFndC5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgNyk7XG5cdFx0XHRcdFx0XHRpZiAoKHZlck9mZnNldCA9IG5BZ3QuaW5kZXhPZignVmVyc2lvbicpKSAhPSAtMSkge1xuXHRcdFx0XHRcdFx0XHR2ZXJzaW9uID0gbkFndC5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgOCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIEZpcmVmb3hcblx0XHRcdFx0XHRlbHNlIGlmICgodmVyT2Zmc2V0ID0gbkFndC5pbmRleE9mKCdGaXJlZm94JykpICE9IC0xKSB7XG5cdFx0XHRcdFx0XHRicm93c2VyID0gJ0ZpcmVmb3gnO1xuXHRcdFx0XHRcdFx0dmVyc2lvbiA9IG5BZ3Quc3Vic3RyaW5nKHZlck9mZnNldCArIDgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBNU0lFIDExK1xuXHRcdFx0XHRcdGVsc2UgaWYgKG5BZ3QuaW5kZXhPZignVHJpZGVudC8nKSAhPSAtMSkge1xuXHRcdFx0XHRcdFx0YnJvd3NlciA9ICdNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXInO1xuXHRcdFx0XHRcdFx0dmVyc2lvbiA9IG5BZ3Quc3Vic3RyaW5nKG5BZ3QuaW5kZXhPZigncnY6JykgKyAzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gT3RoZXIgYnJvd3NlcnNcblx0XHRcdFx0XHRlbHNlIGlmICgobmFtZU9mZnNldCA9IG5BZ3QubGFzdEluZGV4T2YoJyAnKSArIDEpIDwgKHZlck9mZnNldCA9IG5BZ3QubGFzdEluZGV4T2YoJy8nKSkpIHtcblx0XHRcdFx0XHRcdGJyb3dzZXIgPSBuQWd0LnN1YnN0cmluZyhuYW1lT2Zmc2V0LCB2ZXJPZmZzZXQpO1xuXHRcdFx0XHRcdFx0dmVyc2lvbiA9IG5BZ3Quc3Vic3RyaW5nKHZlck9mZnNldCArIDEpO1xuXHRcdFx0XHRcdFx0aWYgKGJyb3dzZXIudG9Mb3dlckNhc2UoKSA9PSBicm93c2VyLnRvVXBwZXJDYXNlKCkpIHtcblx0XHRcdFx0XHRcdFx0YnJvd3NlciA9IG5hdmlnYXRvci5hcHBOYW1lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyB0cmltIHRoZSB2ZXJzaW9uIHN0cmluZ1xuXHRcdFx0XHRcdGlmICgoaXggPSB2ZXJzaW9uLmluZGV4T2YoJzsnKSkgIT0gLTEpIHZlcnNpb24gPSB2ZXJzaW9uLnN1YnN0cmluZygwLCBpeCk7XG5cdFx0XHRcdFx0aWYgKChpeCA9IHZlcnNpb24uaW5kZXhPZignICcpKSAhPSAtMSkgdmVyc2lvbiA9IHZlcnNpb24uc3Vic3RyaW5nKDAsIGl4KTtcblx0XHRcdFx0XHRpZiAoKGl4ID0gdmVyc2lvbi5pbmRleE9mKCcpJykpICE9IC0xKSB2ZXJzaW9uID0gdmVyc2lvbi5zdWJzdHJpbmcoMCwgaXgpO1xuXG5cdFx0XHRcdFx0bWFqb3JWZXJzaW9uID0gcGFyc2VJbnQoJycgKyB2ZXJzaW9uLCAxMCk7XG5cdFx0XHRcdFx0aWYgKGlzTmFOKG1ham9yVmVyc2lvbikpIHtcblx0XHRcdFx0XHRcdHZlcnNpb24gPSAnJyArIHBhcnNlRmxvYXQobmF2aWdhdG9yLmFwcFZlcnNpb24pO1xuXHRcdFx0XHRcdFx0bWFqb3JWZXJzaW9uID0gcGFyc2VJbnQobmF2aWdhdG9yLmFwcFZlcnNpb24sIDEwKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBtb2JpbGUgdmVyc2lvblxuXHRcdFx0XHRcdHZhciBtb2JpbGUgPSAvTW9iaWxlfG1pbml8RmVubmVjfEFuZHJvaWR8aVAoYWR8b2R8aG9uZSkvLnRlc3QoblZlcik7XG5cblx0XHRcdFx0XHQvLyBjb29raWVcblx0XHRcdFx0XHR2YXIgY29va2llRW5hYmxlZCA9IChuYXZpZ2F0b3IuY29va2llRW5hYmxlZCkgPyB0cnVlIDogZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAodHlwZW9mIG5hdmlnYXRvci5jb29raWVFbmFibGVkID09ICd1bmRlZmluZWQnICYmICFjb29raWVFbmFibGVkKSB7XG5cdFx0XHRcdFx0XHRkb2N1bWVudC5jb29raWUgPSAndGVzdGNvb2tpZSc7XG5cdFx0XHRcdFx0XHRjb29raWVFbmFibGVkID0gKGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKCd0ZXN0Y29va2llJykgIT0gLTEpID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHN5c3RlbVxuXHRcdFx0XHRcdHZhciBvcyA9IHVua25vd247XG5cdFx0XHRcdFx0dmFyIGNsaWVudFN0cmluZ3MgPSBbXG5cdFx0XHRcdFx0XHR7czonV2luZG93cyAxMCcsIHI6LyhXaW5kb3dzIDEwLjB8V2luZG93cyBOVCAxMC4wKS99LFxuXHRcdFx0XHRcdFx0e3M6J1dpbmRvd3MgOC4xJywgcjovKFdpbmRvd3MgOC4xfFdpbmRvd3MgTlQgNi4zKS99LFxuXHRcdFx0XHRcdFx0e3M6J1dpbmRvd3MgOCcsIHI6LyhXaW5kb3dzIDh8V2luZG93cyBOVCA2LjIpL30sXG5cdFx0XHRcdFx0XHR7czonV2luZG93cyA3JywgcjovKFdpbmRvd3MgN3xXaW5kb3dzIE5UIDYuMSkvfSxcblx0XHRcdFx0XHRcdHtzOidXaW5kb3dzIFZpc3RhJywgcjovV2luZG93cyBOVCA2LjAvfSxcblx0XHRcdFx0XHRcdHtzOidXaW5kb3dzIFNlcnZlciAyMDAzJywgcjovV2luZG93cyBOVCA1LjIvfSxcblx0XHRcdFx0XHRcdHtzOidXaW5kb3dzIFhQJywgcjovKFdpbmRvd3MgTlQgNS4xfFdpbmRvd3MgWFApL30sXG5cdFx0XHRcdFx0XHR7czonV2luZG93cyAyMDAwJywgcjovKFdpbmRvd3MgTlQgNS4wfFdpbmRvd3MgMjAwMCkvfSxcblx0XHRcdFx0XHRcdHtzOidXaW5kb3dzIE1FJywgcjovKFdpbiA5eCA0LjkwfFdpbmRvd3MgTUUpL30sXG5cdFx0XHRcdFx0XHR7czonV2luZG93cyA5OCcsIHI6LyhXaW5kb3dzIDk4fFdpbjk4KS99LFxuXHRcdFx0XHRcdFx0e3M6J1dpbmRvd3MgOTUnLCByOi8oV2luZG93cyA5NXxXaW45NXxXaW5kb3dzXzk1KS99LFxuXHRcdFx0XHRcdFx0e3M6J1dpbmRvd3MgTlQgNC4wJywgcjovKFdpbmRvd3MgTlQgNC4wfFdpbk5UNC4wfFdpbk5UfFdpbmRvd3MgTlQpL30sXG5cdFx0XHRcdFx0XHR7czonV2luZG93cyBDRScsIHI6L1dpbmRvd3MgQ0UvfSxcblx0XHRcdFx0XHRcdHtzOidXaW5kb3dzIDMuMTEnLCByOi9XaW4xNi99LFxuXHRcdFx0XHRcdFx0e3M6J0FuZHJvaWQnLCByOi9BbmRyb2lkL30sXG5cdFx0XHRcdFx0XHR7czonT3BlbiBCU0QnLCByOi9PcGVuQlNEL30sXG5cdFx0XHRcdFx0XHR7czonU3VuIE9TJywgcjovU3VuT1MvfSxcblx0XHRcdFx0XHRcdHtzOidMaW51eCcsIHI6LyhMaW51eHxYMTEpL30sXG5cdFx0XHRcdFx0XHR7czonaU9TJywgcjovKGlQaG9uZXxpUGFkfGlQb2QpL30sXG5cdFx0XHRcdFx0XHR7czonTWFjIE9TIFgnLCByOi9NYWMgT1MgWC99LFxuXHRcdFx0XHRcdFx0e3M6J01hYyBPUycsIHI6LyhNYWNQUEN8TWFjSW50ZWx8TWFjX1Bvd2VyUEN8TWFjaW50b3NoKS99LFxuXHRcdFx0XHRcdFx0e3M6J1FOWCcsIHI6L1FOWC99LFxuXHRcdFx0XHRcdFx0e3M6J1VOSVgnLCByOi9VTklYL30sXG5cdFx0XHRcdFx0XHR7czonQmVPUycsIHI6L0JlT1MvfSxcblx0XHRcdFx0XHRcdHtzOidPUy8yJywgcjovT1NcXC8yL30sXG5cdFx0XHRcdFx0XHR7czonU2VhcmNoIEJvdCcsIHI6LyhudWhrfEdvb2dsZWJvdHxZYW1teWJvdHxPcGVuYm90fFNsdXJwfE1TTkJvdHxBc2sgSmVldmVzXFwvVGVvbWF8aWFfYXJjaGl2ZXIpL31cblx0XHRcdFx0XHRdO1xuXHRcdFx0XHRcdGZvciAodmFyIGlkIGluIGNsaWVudFN0cmluZ3MpIHtcblx0XHRcdFx0XHRcdHZhciBjcyA9IGNsaWVudFN0cmluZ3NbaWRdO1xuXHRcdFx0XHRcdFx0aWYgKGNzLnIudGVzdChuQWd0KSkge1xuXHRcdFx0XHRcdFx0XHRvcyA9IGNzLnM7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBvc1ZlcnNpb24gPSB1bmtub3duO1xuXG5cdFx0XHRcdFx0aWYgKC9XaW5kb3dzLy50ZXN0KG9zKSkge1xuXHRcdFx0XHRcdFx0b3NWZXJzaW9uID0gL1dpbmRvd3MgKC4qKS8uZXhlYyhvcylbMV07XG5cdFx0XHRcdFx0XHRvcyA9ICdXaW5kb3dzJztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzd2l0Y2ggKG9zKSB7XG5cdFx0XHRcdFx0XHRjYXNlICdNYWMgT1MgWCc6XG5cdFx0XHRcdFx0XHRcdG9zVmVyc2lvbiA9IC9NYWMgT1MgWCAoMTBbXFwuXFxfXFxkXSspLy5leGVjKG5BZ3QpWzFdO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSAnQW5kcm9pZCc6XG5cdFx0XHRcdFx0XHRcdG9zVmVyc2lvbiA9IC9BbmRyb2lkIChbXFwuXFxfXFxkXSspLy5leGVjKG5BZ3QpWzFdO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSAnaU9TJzpcblx0XHRcdFx0XHRcdFx0b3NWZXJzaW9uID0gL09TIChcXGQrKV8oXFxkKylfPyhcXGQrKT8vLmV4ZWMoblZlcik7XG5cdFx0XHRcdFx0XHRcdG9zVmVyc2lvbiA9IG9zVmVyc2lvblsxXSArICcuJyArIG9zVmVyc2lvblsyXSArICcuJyArIChvc1ZlcnNpb25bM10gfCAwKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gZmxhc2ggKHlvdSdsbCBuZWVkIHRvIGluY2x1ZGUgc3dmb2JqZWN0KVxuXHRcdFx0XHRcdC8qIHNjcmlwdCBzcmM9XCIvL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL3N3Zm9iamVjdC8yLjIvc3dmb2JqZWN0LmpzXCIgKi9cblx0XHRcdFx0XHR2YXIgZmxhc2hWZXJzaW9uID0gJ25vIGNoZWNrJztcblx0XHRcdFx0XHRpZiAodHlwZW9mIHN3Zm9iamVjdCAhPSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0dmFyIGZ2ID0gc3dmb2JqZWN0LmdldEZsYXNoUGxheWVyVmVyc2lvbigpO1xuXHRcdFx0XHRcdFx0aWYgKGZ2Lm1ham9yID4gMCkge1xuXHRcdFx0XHRcdFx0XHRmbGFzaFZlcnNpb24gPSBmdi5tYWpvciArICcuJyArIGZ2Lm1pbm9yICsgJyByJyArIGZ2LnJlbGVhc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlICB7XG5cdFx0XHRcdFx0XHRcdGZsYXNoVmVyc2lvbiA9IHVua25vd247XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0XHR2YXIganNjZCA9IHtcblx0XHRcdFx0XHRcdHNjcmVlbjogc2NyZWVuU2l6ZSxcblx0XHRcdFx0XHRcdGJyb3dzZXI6IGJyb3dzZXIsXG5cdFx0XHRcdFx0XHRicm93c2VyVmVyc2lvbjogdmVyc2lvbixcblx0XHRcdFx0XHRcdGJyb3dzZXJNYWpvclZlcnNpb246IG1ham9yVmVyc2lvbixcblx0XHRcdFx0XHRcdG1vYmlsZTogbW9iaWxlLFxuXHRcdFx0XHRcdFx0b3M6IG9zLFxuXHRcdFx0XHRcdFx0b3NWZXJzaW9uOiBvc1ZlcnNpb24sXG5cdFx0XHRcdFx0XHRjb29raWVzOiBjb29raWVFbmFibGVkLFxuXHRcdFx0XHRcdFx0Zmxhc2hWZXJzaW9uOiBmbGFzaFZlcnNpb25cblx0XHRcdFx0XHR9O1xuXG5cdCAgXHRcdHJldHVybiBqc2NkO1xuXHRcdFx0fSxcblxuXHQgIH0sXG5cblx0ICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgICAgPSAgICAgICAgIERlbGV0ZSB0aGUgUmVtb3ZlIEZpZWxkIEJ1dHRvbiAgICAgICAgICAgID1cblx0ICAgID0gXHRcdFx0XHRcdFx0XHRmcm9tIHRoZSBmcm9udCBFbmQgIFx0XHRcdFx0XHRcdFx0ICA9XG5cdCAgICA9IFJlbW92ZSBCdXR0b24gPVxuXHQgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblx0ICAgIGxldCB0aGF0ID0gdGhpcztcblxuXHQgICAgaWYodHlwZW9mIHRoaXMuc2NoZW1hLmdyb3VwcyAhPSAndW5kZWZpbmVkJykge1xuXHQgICAgICB0aGlzLnNjaGVtYS5ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXAsIGdyb3VwX2luZGV4KSB7XG5cblx0ICAgICAgICBpZih0eXBlb2YgZ3JvdXAuZmllbGRzICAhPSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0bGV0IGVsZW1lbnRzXzUwID0gMCwgZWxlbWVudHNfMzMgPSAwLCBlbGVtZW50c18yNSA9IDA7XG5cblx0ICAgICAgICAgIGdyb3VwLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuXG5cdCAgICAgICAgICBcdC8vIEFkZCBoZWxwZXIgY2xhc3NlcyBmb3IgdGhlIDUwJSwgMzMlIGFuZCAyNSUgd2lkdGggZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0Ly8gdGhlc2UgY2xhc3NlcyB3aWxsIGJlIHVzZWQgdG8gc2V0IHRoZSBwYWRkaW5ncyBwcm9wZXJseVxuXHRcdFx0XHRcdFx0XHRpZih0aGF0LmlzUHJvVmVyc2lvbiA9PSAxICYmIHRoYXQuZm9ybVNldHRpbmdzLnBhZGRpbmcubGVmdCAhPSAwICYmIHRoYXQuZm9ybVNldHRpbmdzLnBhZGRpbmcucmlnaHQgIT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIHNob3VsZCB3b3JrIG9ubHkgZm9yIFBSTyBhbmQgd2hlbiB0aGUgbGVmdCBhbmQgcmlnaHQgcGFkZGluZyBpcyBOT1QgMCh6ZXJvKVxuXHRcdFx0XHRcdFx0XHRcdGlmKGZpZWxkLnN0eWxlQ2xhc3Nlcy5pbmNsdWRlcygnd2lkdGgtNTAnKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbWVudHNfNTArKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoMSA9PSAoZWxlbWVudHNfNTAgJSAyKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZmllbGQuc3R5bGVDbGFzc2VzID0gZmllbGQuc3R5bGVDbGFzc2VzICsgJyB3aWR0aC01MC0xICc7XG5cdFx0XHRcdFx0XHRcdFx0XHR9ZWxzZSBpZigwID09IChlbGVtZW50c181MCAlIDIpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmaWVsZC5zdHlsZUNsYXNzZXMgPSBmaWVsZC5zdHlsZUNsYXNzZXMgKyAnIHdpZHRoLTUwLTIgJztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYoZmllbGQuc3R5bGVDbGFzc2VzLmluY2x1ZGVzKCd3aWR0aC0zMycpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtZW50c18zMysrO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYoMSA9PSAoZWxlbWVudHNfMzMgJSAzKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZmllbGQuc3R5bGVDbGFzc2VzID0gZmllbGQuc3R5bGVDbGFzc2VzICsgJyB3aWR0aC0zMy0xICc7XG5cdFx0XHRcdFx0XHRcdFx0XHR9ZWxzZSBpZigyID09IChlbGVtZW50c18zMyAlIDMpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmaWVsZC5zdHlsZUNsYXNzZXMgPSBmaWVsZC5zdHlsZUNsYXNzZXMgKyAnIHdpZHRoLTMzLTIgJztcblx0XHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmKDAgPT0gKGVsZW1lbnRzXzMzICUgMykgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZpZWxkLnN0eWxlQ2xhc3NlcyA9IGZpZWxkLnN0eWxlQ2xhc3NlcyArICcgd2lkdGgtMzMtMyAnO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZihmaWVsZC5zdHlsZUNsYXNzZXMuaW5jbHVkZXMoJ3dpZHRoLTI1JykpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW1lbnRzXzI1Kys7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZigxID09IChlbGVtZW50c18yNSAlIDQpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmaWVsZC5zdHlsZUNsYXNzZXMgPSBmaWVsZC5zdHlsZUNsYXNzZXMgKyAnIHdpZHRoLTI1LTEgJztcblx0XHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmKDIgPT0gKGVsZW1lbnRzXzI1ICUgNCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZpZWxkLnN0eWxlQ2xhc3NlcyA9IGZpZWxkLnN0eWxlQ2xhc3NlcyArICcgd2lkdGgtMjUtMiAnO1xuXHRcdFx0XHRcdFx0XHRcdFx0fWVsc2UgaWYoMyA9PSAoZWxlbWVudHNfMjUgJSA0KSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZmllbGQuc3R5bGVDbGFzc2VzID0gZmllbGQuc3R5bGVDbGFzc2VzICsgJyB3aWR0aC0yNS0zICc7XG5cdFx0XHRcdFx0XHRcdFx0XHR9ZWxzZSBpZigwID09IChlbGVtZW50c18yNSAlIDQpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmaWVsZC5zdHlsZUNsYXNzZXMgPSBmaWVsZC5zdHlsZUNsYXNzZXMgKyAnIHdpZHRoLTI1LTQgJztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyBmb3IgdGhlIHNlY3Rpb24gYnJlYWsgYWRkIHRoZSBkYXRhIGF0dHJpYnV0ZXMgZm9yIHRoZSBib3R0b20gYW5kIHRvcCBtYXJnaW5cblx0XHRcdFx0XHRcdFx0aWYoZmllbGQudHlwZSA9PSAnbGFiZWwnICYmIGZpZWxkLnN0eWxlQ2xhc3Nlcy5pbmNsdWRlcygnZmxvLXNlY3Rpb24tYnJlYWsnKSkge1xuXHRcdFx0XHRcdFx0XHRcdGxldCBtYXJnaW5fdG9wLCBtYXJnaW5fYm90dG9tXG5cdFx0XHRcdFx0XHRcdFx0aWYodHlwZW9mIGZpZWxkLm1hcmdpbl90b3AgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1hcmdpbl90b3AgPSBmaWVsZC5tYXJnaW5fdG9wXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmKHR5cGVvZiBmaWVsZC5tYXJnaW5fYm90dG9tICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRtYXJnaW5fYm90dG9tID0gZmllbGQubWFyZ2luX2JvdHRvbVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZih0eXBlb2YgZmllbGQuaGVscCAhPSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmllbGQuaGVscCA9IFwiPGhyIGNsYXNzPSdmbG8tc2VjdGlvbi1icmVhaycgc3R5bGU9Jy0tZGF0YS1tYXJnaW4tdG9wOiBcIittYXJnaW5fdG9wK1wicHg7IC0tZGF0YS1tYXJnaW4tYm90dG9tOiBcIittYXJnaW5fYm90dG9tK1wicHg7ICc+XCJcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyBmb3IgdGhlIE1lc3NhZ2UgRmllbGQ6XG5cdCAgICAgICAgICAgIC8vIGluaXRpYWxseSB3ZSB3ZXJlIHN0b3JpbmcgdGhlIHZhbHVlIGZvciB0aGlzIGZpZWxkIGluIHRoZSAnbGFiZWwnIHByb3BlcnR5XG5cdCAgICAgICAgICAgIC8vIGJ1dCB0aGF0IGRvZXMgbm90IGFsbG93IHRvIHVzZSBIVE1MIG1hcmt1cC5cblx0ICAgICAgICAgICAgLy8gdGhlcmVmb3JlIHdlIGRlY2lkZWQgdG8gc3dpdGNoIHRvICdoZWxwJyBwcm9wZXJ0eVxuXHRcdFx0XHRcdFx0XHRpZihmaWVsZC50eXBlID09ICdsYWJlbCcgJiYgIWZpZWxkLnN0eWxlQ2xhc3Nlcy5pbmNsdWRlcygnZmxvLXNlY3Rpb24tYnJlYWsnKSkge1xuXHRcdFx0XHRcdFx0XHRcdGlmKGZpZWxkLmxhYmVsICYmIGZpZWxkLmxhYmVsICE9ICcnKXtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIHNhZmVseSB0cmFuc2ZlciB0aGUgY29udGVudCBmcm9tIHRoZSAnbGFiZWwnIHRvICdoZWxwJyBwcm9wZXJ0eSBhbmQgZW1wdHkgdGhlICdsYWJlbCcgcHJvcGVydHlcblx0XHRcdFx0XHRcdFx0XHRcdGZpZWxkLmhlbHAgPSBmaWVsZC5sYWJlbFxuXHRcdFx0XHRcdFx0XHRcdFx0ZmllbGQubGFiZWwgPSAnJ1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0ICAgICAgICAgICAgaWYoZmllbGQudHlwZSAhPSAnc3VibWl0Jykge1xuXG5cdCAgICAgICAgICAgIFx0ZmllbGQuYnV0dG9ucyA9ICcnOyAvLyBzZXQgdGhlIGJ1dHRvbnMgdG8gZW1wdHkgc3RyaW5nIC0gdGhpcyB3YXkgd2UgcmVtb3ZlIGl0XG5cblx0ICAgICAgICAgICAgXHQvLyBjb25kaXRpcG5hbCBsb2dpbiBpbml0XG5cdCAgICAgICAgICAgIFx0dGhhdC5jb25kTG9naWNDbGFzcyhmaWVsZCk7XG5cblx0XHRcdFx0XHRcdFx0XHRpZihmaWVsZC50eXBlID09ICd1cGxvYWQnKSAge1xuXG5cblx0XHRcdFx0XHRcdFx0XHRcdHZhciB0aGlzX2ZpZWxkID0gZmllbGQ7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGZpZWxkLm9uQ2hhbmdlZCA9IGZ1bmN0aW9uKG1vZGVsLCBuZXdWYWwsIG9sZFZhbCwgZmllbGQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdC5jaGVja0NvbmRpdGlvbmFsTG9naWNDbGFzcygpXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGZpID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICd1cGxvYWQtJytuZXdWYWwuZmllbGRfaWQpOyAvLyBHRVQgVEhFIEZJTEUgSU5QVVQuXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gVkFMSURBVEUgT1IgQ0hFQ0sgSUYgQU5ZIEZJTEUgSVMgU0VMRUNURUQuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChmaS5maWxlcy5sZW5ndGggPiAwICkge1xuXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBSVU4gQSBMT09QIFRPIENIRUNLIEVBQ0ggU0VMRUNURUQgRklMRS5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBmaS5maWxlcy5sZW5ndGggLSAxOyBpKyspIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGZzaXplID0gZmkuZmlsZXMuaXRlbShpKS5zaXplOyAgICAgIC8vIFRIRSBTSVpFIE9GIFRIRSBGSUxFLlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXNfZmllbGQudmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKGZzaXplID4gZm9ybURhdGEubWF4X3VwbG9hZF9zaXplKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gW1wiVXBsb2FkZWQgZmlsZSBoYXMgZXhjZWVkZWQgdGhlIGFsbG93ZWQgbWF4IHVwbG9hZCBzaXplLlwiXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fWVsc2V7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZih0aGlzX2ZpZWxkLnJlcXVpcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzX2ZpZWxkLnZhbGlkYXRvciA9ICdyZXF1aXJlZCc7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzX2ZpZWxkLnZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWVsZC5vbkNoYW5nZWQgPSBmdW5jdGlvbihtb2RlbCwgbmV3VmFsLCBvbGRWYWwsIGZpZWxkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQuY2hlY2tDb25kaXRpb25hbExvZ2ljQ2xhc3MoKVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdFx0XHQgICAgLy8gY2hlY2sgdGhlIHJlcXVpcmVkIGlucHV0IGF0dHJpYnV0ZVxuXHRcdFx0XHRcdFx0ICAgIGxldCBmaWVsZF9hdHRyID0gZmllbGQuYXR0cmlidXRlcy5pbnB1dFxuXG5cblx0XHRcdFx0XHRcdCAgICBpZiggdHlwZW9mIGZpZWxkX2F0dHIucmVxdWlyZWQgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdCAgICBcdGlmKGZpZWxkX2F0dHIucmVxdWlyZWQpeyAvLyB0aGUgdGhlIHJlcXVpcmVkICBhdHRyaWJ1dGUgPT4gc2V0IHRoZSAncmVxdWlyZWQnIHByb3BlcnR5IGZvciB0aGUgY3VycmVudCBmaWVsZFxuXHRcdFx0XHRcdFx0ICAgIFx0XHRmaWVsZC5yZXF1aXJlZCA9IGZpZWxkX2F0dHIucmVxdWlyZWRcblxuXHRcdFx0XHRcdFx0ICAgIFx0XHRpZih0eXBlb2YgZmllbGQudmFsaWRhdG9yICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHQgICAgXHRcdFx0aWYoICFmaWVsZC52YWxpZGF0b3IuaW5jbHVkZXMoJ3JlcXVpcmVkJykgKSB7XG5cdFx0XHRcdFx0XHRcdCAgICBcdFx0XHRmaWVsZC52YWxpZGF0b3IucHVzaChcInJlcXVpcmVkXCIpXG5cdFx0XHRcdFx0XHRcdCAgICBcdFx0fVxuXHRcdFx0XHRcdFx0ICAgIFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdCAgICBcdFx0XHRmaWVsZC52YWxpZGF0b3IgPSBbXCJyZXF1aXJlZFwiXVxuXHRcdFx0XHRcdFx0ICAgIFx0XHR9XG5cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBpZiB0aGUgbGFiZWwgaXMgZW1wdHkgd2UgZGVsZXRlIGl0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIHRoaXMgaXMgZG9uZSBlc3BlY2lhbGx5IHRvIGF2b2lkIHNob2luZyB0aGUgJyonIGZvciByZXF1aXJlZCBmaWVsZHMgd2l0aG91dCB0aGUgbGFiZWxzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGV4Y2VwdGlvbnMgYXJlIGZpZWxkcyB3aXRoIGZpZWxkLmhlbHAgcHJvcGVydHkgLT4gU2luZ2xlIGNoZWNrYm94ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYodHlwZW9mIGZpZWxkLmxhYmVsICE9PSAndW5kZWZpbmVkJyAmJiBmaWVsZC5sYWJlbCA9PSAnJyAmJiAgdHlwZW9mIGZpZWxkLmhlbHAgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZygnZmllbGQubGFiZWw6ICcsIGZpZWxkLmxhYmVsKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdmaWVsZC5oZWxwOiAnLCBmaWVsZC5oZWxwKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlbGV0ZSBmaWVsZC5sYWJlbFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdCAgICBcdFx0aWYoZmllbGQudHlwZSA9PSAnaW5wdXQnICYmIGZpZWxkLmlucHV0VHlwZSA9PSAnZW1haWwnKSB7XG5cblx0XHRcdFx0XHRcdCAgICBcdFx0XHQvLyBmb3Igc29tZSByZWFzb24gdGhlIHJlcXVpcmVkIG1lc3NhZ2Ugc2hvd3MgdXAgdHdpY2UgYWZ0ZXIgdGhlICdlbWFpbCcgdmFsaWRhdG9yIGlzIHB1c2hlZC5cblx0XHRcdFx0XHRcdCAgICBcdFx0XHQvLyB0aGVyZWZvcmUgd2UgaGF2ZSB0byByZW1vdmUgaXRcblx0XHRcdFx0XHRcdCAgICBcdFx0XHR2YXIgcmVxdWlyZWRfdmFsaWRhdG9yX2luZGV4ID0gZmllbGQudmFsaWRhdG9yLmluZGV4T2YoJ3JlcXVpcmVkJyk7IC8vIGZpbmQgdGhlIGluZGV4XG5cdFx0XHRcdFx0XHQgICAgXHRcdFx0aWYgKHJlcXVpcmVkX3ZhbGlkYXRvcl9pbmRleCA+IC0xKSB7XG4gICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRmaWVsZC52YWxpZGF0b3Iuc3BsaWNlKHJlcXVpcmVkX3ZhbGlkYXRvcl9pbmRleCwgMSk7IC8vIHJlbW92ZSB0aGUgcmVxdWlyZWRfdmFsaWRhdG9yXG4gICAgXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQgICAgXHRcdFx0ZmllbGQudmFsaWRhdG9yLnB1c2goJ2VtYWlsJyk7XG5cdFx0XHRcdFx0XHQgICAgXHRcdH1cblxuXG5cdFx0XHRcdFx0XHQgICAgXHRcdC8vIGZvciB0aGUgY2hlY2tib3ggd2UgbmVlZCBhIHNwZWNpYWwgY2FzZSAtIHRvIHZlcmlmeSB0aGUgdmFsdWUgYXMgd2VsbFxuXHRcdFx0XHRcdFx0ICAgIFx0XHRpZihmaWVsZC50eXBlID09ICdjaGVja2JveCcpIHtcblxuXHRcdFx0XHRcdFx0ICAgIFx0XHRcdGZpZWxkLnZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHQgICAgXHRcdFx0XHQvL2NvbnNvbGUubG9nKCd2YWx1ZTogJywgdmFsdWUpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAodmFsdWUgIT09IHRydWUpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gW1wiVGhpcyBmaWVsZCBpcyByZXF1aXJlZCFcIl07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vcmV0dXJuIFsgd3AuaTE4bi5fXyggXCJUaGlzIGZpZWxkIGlzIHJlcXVpcmVkIVwiLCAnZmxvLWZvcm1zJyApIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vcmV0dXJuIFt0aGlzLl9fKFwiTGlzdCBJdGVtc1wiLCBcImZsby1mb3Jtc1wiKV07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gW11cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdCAgICBcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmKGZpZWxkLnR5cGUgPT0gJ2NoZWNrbGlzdCcpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZpZWxkLnZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnIHx8ICF2YWx1ZS5sZW5ndGggKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFtcIlRoaXMgZmllbGQgaXMgcmVxdWlyZWQhXCJdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFtdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ICAgIFx0fVxuXHRcdFx0XHRcdFx0ICAgIH1cblxuXHRcdFx0XHRcdFx0ICAgIGlmKGZpZWxkLmlucHV0VHlwZSA9PSAnZW1haWwnKSB7XG5cdFx0XHRcdFx0XHQgICAgXHRpZih0eXBlb2YgZmllbGQudmFsaWRhdG9yID09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHQgICAgXHRcdGZpZWxkLnZhbGlkYXRvciA9IFtcImVtYWlsXCJdXG5cdFx0XHRcdFx0XHQgICAgXHR9XG5cdFx0XHRcdFx0XHQgICAgfVxuXG5cdCAgICAgICAgICAgIH1lbHNle1xuXG5cdCAgICAgICAgICAgIFx0ZmllbGQub25TdWJtaXQgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0ICBcdFx0aWYoIHRoYXQuaXNWYWxpZCApIHtcbiAgICAgXHRcdFx0XHRcdFx0XHRcdHZhciAkdGhpcyA9ICBqUXVlcnkodGhhdC4kZWwpLnBhcmVudHMoJy5mbG8tZm9ybScpO1xuXG5cdFx0XHRcdFx0XHQgICAgIFx0XHQkdGhpcy5maW5kKCcuZmxvLXJlc3BvbnNlJykuaHRtbCgnJyk7XG5cdFx0XHRcdFx0XHQgICAgIFx0XHQkdGhpcy5maW5kKCcuZmxvLXJlc3BvbnNlLWVycm9yJykuaHRtbCgnJyk7XG5cdFx0XHRcdFx0XHQgICAgIFx0XHRqUXVlcnkoJy5nLXJlY2FwdGNoYScpLnJlbW92ZUNsYXNzKCdpbnZhbGlkJyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCR0aGlzLmZpbmQoJy5mbG8ub3ZlcmxheS1sb2FkZXInKS5zaG93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeSgnLmFwcC1mbG8tZm9ybXMgLmZsby1yZXNwb25zZScpLmh0bWwoJycpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBicm93c2VyX21ldGEgPSAnJztcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gdGVtcG9yYXJpbHkgZGlzYWJsZSB0aGlzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGJyb3dzZXJfbWV0YSA9IEpTT04uc3RyaW5naWZ5KHRoYXQuZ2V0X2Jyb3dzZXJfbWV0YSgpKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYnJvd3Nlcl9tZXRhID0gJyZicm93c2VyX21ldGE9Jyticm93c2VyX21ldGE7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KFwiLmZpZWxkLXN1Ym1pdCBpbnB1dFwiKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYWpheCBkYXRhOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSggJHRoaXNbMF0gKTtcblxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRhdGEuYXBwZW5kKFwiYWN0aW9uXCIsIFwiZmxvX2Zvcm1fc3VibWl0XCIpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5hamF4KHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1cmw6IGZvcm1EYXRhLmFqYXh1cmwsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9kYXRhOiAnJmFjdGlvbj1mbG9fZm9ybV9zdWJtaXQmZm9ybU5vbmNlPScrZm9ybURhdGEuZm9ybU5vbmNlKycmJytkYXRhK2Jyb3dzZXJfbWV0YSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdQT1NUJyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZTogXCJqc29uXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3NEYXRhOiBmYWxzZSwgLy8gRG9uJ3QgcHJvY2VzcyB0aGUgZmlsZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb250ZW50VHlwZTogZmFsc2UsIC8vIFNldCBjb250ZW50IHR5cGUgdG8gZmFsc2UgYXMgalF1ZXJ5IHdpbGwgdGVsbCB0aGUgc2VydmVyIGl0cyBhIHF1ZXJ5IHN0cmluZyByZXF1ZXN0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNhY2hlOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JHRoaXMuZmluZCgnLmZsby5vdmVybGF5LWxvYWRlcicpLmhpZGUoKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coanNvbik7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKGpzb24uZXJyb3Ipe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyR0aGlzLmZpbmQoJy5mbG8tcmVzcG9uc2UnKS5odG1sKGpzb24uZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkdGhpcy5maW5kKCcuZmxvLXJlc3BvbnNlLWVycm9yJykuaHRtbChqc29uLmVycm9yKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZigganNvbi5lcnJvci5pbmNsdWRlcygnUGxlYXNlIGNvbXBsZXRlIGNhcHRjaGEgdmVyaWZpY2F0aW9uJykgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCcuZy1yZWNhcHRjaGEnKS5hZGRDbGFzcygnaW52YWxpZCcpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fWVsc2UgaWYoanNvbi5jb25maXJtYXRpb25fb3B0ICYmIGpzb24uY29uZmlybWF0aW9uX29wdCA9PSAndGV4dF9jb25maXJtYXRpb24nKXtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZihqc29uLndhcm5pbmdfbXNnKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JHRoaXMuZmluZCgnLmZsby1yZXNwb25zZS1lcnJvcicpLmh0bWwoIGpzb24ud2FybmluZ19tc2cgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCR0aGlzLmZpbmQoJy5mbG8tcmVzcG9uc2UnKS5odG1sKGpzb24uc3VjY2Vzc19tc2cpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0Lm1vZGVsID0ge30gLy8gcmVzZXQgdGhlIGZvcm1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyByZXNldCB0aGUgZmlsZSBmaWxlZHNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JHRoaXMuZmluZCgnLmZpZWxkLXVwbG9hZCBpbnB1dFt0eXBlPWZpbGVdJykudmFsKCcnKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZihqUXVlcnkoJy5nLXJlY2FwdGNoYScpLmxlbmd0aCl7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Z3JlY2FwdGNoYS5yZXNldCgpIC8vIHJlc2V0IGNhcHRjaGFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCR0aGlzLmZpbmQoJy5mbG8tcmVzcG9uc2UnKS5zaG93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeSgnLmFwcC1mbG8tZm9ybXMgLnBhbmVsLWJvZHknKS5hZGRDbGFzcygncmVzcG9uc2UtbW9kZScpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBqUXVlcnkoJy5hcHAtZmxvLWZvcm1zIC5mbG8tcmVzcG9uc2UnKS5zaG93KCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcC1mbG8tZm9ybXNfJyt0aGF0LiRhdHRycy5mb3JtX2lkKycgLmZsby1yZXNwb25zZScpLnNjcm9sbEludG9WaWV3KHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICBiZWhhdmlvcjogJ3Ntb290aCdcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaGlkZSB0aGUgbWVzc2FnZSBpbiA1IHNlY1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeSgnLmFwcC1mbG8tZm9ybXMgLnBhbmVsLWJvZHknKS5yZW1vdmVDbGFzcygncmVzcG9uc2UtbW9kZScpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeSgnLmFwcC1mbG8tZm9ybXMgLmZsby1yZXNwb25zZScpLmhpZGUoKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9LCA3MDAwKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fWVsc2UgaWYoanNvbi5jb25maXJtYXRpb25fb3B0ICYmIGpzb24uY29uZmlybWF0aW9uX29wdCA9PSAncGFnZV9jb25maXJtYXRpb24nKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uID0ganNvbi5zdWNjZXNzX3BhZ2U7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeShcIi5maWVsZC1zdWJtaXQgaW5wdXRcIikucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXG4gICAgIFx0XHRcdFx0XHRcdFx0fWVsc2V7XG4gICAgIFx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKHRoYXQudmFsaWRhdGlvbkVycm9ycylcblxuICAgICBcdFx0XHRcdFx0XHRcdFx0Ly8gc2Nyb2xsIHRvIHRoZSBlbGVtZW50IHRoYXQgZGlkIG5vdCBwYXNzIHRoZSB2YWxpZGF0aW9uXG5cbiAgICAgXHRcdFx0XHRcdFx0XHRcdGlmKHRoYXQudmFsaWRhdGlvbkVycm9ycy5sZW5ndGgpIHtcbiAgICAgXHRcdFx0XHRcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpZF8nK3RoYXQudmFsaWRhdGlvbkVycm9yc1swXS5maWVsZC5maWVsZF9pZCkuc2Nyb2xsSW50b1ZpZXcoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgYmVoYXZpb3I6ICdzbW9vdGgnXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG4gICAgIFx0XHRcdFx0XHRcdFx0XHR9XG5cbiAgICAgXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblxuXHQgICAgfVxuXHQgICAgLyo9PT09PSAgRW5kIG9mIGZpeCB0aGUgUmVtb3ZlIEZpZWxkIEJ1dHRvbiAgPT09PT09Ki9cblx0ICB9XG5cbn1cbjwvc2NyaXB0PlxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./public/vue-components/FloForm.vue\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLGlFQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n");

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/component-normalizer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/component-normalizer.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  scriptExports = scriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof scriptExports.default\n  if (type === 'object' || type === 'function') {\n    scriptExports = scriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplci5qcz8yNDU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgc2NyaXB0RXhwb3J0cyA9IHNjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNjcmlwdEV4cG9ydHMgPSBzY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/lib/runtime/component-normalizer.js\n");

/***/ }),

/***/ "./node_modules/vue-loader/lib/template-compiler/index.js?{\"id\":\"data-v-63510da3\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./public/vue-components/FloForm.vue":
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-63510da3","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./public/vue-components/FloForm.vue ***!
  \************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"panel-body\" }, [\n    _c(\n      \"div\",\n      {\n        staticClass: \"form-preview topLabel \",\n        class: { \"two-columns\": _vm.schema.groups.length == 3 }\n      },\n      [\n        _c(\"vue-form-generator\", {\n          class:\n            \"btn-position--\" +\n            _vm.btnPosition +\n            _vm.getStylingClass(_vm.formStyling),\n          style:\n            \"--data-btn-color: \" +\n            _vm.btnTextColorValue +\n            \"; --data-btn-bgcolor: \" +\n            _vm.btnBgColorValue +\n            \"; --data-btn-border-color: \" +\n            _vm.btnBorderColorValue +\n            \"; --data-btn-color-hover: \" +\n            _vm.btnTextColorValueHover +\n            \"; --data-btn-bgcolor-hover: \" +\n            _vm.btnBgColorValueHover +\n            \"; --data-btn-border-color-hover: \" +\n            _vm.btnBorderColorValueHover +\n            \"; --data-inputbg-color: \" +\n            _vm.formStyling.inputbg_color +\n            \"; --data-label-color: \" +\n            _vm.formStyling.label_color +\n            \"; --data-input-color: \" +\n            _vm.formStyling.input_color +\n            \"; --data-border-color: \" +\n            _vm.formStyling.border_color +\n            \"; --data-placeholder-color: \" +\n            _vm.formStyling.placeholder_color +\n            \"; --data-hint-color: \" +\n            _vm.formStyling.hint_color +\n            _vm.renderStylingData(_vm.formStyling),\n          attrs: {\n            schema: _vm.schema,\n            model: _vm.model,\n            tag: \"section\",\n            options: _vm.formOptions\n          },\n          on: { validated: _vm.onValidated }\n        }),\n        _vm._v(\" \"),\n        _vm.model\n          ? _c(\"textarea\", {\n              staticClass: \"flo-form-data\",\n              attrs: { name: \"flo-form-model\" },\n              domProps: { innerHTML: _vm._s(_vm.model) }\n            })\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.schema.groups[0].fields.length\n          ? _c(\"textarea\", {\n              staticClass: \"flo-form-data\",\n              attrs: { name: \"flo-form-schema\" },\n              domProps: { innerHTML: _vm._s(_vm.schema) }\n            })\n          : _vm._e()\n      ],\n      1\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nif (false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wdWJsaWMvdnVlLWNvbXBvbmVudHMvRmxvRm9ybS52dWU/MzMwYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxlQUFlO0FBQ2YsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHlCQUF5QjtBQUMvQyx5QkFBeUI7QUFDekIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMEJBQTBCO0FBQ2hELHlCQUF5QjtBQUN6QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQztBQUNsQyxJQUFJLEtBQVUsRUFBRSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleC5qcz97XCJpZFwiOlwiZGF0YS12LTYzNTEwZGEzXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcIm9wdGlvbnNJZFwiOlwiMFwiLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9wdWJsaWMvdnVlLWNvbXBvbmVudHMvRmxvRm9ybS52dWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicGFuZWwtYm9keVwiIH0sIFtcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tcHJldmlldyB0b3BMYWJlbCBcIixcbiAgICAgICAgY2xhc3M6IHsgXCJ0d28tY29sdW1uc1wiOiBfdm0uc2NoZW1hLmdyb3Vwcy5sZW5ndGggPT0gMyB9XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfYyhcInZ1ZS1mb3JtLWdlbmVyYXRvclwiLCB7XG4gICAgICAgICAgY2xhc3M6XG4gICAgICAgICAgICBcImJ0bi1wb3NpdGlvbi0tXCIgK1xuICAgICAgICAgICAgX3ZtLmJ0blBvc2l0aW9uICtcbiAgICAgICAgICAgIF92bS5nZXRTdHlsaW5nQ2xhc3MoX3ZtLmZvcm1TdHlsaW5nKSxcbiAgICAgICAgICBzdHlsZTpcbiAgICAgICAgICAgIFwiLS1kYXRhLWJ0bi1jb2xvcjogXCIgK1xuICAgICAgICAgICAgX3ZtLmJ0blRleHRDb2xvclZhbHVlICtcbiAgICAgICAgICAgIFwiOyAtLWRhdGEtYnRuLWJnY29sb3I6IFwiICtcbiAgICAgICAgICAgIF92bS5idG5CZ0NvbG9yVmFsdWUgK1xuICAgICAgICAgICAgXCI7IC0tZGF0YS1idG4tYm9yZGVyLWNvbG9yOiBcIiArXG4gICAgICAgICAgICBfdm0uYnRuQm9yZGVyQ29sb3JWYWx1ZSArXG4gICAgICAgICAgICBcIjsgLS1kYXRhLWJ0bi1jb2xvci1ob3ZlcjogXCIgK1xuICAgICAgICAgICAgX3ZtLmJ0blRleHRDb2xvclZhbHVlSG92ZXIgK1xuICAgICAgICAgICAgXCI7IC0tZGF0YS1idG4tYmdjb2xvci1ob3ZlcjogXCIgK1xuICAgICAgICAgICAgX3ZtLmJ0bkJnQ29sb3JWYWx1ZUhvdmVyICtcbiAgICAgICAgICAgIFwiOyAtLWRhdGEtYnRuLWJvcmRlci1jb2xvci1ob3ZlcjogXCIgK1xuICAgICAgICAgICAgX3ZtLmJ0bkJvcmRlckNvbG9yVmFsdWVIb3ZlciArXG4gICAgICAgICAgICBcIjsgLS1kYXRhLWlucHV0YmctY29sb3I6IFwiICtcbiAgICAgICAgICAgIF92bS5mb3JtU3R5bGluZy5pbnB1dGJnX2NvbG9yICtcbiAgICAgICAgICAgIFwiOyAtLWRhdGEtbGFiZWwtY29sb3I6IFwiICtcbiAgICAgICAgICAgIF92bS5mb3JtU3R5bGluZy5sYWJlbF9jb2xvciArXG4gICAgICAgICAgICBcIjsgLS1kYXRhLWlucHV0LWNvbG9yOiBcIiArXG4gICAgICAgICAgICBfdm0uZm9ybVN0eWxpbmcuaW5wdXRfY29sb3IgK1xuICAgICAgICAgICAgXCI7IC0tZGF0YS1ib3JkZXItY29sb3I6IFwiICtcbiAgICAgICAgICAgIF92bS5mb3JtU3R5bGluZy5ib3JkZXJfY29sb3IgK1xuICAgICAgICAgICAgXCI7IC0tZGF0YS1wbGFjZWhvbGRlci1jb2xvcjogXCIgK1xuICAgICAgICAgICAgX3ZtLmZvcm1TdHlsaW5nLnBsYWNlaG9sZGVyX2NvbG9yICtcbiAgICAgICAgICAgIFwiOyAtLWRhdGEtaGludC1jb2xvcjogXCIgK1xuICAgICAgICAgICAgX3ZtLmZvcm1TdHlsaW5nLmhpbnRfY29sb3IgK1xuICAgICAgICAgICAgX3ZtLnJlbmRlclN0eWxpbmdEYXRhKF92bS5mb3JtU3R5bGluZyksXG4gICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgIHNjaGVtYTogX3ZtLnNjaGVtYSxcbiAgICAgICAgICAgIG1vZGVsOiBfdm0ubW9kZWwsXG4gICAgICAgICAgICB0YWc6IFwic2VjdGlvblwiLFxuICAgICAgICAgICAgb3B0aW9uczogX3ZtLmZvcm1PcHRpb25zXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbjogeyB2YWxpZGF0ZWQ6IF92bS5vblZhbGlkYXRlZCB9XG4gICAgICAgIH0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0ubW9kZWxcbiAgICAgICAgICA/IF9jKFwidGV4dGFyZWFcIiwge1xuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmbG8tZm9ybS1kYXRhXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IG5hbWU6IFwiZmxvLWZvcm0tbW9kZWxcIiB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0ubW9kZWwpIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX3ZtLnNjaGVtYS5ncm91cHNbMF0uZmllbGRzLmxlbmd0aFxuICAgICAgICAgID8gX2MoXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZsby1mb3JtLWRhdGFcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHsgbmFtZTogXCJmbG8tZm9ybS1zY2hlbWFcIiB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0uc2NoZW1hKSB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgIF0sXG4gICAgICAxXG4gICAgKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtNjM1MTBkYTNcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/lib/template-compiler/index.js?{\"id\":\"data-v-63510da3\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./public/vue-components/FloForm.vue\n");

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.dev.js":
/*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a string containing static keys from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\n{\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if (!config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (isUndef(target) || isPrimitive(target)\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (isUndef(target) || isPrimitive(target)\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\n{\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar isUsingMicroTask = false;\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n  isUsingMicroTask = true;\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n  isUsingMicroTask = true;\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\n{\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\n{\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (!isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if (key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if (isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  }\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n      warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                \"timeout (\" + (res.timeout) + \"ms)\"\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if (!config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = expOrFn.toString();\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n      warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if (sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    {\n      initProxy(vm);\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if (!(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n\nvar convertEnumeratedValue = function (key, value) {\n  return isFalsyAttrValue(value) || value === 'false'\n    ? 'false'\n    // allow arbitrary string value for contenteditable\n    : key === 'contenteditable' && isValidContentEditableValue(value)\n      ? value\n      : 'true'\n};\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        insert(parentElm, vnode.elm, refElm);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (nodeOps.parentNode(ref$$1) === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (\n    oldVnode,\n    vnode,\n    insertedVnodeQueue,\n    ownerArray,\n    index,\n    removeOnly\n  ) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // clone reused vnode\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        {\n          checkDuplicateKeys(ch);\n        }\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm)) {\n          removeVnodes([oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      dir.oldArg = oldDir.arg;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, convertEnumeratedValue(key, value));\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && value !== '' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\n\n\n/* eslint-disable no-unused-vars */\nfunction baseWarn (msg, range) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n/* eslint-enable no-unused-vars */\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value, range, dynamic) {\n  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value, range, dynamic) {\n  var attrs = dynamic\n    ? (el.dynamicAttrs || (el.dynamicAttrs = []))\n    : (el.attrs || (el.attrs = []));\n  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value, range) {\n  el.attrsMap[name] = value;\n  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  isDynamicArg,\n  modifiers,\n  range\n) {\n  (el.directives || (el.directives = [])).push(rangeSetItem({\n    name: name,\n    rawName: rawName,\n    value: value,\n    arg: arg,\n    isDynamicArg: isDynamicArg,\n    modifiers: modifiers\n  }, range));\n  el.plain = false;\n}\n\nfunction prependModifierMarker (symbol, name, dynamic) {\n  return dynamic\n    ? (\"_p(\" + name + \",\\\"\" + symbol + \"\\\")\")\n    : symbol + name // mark the event as captured\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn,\n  range,\n  dynamic\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.',\n      range\n    );\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (modifiers.right) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'contextmenu':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'contextmenu';\n      delete modifiers.right;\n    }\n  } else if (modifiers.middle) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'mouseup':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'mouseup';\n    }\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = prependModifierMarker('!', name, dynamic);\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = prependModifierMarker('~', name, dynamic);\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = prependModifierMarker('&', name, dynamic);\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getRawBindingAttr (\n  el,\n  name\n) {\n  return el.rawAttrsMap[':' + name] ||\n    el.rawAttrsMap['v-bind:' + name] ||\n    el.rawAttrsMap[name]\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\nfunction getAndRemoveAttrByRegex (\n  el,\n  name\n) {\n  var list = el.attrsList;\n  for (var i = 0, l = list.length; i < l; i++) {\n    var attr = list[i];\n    if (name.test(attr.name)) {\n      list.splice(i, 1);\n      return attr\n    }\n  }\n}\n\nfunction rangeSetItem (\n  item,\n  range\n) {\n  if (range) {\n    if (range.start != null) {\n      item.start = range.start;\n    }\n    if (range.end != null) {\n      item.end = range.end;\n    }\n  }\n  return item\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: JSON.stringify(value),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len, str, chr, index$1, expressionPos, expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.',\n      el.rawAttrsMap['v-model']\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally',\n        el.rawAttrsMap[binding]\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler$1 (event, handler, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n// implementation and does not fire microtasks in between event propagation, so\n// safe to exclude.\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n\nfunction add$1 (\n  name,\n  handler,\n  capture,\n  passive\n) {\n  // async edge case #6566: inner click event triggers patch, event handler\n  // attached to outer element during patch, and triggered again. This\n  // happens because browsers fire microtask ticks between event propagation.\n  // the solution is simple: we save the timestamp when a handler is attached,\n  // and the handler would only fire if the event passed to it was fired\n  // AFTER it was attached.\n  if (useMicrotaskFix) {\n    var attachedTimestamp = currentFlushTimestamp;\n    var original = handler;\n    handler = original._wrapper = function (e) {\n      if (\n        // no bubbling, should always fire.\n        // this is just a safety net in case event.timeStamp is unreliable in\n        // certain weird environments...\n        e.target === e.currentTarget ||\n        // event is fired after handler attachment\n        e.timeStamp >= attachedTimestamp ||\n        // bail for environments that have buggy event.timeStamp implementations\n        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n        // #9681 QtWebEngine event.timeStamp is negative value\n        e.timeStamp <= 0 ||\n        // #9448 bail if event is fired in another document in a multi-page\n        // electron/nw.js app, since event.timeStamp will be using a different\n        // starting reference\n        e.target.ownerDocument !== document\n      ) {\n        return original.apply(this, arguments)\n      }\n    };\n  }\n  target$1.addEventListener(\n    name,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  name,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    name,\n    handler._wrapper || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nvar svgContainer;\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (!(key in props)) {\n      elm[key] = '';\n    }\n  }\n\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value' && elm.tagName !== 'PROGRESS') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\n      // IE doesn't support innerHTML for SVG elements\n      svgContainer = svgContainer || document.createElement('div');\n      svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\n      var svg = svgContainer.firstChild;\n      while (elm.firstChild) {\n        elm.removeChild(elm.firstChild);\n      }\n      while (svg.firstChild) {\n        elm.appendChild(svg.firstChild);\n      }\n    } else if (\n      // skip the update if old and new VDOM state is the same.\n      // `value` is handled separately because the DOM value may be temporarily\n      // out of sync with VDOM state due to focus, composition and modifiers.\n      // This  #4521 by skipping the unnecesarry `checked` update.\n      cur !== oldProps[key]\n    ) {\n      // some property updates can throw\n      // e.g. `value` on <progress> w/ non-finite value\n      try {\n        elm[key] = cur;\n      } catch (e) {}\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\nvar whitespaceRE = /\\s+/;\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n// in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n// as a floor function) causing unexpected behaviors\nfunction toMs (s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    context = transitionNode.context;\n    transitionNode = transitionNode.parent;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show && el.parentNode) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n\nvar isVShowDirective = function (d) { return d.name === 'show'; };\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(isNotTextNode);\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  beforeMount: function beforeMount () {\n    var this$1 = this;\n\n    var update = this._update;\n    this._update = function (vnode, hydrating) {\n      var restoreActiveInstance = setActiveInstance(this$1);\n      // force removing pass\n      this$1.__patch__(\n        this$1._vnode,\n        this$1.kept,\n        false, // hydrating\n        true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this$1._vnode = this$1.kept;\n      restoreActiveInstance();\n      update.call(this$1, vnode, hydrating);\n    };\n  },\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (e && e.target !== el) {\n            return\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.',\n        el.rawAttrsMap['class']\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.',\n          el.rawAttrsMap['style']\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\" + (unicodeRegExp.source) + \"]*\";\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being passed as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t',\n  '&#39;': \"'\"\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n      }\n\n      if (text) {\n        advance(text.length);\n      }\n\n      if (options.chars && text) {\n        options.chars(text, index - text.length, index);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (!stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"), { start: index + html.length });\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\n        attr.start = index;\n        advance(attr[0].length);\n        attr.end = index;\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n      if (options.outputSourceRange) {\n        attrs[i].start = args.start + args[0].match(/^\\s*/).length;\n        attrs[i].end = args.end;\n      }\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (i > pos || !tagName &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\"),\n            { start: stack[i].start, end: stack[i].end }\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:|^#/;\nvar forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\nvar dynamicArgRE = /^\\[.*\\]$/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^\\.|^v-bind:/;\nvar modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\n\nvar slotRE = /^v-slot(:|$)|^#/;\n\nvar lineBreakRE = /[\\r\\n]/;\nvar whitespaceRE$1 = /\\s+/g;\n\nvar invalidAttributeRE = /[\\s\"'<>\\/=]/;\n\nvar decodeHTMLCached = cached(he.decode);\n\nvar emptySlotScopeToken = \"_empty_\";\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\nvar maybeComponent;\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    rawAttrsMap: {},\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  var isReservedTag = options.isReservedTag || no;\n  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var whitespaceOption = options.whitespace;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg, range) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg, range);\n    }\n  }\n\n  function closeElement (element) {\n    trimEndingWhitespace(element);\n    if (!inVPre && !element.processed) {\n      element = processElement(element, options);\n    }\n    // tree management\n    if (!stack.length && element !== root) {\n      // allow root elements with v-if, v-else-if and v-else\n      if (root.if && (element.elseif || element.else)) {\n        {\n          checkRootConstraints(element);\n        }\n        addIfCondition(root, {\n          exp: element.elseif,\n          block: element\n        });\n      } else {\n        warnOnce(\n          \"Component template should contain exactly one root element. \" +\n          \"If you are using v-if on multiple elements, \" +\n          \"use v-else-if to chain them instead.\",\n          { start: element.start }\n        );\n      }\n    }\n    if (currentParent && !element.forbidden) {\n      if (element.elseif || element.else) {\n        processIfConditions(element, currentParent);\n      } else {\n        if (element.slotScope) {\n          // scoped slot\n          // keep it in the children list so that v-else(-if) conditions can\n          // find it as the prev node.\n          var name = element.slotTarget || '\"default\"'\n          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        }\n        currentParent.children.push(element);\n        element.parent = currentParent;\n      }\n    }\n\n    // final children cleanup\n    // filter out scoped slots\n    element.children = element.children.filter(function (c) { return !(c).slotScope; });\n    // remove trailing whitespace node again\n    trimEndingWhitespace(element);\n\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  function trimEndingWhitespace (el) {\n    // remove trailing whitespace node\n    if (!inPre) {\n      var lastNode;\n      while (\n        (lastNode = el.children[el.children.length - 1]) &&\n        lastNode.type === 3 &&\n        lastNode.text === ' '\n      ) {\n        el.children.pop();\n      }\n    }\n  }\n\n  function checkRootConstraints (el) {\n    if (el.tag === 'slot' || el.tag === 'template') {\n      warnOnce(\n        \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n        'contain multiple nodes.',\n        { start: el.start }\n      );\n    }\n    if (el.attrsMap.hasOwnProperty('v-for')) {\n      warnOnce(\n        'Cannot use v-for on stateful component root element because ' +\n        'it renders multiple elements.',\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    outputSourceRange: options.outputSourceRange,\n    start: function start (tag, attrs, unary, start$1, end) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      {\n        if (options.outputSourceRange) {\n          element.start = start$1;\n          element.end = end;\n          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {\n            cumulated[attr.name] = attr;\n            return cumulated\n          }, {});\n        }\n        attrs.forEach(function (attr) {\n          if (invalidAttributeRE.test(attr.name)) {\n            warn$2(\n              \"Invalid dynamic argument expression: attribute names cannot contain \" +\n              \"spaces, quotes, <, >, / or =.\",\n              {\n                start: attr.start + attr.name.indexOf(\"[\"),\n                end: attr.start + attr.name.length\n              }\n            );\n          }\n        });\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.',\n          { start: element.start }\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n      }\n\n      if (!root) {\n        root = element;\n        {\n          checkRootConstraints(root);\n        }\n      }\n\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end (tag, start, end$1) {\n      var element = stack[stack.length - 1];\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      if (options.outputSourceRange) {\n        element.end = end$1;\n      }\n      closeElement(element);\n    },\n\n    chars: function chars (text, start, end) {\n      if (!currentParent) {\n        {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.',\n              { start: start }\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\"),\n              { start: start }\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      if (inPre || text.trim()) {\n        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);\n      } else if (!children.length) {\n        // remove the whitespace-only node right after an opening tag\n        text = '';\n      } else if (whitespaceOption) {\n        if (whitespaceOption === 'condense') {\n          // in condense mode, remove the whitespace node if it contains\n          // line break, otherwise condense to a single space\n          text = lineBreakRE.test(text) ? '' : ' ';\n        } else {\n          text = ' ';\n        }\n      } else {\n        text = preserveWhitespace ? ' ' : '';\n      }\n      if (text) {\n        if (!inPre && whitespaceOption === 'condense') {\n          // condense consecutive whitespaces into single space\n          text = text.replace(whitespaceRE$1, ' ');\n        }\n        var res;\n        var child;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          child = {\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          };\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          child = {\n            type: 3,\n            text: text\n          };\n        }\n        if (child) {\n          if (options.outputSourceRange) {\n            child.start = start;\n            child.end = end;\n          }\n          children.push(child);\n        }\n      }\n    },\n    comment: function comment (text, start, end) {\n      // adding anyting as a sibling to the root node is forbidden\n      // comments should still be allowed, but ignored\n      if (currentParent) {\n        var child = {\n          type: 3,\n          text: text,\n          isComment: true\n        };\n        if (options.outputSourceRange) {\n          child.start = start;\n          child.end = end;\n        }\n        currentParent.children.push(child);\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var list = el.attrsList;\n  var len = list.length;\n  if (len) {\n    var attrs = el.attrs = new Array(len);\n    for (var i = 0; i < len; i++) {\n      attrs[i] = {\n        name: list[i].name,\n        value: JSON.stringify(list[i].value)\n      };\n      if (list[i].start != null) {\n        attrs[i].start = list[i].start;\n        attrs[i].end = list[i].end;\n      }\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (\n  element,\n  options\n) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = (\n    !element.key &&\n    !element.scopedSlots &&\n    !element.attrsList.length\n  );\n\n  processRef(element);\n  processSlotContent(element);\n  processSlotOutlet(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n  return element\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    {\n      if (el.tag === 'template') {\n        warn$2(\n          \"<template> cannot be keyed. Place the key on real elements instead.\",\n          getRawBindingAttr(el, 'key')\n        );\n      }\n      if (el.for) {\n        var iterator = el.iterator2 || el.iterator1;\n        var parent = el.parent;\n        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {\n          warn$2(\n            \"Do not use v-for index as key on <transition-group> children, \" +\n            \"this is the same as not using keys.\",\n            getRawBindingAttr(el, 'key'),\n            true /* tip */\n          );\n        }\n      }\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp),\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '').trim();\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\",\n      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\",\n          children[i]\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\n// handle content being passed to a component as slot,\n// e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\nfunction processSlotContent (el) {\n  var slotScope;\n  if (el.tag === 'template') {\n    slotScope = getAndRemoveAttr(el, 'scope');\n    /* istanbul ignore if */\n    if (slotScope) {\n      warn$2(\n        \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n        \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n        \"can also be used on plain elements in addition to <template> to \" +\n        \"denote scoped slots.\",\n        el.rawAttrsMap['scope'],\n        true\n      );\n    }\n    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n    /* istanbul ignore if */\n    if (el.attrsMap['v-for']) {\n      warn$2(\n        \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n        \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n        \"scoped slot to make it clearer.\",\n        el.rawAttrsMap['slot-scope'],\n        true\n      );\n    }\n    el.slotScope = slotScope;\n  }\n\n  // slot=\"xxx\"\n  var slotTarget = getBindingAttr(el, 'slot');\n  if (slotTarget) {\n    el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\n    // preserve slot as an attribute for native shadow DOM compat\n    // only for non-scoped slots.\n    if (el.tag !== 'template' && !el.slotScope) {\n      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\n    }\n  }\n\n  // 2.6 v-slot syntax\n  {\n    if (el.tag === 'template') {\n      // v-slot on <template>\n      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding) {\n        {\n          if (el.slotTarget || el.slotScope) {\n            warn$2(\n              \"Unexpected mixed usage of different slot syntaxes.\",\n              el\n            );\n          }\n          if (el.parent && !maybeComponent(el.parent)) {\n            warn$2(\n              \"<template v-slot> can only appear at the root level inside \" +\n              \"the receiving component\",\n              el\n            );\n          }\n        }\n        var ref = getSlotName(slotBinding);\n        var name = ref.name;\n        var dynamic = ref.dynamic;\n        el.slotTarget = name;\n        el.slotTargetDynamic = dynamic;\n        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\n      }\n    } else {\n      // v-slot on component, denotes default slot\n      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding$1) {\n        {\n          if (!maybeComponent(el)) {\n            warn$2(\n              \"v-slot can only be used on components or <template>.\",\n              slotBinding$1\n            );\n          }\n          if (el.slotScope || el.slotTarget) {\n            warn$2(\n              \"Unexpected mixed usage of different slot syntaxes.\",\n              el\n            );\n          }\n          if (el.scopedSlots) {\n            warn$2(\n              \"To avoid scope ambiguity, the default slot should also use \" +\n              \"<template> syntax when there are other named slots.\",\n              slotBinding$1\n            );\n          }\n        }\n        // add the component's children to its default slot\n        var slots = el.scopedSlots || (el.scopedSlots = {});\n        var ref$1 = getSlotName(slotBinding$1);\n        var name$1 = ref$1.name;\n        var dynamic$1 = ref$1.dynamic;\n        var slotContainer = slots[name$1] = createASTElement('template', [], el);\n        slotContainer.slotTarget = name$1;\n        slotContainer.slotTargetDynamic = dynamic$1;\n        slotContainer.children = el.children.filter(function (c) {\n          if (!c.slotScope) {\n            c.parent = slotContainer;\n            return true\n          }\n        });\n        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;\n        // remove children as they are returned from scopedSlots now\n        el.children = [];\n        // mark el non-plain so data gets generated\n        el.plain = false;\n      }\n    }\n  }\n}\n\nfunction getSlotName (binding) {\n  var name = binding.name.replace(slotRE, '');\n  if (!name) {\n    if (binding.name[0] !== '#') {\n      name = 'default';\n    } else {\n      warn$2(\n        \"v-slot shorthand syntax requires a slot name.\",\n        binding\n      );\n    }\n  }\n  return dynamicArgRE.test(name)\n    // dynamic [name]\n    ? { name: name.slice(1, -1), dynamic: true }\n    // static name\n    : { name: (\"\\\"\" + name + \"\\\"\"), dynamic: false }\n}\n\n// handle <slot/> outlets\nfunction processSlotOutlet (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\",\n        getRawBindingAttr(el, 'key')\n      );\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name.replace(dirRE, ''));\n      // support .foo shorthand syntax for the .prop modifier\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        if (\n          value.trim().length === 0\n        ) {\n          warn$2(\n            (\"The value for a v-bind expression cannot be empty. Found in \\\"v-bind:\" + name + \"\\\"\")\n          );\n        }\n        if (modifiers) {\n          if (modifiers.prop && !isDynamic) {\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel && !isDynamic) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            syncGen = genAssignmentCode(value, \"$event\");\n            if (!isDynamic) {\n              addHandler(\n                el,\n                (\"update:\" + (camelize(name))),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i]\n              );\n              if (hyphenate(name) !== camelize(name)) {\n                addHandler(\n                  el,\n                  (\"update:\" + (hyphenate(name))),\n                  syncGen,\n                  null,\n                  false,\n                  warn$2,\n                  list[i]\n                );\n              }\n            } else {\n              // handler w/ dynamic event name\n              addHandler(\n                el,\n                (\"\\\"update:\\\"+(\" + name + \")\"),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i],\n                true // dynamic\n              );\n            }\n          }\n        }\n        if ((modifiers && modifiers.prop) || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value, list[i], isDynamic);\n        } else {\n          addAttr(el, name, value, list[i], isDynamic);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        isDynamic = false;\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n          if (dynamicArgRE.test(arg)) {\n            arg = arg.slice(1, -1);\n            isDynamic = true;\n          }\n        }\n        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\n        if (name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.',\n            list[i]\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value), list[i]);\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true', list[i]);\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$1 = {\n  preTransformNode: preTransformNode\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\nvar fnInvokeRE = /\\([^)]*?\\);*$/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  // #7880: IE11 and Edge use `Esc` for Escape key name.\n  esc: ['Esc', 'Escape'],\n  tab: 'Tab',\n  enter: 'Enter',\n  // #9112: IE11 uses `Spacebar` for Space key name.\n  space: [' ', 'Spacebar'],\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  // #9112: IE11 uses `Del` for Delete key name.\n  'delete': ['Backspace', 'Delete', 'Del']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative\n) {\n  var prefix = isNative ? 'nativeOn:' : 'on:';\n  var staticHandlers = \"\";\n  var dynamicHandlers = \"\";\n  for (var name in events) {\n    var handlerCode = genHandler(events[name]);\n    if (events[name] && events[name].dynamic) {\n      dynamicHandlers += name + \",\" + handlerCode + \",\";\n    } else {\n      staticHandlers += \"\\\"\" + name + \"\\\":\" + handlerCode + \",\";\n    }\n  }\n  staticHandlers = \"{\" + (staticHandlers.slice(0, -1)) + \"}\";\n  if (dynamicHandlers) {\n    return prefix + \"_d(\" + staticHandlers + \",[\" + (dynamicHandlers.slice(0, -1)) + \"])\"\n  } else {\n    return prefix + staticHandlers\n  }\n}\n\nfunction genHandler (handler) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    return (\"function($event){\" + (isFunctionInvocation ? (\"return \" + (handler.value)) : handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : isFunctionInvocation\n          ? (\"return \" + (handler.value))\n          : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\n    // make sure the key filters only apply to KeyboardEvents\n    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\n    // key events that do not have keyCode property...\n    \"if(!$event.type.indexOf('key')&&\" +\n    (keys.map(genFilterCode).join('&&')) + \")return null;\"\n  )\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n\n\n\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n  this.pre = false;\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.parent) {\n    el.pre = el.pre || el.parent.pre;\n  }\n\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data;\n      if (!el.plain || (el.pre && state.maybeComponent(el))) {\n        data = genData$2(el, state);\n      }\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  // Some elements (templates) need to behave differently inside of a v-pre\n  // node.  All pre nodes are static roots, so we can use this as a location to\n  // wrap a state change and reset it upon exiting the pre node.\n  var originalPreState = state.pre;\n  if (el.pre) {\n    state.pre = el.pre;\n  }\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  state.pre = originalPreState;\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      state.warn(\n        \"v-once can only be used inside v-for that is keyed. \",\n        el.rawAttrsMap['v-once']\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      el.rawAttrsMap['v-for'],\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:\" + (genProps(el.attrs)) + \",\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:\" + (genProps(el.props)) + \",\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el, el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind dynamic argument wrap\n  // v-bind with dynamic arguments must be applied using the same v-bind object\n  // merge helper so that class/style/mustUseProp attrs are handled correctly.\n  if (el.dynamicAttrs) {\n    data = \"_b(\" + data + \",\\\"\" + (el.tag) + \"\\\",\" + (genProps(el.dynamicAttrs)) + \")\";\n  }\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\" + (dir.isDynamicArg ? dir.arg : (\"\\\"\" + (dir.arg) + \"\\\"\"))) : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (el.children.length !== 1 || ast.type !== 1) {\n    state.warn(\n      'Inline-template components must have exactly one child element.',\n      { start: el.start }\n    );\n  }\n  if (ast && ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  el,\n  slots,\n  state\n) {\n  // by default scoped slots are considered \"stable\", this allows child\n  // components with only scoped slots to skip forced updates from parent.\n  // but in some cases we have to bail-out of this optimization\n  // for example if the slot contains dynamic names, has v-if or v-for on them...\n  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {\n    var slot = slots[key];\n    return (\n      slot.slotTargetDynamic ||\n      slot.if ||\n      slot.for ||\n      containsSlotChild(slot) // is passing down slot from parent which may be dynamic\n    )\n  });\n\n  // #9534: if a component with scoped slots is inside a conditional branch,\n  // it's possible for the same component to be reused but with different\n  // compiled slot content. To avoid that, we generate a unique key based on\n  // the generated code of all the slot contents.\n  var needsKey = !!el.if;\n\n  // OR when it is inside another scoped slot or v-for (the reactivity may be\n  // disconnected due to the intermediate scope variable)\n  // #9438, #9506\n  // TODO: this can be further optimized by properly analyzing in-scope bindings\n  // and skip force updating ones that do not actually use scope variables.\n  if (!needsForceUpdate) {\n    var parent = el.parent;\n    while (parent) {\n      if (\n        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||\n        parent.for\n      ) {\n        needsForceUpdate = true;\n        break\n      }\n      if (parent.if) {\n        needsKey = true;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  var generatedSlots = Object.keys(slots)\n    .map(function (key) { return genScopedSlot(slots[key], state); })\n    .join(',');\n\n  return (\"scopedSlots:_u([\" + generatedSlots + \"]\" + (needsForceUpdate ? \",null,true\" : \"\") + (!needsForceUpdate && needsKey ? (\",null,false,\" + (hash(generatedSlots))) : \"\") + \")\")\n}\n\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n  return hash >>> 0\n}\n\nfunction containsSlotChild (el) {\n  if (el.type === 1) {\n    if (el.tag === 'slot') {\n      return true\n    }\n    return el.children.some(containsSlotChild)\n  }\n  return false\n}\n\nfunction genScopedSlot (\n  el,\n  state\n) {\n  var isLegacySyntax = el.attrsMap['slot-scope'];\n  if (el.if && !el.ifProcessed && !isLegacySyntax) {\n    return genIf(el, state, genScopedSlot, \"null\")\n  }\n  if (el.for && !el.forProcessed) {\n    return genFor(el, state, genScopedSlot)\n  }\n  var slotScope = el.slotScope === emptySlotScopeToken\n    ? \"\"\n    : String(el.slotScope);\n  var fn = \"function(\" + slotScope + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if && isLegacySyntax\n        ? (\"(\" + (el.if) + \")?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  // reverse proxy v-slot without scope on this.$slots\n  var reverseProxy = slotScope ? \"\" : \",proxy:true\";\n  return (\"{key:\" + (el.slotTarget || \"\\\"default\\\"\") + \",fn:\" + fn + reverseProxy + \"}\")\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      var normalizationType = checkSkip\n        ? state.maybeComponent(el$1) ? \",1\" : \",0\"\n        : \"\";\n      return (\"\" + ((altGenElement || genElement)(el$1, state)) + normalizationType)\n    }\n    var normalizationType$1 = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType$1 ? (\",\" + normalizationType$1) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } else if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs || el.dynamicAttrs\n    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({\n        // slot props are camelized\n        name: camelize(attr.name),\n        value: attr.value,\n        dynamic: attr.dynamic\n      }); }))\n    : null;\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var staticProps = \"\";\n  var dynamicProps = \"\";\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    var value = transformSpecialNewlines(prop.value);\n    if (prop.dynamic) {\n      dynamicProps += (prop.name) + \",\" + value + \",\";\n    } else {\n      staticProps += \"\\\"\" + (prop.name) + \"\\\":\" + value + \",\";\n    }\n  }\n  staticProps = \"{\" + (staticProps.slice(0, -1)) + \"}\";\n  if (dynamicProps) {\n    return (\"_d(\" + staticProps + \",[\" + (dynamicProps.slice(0, -1)) + \"])\")\n  } else {\n    return staticProps\n  }\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast, warn) {\n  if (ast) {\n    checkNode(ast, warn);\n  }\n}\n\nfunction checkNode (node, warn) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          var range = node.rawAttrsMap[name];\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (name === 'v-slot' || name[0] === '#') {\n            checkFunctionParameterExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], warn);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, warn, node);\n  }\n}\n\nfunction checkEvent (exp, text, warn, range) {\n  var stripped = exp.replace(stripStringRE, '');\n  var keywordMatch = stripped.match(unaryOperatorsRE);\n  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {\n    warn(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim()),\n      range\n    );\n  }\n  checkExpression(exp, text, warn, range);\n}\n\nfunction checkFor (node, text, warn, range) {\n  checkExpression(node.for || '', text, warn, range);\n  checkIdentifier(node.alias, 'v-for alias', text, warn, range);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  warn,\n  range\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      warn((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())), range);\n    }\n  }\n}\n\nfunction checkExpression (exp, text, warn, range) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      warn(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim()),\n        range\n      );\n    } else {\n      warn(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\",\n        range\n      );\n    }\n  }\n}\n\nfunction checkFunctionParameterExpression (exp, text, warn, range) {\n  try {\n    new Function(exp, '');\n  } catch (e) {\n    warn(\n      \"invalid function parameter expression: \" + (e.message) + \" in\\n\\n\" +\n      \"    \" + exp + \"\\n\\n\" +\n      \"  Raw expression: \" + (text.trim()) + \"\\n\",\n      range\n    );\n  }\n}\n\n/*  */\n\nvar range = 2;\n\nfunction generateCodeFrame (\n  source,\n  start,\n  end\n) {\n  if ( start === void 0 ) start = 0;\n  if ( end === void 0 ) end = source.length;\n\n  var lines = source.split(/\\r?\\n/);\n  var count = 0;\n  var res = [];\n  for (var i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (var j = i - range; j <= i + range || end > count; j++) {\n        if (j < 0 || j >= lines.length) { continue }\n        res.push((\"\" + (j + 1) + (repeat$1(\" \", 3 - String(j + 1).length)) + \"|  \" + (lines[j])));\n        var lineLength = lines[j].length;\n        if (j === i) {\n          // push underline\n          var pad = start - (count - lineLength) + 1;\n          var length = end > count ? lineLength - pad : end - start;\n          res.push(\"   |  \" + repeat$1(\" \", pad) + repeat$1(\"^\", length));\n        } else if (j > i) {\n          if (end > count) {\n            var length$1 = Math.min(end - count, lineLength);\n            res.push(\"   |  \" + repeat$1(\"^\", length$1));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break\n    }\n  }\n  return res.join('\\n')\n}\n\nfunction repeat$1 (str, n) {\n  var result = '';\n  if (n > 0) {\n    while (true) { // eslint-disable-line\n      if (n & 1) { result += str; }\n      n >>>= 1;\n      if (n <= 0) { break }\n      str += str;\n    }\n  }\n  return result\n}\n\n/*  */\n\n\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    {\n      if (compiled.errors && compiled.errors.length) {\n        if (options.outputSourceRange) {\n          compiled.errors.forEach(function (e) {\n            warn$$1(\n              \"Error compiling template:\\n\\n\" + (e.msg) + \"\\n\\n\" +\n              generateCodeFrame(template, e.start, e.end),\n              vm\n            );\n          });\n        } else {\n          warn$$1(\n            \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n            compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n            vm\n          );\n        }\n      }\n      if (compiled.tips && compiled.tips.length) {\n        if (options.outputSourceRange) {\n          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });\n        } else {\n          compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n        }\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n\n      var warn = function (msg, range, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        if (options.outputSourceRange) {\n          // $flow-disable-line\n          var leadingSpaceLength = template.match(/^\\s*/)[0].length;\n\n          warn = function (msg, range, tip) {\n            var data = { msg: msg };\n            if (range) {\n              if (range.start != null) {\n                data.start = range.start + leadingSpaceLength;\n              }\n              if (range.end != null) {\n                data.end = range.end + leadingSpaceLength;\n              }\n            }\n            (tip ? tips : errors).push(data);\n          };\n        }\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      finalOptions.warn = warn;\n\n      var compiled = baseCompile(template.trim(), finalOptions);\n      {\n        detectErrors(compiled.ast, warn);\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compile = ref$1.compile;\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (!template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        outputSourceRange: \"development\" !== 'production',\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\nmodule.exports = Vue;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue/dist/vue.common.dev.js\n");

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.js":
/*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("if (false) {} else {\n  module.exports = __webpack_require__(/*! ./vue.common.dev.js */ \"./node_modules/vue/dist/vue.common.dev.js\")\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLmNvbW1vbi5qcz81ZWU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksS0FBcUMsRUFBRSxFQUUxQztBQUNELG1CQUFtQixtQkFBTyxDQUFDLHNFQUFxQjtBQUNoRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUuY29tbW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3Z1ZS5jb21tb24ucHJvZC5qcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vdnVlLmNvbW1vbi5kZXYuanMnKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vue/dist/vue.common.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./public/index.js":
/*!*************************!*\
  !*** ./public/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.common.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _FloForm = __webpack_require__(/*! ../public/vue-components/FloForm.vue */ \"./public/vue-components/FloForm.vue\");\n\nvar _FloForm2 = _interopRequireDefault(_FloForm);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// will store here the list of innitialized Flo Forms IDs.\nwindow.initializedFloForms = [];\n\nfunction initFloForms() {\n\tif (jQuery(\".app-flo-forms\").length) {\n\t\tjQuery(\".app-flo-forms\").not(\".flo-initialized-form\").each(function (index) {\n\t\t\t// make sure to not reinit the same forms if it was already initialized.\n\t\t\t// this will prevent the issue when the same form is inserted on the same page several times\n\t\t\t// this class will be used to prevent multiple initialization of the same form which causes issues\n\t\t\tjQuery(this).addClass(\"flo-initialized-form\");\n\n\t\t\tnew _vue2.default({\n\t\t\t\t//el: '.app-flo-forms',\n\t\t\t\tel: this,\n\t\t\t\tbeforeCreate: function beforeCreate() {\n\t\t\t\t\t//console.log(this.$formSettings)\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\t//vue_form_settings: flo_form_settings\n\t\t\t\t},\n\t\t\t\tprops: [\"form_id\"],\n\t\t\t\tcomponents: {\n\t\t\t\t\t//'hello': Hello,\n\t\t\t\t\t\"flo-form\": _FloForm2.default\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\taddFormField: function addFormField(key, event) {\n\t\t\t\t\t\tconsole.log(event, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\ninitFloForms();\njQuery(\"body\").on(\"flo-forms-reinit\", initFloForms);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wdWJsaWMvaW5kZXguanM/ZmNkZCJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJpbml0aWFsaXplZEZsb0Zvcm1zIiwiaW5pdEZsb0Zvcm1zIiwialF1ZXJ5IiwibGVuZ3RoIiwibm90IiwiZWFjaCIsImluZGV4IiwiYWRkQ2xhc3MiLCJWdWUiLCJlbCIsImJlZm9yZUNyZWF0ZSIsImRhdGEiLCJwcm9wcyIsImNvbXBvbmVudHMiLCJGbG9Gb3JtIiwibWV0aG9kcyIsImFkZEZvcm1GaWVsZCIsImtleSIsImV2ZW50IiwiY29uc29sZSIsImxvZyIsIm9uIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0FBLE9BQU9DLG1CQUFQLEdBQTZCLEVBQTdCOztBQUVBLFNBQVNDLFlBQVQsR0FBd0I7QUFDdkIsS0FBSUMsT0FBTyxnQkFBUCxFQUF5QkMsTUFBN0IsRUFBcUM7QUFDcENELFNBQU8sZ0JBQVAsRUFDRUUsR0FERixDQUNNLHVCQUROLEVBRUVDLElBRkYsQ0FFTyxVQUFVQyxLQUFWLEVBQWlCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBSixVQUFPLElBQVAsRUFBYUssUUFBYixDQUFzQixzQkFBdEI7O0FBRUEsT0FBSUMsYUFBSixDQUFRO0FBQ1A7QUFDQUMsUUFBSSxJQUZHO0FBR1BDLGtCQUFjLHdCQUFZO0FBQ3pCO0FBQ0EsS0FMTTtBQU1QQyxVQUFNO0FBQ0w7QUFESyxLQU5DO0FBU1BDLFdBQU8sQ0FBQyxTQUFELENBVEE7QUFVUEMsZ0JBQVk7QUFDWDtBQUNBLGlCQUFZQztBQUZELEtBVkw7QUFjUEMsYUFBUztBQUNSQyxtQkFBYyxzQkFBVUMsR0FBVixFQUFlQyxLQUFmLEVBQXNCO0FBQ25DQyxjQUFRQyxHQUFSLENBQVlGLEtBQVosRUFBbUJELEdBQW5CO0FBQ0E7QUFITztBQWRGLElBQVI7QUFvQkEsR0E1QkY7QUE2QkE7QUFDRDtBQUNEaEI7QUFDQUMsT0FBTyxNQUFQLEVBQWVtQixFQUFmLENBQWtCLGtCQUFsQixFQUFzQ3BCLFlBQXRDIiwiZmlsZSI6Ii4vcHVibGljL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgRmxvRm9ybSBmcm9tIFwiLi4vcHVibGljL3Z1ZS1jb21wb25lbnRzL0Zsb0Zvcm0udnVlXCI7XG5cbi8vIHdpbGwgc3RvcmUgaGVyZSB0aGUgbGlzdCBvZiBpbm5pdGlhbGl6ZWQgRmxvIEZvcm1zIElEcy5cbndpbmRvdy5pbml0aWFsaXplZEZsb0Zvcm1zID0gW107XG5cbmZ1bmN0aW9uIGluaXRGbG9Gb3JtcygpIHtcblx0aWYgKGpRdWVyeShcIi5hcHAtZmxvLWZvcm1zXCIpLmxlbmd0aCkge1xuXHRcdGpRdWVyeShcIi5hcHAtZmxvLWZvcm1zXCIpXG5cdFx0XHQubm90KFwiLmZsby1pbml0aWFsaXplZC1mb3JtXCIpXG5cdFx0XHQuZWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRvIG5vdCByZWluaXQgdGhlIHNhbWUgZm9ybXMgaWYgaXQgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXG5cdFx0XHRcdC8vIHRoaXMgd2lsbCBwcmV2ZW50IHRoZSBpc3N1ZSB3aGVuIHRoZSBzYW1lIGZvcm0gaXMgaW5zZXJ0ZWQgb24gdGhlIHNhbWUgcGFnZSBzZXZlcmFsIHRpbWVzXG5cdFx0XHRcdC8vIHRoaXMgY2xhc3Mgd2lsbCBiZSB1c2VkIHRvIHByZXZlbnQgbXVsdGlwbGUgaW5pdGlhbGl6YXRpb24gb2YgdGhlIHNhbWUgZm9ybSB3aGljaCBjYXVzZXMgaXNzdWVzXG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5hZGRDbGFzcyhcImZsby1pbml0aWFsaXplZC1mb3JtXCIpO1xuXG5cdFx0XHRcdG5ldyBWdWUoe1xuXHRcdFx0XHRcdC8vZWw6ICcuYXBwLWZsby1mb3JtcycsXG5cdFx0XHRcdFx0ZWw6IHRoaXMsXG5cdFx0XHRcdFx0YmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKHRoaXMuJGZvcm1TZXR0aW5ncylcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdC8vdnVlX2Zvcm1fc2V0dGluZ3M6IGZsb19mb3JtX3NldHRpbmdzXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRwcm9wczogW1wiZm9ybV9pZFwiXSxcblx0XHRcdFx0XHRjb21wb25lbnRzOiB7XG5cdFx0XHRcdFx0XHQvLydoZWxsbyc6IEhlbGxvLFxuXHRcdFx0XHRcdFx0XCJmbG8tZm9ybVwiOiBGbG9Gb3JtLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0bWV0aG9kczoge1xuXHRcdFx0XHRcdFx0YWRkRm9ybUZpZWxkOiBmdW5jdGlvbiAoa2V5LCBldmVudCkge1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhldmVudCwga2V5KTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0fVxufVxuaW5pdEZsb0Zvcm1zKCk7XG5qUXVlcnkoXCJib2R5XCIpLm9uKFwiZmxvLWZvcm1zLXJlaW5pdFwiLCBpbml0RmxvRm9ybXMpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/index.js\n");

/***/ }),

/***/ "./public/vue-components/FloForm.vue":
/*!*******************************************!*\
  !*** ./public/vue-components/FloForm.vue ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./FloForm.vue */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./public/vue-components/FloForm.vue\");\n/* harmony import */ var _babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _node_modules_vue_loader_lib_template_compiler_index_id_data_v_63510da3_hasScoped_false_optionsId_0_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/vue-loader/lib/template-compiler/index?{\"id\":\"data-v-63510da3\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./FloForm.vue */ \"./node_modules/vue-loader/lib/template-compiler/index.js?{\\\"id\\\":\\\"data-v-63510da3\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./public/vue-components/FloForm.vue\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_component_normalizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/component-normalizer */ \"./node_modules/vue-loader/lib/runtime/component-normalizer.js\");\nvar disposed = false\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(_node_modules_vue_loader_lib_runtime_component_normalizer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_0___default.a,\n  _node_modules_vue_loader_lib_template_compiler_index_id_data_v_63510da3_hasScoped_false_optionsId_0_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_1__[\"render\"],\n  _node_modules_vue_loader_lib_template_compiler_index_id_data_v_63510da3_hasScoped_false_optionsId_0_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_FloForm_vue__WEBPACK_IMPORTED_MODULE_1__[\"staticRenderFns\"],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"public/vue-components/FloForm.vue\"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wdWJsaWMvdnVlLWNvbXBvbmVudHMvRmxvRm9ybS52dWU/YjhiMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQzJHO0FBQ2E7QUFDeEg7QUFDb1U7QUFDcFU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnRztBQUNoRyxnQkFBZ0IseUdBQWtCO0FBQ2xDLEVBQUUseUhBQWM7QUFDaEIsRUFBRSxrT0FBYztBQUNoQixFQUFFLDJPQUF5QjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLEtBQVUsRUFBRSxFQWFYOztBQUVVLGdGQUFpQiIsImZpbGUiOiIuL3B1YmxpYy92dWUtY29tcG9uZW50cy9GbG9Gb3JtLnZ1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Zsb0Zvcm0udnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9GbG9Gb3JtLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi02MzUxMGRhM1xcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9GbG9Gb3JtLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicHVibGljL3Z1ZS1jb21wb25lbnRzL0Zsb0Zvcm0udnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTYzNTEwZGEzXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNjM1MTBkYTNcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/vue-components/FloForm.vue\n");

/***/ })

/******/ });