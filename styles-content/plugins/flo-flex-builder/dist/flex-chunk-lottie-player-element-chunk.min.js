(self["webpackChunkflo_flex_builder"] = self["webpackChunkflo_flex_builder"] || []).push([["lottie-player-element-chunk"],{

/***/ "./node_modules/@lottiefiles/lottie-player/dist/lottie-player.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@lottiefiles/lottie-player/dist/lottie-player.esm.js ***!
  \***************************************************************************/
/*! namespace exports */
/*! export LottiePlayer [provided] [no usage info] [missing usage info prevents renaming] */
/*! export PlayMode [provided] [no usage info] [missing usage info prevents renaming] */
/*! export PlayerEvents [provided] [no usage info] [missing usage info prevents renaming] */
/*! export PlayerState [provided] [no usage info] [missing usage info prevents renaming] */
/*! export parseSrc [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.g, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LottiePlayer": () => /* binding */ LottiePlayer,
/* harmony export */   "PlayMode": () => /* binding */ PlayMode,
/* harmony export */   "PlayerEvents": () => /* binding */ PlayerEvents,
/* harmony export */   "PlayerState": () => /* binding */ PlayerState,
/* harmony export */   "parseSrc": () => /* binding */ parseSrc
/* harmony export */ });
function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function(obj){return typeof obj;};}else{_typeof=function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}var REACT_ELEMENT_TYPE;function _jsx(type,props,key,children){if(!REACT_ELEMENT_TYPE){REACT_ELEMENT_TYPE=typeof Symbol==="function"&&Symbol["for"]&&Symbol["for"]("react.element")||0xeac7;}var defaultProps=type&&type.defaultProps;var childrenLength=arguments.length-3;if(!props&&childrenLength!==0){props={children:void 0};}if(childrenLength===1){props.children=children;}else if(childrenLength>1){var childArray=new Array(childrenLength);for(var i=0;i<childrenLength;i++){childArray[i]=arguments[i+3];}props.children=childArray;}if(props&&defaultProps){for(var propName in defaultProps){if(props[propName]===void 0){props[propName]=defaultProps[propName];}}}else if(!props){props=defaultProps||{};}return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:key===undefined?null:''+key,ref:null,props:props,_owner:null};}function _asyncIterator(iterable){var method;if(typeof Symbol!=="undefined"){if(Symbol.asyncIterator){method=iterable[Symbol.asyncIterator];if(method!=null)return method.call(iterable);}if(Symbol.iterator){method=iterable[Symbol.iterator];if(method!=null)return method.call(iterable);}}throw new TypeError("Object is not async iterable");}function _AwaitValue(value){this.wrapped=value;}function _AsyncGenerator(gen){var front,back;function send(key,arg){return new Promise(function(resolve,reject){var request={key:key,arg:arg,resolve:resolve,reject:reject,next:null};if(back){back=back.next=request;}else{front=back=request;resume(key,arg);}});}function resume(key,arg){try{var result=gen[key](arg);var value=result.value;var wrappedAwait=value instanceof _AwaitValue;Promise.resolve(wrappedAwait?value.wrapped:value).then(function(arg){if(wrappedAwait){resume(key==="return"?"return":"next",arg);return;}settle(result.done?"return":"normal",arg);},function(err){resume("throw",err);});}catch(err){settle("throw",err);}}function settle(type,value){switch(type){case"return":front.resolve({value:value,done:true});break;case"throw":front.reject(value);break;default:front.resolve({value:value,done:false});break;}front=front.next;if(front){resume(front.key,front.arg);}else{back=null;}}this._invoke=send;if(typeof gen.return!=="function"){this.return=undefined;}}if(typeof Symbol==="function"&&Symbol.asyncIterator){_AsyncGenerator.prototype[Symbol.asyncIterator]=function(){return this;};}_AsyncGenerator.prototype.next=function(arg){return this._invoke("next",arg);};_AsyncGenerator.prototype.throw=function(arg){return this._invoke("throw",arg);};_AsyncGenerator.prototype.return=function(arg){return this._invoke("return",arg);};function _wrapAsyncGenerator(fn){return function(){return new _AsyncGenerator(fn.apply(this,arguments));};}function _awaitAsyncGenerator(value){return new _AwaitValue(value);}function _asyncGeneratorDelegate(inner,awaitWrap){var iter={},waiting=false;function pump(key,value){waiting=true;value=new Promise(function(resolve){resolve(inner[key](value));});return{done:false,value:awaitWrap(value)};};if(typeof Symbol==="function"&&Symbol.iterator){iter[Symbol.iterator]=function(){return this;};}iter.next=function(value){if(waiting){waiting=false;return value;}return pump("next",value);};if(typeof inner.throw==="function"){iter.throw=function(value){if(waiting){waiting=false;throw value;}return pump("throw",value);};}if(typeof inner.return==="function"){iter.return=function(value){if(waiting){waiting=false;return value;}return pump("return",value);};}return iter;}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _defineEnumerableProperties(obj,descs){for(var key in descs){var desc=descs[key];desc.configurable=desc.enumerable=true;if("value"in desc)desc.writable=true;Object.defineProperty(obj,key,desc);}if(Object.getOwnPropertySymbols){var objectSymbols=Object.getOwnPropertySymbols(descs);for(var i=0;i<objectSymbols.length;i++){var sym=objectSymbols[i];var desc=descs[sym];desc.configurable=desc.enumerable=true;if("value"in desc)desc.writable=true;Object.defineProperty(obj,sym,desc);}}return obj;}function _defaults(obj,defaults){var keys=Object.getOwnPropertyNames(defaults);for(var i=0;i<keys.length;i++){var key=keys[i];var value=Object.getOwnPropertyDescriptor(defaults,key);if(value&&value.configurable&&obj[key]===undefined){Object.defineProperty(obj,key,value);}}return obj;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?Object(arguments[i]):{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==='function'){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable;}));}ownKeys.forEach(function(key){_defineProperty(target,key,source[key]);});}return target;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;_setPrototypeOf(subClass,superClass);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _construct(Parent,args,Class){if(_isNativeReflectConstruct()){_construct=Reflect.construct;}else{_construct=function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var Constructor=Function.bind.apply(Parent,a);var instance=new Constructor();if(Class)_setPrototypeOf(instance,Class.prototype);return instance;};}return _construct.apply(null,arguments);}function _isNativeFunction(fn){return Function.toString.call(fn).indexOf("[native code]")!==-1;}function _wrapNativeSuper(Class){var _cache=typeof Map==="function"?new Map():undefined;_wrapNativeSuper=function _wrapNativeSuper(Class){if(Class===null||!_isNativeFunction(Class))return Class;if(typeof Class!=="function"){throw new TypeError("Super expression must either be null or a function");}if(typeof _cache!=="undefined"){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper);}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor);}Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:false,writable:true,configurable:true}});return _setPrototypeOf(Wrapper,Class);};return _wrapNativeSuper(Class);}function _instanceof(left,right){if(right!=null&&typeof Symbol!=="undefined"&&right[Symbol.hasInstance]){return!!right[Symbol.hasInstance](left);}else{return left instanceof right;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _newArrowCheck(innerThis,boundThis){if(innerThis!==boundThis){throw new TypeError("Cannot instantiate an arrow function");}}function _objectDestructuringEmpty(obj){if(obj==null)throw new TypeError("Cannot destructure undefined");}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _possibleConstructorReturn(self,call){if(call&&(typeof call==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _superPropBase(object,property){while(!Object.prototype.hasOwnProperty.call(object,property)){object=_getPrototypeOf(object);if(object===null)break;}return object;}function _get(target,property,receiver){if(typeof Reflect!=="undefined"&&Reflect.get){_get=Reflect.get;}else{_get=function _get(target,property,receiver){var base=_superPropBase(target,property);if(!base)return;var desc=Object.getOwnPropertyDescriptor(base,property);if(desc.get){return desc.get.call(receiver);}return desc.value;};}return _get(target,property,receiver||target);}function set(target,property,value,receiver){if(typeof Reflect!=="undefined"&&Reflect.set){set=Reflect.set;}else{set=function set(target,property,value,receiver){var base=_superPropBase(target,property);var desc;if(base){desc=Object.getOwnPropertyDescriptor(base,property);if(desc.set){desc.set.call(receiver,value);return true;}else if(!desc.writable){return false;}}desc=Object.getOwnPropertyDescriptor(receiver,property);if(desc){if(!desc.writable){return false;}desc.value=value;Object.defineProperty(receiver,property,desc);}else{_defineProperty(receiver,property,value);}return true;};}return set(target,property,value,receiver);}function _set(target,property,value,receiver,isStrict){var s=set(target,property,value,receiver||target);if(!s&&isStrict){throw new Error('failed to set property');}return value;}function _taggedTemplateLiteral(strings,raw){if(!raw){raw=strings.slice(0);}return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}));}function _taggedTemplateLiteralLoose(strings,raw){if(!raw){raw=strings.slice(0);}strings.raw=raw;return strings;}function _readOnlyError(name){throw new TypeError("\""+name+"\" is read-only");}function _writeOnlyError(name){throw new TypeError("\""+name+"\" is write-only");}function _classNameTDZError(name){throw new Error("Class \""+name+"\" cannot be referenced in computed property keys.");}function _temporalUndefined(){}function _tdz(name){throw new ReferenceError(name+" is not defined - temporal dead zone");}function _temporalRef(val,name){return val===_temporalUndefined?_tdz(name):val;}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();}function _slicedToArrayLoose(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimitLoose(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();}function _toArray(arr){return _arrayWithHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableRest();}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread();}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr);}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _maybeArrayLike(next,arr,i){if(arr&&!Array.isArray(arr)&&typeof arr.length==="number"){var len=arr.length;return _arrayLikeToArray(arr,i!==void 0&&i<len?i:len);}return next(arr,i);}function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&Symbol.iterator in Object(iter))return Array.from(iter);}function _iterableToArrayLimit(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"]!=null)_i["return"]();}finally{if(_d)throw _e;}}return _arr;}function _iterableToArrayLimitLoose(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];for(var _iterator=arr[Symbol.iterator](),_step;!(_step=_iterator.next()).done;){_arr.push(_step.value);if(i&&_arr.length===i)break;}return _arr;}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2;}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol==="undefined"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function(){};return{s:F,n:function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function(e){throw e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function(){it=o[Symbol.iterator]();},n:function(){var step=it.next();normalCompletion=step.done;return step;},e:function(e){didErr=true;err=e;},f:function(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function _createForOfIteratorHelperLoose(o,allowArrayLike){var it;if(typeof Symbol==="undefined"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}it=o[Symbol.iterator]();return it.next.bind(it);}function _skipFirstGeneratorNext(fn){return function(){var it=fn.apply(this,arguments);it.next();return it;};}function _toPrimitive(input,hint){if(typeof input!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(typeof res!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return typeof key==="symbol"?key:String(key);}function _initializerWarningHelper(descriptor,context){throw new Error('Decorating class property failed. Please ensure that '+'proposal-class-properties is enabled and runs after the decorators transform.');}function _initializerDefineProperty(target,property,descriptor,context){if(!descriptor)return;Object.defineProperty(target,property,{enumerable:descriptor.enumerable,configurable:descriptor.configurable,writable:descriptor.writable,value:descriptor.initializer?descriptor.initializer.call(context):void 0});}function _applyDecoratedDescriptor(target,property,decorators,descriptor,context){var desc={};Object.keys(descriptor).forEach(function(key){desc[key]=descriptor[key];});desc.enumerable=!!desc.enumerable;desc.configurable=!!desc.configurable;if('value'in desc||desc.initializer){desc.writable=true;}desc=decorators.slice().reverse().reduce(function(desc,decorator){return decorator(target,property,desc)||desc;},desc);if(context&&desc.initializer!==void 0){desc.value=desc.initializer?desc.initializer.call(context):void 0;desc.initializer=undefined;}if(desc.initializer===void 0){Object.defineProperty(target,property,desc);desc=null;}return desc;}var id=0;function _classPrivateFieldLooseKey(name){return"__private_"+id++ +"_"+name;}function _classPrivateFieldLooseBase(receiver,privateKey){if(!Object.prototype.hasOwnProperty.call(receiver,privateKey)){throw new TypeError("attempted to use private field on non-instance");}return receiver;}function _classPrivateFieldGet(receiver,privateMap){var descriptor=_classExtractFieldDescriptor(receiver,privateMap,"get");return _classApplyDescriptorGet(receiver,descriptor);}function _classPrivateFieldSet(receiver,privateMap,value){var descriptor=_classExtractFieldDescriptor(receiver,privateMap,"set");_classApplyDescriptorSet(receiver,descriptor,value);return value;}function _classPrivateFieldDestructureSet(receiver,privateMap){var descriptor=_classExtractFieldDescriptor(receiver,privateMap,"set");return _classApplyDescriptorDestructureSet(receiver,descriptor);}function _classExtractFieldDescriptor(receiver,privateMap,action){if(!privateMap.has(receiver)){throw new TypeError("attempted to "+action+" private field on non-instance");}return privateMap.get(receiver);}function _classStaticPrivateFieldSpecGet(receiver,classConstructor,descriptor){_classCheckPrivateStaticAccess(receiver,classConstructor);_classCheckPrivateStaticFieldDescriptor(descriptor,"get");return _classApplyDescriptorGet(receiver,descriptor);}function _classStaticPrivateFieldSpecSet(receiver,classConstructor,descriptor,value){_classCheckPrivateStaticAccess(receiver,classConstructor);_classCheckPrivateStaticFieldDescriptor(descriptor,"set");_classApplyDescriptorSet(receiver,descriptor,value);return value;}function _classStaticPrivateMethodGet(receiver,classConstructor,method){_classCheckPrivateStaticAccess(receiver,classConstructor);return method;}function _classStaticPrivateMethodSet(){throw new TypeError("attempted to set read only static private field");}function _classApplyDescriptorGet(receiver,descriptor){if(descriptor.get){return descriptor.get.call(receiver);}return descriptor.value;}function _classApplyDescriptorSet(receiver,descriptor,value){if(descriptor.set){descriptor.set.call(receiver,value);}else{if(!descriptor.writable){throw new TypeError("attempted to set read only private field");}descriptor.value=value;}}function _classApplyDescriptorDestructureSet(receiver,descriptor){if(descriptor.set){if(!("__destrObj"in descriptor)){descriptor.__destrObj={set value(v){descriptor.set.call(receiver,v);}};}return descriptor.__destrObj;}else{if(!descriptor.writable){throw new TypeError("attempted to set read only private field");}return descriptor;}}function _classStaticPrivateFieldDestructureSet(receiver,classConstructor,descriptor){_classCheckPrivateStaticAccess(receiver,classConstructor);_classCheckPrivateStaticFieldDescriptor(descriptor,"set");return _classApplyDescriptorDestructureSet(receiver,descriptor);}function _classCheckPrivateStaticAccess(receiver,classConstructor){if(receiver!==classConstructor){throw new TypeError("Private static access of wrong provenance");}}function _classCheckPrivateStaticFieldDescriptor(descriptor,action){if(descriptor===undefined){throw new TypeError("attempted to "+action+" private static field before its declaration");}}function _decorate(decorators,factory,superClass,mixins){var api=_getDecoratorsApi();if(mixins){for(var i=0;i<mixins.length;i++){api=mixins[i](api);}}var r=factory(function initialize(O){api.initializeInstanceElements(O,decorated.elements);},superClass);var decorated=api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)),decorators);api.initializeClassElements(r.F,decorated.elements);return api.runClassFinishers(r.F,decorated.finishers);}function _getDecoratorsApi(){_getDecoratorsApi=function(){return api;};var api={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(O,elements){["method","field"].forEach(function(kind){elements.forEach(function(element){if(element.kind===kind&&element.placement==="own"){this.defineClassElement(O,element);}},this);},this);},initializeClassElements:function(F,elements){var proto=F.prototype;["method","field"].forEach(function(kind){elements.forEach(function(element){var placement=element.placement;if(element.kind===kind&&(placement==="static"||placement==="prototype")){var receiver=placement==="static"?F:proto;this.defineClassElement(receiver,element);}},this);},this);},defineClassElement:function(receiver,element){var descriptor=element.descriptor;if(element.kind==="field"){var initializer=element.initializer;descriptor={enumerable:descriptor.enumerable,writable:descriptor.writable,configurable:descriptor.configurable,value:initializer===void 0?void 0:initializer.call(receiver)};}Object.defineProperty(receiver,element.key,descriptor);},decorateClass:function(elements,decorators){var newElements=[];var finishers=[];var placements={static:[],prototype:[],own:[]};elements.forEach(function(element){this.addElementPlacement(element,placements);},this);elements.forEach(function(element){if(!_hasDecorators(element))return newElements.push(element);var elementFinishersExtras=this.decorateElement(element,placements);newElements.push(elementFinishersExtras.element);newElements.push.apply(newElements,elementFinishersExtras.extras);finishers.push.apply(finishers,elementFinishersExtras.finishers);},this);if(!decorators){return{elements:newElements,finishers:finishers};}var result=this.decorateConstructor(newElements,decorators);finishers.push.apply(finishers,result.finishers);result.finishers=finishers;return result;},addElementPlacement:function(element,placements,silent){var keys=placements[element.placement];if(!silent&&keys.indexOf(element.key)!==-1){throw new TypeError("Duplicated element ("+element.key+")");}keys.push(element.key);},decorateElement:function(element,placements){var extras=[];var finishers=[];for(var decorators=element.decorators,i=decorators.length-1;i>=0;i--){var keys=placements[element.placement];keys.splice(keys.indexOf(element.key),1);var elementObject=this.fromElementDescriptor(element);var elementFinisherExtras=this.toElementFinisherExtras((0,decorators[i])(elementObject)||elementObject);element=elementFinisherExtras.element;this.addElementPlacement(element,placements);if(elementFinisherExtras.finisher){finishers.push(elementFinisherExtras.finisher);}var newExtras=elementFinisherExtras.extras;if(newExtras){for(var j=0;j<newExtras.length;j++){this.addElementPlacement(newExtras[j],placements);}extras.push.apply(extras,newExtras);}}return{element:element,finishers:finishers,extras:extras};},decorateConstructor:function(elements,decorators){var finishers=[];for(var i=decorators.length-1;i>=0;i--){var obj=this.fromClassDescriptor(elements);var elementsAndFinisher=this.toClassDescriptor((0,decorators[i])(obj)||obj);if(elementsAndFinisher.finisher!==undefined){finishers.push(elementsAndFinisher.finisher);}if(elementsAndFinisher.elements!==undefined){elements=elementsAndFinisher.elements;for(var j=0;j<elements.length-1;j++){for(var k=j+1;k<elements.length;k++){if(elements[j].key===elements[k].key&&elements[j].placement===elements[k].placement){throw new TypeError("Duplicated element ("+elements[j].key+")");}}}}}return{elements:elements,finishers:finishers};},fromElementDescriptor:function(element){var obj={kind:element.kind,key:element.key,placement:element.placement,descriptor:element.descriptor};var desc={value:"Descriptor",configurable:true};Object.defineProperty(obj,Symbol.toStringTag,desc);if(element.kind==="field")obj.initializer=element.initializer;return obj;},toElementDescriptors:function(elementObjects){if(elementObjects===undefined)return;return _toArray(elementObjects).map(function(elementObject){var element=this.toElementDescriptor(elementObject);this.disallowProperty(elementObject,"finisher","An element descriptor");this.disallowProperty(elementObject,"extras","An element descriptor");return element;},this);},toElementDescriptor:function(elementObject){var kind=String(elementObject.kind);if(kind!=="method"&&kind!=="field"){throw new TypeError('An element descriptor\'s .kind property must be either "method" or'+' "field", but a decorator created an element descriptor with'+' .kind "'+kind+'"');}var key=_toPropertyKey(elementObject.key);var placement=String(elementObject.placement);if(placement!=="static"&&placement!=="prototype"&&placement!=="own"){throw new TypeError('An element descriptor\'s .placement property must be one of "static",'+' "prototype" or "own", but a decorator created an element descriptor'+' with .placement "'+placement+'"');}var descriptor=elementObject.descriptor;this.disallowProperty(elementObject,"elements","An element descriptor");var element={kind:kind,key:key,placement:placement,descriptor:Object.assign({},descriptor)};if(kind!=="field"){this.disallowProperty(elementObject,"initializer","A method descriptor");}else{this.disallowProperty(descriptor,"get","The property descriptor of a field descriptor");this.disallowProperty(descriptor,"set","The property descriptor of a field descriptor");this.disallowProperty(descriptor,"value","The property descriptor of a field descriptor");element.initializer=elementObject.initializer;}return element;},toElementFinisherExtras:function(elementObject){var element=this.toElementDescriptor(elementObject);var finisher=_optionalCallableProperty(elementObject,"finisher");var extras=this.toElementDescriptors(elementObject.extras);return{element:element,finisher:finisher,extras:extras};},fromClassDescriptor:function(elements){var obj={kind:"class",elements:elements.map(this.fromElementDescriptor,this)};var desc={value:"Descriptor",configurable:true};Object.defineProperty(obj,Symbol.toStringTag,desc);return obj;},toClassDescriptor:function(obj){var kind=String(obj.kind);if(kind!=="class"){throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator'+' created a class descriptor with .kind "'+kind+'"');}this.disallowProperty(obj,"key","A class descriptor");this.disallowProperty(obj,"placement","A class descriptor");this.disallowProperty(obj,"descriptor","A class descriptor");this.disallowProperty(obj,"initializer","A class descriptor");this.disallowProperty(obj,"extras","A class descriptor");var finisher=_optionalCallableProperty(obj,"finisher");var elements=this.toElementDescriptors(obj.elements);return{elements:elements,finisher:finisher};},runClassFinishers:function(constructor,finishers){for(var i=0;i<finishers.length;i++){var newConstructor=(0,finishers[i])(constructor);if(newConstructor!==undefined){if(typeof newConstructor!=="function"){throw new TypeError("Finishers must return a constructor.");}constructor=newConstructor;}}return constructor;},disallowProperty:function(obj,name,objectType){if(obj[name]!==undefined){throw new TypeError(objectType+" can't have a ."+name+" property.");}}};return api;}function _createElementDescriptor(def){var key=_toPropertyKey(def.key);var descriptor;if(def.kind==="method"){descriptor={value:def.value,writable:true,configurable:true,enumerable:false};}else if(def.kind==="get"){descriptor={get:def.value,configurable:true,enumerable:false};}else if(def.kind==="set"){descriptor={set:def.value,configurable:true,enumerable:false};}else if(def.kind==="field"){descriptor={configurable:true,writable:true,enumerable:true};}var element={kind:def.kind==="field"?"field":"method",key:key,placement:def.static?"static":def.kind==="field"?"own":"prototype",descriptor:descriptor};if(def.decorators)element.decorators=def.decorators;if(def.kind==="field")element.initializer=def.value;return element;}function _coalesceGetterSetter(element,other){if(element.descriptor.get!==undefined){other.descriptor.get=element.descriptor.get;}else{other.descriptor.set=element.descriptor.set;}}function _coalesceClassElements(elements){var newElements=[];var isSameElement=function(other){return other.kind==="method"&&other.key===element.key&&other.placement===element.placement;};for(var i=0;i<elements.length;i++){var element=elements[i];var other;if(element.kind==="method"&&(other=newElements.find(isSameElement))){if(_isDataDescriptor(element.descriptor)||_isDataDescriptor(other.descriptor)){if(_hasDecorators(element)||_hasDecorators(other)){throw new ReferenceError("Duplicated methods ("+element.key+") can't be decorated.");}other.descriptor=element.descriptor;}else{if(_hasDecorators(element)){if(_hasDecorators(other)){throw new ReferenceError("Decorators can't be placed on different accessors with for "+"the same property ("+element.key+").");}other.decorators=element.decorators;}_coalesceGetterSetter(element,other);}}else{newElements.push(element);}}return newElements;}function _hasDecorators(element){return element.decorators&&element.decorators.length;}function _isDataDescriptor(desc){return desc!==undefined&&!(desc.value===undefined&&desc.writable===undefined);}function _optionalCallableProperty(obj,name){var value=obj[name];if(value!==undefined&&typeof value!=="function"){throw new TypeError("Expected '"+name+"' to be a function");}return value;}function _classPrivateMethodGet(receiver,privateSet,fn){if(!privateSet.has(receiver)){throw new TypeError("attempted to get private field on non-instance");}return fn;}function _classPrivateMethodSet(){throw new TypeError("attempted to reassign private method");}function _wrapRegExp(re,groups){_wrapRegExp=function(re,groups){return new BabelRegExp(re,undefined,groups);};var _RegExp=_wrapNativeSuper(RegExp);var _super=RegExp.prototype;var _groups=new WeakMap();function BabelRegExp(re,flags,groups){var _this=_RegExp.call(this,re,flags);_groups.set(_this,groups||_groups.get(re));return _this;}_inherits(BabelRegExp,_RegExp);BabelRegExp.prototype.exec=function(str){var result=_super.exec.call(this,str);if(result)result.groups=buildGroups(result,this);return result;};BabelRegExp.prototype[Symbol.replace]=function(str,substitution){if(typeof substitution==="string"){var groups=_groups.get(this);return _super[Symbol.replace].call(this,str,substitution.replace(/\$<([^>]+)>/g,function(_,name){return"$"+groups[name];}));}else if(typeof substitution==="function"){var _this=this;return _super[Symbol.replace].call(this,str,function(){var args=[];args.push.apply(args,arguments);if(typeof args[args.length-1]!=="object"){args.push(buildGroups(args,_this));}return substitution.apply(this,args);});}else{return _super[Symbol.replace].call(this,str,substitution);}};function buildGroups(result,re){var g=_groups.get(re);return Object.keys(g).reduce(function(groups,name){groups[name]=result[g[name]];return groups;},Object.create(null));}return _wrapRegExp.apply(this,arguments);}/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p];}};return _extendStatics(d,b);};function __extends(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());}var _assign=function __assign(){_assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}}return t;};return _assign.apply(this,arguments);};function __rest(s,e){var t={};for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];}if(s!=null&&typeof Object.getOwnPropertySymbols==="function")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;}function __decorate(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;}function __param(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex);};}function __metadata(metadataKey,metadataValue){if(typeof Reflect==="object"&&typeof Reflect.metadata==="function")return Reflect.metadata(metadataKey,metadataValue);}function __awaiter(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});}function __generator(thisArg,body){var _={label:0,sent:function sent(){if(t[0]&1)throw t[1];return t[1];},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),"throw":verb(1),"return":verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this;}),g;function verb(n){return function(v){return step([n,v]);};}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_){try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue;}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break;}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break;}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break;}if(t[2])_.ops.pop();_.trys.pop();continue;}op=body.call(thisArg,_);}catch(e){op=[6,e];y=0;}finally{f=t=0;}}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true};}}var __createBinding=Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;Object.defineProperty(o,k2,{enumerable:true,get:function get(){return m[k];}});}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];};function __exportStar(m,o){for(var p in m){if(p!=="default"&&!Object.prototype.hasOwnProperty.call(o,p))__createBinding(o,m,p);}}function __values(o){var s=typeof Symbol==="function"&&Symbol.iterator,m=s&&o[s],i=0;if(m)return m.call(o);if(o&&typeof o.length==="number")return{next:function next(){if(o&&i>=o.length)o=void 0;return{value:o&&o[i++],done:!o};}};throw new TypeError(s?"Object is not iterable.":"Symbol.iterator is not defined.");}function __read(o,n){var m=typeof Symbol==="function"&&o[Symbol.iterator];if(!m)return o;var i=m.call(o),r,ar=[],e;try{while((n===void 0||n-->0)&&!(r=i.next()).done){ar.push(r.value);}}catch(error){e={error:error};}finally{try{if(r&&!r.done&&(m=i["return"]))m.call(i);}finally{if(e)throw e.error;}}return ar;}function __spread(){for(var ar=[],i=0;i<arguments.length;i++){ar=ar.concat(__read(arguments[i]));}return ar;}function __spreadArrays(){for(var s=0,i=0,il=arguments.length;i<il;i++){s+=arguments[i].length;}for(var r=Array(s),k=0,i=0;i<il;i++){for(var a=arguments[i],j=0,jl=a.length;j<jl;j++,k++){r[k]=a[j];}}return r;};function __await(v){return this instanceof __await?(this.v=v,this):new __await(v);}function __asyncGenerator(thisArg,_arguments,generator){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var g=generator.apply(thisArg,_arguments||[]),i,q=[];return i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this;},i;function verb(n){if(g[n])i[n]=function(v){return new Promise(function(a,b){q.push([n,v,a,b])>1||resume(n,v);});};}function resume(n,v){try{step(g[n](v));}catch(e){settle(q[0][3],e);}}function step(r){r.value instanceof __await?Promise.resolve(r.value.v).then(fulfill,reject):settle(q[0][2],r);}function fulfill(value){resume("next",value);}function reject(value){resume("throw",value);}function settle(f,v){if(f(v),q.shift(),q.length)resume(q[0][0],q[0][1]);}}function __asyncDelegator(o){var i,p;return i={},verb("next"),verb("throw",function(e){throw e;}),verb("return"),i[Symbol.iterator]=function(){return this;},i;function verb(n,f){i[n]=o[n]?function(v){return(p=!p)?{value:__await(o[n](v)),done:n==="return"}:f?f(v):v;}:f;}}function __asyncValues(o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var m=o[Symbol.asyncIterator],i;return m?m.call(o):(o=typeof __values==="function"?__values(o):o[Symbol.iterator](),i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this;},i);function verb(n){i[n]=o[n]&&function(v){return new Promise(function(resolve,reject){v=o[n](v),settle(resolve,reject,v.done,v.value);});};}function settle(resolve,reject,d,v){Promise.resolve(v).then(function(v){resolve({value:v,done:d});},reject);}}function __makeTemplateObject(cooked,raw){if(Object.defineProperty){Object.defineProperty(cooked,"raw",{value:raw});}else{cooked.raw=raw;}return cooked;};var __setModuleDefault=Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:true,value:v});}:function(o,v){o["default"]=v;};function __importStar(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod){if(k!=="default"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);}__setModuleDefault(result,mod);return result;}function __importDefault(mod){return mod&&mod.__esModule?mod:{default:mod};}function __classPrivateFieldGet(receiver,privateMap){if(!privateMap.has(receiver)){throw new TypeError("attempted to get private field on non-instance");}return privateMap.get(receiver);}function __classPrivateFieldSet(receiver,privateMap,value){if(!privateMap.has(receiver)){throw new TypeError("attempted to set private field on non-instance");}privateMap.set(receiver,value);return value;}/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ /**
 * True if the custom elements polyfill is in use.
 */var isCEPolyfill=typeof window!=='undefined'&&window.customElements!=null&&window.customElements.polyfillWrapFlushCallback!==undefined;/**
 * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),
 * into another container (could be the same container), before `before`. If
 * `before` is null, it appends the nodes to the container.
 */var reparentNodes=function reparentNodes(container,start){var end=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var before=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;while(start!==end){var n=start.nextSibling;container.insertBefore(start,before);start=n;}};/**
 * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
 * `container`.
 */var removeNodes=function removeNodes(container,start){var end=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;while(start!==end){var n=start.nextSibling;container.removeChild(start);start=n;}};/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ /**
 * An expression marker with embedded unique key to avoid collision with
 * possible text in templates.
 */var marker="{{lit-".concat(String(Math.random()).slice(2),"}}");/**
 * An expression marker used text-positions, multi-binding attributes, and
 * attributes with markup-like text values.
 */var nodeMarker="<!--".concat(marker,"-->");var markerRegex=new RegExp("".concat(marker,"|").concat(nodeMarker));/**
 * Suffix appended to all bound attribute names.
 */var boundAttributeSuffix='$lit$';/**
 * An updatable Template that tracks the location of dynamic parts.
 */class Template{constructor(result,element){this.parts=[];this.element=element;var nodesToRemove=[];var stack=[];// Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
var walker=document.createTreeWalker(element.content,133/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,null,false);// Keeps track of the last index associated with a part. We try to delete
// unnecessary nodes, but we never want to associate two different parts
// to the same index. They must have a constant node between.
var lastPartIndex=0;var index=-1;var partIndex=0;var{strings,values:{length}}=result;while(partIndex<length){var node=walker.nextNode();if(node===null){// We've exhausted the content inside a nested template element.
// Because we still have parts (the outer for-loop), we know:
// - There is a template in the stack
// - The walker will find a nextNode outside the template
walker.currentNode=stack.pop();continue;}index++;if(node.nodeType===1/* Node.ELEMENT_NODE */){if(node.hasAttributes()){var attributes=node.attributes;var{length:_length}=attributes;// Per
// https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
// attributes are not guaranteed to be returned in document order.
// In particular, Edge/IE can return them out of order, so we cannot
// assume a correspondence between part index and attribute index.
var count=0;for(var i=0;i<_length;i++){if(endsWith(attributes[i].name,boundAttributeSuffix)){count++;}}while(count-->0){// Get the template literal section leading up to the first
// expression in this attribute
var stringForPart=strings[partIndex];// Find the attribute name
var name=lastAttributeNameRegex.exec(stringForPart)[2];// Find the corresponding attribute
// All bound attributes have had a suffix added in
// TemplateResult#getHTML to opt out of special attribute
// handling. To look up the attribute value we also need to add
// the suffix.
var attributeLookupName=name.toLowerCase()+boundAttributeSuffix;var attributeValue=node.getAttribute(attributeLookupName);node.removeAttribute(attributeLookupName);var statics=attributeValue.split(markerRegex);this.parts.push({type:'attribute',index,name,strings:statics});partIndex+=statics.length-1;}}if(node.tagName==='TEMPLATE'){stack.push(node);walker.currentNode=node.content;}}else if(node.nodeType===3/* Node.TEXT_NODE */){var data=node.data;if(data.indexOf(marker)>=0){var parent=node.parentNode;var _strings=data.split(markerRegex);var lastIndex=_strings.length-1;// Generate a new text node for each literal section
// These nodes are also used as the markers for node parts
for(var _i=0;_i<lastIndex;_i++){var insert=void 0;var s=_strings[_i];if(s===''){insert=createMarker();}else{var match=lastAttributeNameRegex.exec(s);if(match!==null&&endsWith(match[2],boundAttributeSuffix)){s=s.slice(0,match.index)+match[1]+match[2].slice(0,-boundAttributeSuffix.length)+match[3];}insert=document.createTextNode(s);}parent.insertBefore(insert,node);this.parts.push({type:'node',index:++index});}// If there's no text, we must insert a comment to mark our place.
// Else, we can trust it will stick around after cloning.
if(_strings[lastIndex]===''){parent.insertBefore(createMarker(),node);nodesToRemove.push(node);}else{node.data=_strings[lastIndex];}// We have a part for each match found
partIndex+=lastIndex;}}else if(node.nodeType===8/* Node.COMMENT_NODE */){if(node.data===marker){var _parent=node.parentNode;// Add a new marker node to be the startNode of the Part if any of
// the following are true:
//  * We don't have a previousSibling
//  * The previousSibling is already the start of a previous part
if(node.previousSibling===null||index===lastPartIndex){index++;_parent.insertBefore(createMarker(),node);}lastPartIndex=index;this.parts.push({type:'node',index});// If we don't have a nextSibling, keep this node so we have an end.
// Else, we can remove it to save future costs.
if(node.nextSibling===null){node.data='';}else{nodesToRemove.push(node);index--;}partIndex++;}else{var _i2=-1;while((_i2=node.data.indexOf(marker,_i2+1))!==-1){// Comment node has a binding marker inside, make an inactive part
// The binding won't work, but subsequent bindings will
// TODO (justinfagnani): consider whether it's even worth it to
// make bindings in comments work
this.parts.push({type:'node',index:-1});partIndex++;}}}}// Remove text binding nodes after the walk to not disturb the TreeWalker
for(var n of nodesToRemove){n.parentNode.removeChild(n);}}}var endsWith=(str,suffix)=>{var index=str.length-suffix.length;return index>=0&&str.slice(index)===suffix;};var isTemplatePartActive=part=>part.index!==-1;// Allows `document.createComment('')` to be renamed for a
// small manual size-savings.
var createMarker=()=>document.createComment('');/**
 * This regex extracts the attribute name preceding an attribute-position
 * expression. It does this by matching the syntax allowed for attributes
 * against the string literal directly preceding the expression, assuming that
 * the expression is in an attribute-value position.
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
 *
 * " \x09\x0a\x0c\x0d" are HTML space characters:
 * https://www.w3.org/TR/html5/infrastructure.html#space-characters
 *
 * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
 * space character except " ".
 *
 * So an attribute is:
 *  * The name: any character except a control character, space character, ('),
 *    ("), ">", "=", or "/"
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */var lastAttributeNameRegex=// eslint-disable-next-line no-control-regex
/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var walkerNodeFilter=133/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;/**
 * Removes the list of nodes from a Template safely. In addition to removing
 * nodes from the Template, the Template part indices are updated to match
 * the mutated Template DOM.
 *
 * As the template is walked the removal state is tracked and
 * part indices are adjusted as needed.
 *
 * div
 *   div#1 (remove) <-- start removing (removing node is div#1)
 *     div
 *       div#2 (remove)  <-- continue removing (removing node is still div#1)
 *         div
 * div <-- stop removing since previous sibling is the removing node (div#1,
 * removed 4 nodes)
 */function removeNodesFromTemplate(template,nodesToRemove){var{element:{content},parts}=template;var walker=document.createTreeWalker(content,walkerNodeFilter,null,false);var partIndex=nextActiveIndexInTemplateParts(parts);var part=parts[partIndex];var nodeIndex=-1;var removeCount=0;var nodesToRemoveInTemplate=[];var currentRemovingNode=null;while(walker.nextNode()){nodeIndex++;var node=walker.currentNode;// End removal if stepped past the removing node
if(node.previousSibling===currentRemovingNode){currentRemovingNode=null;}// A node to remove was found in the template
if(nodesToRemove.has(node)){nodesToRemoveInTemplate.push(node);// Track node we're removing
if(currentRemovingNode===null){currentRemovingNode=node;}}// When removing, increment count by which to adjust subsequent part indices
if(currentRemovingNode!==null){removeCount++;}while(part!==undefined&&part.index===nodeIndex){// If part is in a removed node deactivate it by setting index to -1 or
// adjust the index as needed.
part.index=currentRemovingNode!==null?-1:part.index-removeCount;// go to the next active part.
partIndex=nextActiveIndexInTemplateParts(parts,partIndex);part=parts[partIndex];}}nodesToRemoveInTemplate.forEach(n=>n.parentNode.removeChild(n));}var countNodes=node=>{var count=node.nodeType===11/* Node.DOCUMENT_FRAGMENT_NODE */?0:1;var walker=document.createTreeWalker(node,walkerNodeFilter,null,false);while(walker.nextNode()){count++;}return count;};var nextActiveIndexInTemplateParts=function nextActiveIndexInTemplateParts(parts){var startIndex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;for(var i=startIndex+1;i<parts.length;i++){var part=parts[i];if(isTemplatePartActive(part)){return i;}}return-1;};/**
 * Inserts the given node into the Template, optionally before the given
 * refNode. In addition to inserting the node into the Template, the Template
 * part indices are updated to match the mutated Template DOM.
 */function insertNodeIntoTemplate(template,node){var refNode=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var{element:{content},parts}=template;// If there's no refNode, then put node at end of template.
// No part indices need to be shifted in this case.
if(refNode===null||refNode===undefined){content.appendChild(node);return;}var walker=document.createTreeWalker(content,walkerNodeFilter,null,false);var partIndex=nextActiveIndexInTemplateParts(parts);var insertCount=0;var walkerIndex=-1;while(walker.nextNode()){walkerIndex++;var walkerNode=walker.currentNode;if(walkerNode===refNode){insertCount=countNodes(node);refNode.parentNode.insertBefore(node,refNode);}while(partIndex!==-1&&parts[partIndex].index===walkerIndex){// If we've inserted the node, simply adjust all subsequent parts
if(insertCount>0){while(partIndex!==-1){parts[partIndex].index+=insertCount;partIndex=nextActiveIndexInTemplateParts(parts,partIndex);}return;}partIndex=nextActiveIndexInTemplateParts(parts,partIndex);}}}/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var directives=new WeakMap();/**
 * Brands a function as a directive factory function so that lit-html will call
 * the function during template rendering, rather than passing as a value.
 *
 * A _directive_ is a function that takes a Part as an argument. It has the
 * signature: `(part: Part) => void`.
 *
 * A directive _factory_ is a function that takes arguments for data and
 * configuration and returns a directive. Users of directive usually refer to
 * the directive factory as the directive. For example, "The repeat directive".
 *
 * Usually a template author will invoke a directive factory in their template
 * with relevant arguments, which will then return a directive function.
 *
 * Here's an example of using the `repeat()` directive factory that takes an
 * array and a function to render an item:
 *
 * ```js
 * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`
 * ```
 *
 * When `repeat` is invoked, it returns a directive function that closes over
 * `items` and the template function. When the outer template is rendered, the
 * return directive function is called with the Part for the expression.
 * `repeat` then performs it's custom logic to render multiple items.
 *
 * @param f The directive factory function. Must be a function that returns a
 * function of the signature `(part: Part) => void`. The returned function will
 * be called with the part object.
 *
 * @example
 *
 * import {directive, html} from 'lit-html';
 *
 * const immutable = directive((v) => (part) => {
 *   if (part.value !== v) {
 *     part.setValue(v)
 *   }
 * });
 */var directive=f=>function(){var d=f(...arguments);directives.set(d,true);return d;};var isDirective=o=>{return typeof o==='function'&&directives.has(o);};/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ /**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */var noChange={};/**
 * A sentinel value that signals a NodePart to fully clear its content.
 */var nothing={};/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ /**
 * An instance of a `Template` that can be attached to the DOM and updated
 * with new values.
 */class TemplateInstance{constructor(template,processor,options){this.__parts=[];this.template=template;this.processor=processor;this.options=options;}update(values){var i=0;for(var part of this.__parts){if(part!==undefined){part.setValue(values[i]);}i++;}for(var _part of this.__parts){if(_part!==undefined){_part.commit();}}}_clone(){// There are a number of steps in the lifecycle of a template instance's
// DOM fragment:
//  1. Clone - create the instance fragment
//  2. Adopt - adopt into the main document
//  3. Process - find part markers and create parts
//  4. Upgrade - upgrade custom elements
//  5. Update - set node, attribute, property, etc., values
//  6. Connect - connect to the document. Optional and outside of this
//     method.
//
// We have a few constraints on the ordering of these steps:
//  * We need to upgrade before updating, so that property values will pass
//    through any property setters.
//  * We would like to process before upgrading so that we're sure that the
//    cloned fragment is inert and not disturbed by self-modifying DOM.
//  * We want custom elements to upgrade even in disconnected fragments.
//
// Given these constraints, with full custom elements support we would
// prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
//
// But Safari does not implement CustomElementRegistry#upgrade, so we
// can not implement that order and still have upgrade-before-update and
// upgrade disconnected fragments. So we instead sacrifice the
// process-before-upgrade constraint, since in Custom Elements v1 elements
// must not modify their light DOM in the constructor. We still have issues
// when co-existing with CEv0 elements like Polymer 1, and with polyfills
// that don't strictly adhere to the no-modification rule because shadow
// DOM, which may be created in the constructor, is emulated by being placed
// in the light DOM.
//
// The resulting order is on native is: Clone, Adopt, Upgrade, Process,
// Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
// in one step.
//
// The Custom Elements v1 polyfill supports upgrade(), so the order when
// polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
// Connect.
var fragment=isCEPolyfill?this.template.element.content.cloneNode(true):document.importNode(this.template.element.content,true);var stack=[];var parts=this.template.parts;// Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
var walker=document.createTreeWalker(fragment,133/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,null,false);var partIndex=0;var nodeIndex=0;var part;var node=walker.nextNode();// Loop through all the nodes and parts of a template
while(partIndex<parts.length){part=parts[partIndex];if(!isTemplatePartActive(part)){this.__parts.push(undefined);partIndex++;continue;}// Progress the tree walker until we find our next part's node.
// Note that multiple parts may share the same node (attribute parts
// on a single element), so this loop may not run at all.
while(nodeIndex<part.index){nodeIndex++;if(node.nodeName==='TEMPLATE'){stack.push(node);walker.currentNode=node.content;}if((node=walker.nextNode())===null){// We've exhausted the content inside a nested template element.
// Because we still have parts (the outer for-loop), we know:
// - There is a template in the stack
// - The walker will find a nextNode outside the template
walker.currentNode=stack.pop();node=walker.nextNode();}}// We've arrived at our part's node.
if(part.type==='node'){var _part2=this.processor.handleTextExpression(this.options);_part2.insertAfterNode(node.previousSibling);this.__parts.push(_part2);}else{this.__parts.push(...this.processor.handleAttributeExpressions(node,part.name,part.strings,this.options));}partIndex++;}if(isCEPolyfill){document.adoptNode(fragment);customElements.upgrade(fragment);}return fragment;}}/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ /**
 * Our TrustedTypePolicy for HTML which is declared using the html template
 * tag function.
 *
 * That HTML is a developer-authored constant, and is parsed with innerHTML
 * before any untrusted expressions have been mixed in. Therefor it is
 * considered safe by construction.
 */var policy=window.trustedTypes&&trustedTypes.createPolicy('lit-html',{createHTML:s=>s});var commentMarker=" ".concat(marker," ");/**
 * The return type of `html`, which holds a Template and the values from
 * interpolated expressions.
 */class TemplateResult{constructor(strings,values,type,processor){this.strings=strings;this.values=values;this.type=type;this.processor=processor;}/**
   * Returns a string of HTML used to create a `<template>` element.
   */getHTML(){var l=this.strings.length-1;var html='';var isCommentBinding=false;for(var i=0;i<l;i++){var s=this.strings[i];// For each binding we want to determine the kind of marker to insert
// into the template source before it's parsed by the browser's HTML
// parser. The marker type is based on whether the expression is in an
// attribute, text, or comment position.
//   * For node-position bindings we insert a comment with the marker
//     sentinel as its text content, like <!--{{lit-guid}}-->.
//   * For attribute bindings we insert just the marker sentinel for the
//     first binding, so that we support unquoted attribute bindings.
//     Subsequent bindings can use a comment marker because multi-binding
//     attributes must be quoted.
//   * For comment bindings we insert just the marker sentinel so we don't
//     close the comment.
//
// The following code scans the template source, but is *not* an HTML
// parser. We don't need to track the tree structure of the HTML, only
// whether a binding is inside a comment, and if not, if it appears to be
// the first binding in an attribute.
var commentOpen=s.lastIndexOf('<!--');// We're in comment position if we have a comment open with no following
// comment close. Because <-- can appear in an attribute value there can
// be false positives.
isCommentBinding=(commentOpen>-1||isCommentBinding)&&s.indexOf('-->',commentOpen+1)===-1;// Check to see if we have an attribute-like sequence preceding the
// expression. This can match "name=value" like structures in text,
// comments, and attribute values, so there can be false-positives.
var attributeMatch=lastAttributeNameRegex.exec(s);if(attributeMatch===null){// We're only in this branch if we don't have a attribute-like
// preceding sequence. For comments, this guards against unusual
// attribute values like <div foo="<!--${'bar'}">. Cases like
// <!-- foo=${'bar'}--> are handled correctly in the attribute branch
// below.
html+=s+(isCommentBinding?commentMarker:nodeMarker);}else{// For attributes we use just a marker sentinel, and also append a
// $lit$ suffix to the name to opt-out of attribute-specific parsing
// that IE and Edge do for style and certain SVG attributes.
html+=s.substr(0,attributeMatch.index)+attributeMatch[1]+attributeMatch[2]+boundAttributeSuffix+attributeMatch[3]+marker;}}html+=this.strings[l];return html;}getTemplateElement(){var template=document.createElement('template');var value=this.getHTML();if(policy!==undefined){// this is secure because `this.strings` is a TemplateStringsArray.
// TODO: validate this when
// https://github.com/tc39/proposal-array-is-template-object is
// implemented.
value=policy.createHTML(value);}template.innerHTML=value;return template;}}/**
 * A TemplateResult for SVG fragments.
 *
 * This class wraps HTML in an `<svg>` tag in order to parse its contents in the
 * SVG namespace, then modifies the template to remove the `<svg>` tag so that
 * clones only container the original fragment.
 */class SVGTemplateResult extends TemplateResult{getHTML(){return"<svg>".concat(super.getHTML(),"</svg>");}getTemplateElement(){var template=super.getTemplateElement();var content=template.content;var svgElement=content.firstChild;content.removeChild(svgElement);reparentNodes(content,svgElement.firstChild);return template;}}/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var isPrimitive=value=>{return value===null||!(typeof value==='object'||typeof value==='function');};var isIterable=value=>{return Array.isArray(value)||// eslint-disable-next-line @typescript-eslint/no-explicit-any
!!(value&&value[Symbol.iterator]);};/**
 * Writes attribute values to the DOM for a group of AttributeParts bound to a
 * single attribute. The value is only set once even if there are multiple parts
 * for an attribute.
 */class AttributeCommitter{constructor(element,name,strings){this.dirty=true;this.element=element;this.name=name;this.strings=strings;this.parts=[];for(var i=0;i<strings.length-1;i++){this.parts[i]=this._createPart();}}/**
   * Creates a single part. Override this to create a differnt type of part.
   */_createPart(){return new AttributePart(this);}_getValue(){var strings=this.strings;var l=strings.length-1;var parts=this.parts;// If we're assigning an attribute via syntax like:
//    attr="${foo}"  or  attr=${foo}
// but not
//    attr="${foo} ${bar}" or attr="${foo} baz"
// then we don't want to coerce the attribute value into one long
// string. Instead we want to just return the value itself directly,
// so that sanitizeDOMValue can get the actual value rather than
// String(value)
// The exception is if v is an array, in which case we do want to smash
// it together into a string without calling String() on the array.
//
// This also allows trusted values (when using TrustedTypes) being
// assigned to DOM sinks without being stringified in the process.
if(l===1&&strings[0]===''&&strings[1]===''){var v=parts[0].value;if(typeof v==='symbol'){return String(v);}if(typeof v==='string'||!isIterable(v)){return v;}}var text='';for(var i=0;i<l;i++){text+=strings[i];var part=parts[i];if(part!==undefined){var _v=part.value;if(isPrimitive(_v)||!isIterable(_v)){text+=typeof _v==='string'?_v:String(_v);}else{for(var t of _v){text+=typeof t==='string'?t:String(t);}}}}text+=strings[l];return text;}commit(){if(this.dirty){this.dirty=false;this.element.setAttribute(this.name,this._getValue());}}}/**
 * A Part that controls all or part of an attribute value.
 */class AttributePart{constructor(committer){this.value=undefined;this.committer=committer;}setValue(value){if(value!==noChange&&(!isPrimitive(value)||value!==this.value)){this.value=value;// If the value is a not a directive, dirty the committer so that it'll
// call setAttribute. If the value is a directive, it'll dirty the
// committer if it calls setValue().
if(!isDirective(value)){this.committer.dirty=true;}}}commit(){while(isDirective(this.value)){var directive=this.value;this.value=noChange;directive(this);}if(this.value===noChange){return;}this.committer.commit();}}/**
 * A Part that controls a location within a Node tree. Like a Range, NodePart
 * has start and end locations and can set and update the Nodes between those
 * locations.
 *
 * NodeParts support several value types: primitives, Nodes, TemplateResults,
 * as well as arrays and iterables of those types.
 */class NodePart{constructor(options){this.value=undefined;this.__pendingValue=undefined;this.options=options;}/**
   * Appends this part into a container.
   *
   * This part must be empty, as its contents are not automatically moved.
   */appendInto(container){this.startNode=container.appendChild(createMarker());this.endNode=container.appendChild(createMarker());}/**
   * Inserts this part after the `ref` node (between `ref` and `ref`'s next
   * sibling). Both `ref` and its next sibling must be static, unchanging nodes
   * such as those that appear in a literal section of a template.
   *
   * This part must be empty, as its contents are not automatically moved.
   */insertAfterNode(ref){this.startNode=ref;this.endNode=ref.nextSibling;}/**
   * Appends this part into a parent part.
   *
   * This part must be empty, as its contents are not automatically moved.
   */appendIntoPart(part){part.__insert(this.startNode=createMarker());part.__insert(this.endNode=createMarker());}/**
   * Inserts this part after the `ref` part.
   *
   * This part must be empty, as its contents are not automatically moved.
   */insertAfterPart(ref){ref.__insert(this.startNode=createMarker());this.endNode=ref.endNode;ref.endNode=this.startNode;}setValue(value){this.__pendingValue=value;}commit(){if(this.startNode.parentNode===null){return;}while(isDirective(this.__pendingValue)){var directive=this.__pendingValue;this.__pendingValue=noChange;directive(this);}var value=this.__pendingValue;if(value===noChange){return;}if(isPrimitive(value)){if(value!==this.value){this.__commitText(value);}}else if(value instanceof TemplateResult){this.__commitTemplateResult(value);}else if(value instanceof Node){this.__commitNode(value);}else if(isIterable(value)){this.__commitIterable(value);}else if(value===nothing){this.value=nothing;this.clear();}else{// Fallback, will render the string representation
this.__commitText(value);}}__insert(node){this.endNode.parentNode.insertBefore(node,this.endNode);}__commitNode(value){if(this.value===value){return;}this.clear();this.__insert(value);this.value=value;}__commitText(value){var node=this.startNode.nextSibling;value=value==null?'':value;// If `value` isn't already a string, we explicitly convert it here in case
// it can't be implicitly converted - i.e. it's a symbol.
var valueAsString=typeof value==='string'?value:String(value);if(node===this.endNode.previousSibling&&node.nodeType===3/* Node.TEXT_NODE */){// If we only have a single text node between the markers, we can just
// set its value, rather than replacing it.
// TODO(justinfagnani): Can we just check if this.value is primitive?
node.data=valueAsString;}else{this.__commitNode(document.createTextNode(valueAsString));}this.value=value;}__commitTemplateResult(value){var template=this.options.templateFactory(value);if(this.value instanceof TemplateInstance&&this.value.template===template){this.value.update(value.values);}else{// Make sure we propagate the template processor from the TemplateResult
// so that we use its syntax extension, etc. The template factory comes
// from the render function options so that it can control template
// caching and preprocessing.
var instance=new TemplateInstance(template,value.processor,this.options);var fragment=instance._clone();instance.update(value.values);this.__commitNode(fragment);this.value=instance;}}__commitIterable(value){// For an Iterable, we create a new InstancePart per item, then set its
// value to the item. This is a little bit of overhead for every item in
// an Iterable, but it lets us recurse easily and efficiently update Arrays
// of TemplateResults that will be commonly returned from expressions like:
// array.map((i) => html`${i}`), by reusing existing TemplateInstances.
// If _value is an array, then the previous render was of an
// iterable and _value will contain the NodeParts from the previous
// render. If _value is not an array, clear this part and make a new
// array for NodeParts.
if(!Array.isArray(this.value)){this.value=[];this.clear();}// Lets us keep track of how many items we stamped so we can clear leftover
// items from a previous render
var itemParts=this.value;var partIndex=0;var itemPart;for(var item of value){// Try to reuse an existing part
itemPart=itemParts[partIndex];// If no existing part, create a new one
if(itemPart===undefined){itemPart=new NodePart(this.options);itemParts.push(itemPart);if(partIndex===0){itemPart.appendIntoPart(this);}else{itemPart.insertAfterPart(itemParts[partIndex-1]);}}itemPart.setValue(item);itemPart.commit();partIndex++;}if(partIndex<itemParts.length){// Truncate the parts array so _value reflects the current state
itemParts.length=partIndex;this.clear(itemPart&&itemPart.endNode);}}clear(){var startNode=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.startNode;removeNodes(this.startNode.parentNode,startNode.nextSibling,this.endNode);}}/**
 * Implements a boolean attribute, roughly as defined in the HTML
 * specification.
 *
 * If the value is truthy, then the attribute is present with a value of
 * ''. If the value is falsey, the attribute is removed.
 */class BooleanAttributePart{constructor(element,name,strings){this.value=undefined;this.__pendingValue=undefined;if(strings.length!==2||strings[0]!==''||strings[1]!==''){throw new Error('Boolean attributes can only contain a single expression');}this.element=element;this.name=name;this.strings=strings;}setValue(value){this.__pendingValue=value;}commit(){while(isDirective(this.__pendingValue)){var directive=this.__pendingValue;this.__pendingValue=noChange;directive(this);}if(this.__pendingValue===noChange){return;}var value=!!this.__pendingValue;if(this.value!==value){if(value){this.element.setAttribute(this.name,'');}else{this.element.removeAttribute(this.name);}this.value=value;}this.__pendingValue=noChange;}}/**
 * Sets attribute values for PropertyParts, so that the value is only set once
 * even if there are multiple parts for a property.
 *
 * If an expression controls the whole property value, then the value is simply
 * assigned to the property under control. If there are string literals or
 * multiple expressions, then the strings are expressions are interpolated into
 * a string first.
 */class PropertyCommitter extends AttributeCommitter{constructor(element,name,strings){super(element,name,strings);this.single=strings.length===2&&strings[0]===''&&strings[1]==='';}_createPart(){return new PropertyPart(this);}_getValue(){if(this.single){return this.parts[0].value;}return super._getValue();}commit(){if(this.dirty){this.dirty=false;// eslint-disable-next-line @typescript-eslint/no-explicit-any
this.element[this.name]=this._getValue();}}}class PropertyPart extends AttributePart{}// Detect event listener options support. If the `capture` property is read
// from the options object, then options are supported. If not, then the third
// argument to add/removeEventListener is interpreted as the boolean capture
// value so we should only pass the `capture` property.
var eventOptionsSupported=false;// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
// blocks right into the body of a module
(()=>{try{var options={get capture(){eventOptionsSupported=true;return false;}};// eslint-disable-next-line @typescript-eslint/no-explicit-any
window.addEventListener('test',options,options);// eslint-disable-next-line @typescript-eslint/no-explicit-any
window.removeEventListener('test',options,options);}catch(_e){// event options not supported
}})();class EventPart{constructor(element,eventName,eventContext){this.value=undefined;this.__pendingValue=undefined;this.element=element;this.eventName=eventName;this.eventContext=eventContext;this.__boundHandleEvent=e=>this.handleEvent(e);}setValue(value){this.__pendingValue=value;}commit(){while(isDirective(this.__pendingValue)){var directive=this.__pendingValue;this.__pendingValue=noChange;directive(this);}if(this.__pendingValue===noChange){return;}var newListener=this.__pendingValue;var oldListener=this.value;var shouldRemoveListener=newListener==null||oldListener!=null&&(newListener.capture!==oldListener.capture||newListener.once!==oldListener.once||newListener.passive!==oldListener.passive);var shouldAddListener=newListener!=null&&(oldListener==null||shouldRemoveListener);if(shouldRemoveListener){this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options);}if(shouldAddListener){this.__options=getOptions(newListener);this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options);}this.value=newListener;this.__pendingValue=noChange;}handleEvent(event){if(typeof this.value==='function'){this.value.call(this.eventContext||this.element,event);}else{this.value.handleEvent(event);}}}// We copy options because of the inconsistent behavior of browsers when reading
// the third argument of add/removeEventListener. IE11 doesn't support options
// at all. Chrome 41 only reads `capture` if the argument is an object.
var getOptions=o=>o&&(eventOptionsSupported?{capture:o.capture,passive:o.passive,once:o.once}:o.capture);/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ /**
 * The default TemplateFactory which caches Templates keyed on
 * result.type and result.strings.
 */function templateFactory(result){var templateCache=templateCaches.get(result.type);if(templateCache===undefined){templateCache={stringsArray:new WeakMap(),keyString:new Map()};templateCaches.set(result.type,templateCache);}var template=templateCache.stringsArray.get(result.strings);if(template!==undefined){return template;}// If the TemplateStringsArray is new, generate a key from the strings
// This key is shared between all templates with identical content
var key=result.strings.join(marker);// Check if we already have a Template for this key
template=templateCache.keyString.get(key);if(template===undefined){// If we have not seen this key before, create a new Template
template=new Template(result,result.getTemplateElement());// Cache the Template for this key
templateCache.keyString.set(key,template);}// Cache all future queries for this TemplateStringsArray
templateCache.stringsArray.set(result.strings,template);return template;}var templateCaches=new Map();/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var parts=new WeakMap();/**
 * Renders a template result or other value to a container.
 *
 * To update a container with new values, reevaluate the template literal and
 * call `render` with the new result.
 *
 * @param result Any value renderable by NodePart - typically a TemplateResult
 *     created by evaluating a template tag like `html` or `svg`.
 * @param container A DOM parent to render to. The entire contents are either
 *     replaced, or efficiently updated if the same result type was previous
 *     rendered there.
 * @param options RenderOptions for the entire render tree rendered to this
 *     container. Render options must *not* change between renders to the same
 *     container, as those changes will not effect previously rendered DOM.
 */var render$1=(result,container,options)=>{var part=parts.get(container);if(part===undefined){removeNodes(container,container.firstChild);parts.set(container,part=new NodePart(Object.assign({templateFactory},options)));part.appendInto(container);}part.setValue(result);part.commit();};/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ /**
 * Creates Parts when a template is instantiated.
 */class DefaultTemplateProcessor{/**
   * Create parts for an attribute-position binding, given the event, attribute
   * name, and string literals.
   *
   * @param element The element containing the binding
   * @param name  The attribute name
   * @param strings The string literals. There are always at least two strings,
   *   event for fully-controlled bindings with a single expression.
   */handleAttributeExpressions(element,name,strings,options){var prefix=name[0];if(prefix==='.'){var _committer=new PropertyCommitter(element,name.slice(1),strings);return _committer.parts;}if(prefix==='@'){return[new EventPart(element,name.slice(1),options.eventContext)];}if(prefix==='?'){return[new BooleanAttributePart(element,name.slice(1),strings)];}var committer=new AttributeCommitter(element,name,strings);return committer.parts;}/**
   * Create parts for a text-position binding.
   * @param templateFactory
   */handleTextExpression(options){return new NodePart(options);}}var defaultTemplateProcessor=new DefaultTemplateProcessor();/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ // This line will be used in regexes to search for lit-html usage.
// TODO(justinfagnani): inject version number at build time
if(typeof window!=='undefined'){(window['litHtmlVersions']||(window['litHtmlVersions']=[])).push('1.3.0');}/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 */var html=function html(strings){for(var _len=arguments.length,values=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){values[_key-1]=arguments[_key];}return new TemplateResult(strings,values,'html',defaultTemplateProcessor);};/**
 * Interprets a template literal as an SVG template that can efficiently
 * render to and update a container.
 */var svg=function svg(strings){for(var _len2=arguments.length,values=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){values[_key2-1]=arguments[_key2];}return new SVGTemplateResult(strings,values,'svg',defaultTemplateProcessor);};/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var getTemplateCacheKey=(type,scopeName)=>"".concat(type,"--").concat(scopeName);var compatibleShadyCSSVersion=true;if(typeof window.ShadyCSS==='undefined'){compatibleShadyCSSVersion=false;}else if(typeof window.ShadyCSS.prepareTemplateDom==='undefined'){console.warn("Incompatible ShadyCSS version detected. "+"Please update to at least @webcomponents/webcomponentsjs@2.0.2 and "+"@webcomponents/shadycss@1.3.1.");compatibleShadyCSSVersion=false;}/**
 * Template factory which scopes template DOM using ShadyCSS.
 * @param scopeName {string}
 */var shadyTemplateFactory=scopeName=>result=>{var cacheKey=getTemplateCacheKey(result.type,scopeName);var templateCache=templateCaches.get(cacheKey);if(templateCache===undefined){templateCache={stringsArray:new WeakMap(),keyString:new Map()};templateCaches.set(cacheKey,templateCache);}var template=templateCache.stringsArray.get(result.strings);if(template!==undefined){return template;}var key=result.strings.join(marker);template=templateCache.keyString.get(key);if(template===undefined){var element=result.getTemplateElement();if(compatibleShadyCSSVersion){window.ShadyCSS.prepareTemplateDom(element,scopeName);}template=new Template(result,element);templateCache.keyString.set(key,template);}templateCache.stringsArray.set(result.strings,template);return template;};var TEMPLATE_TYPES=['html','svg'];/**
 * Removes all style elements from Templates for the given scopeName.
 */var removeStylesFromLitTemplates=scopeName=>{TEMPLATE_TYPES.forEach(type=>{var templates=templateCaches.get(getTemplateCacheKey(type,scopeName));if(templates!==undefined){templates.keyString.forEach(template=>{var{element:{content}}=template;// IE 11 doesn't support the iterable param Set constructor
var styles=new Set();Array.from(content.querySelectorAll('style')).forEach(s=>{styles.add(s);});removeNodesFromTemplate(template,styles);});}});};var shadyRenderSet=new Set();/**
 * For the given scope name, ensures that ShadyCSS style scoping is performed.
 * This is done just once per scope name so the fragment and template cannot
 * be modified.
 * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
 * to be scoped and appended to the document
 * (2) removes style elements from all lit-html Templates for this scope name.
 *
 * Note, <style> elements can only be placed into templates for the
 * initial rendering of the scope. If <style> elements are included in templates
 * dynamically rendered to the scope (after the first scope render), they will
 * not be scoped and the <style> will be left in the template and rendered
 * output.
 */var prepareTemplateStyles=(scopeName,renderedDOM,template)=>{shadyRenderSet.add(scopeName);// If `renderedDOM` is stamped from a Template, then we need to edit that
// Template's underlying template element. Otherwise, we create one here
// to give to ShadyCSS, which still requires one while scoping.
var templateElement=!!template?template.element:document.createElement('template');// Move styles out of rendered DOM and store.
var styles=renderedDOM.querySelectorAll('style');var{length}=styles;// If there are no styles, skip unnecessary work
if(length===0){// Ensure prepareTemplateStyles is called to support adding
// styles via `prepareAdoptedCssText` since that requires that
// `prepareTemplateStyles` is called.
//
// ShadyCSS will only update styles containing @apply in the template
// given to `prepareTemplateStyles`. If no lit Template was given,
// ShadyCSS will not be able to update uses of @apply in any relevant
// template. However, this is not a problem because we only create the
// template for the purpose of supporting `prepareAdoptedCssText`,
// which doesn't support @apply at all.
window.ShadyCSS.prepareTemplateStyles(templateElement,scopeName);return;}var condensedStyle=document.createElement('style');// Collect styles into a single style. This helps us make sure ShadyCSS
// manipulations will not prevent us from being able to fix up template
// part indices.
// NOTE: collecting styles is inefficient for browsers but ShadyCSS
// currently does this anyway. When it does not, this should be changed.
for(var i=0;i<length;i++){var _style=styles[i];_style.parentNode.removeChild(_style);condensedStyle.textContent+=_style.textContent;}// Remove styles from nested templates in this scope.
removeStylesFromLitTemplates(scopeName);// And then put the condensed style into the "root" template passed in as
// `template`.
var content=templateElement.content;if(!!template){insertNodeIntoTemplate(template,condensedStyle,content.firstChild);}else{content.insertBefore(condensedStyle,content.firstChild);}// Note, it's important that ShadyCSS gets the template that `lit-html`
// will actually render so that it can update the style inside when
// needed (e.g. @apply native Shadow DOM case).
window.ShadyCSS.prepareTemplateStyles(templateElement,scopeName);var style=content.querySelector('style');if(window.ShadyCSS.nativeShadow&&style!==null){// When in native Shadow DOM, ensure the style created by ShadyCSS is
// included in initially rendered output (`renderedDOM`).
renderedDOM.insertBefore(style.cloneNode(true),renderedDOM.firstChild);}else if(!!template){// When no style is left in the template, parts will be broken as a
// result. To fix this, we put back the style node ShadyCSS removed
// and then tell lit to remove that node from the template.
// There can be no style in the template in 2 cases (1) when Shady DOM
// is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
// is in use ShadyCSS removes the style if it contains no content.
// NOTE, ShadyCSS creates its own style so we can safely add/remove
// `condensedStyle` here.
content.insertBefore(condensedStyle,content.firstChild);var removes=new Set();removes.add(condensedStyle);removeNodesFromTemplate(template,removes);}};/**
 * Extension to the standard `render` method which supports rendering
 * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
 * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
 * or when the webcomponentsjs
 * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
 *
 * Adds a `scopeName` option which is used to scope element DOM and stylesheets
 * when native ShadowDOM is unavailable. The `scopeName` will be added to
 * the class attribute of all rendered DOM. In addition, any style elements will
 * be automatically re-written with this `scopeName` selector and moved out
 * of the rendered DOM and into the document `<head>`.
 *
 * It is common to use this render method in conjunction with a custom element
 * which renders a shadowRoot. When this is done, typically the element's
 * `localName` should be used as the `scopeName`.
 *
 * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
 * custom properties (needed only on older browsers like IE11) and a shim for
 * a deprecated feature called `@apply` that supports applying a set of css
 * custom properties to a given location.
 *
 * Usage considerations:
 *
 * * Part values in `<style>` elements are only applied the first time a given
 * `scopeName` renders. Subsequent changes to parts in style elements will have
 * no effect. Because of this, parts in style elements should only be used for
 * values that will never change, for example parts that set scope-wide theme
 * values or parts which render shared style elements.
 *
 * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
 * custom element's `constructor` is not supported. Instead rendering should
 * either done asynchronously, for example at microtask timing (for example
 * `Promise.resolve()`), or be deferred until the first time the element's
 * `connectedCallback` runs.
 *
 * Usage considerations when using shimmed custom properties or `@apply`:
 *
 * * Whenever any dynamic changes are made which affect
 * css custom properties, `ShadyCSS.styleElement(element)` must be called
 * to update the element. There are two cases when this is needed:
 * (1) the element is connected to a new parent, (2) a class is added to the
 * element that causes it to match different custom properties.
 * To address the first case when rendering a custom element, `styleElement`
 * should be called in the element's `connectedCallback`.
 *
 * * Shimmed custom properties may only be defined either for an entire
 * shadowRoot (for example, in a `:host` rule) or via a rule that directly
 * matches an element with a shadowRoot. In other words, instead of flowing from
 * parent to child as do native css custom properties, shimmed custom properties
 * flow only from shadowRoots to nested shadowRoots.
 *
 * * When using `@apply` mixing css shorthand property names with
 * non-shorthand names (for example `border` and `border-width`) is not
 * supported.
 */var render=(result,container,options)=>{if(!options||typeof options!=='object'||!options.scopeName){throw new Error('The `scopeName` option is required.');}var scopeName=options.scopeName;var hasRendered=parts.has(container);var needsScoping=compatibleShadyCSSVersion&&container.nodeType===11/* Node.DOCUMENT_FRAGMENT_NODE */&&!!container.host;// Handle first render to a scope specially...
var firstScopeRender=needsScoping&&!shadyRenderSet.has(scopeName);// On first scope render, render into a fragment; this cannot be a single
// fragment that is reused since nested renders can occur synchronously.
var renderContainer=firstScopeRender?document.createDocumentFragment():container;render$1(result,renderContainer,Object.assign({templateFactory:shadyTemplateFactory(scopeName)},options));// When performing first scope render,
// (1) We've rendered into a fragment so that there's a chance to
// `prepareTemplateStyles` before sub-elements hit the DOM
// (which might cause them to render based on a common pattern of
// rendering in a custom element's `connectedCallback`);
// (2) Scope the template with ShadyCSS one time only for this scope.
// (3) Render the fragment into the container and make sure the
// container knows its `part` is the one we just rendered. This ensures
// DOM will be re-used on subsequent renders.
if(firstScopeRender){var part=parts.get(renderContainer);parts.delete(renderContainer);// ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
// that should apply to `renderContainer` even if the rendered value is
// not a TemplateInstance. However, it will only insert scoped styles
// into the document if `prepareTemplateStyles` has already been called
// for the given scope name.
var template=part.value instanceof TemplateInstance?part.value.template:undefined;prepareTemplateStyles(scopeName,renderContainer,template);removeNodes(container,container.firstChild);container.appendChild(renderContainer);parts.set(container,part);}// After elements have hit the DOM, update styling if this is the
// initial render to this container.
// This is needed whenever dynamic changes are made so it would be
// safest to do every render; however, this would regress performance
// so we leave it up to the user to call `ShadyCSS.styleElement`
// for dynamic changes.
if(!hasRendered&&needsScoping){window.ShadyCSS.styleElement(container.host);}};/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var _a;/**
 * Use this module if you want to create your own base class extending
 * [[UpdatingElement]].
 * @packageDocumentation
 */ /*
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */window.JSCompiler_renameProperty=(prop,_obj)=>prop;var defaultConverter={toAttribute(value,type){switch(type){case Boolean:return value?'':null;case Object:case Array:// if the value is `null` or `undefined` pass this through
// to allow removing/no change behavior.
return value==null?value:JSON.stringify(value);}return value;},fromAttribute(value,type){switch(type){case Boolean:return value!==null;case Number:return value===null?null:Number(value);case Object:case Array:return JSON.parse(value);}return value;}};/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */var notEqual=(value,old)=>{// This ensures (old==NaN, value==NaN) always returns false
return old!==value&&(old===old||value===value);};var defaultPropertyDeclaration={attribute:true,type:String,converter:defaultConverter,reflect:false,hasChanged:notEqual};var STATE_HAS_UPDATED=1;var STATE_UPDATE_REQUESTED=1<<2;var STATE_IS_REFLECTING_TO_ATTRIBUTE=1<<3;var STATE_IS_REFLECTING_TO_PROPERTY=1<<4;/**
 * The Closure JS Compiler doesn't currently have good support for static
 * property semantics where "this" is dynamic (e.g.
 * https://github.com/google/closure-compiler/issues/3177 and others) so we use
 * this hack to bypass any rewriting by the compiler.
 */var finalized='finalized';/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 * @noInheritDoc
 */class UpdatingElement extends HTMLElement{constructor(){super();this.initialize();}/**
   * Returns a list of attributes corresponding to the registered properties.
   * @nocollapse
   */static get observedAttributes(){// note: piggy backing on this to ensure we're finalized.
this.finalize();var attributes=[];// Use forEach so this works even if for/of loops are compiled to for loops
// expecting arrays
this._classProperties.forEach((v,p)=>{var attr=this._attributeNameForProperty(p,v);if(attr!==undefined){this._attributeToPropertyMap.set(attr,p);attributes.push(attr);}});return attributes;}/**
   * Ensures the private `_classProperties` property metadata is created.
   * In addition to `finalize` this is also called in `createProperty` to
   * ensure the `@property` decorator can add property metadata.
   */ /** @nocollapse */static _ensureClassProperties(){// ensure private storage for property declarations.
if(!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties',this))){this._classProperties=new Map();// NOTE: Workaround IE11 not supporting Map constructor argument.
var superProperties=Object.getPrototypeOf(this)._classProperties;if(superProperties!==undefined){superProperties.forEach((v,k)=>this._classProperties.set(k,v));}}}/**
   * Creates a property accessor on the element prototype if one does not exist
   * and stores a PropertyDeclaration for the property with the given options.
   * The property setter calls the property's `hasChanged` property option
   * or uses a strict identity check to determine whether or not to request
   * an update.
   *
   * This method may be overridden to customize properties; however,
   * when doing so, it's important to call `super.createProperty` to ensure
   * the property is setup correctly. This method calls
   * `getPropertyDescriptor` internally to get a descriptor to install.
   * To customize what properties do when they are get or set, override
   * `getPropertyDescriptor`. To customize the options for a property,
   * implement `createProperty` like this:
   *
   * static createProperty(name, options) {
   *   options = Object.assign(options, {myOption: true});
   *   super.createProperty(name, options);
   * }
   *
   * @nocollapse
   */static createProperty(name){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultPropertyDeclaration;// Note, since this can be called by the `@property` decorator which
// is called before `finalize`, we ensure storage exists for property
// metadata.
this._ensureClassProperties();this._classProperties.set(name,options);// Do not generate an accessor if the prototype already has one, since
// it would be lost otherwise and that would never be the user's intention;
// Instead, we expect users to call `requestUpdate` themselves from
// user-defined accessors. Note that if the super has an accessor we will
// still overwrite it
if(options.noAccessor||this.prototype.hasOwnProperty(name)){return;}var key=typeof name==='symbol'?Symbol():"__".concat(name);var descriptor=this.getPropertyDescriptor(name,key,options);if(descriptor!==undefined){Object.defineProperty(this.prototype,name,descriptor);}}/**
   * Returns a property descriptor to be defined on the given named property.
   * If no descriptor is returned, the property will not become an accessor.
   * For example,
   *
   *   class MyElement extends LitElement {
   *     static getPropertyDescriptor(name, key, options) {
   *       const defaultDescriptor =
   *           super.getPropertyDescriptor(name, key, options);
   *       const setter = defaultDescriptor.set;
   *       return {
   *         get: defaultDescriptor.get,
   *         set(value) {
   *           setter.call(this, value);
   *           // custom action.
   *         },
   *         configurable: true,
   *         enumerable: true
   *       }
   *     }
   *   }
   *
   * @nocollapse
   */static getPropertyDescriptor(name,key,options){return{// tslint:disable-next-line:no-any no symbol in index
get(){return this[key];},set(value){var oldValue=this[name];this[key]=value;this.requestUpdateInternal(name,oldValue,options);},configurable:true,enumerable:true};}/**
   * Returns the property options associated with the given property.
   * These options are defined with a PropertyDeclaration via the `properties`
   * object or the `@property` decorator and are registered in
   * `createProperty(...)`.
   *
   * Note, this method should be considered "final" and not overridden. To
   * customize the options for a given property, override `createProperty`.
   *
   * @nocollapse
   * @final
   */static getPropertyOptions(name){return this._classProperties&&this._classProperties.get(name)||defaultPropertyDeclaration;}/**
   * Creates property accessors for registered properties and ensures
   * any superclasses are also finalized.
   * @nocollapse
   */static finalize(){// finalize any superclasses
var superCtor=Object.getPrototypeOf(this);if(!superCtor.hasOwnProperty(finalized)){superCtor.finalize();}this[finalized]=true;this._ensureClassProperties();// initialize Map populated in observedAttributes
this._attributeToPropertyMap=new Map();// make any properties
// Note, only process "own" properties since this element will inherit
// any properties defined on the superClass, and finalization ensures
// the entire prototype chain is finalized.
if(this.hasOwnProperty(JSCompiler_renameProperty('properties',this))){var props=this.properties;// support symbols in properties (IE11 does not support this)
var propKeys=[...Object.getOwnPropertyNames(props),...(typeof Object.getOwnPropertySymbols==='function'?Object.getOwnPropertySymbols(props):[])];// This for/of is ok because propKeys is an array
for(var p of propKeys){// note, use of `any` is due to TypeSript lack of support for symbol in
// index types
// tslint:disable-next-line:no-any no symbol in index
this.createProperty(p,props[p]);}}}/**
   * Returns the property name for the given attribute `name`.
   * @nocollapse
   */static _attributeNameForProperty(name,options){var attribute=options.attribute;return attribute===false?undefined:typeof attribute==='string'?attribute:typeof name==='string'?name.toLowerCase():undefined;}/**
   * Returns true if a property should request an update.
   * Called when a property value is set and uses the `hasChanged`
   * option for the property if present or a strict identity check.
   * @nocollapse
   */static _valueHasChanged(value,old){var hasChanged=arguments.length>2&&arguments[2]!==undefined?arguments[2]:notEqual;return hasChanged(value,old);}/**
   * Returns the property value for the given attribute value.
   * Called via the `attributeChangedCallback` and uses the property's
   * `converter` or `converter.fromAttribute` property option.
   * @nocollapse
   */static _propertyValueFromAttribute(value,options){var type=options.type;var converter=options.converter||defaultConverter;var fromAttribute=typeof converter==='function'?converter:converter.fromAttribute;return fromAttribute?fromAttribute(value,type):value;}/**
   * Returns the attribute value for the given property value. If this
   * returns undefined, the property will *not* be reflected to an attribute.
   * If this returns null, the attribute will be removed, otherwise the
   * attribute will be set to the value.
   * This uses the property's `reflect` and `type.toAttribute` property options.
   * @nocollapse
   */static _propertyValueToAttribute(value,options){if(options.reflect===undefined){return;}var type=options.type;var converter=options.converter;var toAttribute=converter&&converter.toAttribute||defaultConverter.toAttribute;return toAttribute(value,type);}/**
   * Performs element initialization. By default captures any pre-set values for
   * registered properties.
   */initialize(){this._updateState=0;this._updatePromise=new Promise(res=>this._enableUpdatingResolver=res);this._changedProperties=new Map();this._saveInstanceProperties();// ensures first update will be caught by an early access of
// `updateComplete`
this.requestUpdateInternal();}/**
   * Fixes any properties set on the instance before upgrade time.
   * Otherwise these would shadow the accessor and break these properties.
   * The properties are stored in a Map which is played back after the
   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
   * (<=41), properties created for native platform properties like (`id` or
   * `name`) may not have default values set in the element constructor. On
   * these browsers native properties appear on instances and therefore their
   * default value will overwrite any element default (e.g. if the element sets
   * this.id = 'id' in the constructor, the 'id' will become '' since this is
   * the native platform default).
   */_saveInstanceProperties(){// Use forEach so this works even if for/of loops are compiled to for loops
// expecting arrays
this.constructor._classProperties.forEach((_v,p)=>{if(this.hasOwnProperty(p)){var value=this[p];delete this[p];if(!this._instanceProperties){this._instanceProperties=new Map();}this._instanceProperties.set(p,value);}});}/**
   * Applies previously saved instance properties.
   */_applyInstanceProperties(){// Use forEach so this works even if for/of loops are compiled to for loops
// expecting arrays
// tslint:disable-next-line:no-any
this._instanceProperties.forEach((v,p)=>this[p]=v);this._instanceProperties=undefined;}connectedCallback(){// Ensure first connection completes an update. Updates cannot complete
// before connection.
this.enableUpdating();}enableUpdating(){if(this._enableUpdatingResolver!==undefined){this._enableUpdatingResolver();this._enableUpdatingResolver=undefined;}}/**
   * Allows for `super.disconnectedCallback()` in extensions while
   * reserving the possibility of making non-breaking feature additions
   * when disconnecting at some point in the future.
   */disconnectedCallback(){}/**
   * Synchronizes property values when attributes change.
   */attributeChangedCallback(name,old,value){if(old!==value){this._attributeToProperty(name,value);}}_propertyToAttribute(name,value){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:defaultPropertyDeclaration;var ctor=this.constructor;var attr=ctor._attributeNameForProperty(name,options);if(attr!==undefined){var attrValue=ctor._propertyValueToAttribute(value,options);// an undefined value does not change the attribute.
if(attrValue===undefined){return;}// Track if the property is being reflected to avoid
// setting the property again via `attributeChangedCallback`. Note:
// 1. this takes advantage of the fact that the callback is synchronous.
// 2. will behave incorrectly if multiple attributes are in the reaction
// stack at time of calling. However, since we process attributes
// in `update` this should not be possible (or an extreme corner case
// that we'd like to discover).
// mark state reflecting
this._updateState=this._updateState|STATE_IS_REFLECTING_TO_ATTRIBUTE;if(attrValue==null){this.removeAttribute(attr);}else{this.setAttribute(attr,attrValue);}// mark state not reflecting
this._updateState=this._updateState&~STATE_IS_REFLECTING_TO_ATTRIBUTE;}}_attributeToProperty(name,value){// Use tracking info to avoid deserializing attribute value if it was
// just set from a property setter.
if(this._updateState&STATE_IS_REFLECTING_TO_ATTRIBUTE){return;}var ctor=this.constructor;// Note, hint this as an `AttributeMap` so closure clearly understands
// the type; it has issues with tracking types through statics
// tslint:disable-next-line:no-unnecessary-type-assertion
var propName=ctor._attributeToPropertyMap.get(name);if(propName!==undefined){var options=ctor.getPropertyOptions(propName);// mark state reflecting
this._updateState=this._updateState|STATE_IS_REFLECTING_TO_PROPERTY;this[propName]=// tslint:disable-next-line:no-any
ctor._propertyValueFromAttribute(value,options);// mark state not reflecting
this._updateState=this._updateState&~STATE_IS_REFLECTING_TO_PROPERTY;}}/**
   * This protected version of `requestUpdate` does not access or return the
   * `updateComplete` promise. This promise can be overridden and is therefore
   * not free to access.
   */requestUpdateInternal(name,oldValue,options){var shouldRequestUpdate=true;// If we have a property key, perform property update steps.
if(name!==undefined){var ctor=this.constructor;options=options||ctor.getPropertyOptions(name);if(ctor._valueHasChanged(this[name],oldValue,options.hasChanged)){if(!this._changedProperties.has(name)){this._changedProperties.set(name,oldValue);}// Add to reflecting properties set.
// Note, it's important that every change has a chance to add the
// property to `_reflectingProperties`. This ensures setting
// attribute + property reflects correctly.
if(options.reflect===true&&!(this._updateState&STATE_IS_REFLECTING_TO_PROPERTY)){if(this._reflectingProperties===undefined){this._reflectingProperties=new Map();}this._reflectingProperties.set(name,options);}}else{// Abort the request if the property should not be considered changed.
shouldRequestUpdate=false;}}if(!this._hasRequestedUpdate&&shouldRequestUpdate){this._updatePromise=this._enqueueUpdate();}}/**
   * Requests an update which is processed asynchronously. This should
   * be called when an element should update based on some state not triggered
   * by setting a property. In this case, pass no arguments. It should also be
   * called when manually implementing a property setter. In this case, pass the
   * property `name` and `oldValue` to ensure that any configured property
   * options are honored. Returns the `updateComplete` Promise which is resolved
   * when the update completes.
   *
   * @param name {PropertyKey} (optional) name of requesting property
   * @param oldValue {any} (optional) old value of requesting property
   * @returns {Promise} A Promise that is resolved when the update completes.
   */requestUpdate(name,oldValue){this.requestUpdateInternal(name,oldValue);return this.updateComplete;}/**
   * Sets up the element to asynchronously update.
   */_enqueueUpdate(){var _this=this;return _asyncToGenerator(function*(){_this._updateState=_this._updateState|STATE_UPDATE_REQUESTED;try{// Ensure any previous update has resolved before updating.
// This `await` also ensures that property changes are batched.
yield _this._updatePromise;}catch(e){// Ignore any previous errors. We only care that the previous cycle is
// done. Any error should have been handled in the previous update.
}var result=_this.performUpdate();// If `performUpdate` returns a Promise, we await it. This is done to
// enable coordinating updates with a scheduler. Note, the result is
// checked to avoid delaying an additional microtask unless we need to.
if(result!=null){yield result;}return!_this._hasRequestedUpdate;})();}get _hasRequestedUpdate(){return this._updateState&STATE_UPDATE_REQUESTED;}get hasUpdated(){return this._updateState&STATE_HAS_UPDATED;}/**
   * Performs an element update. Note, if an exception is thrown during the
   * update, `firstUpdated` and `updated` will not be called.
   *
   * You can override this method to change the timing of updates. If this
   * method is overridden, `super.performUpdate()` must be called.
   *
   * For instance, to schedule updates to occur just before the next frame:
   *
   * ```
   * protected async performUpdate(): Promise<unknown> {
   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
   *   super.performUpdate();
   * }
   * ```
   */performUpdate(){// Abort any update if one is not pending when this is called.
// This can happen if `performUpdate` is called early to "flush"
// the update.
if(!this._hasRequestedUpdate){return;}// Mixin instance properties once, if they exist.
if(this._instanceProperties){this._applyInstanceProperties();}var shouldUpdate=false;var changedProperties=this._changedProperties;try{shouldUpdate=this.shouldUpdate(changedProperties);if(shouldUpdate){this.update(changedProperties);}else{this._markUpdated();}}catch(e){// Prevent `firstUpdated` and `updated` from running when there's an
// update exception.
shouldUpdate=false;// Ensure element can accept additional updates after an exception.
this._markUpdated();throw e;}if(shouldUpdate){if(!(this._updateState&STATE_HAS_UPDATED)){this._updateState=this._updateState|STATE_HAS_UPDATED;this.firstUpdated(changedProperties);}this.updated(changedProperties);}}_markUpdated(){this._changedProperties=new Map();this._updateState=this._updateState&~STATE_UPDATE_REQUESTED;}/**
   * Returns a Promise that resolves when the element has completed updating.
   * The Promise value is a boolean that is `true` if the element completed the
   * update without triggering another update. The Promise result is `false` if
   * a property was set inside `updated()`. If the Promise is rejected, an
   * exception was thrown during the update.
   *
   * To await additional asynchronous work, override the `_getUpdateComplete`
   * method. For example, it is sometimes useful to await a rendered element
   * before fulfilling this Promise. To do this, first await
   * `super._getUpdateComplete()`, then any subsequent state.
   *
   * @returns {Promise} The Promise returns a boolean that indicates if the
   * update resolved without triggering another update.
   */get updateComplete(){return this._getUpdateComplete();}/**
   * Override point for the `updateComplete` promise.
   *
   * It is not safe to override the `updateComplete` getter directly due to a
   * limitation in TypeScript which means it is not possible to call a
   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
   * This method should be overridden instead. For example:
   *
   *   class MyElement extends LitElement {
   *     async _getUpdateComplete() {
   *       await super._getUpdateComplete();
   *       await this._myChild.updateComplete;
   *     }
   *   }
   */_getUpdateComplete(){return this._updatePromise;}/**
   * Controls whether or not `update` should be called when the element requests
   * an update. By default, this method always returns `true`, but this can be
   * customized to control when to update.
   *
   * @param _changedProperties Map of changed properties with old values
   */shouldUpdate(_changedProperties){return true;}/**
   * Updates the element. This method reflects property values to attributes.
   * It can be overridden to render and keep updated element DOM.
   * Setting properties inside this method will *not* trigger
   * another update.
   *
   * @param _changedProperties Map of changed properties with old values
   */update(_changedProperties){if(this._reflectingProperties!==undefined&&this._reflectingProperties.size>0){// Use forEach so this works even if for/of loops are compiled to for
// loops expecting arrays
this._reflectingProperties.forEach((v,k)=>this._propertyToAttribute(k,this[k],v));this._reflectingProperties=undefined;}this._markUpdated();}/**
   * Invoked whenever the element is updated. Implement to perform
   * post-updating tasks via DOM APIs, for example, focusing an element.
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * @param _changedProperties Map of changed properties with old values
   */updated(_changedProperties){}/**
   * Invoked when the element is first updated. Implement to perform one time
   * work on the element after update.
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * @param _changedProperties Map of changed properties with old values
   */firstUpdated(_changedProperties){}}_a=finalized;/**
 * Marks class as having finished creating properties.
 */UpdatingElement[_a]=true;/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var legacyCustomElement=(tagName,clazz)=>{window.customElements.define(tagName,clazz);// Cast as any because TS doesn't recognize the return type as being a
// subtype of the decorated class when clazz is typed as
// `Constructor<HTMLElement>` for some reason.
// `Constructor<HTMLElement>` is helpful to make sure the decorator is
// applied to elements however.
// tslint:disable-next-line:no-any
return clazz;};var standardCustomElement=(tagName,descriptor)=>{var{kind,elements}=descriptor;return{kind,elements,// This callback is called once the class is otherwise fully defined
finisher(clazz){window.customElements.define(tagName,clazz);}};};/**
 * Class decorator factory that defines the decorated class as a custom element.
 *
 * ```
 * @customElement('my-element')
 * class MyElement {
 *   render() {
 *     return html``;
 *   }
 * }
 * ```
 * @category Decorator
 * @param tagName The name of the custom element to define.
 */var customElement=tagName=>classOrDescriptor=>typeof classOrDescriptor==='function'?legacyCustomElement(tagName,classOrDescriptor):standardCustomElement(tagName,classOrDescriptor);var standardProperty=(options,element)=>{// When decorating an accessor, pass it through and add property metadata.
// Note, the `hasOwnProperty` check in `createProperty` ensures we don't
// stomp over the user's accessor.
if(element.kind==='method'&&element.descriptor&&!('value'in element.descriptor)){return Object.assign(Object.assign({},element),{finisher(clazz){clazz.createProperty(element.key,options);}});}else{// createProperty() takes care of defining the property, but we still
// must return some kind of descriptor, so return a descriptor for an
// unused prototype field. The finisher calls createProperty().
return{kind:'field',key:Symbol(),placement:'own',descriptor:{},// When @babel/plugin-proposal-decorators implements initializers,
// do this instead of the initializer below. See:
// https://github.com/babel/babel/issues/9260 extras: [
//   {
//     kind: 'initializer',
//     placement: 'own',
//     initializer: descriptor.initializer,
//   }
// ],
initializer(){if(typeof element.initializer==='function'){this[element.key]=element.initializer.call(this);}},finisher(clazz){clazz.createProperty(element.key,options);}};}};var legacyProperty=(options,proto,name)=>{proto.constructor.createProperty(name,options);};/**
 * A property decorator which creates a LitElement property which reflects a
 * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be
 * supplied to configure property features.
 *
 * This decorator should only be used for public fields. Private or protected
 * fields should use the [[`internalProperty`]] decorator.
 *
 * @example
 * ```ts
 * class MyElement {
 *   @property({ type: Boolean })
 *   clicked = false;
 * }
 * ```
 * @category Decorator
 * @ExportDecoratedItems
 */function property(options){// tslint:disable-next-line:no-any decorator
return(protoOrDescriptor,name)=>name!==undefined?legacyProperty(options,protoOrDescriptor,name):standardProperty(options,protoOrDescriptor);}/**
 * Declares a private or protected property that still triggers updates to the
 * element when it changes.
 *
 * Properties declared this way must not be used from HTML or HTML templating
 * systems, they're solely for properties internal to the element. These
 * properties may be renamed by optimization tools like closure compiler.
 * @category Decorator
 */function internalProperty(options){return property({attribute:false,hasChanged:options===null||options===void 0?void 0:options.hasChanged});}/**
 * A property decorator that converts a class property into a getter that
 * executes a querySelector on the element's renderRoot.
 *
 * @param selector A DOMString containing one or more selectors to match.
 * @param cache An optional boolean which when true performs the DOM query only
 * once and caches the result.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
 *
 * @example
 *
 * ```ts
 * class MyElement {
 *   @query('#first')
 *   first;
 *
 *   render() {
 *     return html`
 *       <div id="first"></div>
 *       <div id="second"></div>
 *     `;
 *   }
 * }
 * ```
 * @category Decorator
 */function query(selector,cache){return(protoOrDescriptor,// tslint:disable-next-line:no-any decorator
name)=>{var descriptor={get(){return this.renderRoot.querySelector(selector);},enumerable:true,configurable:true};if(cache){var key=typeof name==='symbol'?Symbol():"__".concat(name);descriptor.get=function(){if(this[key]===undefined){this[key]=this.renderRoot.querySelector(selector);}return this[key];};}return name!==undefined?legacyQuery(descriptor,protoOrDescriptor,name):standardQuery(descriptor,protoOrDescriptor);};}// Note, in the future, we may extend this decorator to support the use case
// where the queried element may need to do work to become ready to interact
// with (e.g. load some implementation code). If so, we might elect to
// add a second argument defining a function that can be run to make the
// queried element loaded/updated/ready.
/**
 * A property decorator that converts a class property into a getter that
 * returns a promise that resolves to the result of a querySelector on the
 * element's renderRoot done after the element's `updateComplete` promise
 * resolves. When the queried property may change with element state, this
 * decorator can be used instead of requiring users to await the
 * `updateComplete` before accessing the property.
 *
 * @param selector A DOMString containing one or more selectors to match.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
 *
 * @example
 * ```ts
 * class MyElement {
 *   @queryAsync('#first')
 *   first;
 *
 *   render() {
 *     return html`
 *       <div id="first"></div>
 *       <div id="second"></div>
 *     `;
 *   }
 * }
 *
 * // external usage
 * async doSomethingWithFirst() {
 *  (await aMyElement.first).doSomething();
 * }
 * ```
 * @category Decorator
 */function queryAsync(selector){return(protoOrDescriptor,// tslint:disable-next-line:no-any decorator
name)=>{var descriptor={get(){var _this=this;return _asyncToGenerator(function*(){yield _this.updateComplete;return _this.renderRoot.querySelector(selector);})();},enumerable:true,configurable:true};return name!==undefined?legacyQuery(descriptor,protoOrDescriptor,name):standardQuery(descriptor,protoOrDescriptor);};}/**
 * A property decorator that converts a class property into a getter
 * that executes a querySelectorAll on the element's renderRoot.
 *
 * @param selector A DOMString containing one or more selectors to match.
 *
 * See:
 * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
 *
 * @example
 * ```ts
 * class MyElement {
 *   @queryAll('div')
 *   divs;
 *
 *   render() {
 *     return html`
 *       <div id="first"></div>
 *       <div id="second"></div>
 *     `;
 *   }
 * }
 * ```
 * @category Decorator
 */function queryAll(selector){return(protoOrDescriptor,// tslint:disable-next-line:no-any decorator
name)=>{var descriptor={get(){return this.renderRoot.querySelectorAll(selector);},enumerable:true,configurable:true};return name!==undefined?legacyQuery(descriptor,protoOrDescriptor,name):standardQuery(descriptor,protoOrDescriptor);};}var legacyQuery=(descriptor,proto,name)=>{Object.defineProperty(proto,name,descriptor);};var standardQuery=(descriptor,element)=>({kind:'method',placement:'prototype',key:element.key,descriptor});var standardEventOptions=(options,element)=>{return Object.assign(Object.assign({},element),{finisher(clazz){Object.assign(clazz.prototype[element.key],options);}});};var legacyEventOptions=// tslint:disable-next-line:no-any legacy decorator
(options,proto,name)=>{Object.assign(proto[name],options);};/**
 * Adds event listener options to a method used as an event listener in a
 * lit-html template.
 *
 * @param options An object that specifies event listener options as accepted by
 * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.
 *
 * Current browsers support the `capture`, `passive`, and `once` options. See:
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters
 *
 * @example
 * ```ts
 * class MyElement {
 *   clicked = false;
 *
 *   render() {
 *     return html`
 *       <div @click=${this._onClick}`>
 *         <button></button>
 *       </div>
 *     `;
 *   }
 *
 *   @eventOptions({capture: true})
 *   _onClick(e) {
 *     this.clicked = true;
 *   }
 * }
 * ```
 * @category Decorator
 */function eventOptions(options){// Return value typed as any to prevent TypeScript from complaining that
// standard decorator function signature does not match TypeScript decorator
// signature
// TODO(kschaaf): unclear why it was only failing on this decorator and not
// the others
return(protoOrDescriptor,name)=>name!==undefined?legacyEventOptions(options,protoOrDescriptor,name):standardEventOptions(options,protoOrDescriptor);}// x-browser support for matches
// tslint:disable-next-line:no-any
var ElementProto=Element.prototype;var legacyMatches=ElementProto.msMatchesSelector||ElementProto.webkitMatchesSelector;/**
 * A property decorator that converts a class property into a getter that
 * returns the `assignedNodes` of the given named `slot`. Note, the type of
 * this property should be annotated as `NodeListOf<HTMLElement>`.
 *
 * @param slotName A string name of the slot.
 * @param flatten A boolean which when true flattens the assigned nodes,
 * meaning any assigned nodes that are slot elements are replaced with their
 * assigned nodes.
 * @param selector A string which filters the results to elements that match
 * the given css selector.
 *
 * * @example
 * ```ts
 * class MyElement {
 *   @queryAssignedNodes('list', true, '.item')
 *   listItems;
 *
 *   render() {
 *     return html`
 *       <slot name="list"></slot>
 *     `;
 *   }
 * }
 * ```
 * @category Decorator
 */function queryAssignedNodes(){var slotName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var flatten=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var selector=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';return(protoOrDescriptor,// tslint:disable-next-line:no-any decorator
name)=>{var descriptor={get(){var slotSelector="slot".concat(slotName?"[name=".concat(slotName,"]"):':not([name])');var slot=this.renderRoot.querySelector(slotSelector);var nodes=slot&&slot.assignedNodes({flatten});if(nodes&&selector){nodes=nodes.filter(node=>node.nodeType===Node.ELEMENT_NODE&&node.matches?node.matches(selector):legacyMatches.call(node,selector));}return nodes;},enumerable:true,configurable:true};return name!==undefined?legacyQuery(descriptor,protoOrDescriptor,name):standardQuery(descriptor,protoOrDescriptor);};}/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/ /**
 * Whether the current browser supports `adoptedStyleSheets`.
 */var supportsAdoptingStyleSheets=window.ShadowRoot&&(window.ShadyCSS===undefined||window.ShadyCSS.nativeShadow)&&'adoptedStyleSheets'in Document.prototype&&'replace'in CSSStyleSheet.prototype;var constructionToken=Symbol();class CSSResult{constructor(cssText,safeToken){if(safeToken!==constructionToken){throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');}this.cssText=cssText;}// Note, this is a getter so that it's lazy. In practice, this means
// stylesheets are not created until the first element instance is made.
get styleSheet(){if(this._styleSheet===undefined){// Note, if `supportsAdoptingStyleSheets` is true then we assume
// CSSStyleSheet is constructable.
if(supportsAdoptingStyleSheets){this._styleSheet=new CSSStyleSheet();this._styleSheet.replaceSync(this.cssText);}else{this._styleSheet=null;}}return this._styleSheet;}toString(){return this.cssText;}}/**
 * Wrap a value for interpolation in a [[`css`]] tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */var unsafeCSS=value=>{return new CSSResult(String(value),constructionToken);};var textFromCSSResult=value=>{if(value instanceof CSSResult){return value.cssText;}else if(typeof value==='number'){return value;}else{throw new Error("Value passed to 'css' function must be a 'css' function result: ".concat(value,". Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security."));}};/**
 * Template tag which which can be used with LitElement's [[LitElement.styles |
 * `styles`]] property to set element styles. For security reasons, only literal
 * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]
 * may be used inside a template string part.
 */var css=function css(strings){for(var _len=arguments.length,values=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){values[_key-1]=arguments[_key];}var cssText=values.reduce((acc,v,idx)=>acc+textFromCSSResult(v)+strings[idx+1],strings[0]);return new CSSResult(cssText,constructionToken);};/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ // This line will be used in regexes to search for LitElement usage.
// TODO(justinfagnani): inject version number at build time
(window['litElementVersions']||(window['litElementVersions']=[])).push('2.4.0');/**
 * Sentinal value used to avoid calling lit-html's render function when
 * subclasses do not implement `render`
 */var renderNotImplemented={};/**
 * Base element class that manages element properties and attributes, and
 * renders a lit-html template.
 *
 * To define a component, subclass `LitElement` and implement a
 * `render` method to provide the component's template. Define properties
 * using the [[`properties`]] property or the [[`property`]] decorator.
 */class LitElement extends UpdatingElement{/**
   * Return the array of styles to apply to the element.
   * Override this method to integrate into a style management system.
   *
   * @nocollapse
   */static getStyles(){return this.styles;}/** @nocollapse */static _getUniqueStyles(){// Only gather styles once per class
if(this.hasOwnProperty(JSCompiler_renameProperty('_styles',this))){return;}// Take care not to call `this.getStyles()` multiple times since this
// generates new CSSResults each time.
// TODO(sorvell): Since we do not cache CSSResults by input, any
// shared styles will generate new stylesheet objects, which is wasteful.
// This should be addressed when a browser ships constructable
// stylesheets.
var userStyles=this.getStyles();if(Array.isArray(userStyles)){// De-duplicate styles preserving the _last_ instance in the set.
// This is a performance optimization to avoid duplicated styles that can
// occur especially when composing via subclassing.
// The last item is kept to try to preserve the cascade order with the
// assumption that it's most important that last added styles override
// previous styles.
var addStyles=(styles,set)=>styles.reduceRight((set,s)=>// Note: On IE set.add() does not return the set
Array.isArray(s)?addStyles(s,set):(set.add(s),set),set);// Array.from does not work on Set in IE, otherwise return
// Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()
var set=addStyles(userStyles,new Set());var styles=[];set.forEach(v=>styles.unshift(v));this._styles=styles;}else{this._styles=userStyles===undefined?[]:[userStyles];}// Ensure that there are no invalid CSSStyleSheet instances here. They are
// invalid in two conditions.
// (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but
//     this is impossible to check except via .replaceSync or use
// (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is
//     false)
this._styles=this._styles.map(s=>{if(s instanceof CSSStyleSheet&&!supportsAdoptingStyleSheets){// Flatten the cssText from the passed constructible stylesheet (or
// undetectable non-constructible stylesheet). The user might have
// expected to update their stylesheets over time, but the alternative
// is a crash.
var cssText=Array.prototype.slice.call(s.cssRules).reduce((css,rule)=>css+rule.cssText,'');return unsafeCSS(cssText);}return s;});}/**
   * Performs element initialization. By default this calls
   * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and
   * captures any pre-set values for registered properties.
   */initialize(){super.initialize();this.constructor._getUniqueStyles();this.renderRoot=this.createRenderRoot();// Note, if renderRoot is not a shadowRoot, styles would/could apply to the
// element's getRootNode(). While this could be done, we're choosing not to
// support this now since it would require different logic around de-duping.
if(window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot){this.adoptStyles();}}/**
   * Returns the node into which the element should render and by default
   * creates and returns an open shadowRoot. Implement to customize where the
   * element's DOM is rendered. For example, to render into the element's
   * childNodes, return `this`.
   * @returns {Element|DocumentFragment} Returns a node into which to render.
   */createRenderRoot(){return this.attachShadow({mode:'open'});}/**
   * Applies styling to the element shadowRoot using the [[`styles`]]
   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
   * available and will fallback otherwise. When Shadow DOM is polyfilled,
   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
   * is available but `adoptedStyleSheets` is not, styles are appended to the
   * end of the `shadowRoot` to [mimic spec
   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
   */adoptStyles(){var styles=this.constructor._styles;if(styles.length===0){return;}// There are three separate cases here based on Shadow DOM support.
// (1) shadowRoot polyfilled: use ShadyCSS
// (2) shadowRoot.adoptedStyleSheets available: use it
// (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
// rendering
if(window.ShadyCSS!==undefined&&!window.ShadyCSS.nativeShadow){window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map(s=>s.cssText),this.localName);}else if(supportsAdoptingStyleSheets){this.renderRoot.adoptedStyleSheets=styles.map(s=>s instanceof CSSStyleSheet?s:s.styleSheet);}else{// This must be done after rendering so the actual style insertion is done
// in `update`.
this._needsShimAdoptedStyleSheets=true;}}connectedCallback(){super.connectedCallback();// Note, first update/render handles styleElement so we only call this if
// connected after first update.
if(this.hasUpdated&&window.ShadyCSS!==undefined){window.ShadyCSS.styleElement(this);}}/**
   * Updates the element. This method reflects property values to attributes
   * and calls `render` to render DOM via lit-html. Setting properties inside
   * this method will *not* trigger another update.
   * @param _changedProperties Map of changed properties with old values
   */update(changedProperties){// Setting properties in `render` should not trigger an update. Since
// updates are allowed after super.update, it's important to call `render`
// before that.
var templateResult=this.render();super.update(changedProperties);// If render is not implemented by the component, don't call lit-html render
if(templateResult!==renderNotImplemented){this.constructor.render(templateResult,this.renderRoot,{scopeName:this.localName,eventContext:this});}// When native Shadow DOM is used but adoptedStyles are not supported,
// insert styling after rendering to ensure adoptedStyles have highest
// priority.
if(this._needsShimAdoptedStyleSheets){this._needsShimAdoptedStyleSheets=false;this.constructor._styles.forEach(s=>{var style=document.createElement('style');style.textContent=s.cssText;this.renderRoot.appendChild(style);});}}/**
   * Invoked on each update to perform rendering tasks. This method may return
   * any value renderable by lit-html's `NodePart` - typically a
   * `TemplateResult`. Setting properties inside this method will *not* trigger
   * the element to update.
   */render(){return renderNotImplemented;}}/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 *
 * Note this property name is a string to prevent breaking Closure JS Compiler
 * optimizations. See updating-element.ts for more information.
 */LitElement['finalized']=true;/**
 * Reference to the underlying library method used to render the element's
 * DOM. By default, points to the `render` method from lit-html's shady-render
 * module.
 *
 * **Most users will never need to touch this property.**
 *
 * This  property should not be confused with the `render` instance method,
 * which should be overridden to define a template for the element.
 *
 * Advanced users creating a new base class based on LitElement can override
 * this property to point to a custom render method with a signature that
 * matches [shady-render's `render`
 * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).
 *
 * @nocollapse
 */LitElement.render=render;var commonjsGlobal=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof __webpack_require__.g!=='undefined'?__webpack_require__.g:typeof self!=='undefined'?self:{};function createCommonjsModule(fn,basedir,module){return module={path:basedir,exports:{},require:function(path,base){return commonjsRequire(path,base===undefined||base===null?module.path:base);}},fn(module,module.exports),module.exports;}function getCjsExportFromNamespace(n){return n&&n['default']||n;}function commonjsRequire(){throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');}var lottie=createCommonjsModule(function(module){typeof navigator!=="undefined"&&function(root,factory){if(false){}else if( true&&module.exports){module.exports=factory(root);}else{root.lottie=factory(root);root.bodymovin=root.lottie;}}(window||{},function(window){/* global locationHref:writable, animationManager, subframeEnabled:writable, defaultCurveSegments:writable, roundValues,
expressionsPlugin:writable, PropertyFactory, ShapePropertyFactory, Matrix */ /* exported locationHref, subframeEnabled, expressionsPlugin */'use strict';/* exported svgNS, locationHref, initialDefaultFrame */var svgNS='http://www.w3.org/2000/svg';var locationHref='';var initialDefaultFrame=-999999;/* global createSizedArray */ /* exported subframeEnabled, expressionsPlugin, isSafari, cachedColors, bmPow, bmSqrt, bmFloor, bmMax, bmMin, ProjectInterface,
defaultCurveSegments, degToRads, roundCorner, bmRnd, styleDiv, BMEnterFrameEvent, BMCompleteEvent, BMCompleteLoopEvent,
BMSegmentStartEvent, BMDestroyEvent, BMRenderFrameErrorEvent, BMConfigErrorEvent, BMAnimationConfigErrorEvent, createElementID,
addSaturationToRGB, addBrightnessToRGB, addHueToRGB, rgbToHex */var subframeEnabled=true;var expressionsPlugin;var isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);var cachedColors={};var bmRnd;var bmPow=Math.pow;var bmSqrt=Math.sqrt;var bmFloor=Math.floor;var bmMax=Math.max;var bmMin=Math.min;var BMMath={};(function(){var propertyNames=['abs','acos','acosh','asin','asinh','atan','atanh','atan2','ceil','cbrt','expm1','clz32','cos','cosh','exp','floor','fround','hypot','imul','log','log1p','log2','log10','max','min','pow','random','round','sign','sin','sinh','sqrt','tan','tanh','trunc','E','LN10','LN2','LOG10E','LOG2E','PI','SQRT1_2','SQRT2'];var i;var len=propertyNames.length;for(i=0;i<len;i+=1){BMMath[propertyNames[i]]=Math[propertyNames[i]];}})();function ProjectInterface(){return{};}BMMath.random=Math.random;BMMath.abs=function(val){var tOfVal=typeof val;if(tOfVal==='object'&&val.length){var absArr=createSizedArray(val.length);var i;var len=val.length;for(i=0;i<len;i+=1){absArr[i]=Math.abs(val[i]);}return absArr;}return Math.abs(val);};var defaultCurveSegments=150;var degToRads=Math.PI/180;var roundCorner=0.5519;function roundValues(flag){if(flag){bmRnd=Math.round;}else{bmRnd=function bmRnd(val){return val;};}}roundValues(false);function styleDiv(element){element.style.position='absolute';element.style.top=0;element.style.left=0;element.style.display='block';element.style.transformOrigin='0 0';element.style.webkitTransformOrigin='0 0';element.style.backfaceVisibility='visible';element.style.webkitBackfaceVisibility='visible';element.style.transformStyle='preserve-3d';element.style.webkitTransformStyle='preserve-3d';element.style.mozTransformStyle='preserve-3d';}function BMEnterFrameEvent(type,currentTime,totalTime,frameMultiplier){this.type=type;this.currentTime=currentTime;this.totalTime=totalTime;this.direction=frameMultiplier<0?-1:1;}function BMCompleteEvent(type,frameMultiplier){this.type=type;this.direction=frameMultiplier<0?-1:1;}function BMCompleteLoopEvent(type,totalLoops,currentLoop,frameMultiplier){this.type=type;this.currentLoop=currentLoop;this.totalLoops=totalLoops;this.direction=frameMultiplier<0?-1:1;}function BMSegmentStartEvent(type,firstFrame,totalFrames){this.type=type;this.firstFrame=firstFrame;this.totalFrames=totalFrames;}function BMDestroyEvent(type,target){this.type=type;this.target=target;}function BMRenderFrameErrorEvent(nativeError,currentTime){this.type='renderFrameError';this.nativeError=nativeError;this.currentTime=currentTime;}function BMConfigErrorEvent(nativeError){this.type='configError';this.nativeError=nativeError;}function BMAnimationConfigErrorEvent(type,nativeError){this.type=type;this.nativeError=nativeError;}var createElementID=function(){var _count=0;return function createID(){_count+=1;return'__lottie_element_'+_count;};}();function HSVtoRGB(h,s,v){var r;var g;var b;var i;var f;var p;var q;var t;i=Math.floor(h*6);f=h*6-i;p=v*(1-s);q=v*(1-f*s);t=v*(1-(1-f)*s);switch(i%6){case 0:r=v;g=t;b=p;break;case 1:r=q;g=v;b=p;break;case 2:r=p;g=v;b=t;break;case 3:r=p;g=q;b=v;break;case 4:r=t;g=p;b=v;break;case 5:r=v;g=p;b=q;break;default:break;}return[r,g,b];}function RGBtoHSV(r,g,b){var max=Math.max(r,g,b);var min=Math.min(r,g,b);var d=max-min;var h;var s=max===0?0:d/max;var v=max/255;switch(max){case min:h=0;break;case r:h=g-b+d*(g<b?6:0);h/=6*d;break;case g:h=b-r+d*2;h/=6*d;break;case b:h=r-g+d*4;h/=6*d;break;default:break;}return[h,s,v];}function addSaturationToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[1]+=offset;if(hsv[1]>1){hsv[1]=1;}else if(hsv[1]<=0){hsv[1]=0;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}function addBrightnessToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[2]+=offset;if(hsv[2]>1){hsv[2]=1;}else if(hsv[2]<0){hsv[2]=0;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}function addHueToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[0]+=offset/360;if(hsv[0]>1){hsv[0]-=1;}else if(hsv[0]<0){hsv[0]+=1;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}var rgbToHex=function(){var colorMap=[];var i;var hex;for(i=0;i<256;i+=1){hex=i.toString(16);colorMap[i]=hex.length===1?'0'+hex:hex;}return function(r,g,b){if(r<0){r=0;}if(g<0){g=0;}if(b<0){b=0;}return'#'+colorMap[r]+colorMap[g]+colorMap[b];};}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function triggerEvent(eventName,args){if(this._cbs[eventName]){var len=this._cbs[eventName].length;for(var i=0;i<len;i+=1){this._cbs[eventName][i](args);}}},addEventListener:function addEventListener(eventName,callback){if(!this._cbs[eventName]){this._cbs[eventName]=[];}this._cbs[eventName].push(callback);return function(){this.removeEventListener(eventName,callback);}.bind(this);},removeEventListener:function removeEventListener(eventName,callback){if(!callback){this._cbs[eventName]=null;}else if(this._cbs[eventName]){var i=0;var len=this._cbs[eventName].length;while(i<len){if(this._cbs[eventName][i]===callback){this._cbs[eventName].splice(i,1);i-=1;len-=1;}i+=1;}if(!this._cbs[eventName].length){this._cbs[eventName]=null;}}}};/* exported createTypedArray, createSizedArray */var createTypedArray=function(){function createRegularArray(type,len){var i=0;var arr=[];var value;switch(type){case'int16':case'uint8c':value=1;break;default:value=1.1;break;}for(i=0;i<len;i+=1){arr.push(value);}return arr;}function createTypedArrayFactory(type,len){if(type==='float32'){return new Float32Array(len);}if(type==='int16'){return new Int16Array(len);}if(type==='uint8c'){return new Uint8ClampedArray(len);}return createRegularArray(type,len);}if(typeof Uint8ClampedArray==='function'&&typeof Float32Array==='function'){return createTypedArrayFactory;}return createRegularArray;}();function createSizedArray(len){return Array.apply(null,{length:len});}/* global svgNS */ /* exported createNS */function createNS(type){// return {appendChild:function(){},setAttribute:function(){},style:{}}
return document.createElementNS(svgNS,type);}/* exported createTag */function createTag(type){// return {appendChild:function(){},setAttribute:function(){},style:{}}
return document.createElement(type);}function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function addDynamicProperty(prop){if(this.dynamicProperties.indexOf(prop)===-1){this.dynamicProperties.push(prop);this.container.addDynamicProperty(this);this._isAnimated=true;}},iterateDynamicProperties:function iterateDynamicProperties(){this._mdf=false;var i;var len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();if(this.dynamicProperties[i]._mdf){this._mdf=true;}}},initDynamicPropertyContainer:function initDynamicPropertyContainer(container){this.container=container;this.dynamicProperties=[];this._mdf=false;this._isAnimated=false;}};/* exported getBlendMode */var getBlendMode=function(){var blendModeEnums={0:'source-over',1:'multiply',2:'screen',3:'overlay',4:'darken',5:'lighten',6:'color-dodge',7:'color-burn',8:'hard-light',9:'soft-light',10:'difference',11:'exclusion',12:'hue',13:'saturation',14:'color',15:'luminosity'};return function(mode){return blendModeEnums[mode]||'';};}();/* global createTypedArray */ /*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */ /**
 * 2D transformation matrix object initialized with identity matrix.
 *
 * The matrix can synchronize a canvas context by supplying the context
 * as an argument, or later apply current absolute transform to an
 * existing context.
 *
 * All values are handled as floating point values.
 *
 * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
 * @prop {number} a - scale x
 * @prop {number} b - shear y
 * @prop {number} c - shear x
 * @prop {number} d - scale y
 * @prop {number} e - translate x
 * @prop {number} f - translate y
 * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
 * @constructor
 */var Matrix=function(){var _cos=Math.cos;var _sin=Math.sin;var _tan=Math.tan;var _rnd=Math.round;function reset(){this.props[0]=1;this.props[1]=0;this.props[2]=0;this.props[3]=0;this.props[4]=0;this.props[5]=1;this.props[6]=0;this.props[7]=0;this.props[8]=0;this.props[9]=0;this.props[10]=1;this.props[11]=0;this.props[12]=0;this.props[13]=0;this.props[14]=0;this.props[15]=1;return this;}function rotate(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);}function rotateX(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(1,0,0,0,0,mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1);}function rotateY(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,0,mSin,0,0,1,0,0,-mSin,0,mCos,0,0,0,0,1);}function rotateZ(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);}function shear(sx,sy){return this._t(1,sy,sx,1,0,0);}function skew(ax,ay){return this.shear(_tan(ax),_tan(ay));}function skewFromAxis(ax,angle){var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,mSin,0,0,-mSin,mCos,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,_tan(ax),1,0,0,0,0,1,0,0,0,0,1)._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);// return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
}function scale(sx,sy,sz){if(!sz&&sz!==0){sz=1;}if(sx===1&&sy===1&&sz===1){return this;}return this._t(sx,0,0,0,0,sy,0,0,0,0,sz,0,0,0,0,1);}function setTransform(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){this.props[0]=a;this.props[1]=b;this.props[2]=c;this.props[3]=d;this.props[4]=e;this.props[5]=f;this.props[6]=g;this.props[7]=h;this.props[8]=i;this.props[9]=j;this.props[10]=k;this.props[11]=l;this.props[12]=m;this.props[13]=n;this.props[14]=o;this.props[15]=p;return this;}function translate(tx,ty,tz){tz=tz||0;if(tx!==0||ty!==0||tz!==0){return this._t(1,0,0,0,0,1,0,0,0,0,1,0,tx,ty,tz,1);}return this;}function transform(a2,b2,c2,d2,e2,f2,g2,h2,i2,j2,k2,l2,m2,n2,o2,p2){var _p=this.props;if(a2===1&&b2===0&&c2===0&&d2===0&&e2===0&&f2===1&&g2===0&&h2===0&&i2===0&&j2===0&&k2===1&&l2===0){// NOTE: commenting this condition because TurboFan deoptimizes code when present
// if(m2 !== 0 || n2 !== 0 || o2 !== 0){
_p[12]=_p[12]*a2+_p[15]*m2;_p[13]=_p[13]*f2+_p[15]*n2;_p[14]=_p[14]*k2+_p[15]*o2;_p[15]*=p2;// }
this._identityCalculated=false;return this;}var a1=_p[0];var b1=_p[1];var c1=_p[2];var d1=_p[3];var e1=_p[4];var f1=_p[5];var g1=_p[6];var h1=_p[7];var i1=_p[8];var j1=_p[9];var k1=_p[10];var l1=_p[11];var m1=_p[12];var n1=_p[13];var o1=_p[14];var p1=_p[15];/* matrix order (canvas compatible):
         * ace
         * bdf
         * 001
         */_p[0]=a1*a2+b1*e2+c1*i2+d1*m2;_p[1]=a1*b2+b1*f2+c1*j2+d1*n2;_p[2]=a1*c2+b1*g2+c1*k2+d1*o2;_p[3]=a1*d2+b1*h2+c1*l2+d1*p2;_p[4]=e1*a2+f1*e2+g1*i2+h1*m2;_p[5]=e1*b2+f1*f2+g1*j2+h1*n2;_p[6]=e1*c2+f1*g2+g1*k2+h1*o2;_p[7]=e1*d2+f1*h2+g1*l2+h1*p2;_p[8]=i1*a2+j1*e2+k1*i2+l1*m2;_p[9]=i1*b2+j1*f2+k1*j2+l1*n2;_p[10]=i1*c2+j1*g2+k1*k2+l1*o2;_p[11]=i1*d2+j1*h2+k1*l2+l1*p2;_p[12]=m1*a2+n1*e2+o1*i2+p1*m2;_p[13]=m1*b2+n1*f2+o1*j2+p1*n2;_p[14]=m1*c2+n1*g2+o1*k2+p1*o2;_p[15]=m1*d2+n1*h2+o1*l2+p1*p2;this._identityCalculated=false;return this;}function isIdentity(){if(!this._identityCalculated){this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1);this._identityCalculated=true;}return this._identity;}function equals(matr){var i=0;while(i<16){if(matr.props[i]!==this.props[i]){return false;}i+=1;}return true;}function clone(matr){var i;for(i=0;i<16;i+=1){matr.props[i]=this.props[i];}return matr;}function cloneFromProps(props){var i;for(i=0;i<16;i+=1){this.props[i]=props[i];}}function applyToPoint(x,y,z){return{x:x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12],y:x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13],z:x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14]};/* return {
         x: x * me.a + y * me.c + me.e,
         y: x * me.b + y * me.d + me.f
         }; */}function applyToX(x,y,z){return x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12];}function applyToY(x,y,z){return x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13];}function applyToZ(x,y,z){return x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14];}function getInverseMatrix(){var determinant=this.props[0]*this.props[5]-this.props[1]*this.props[4];var a=this.props[5]/determinant;var b=-this.props[1]/determinant;var c=-this.props[4]/determinant;var d=this.props[0]/determinant;var e=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/determinant;var f=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/determinant;var inverseMatrix=new Matrix();inverseMatrix.props[0]=a;inverseMatrix.props[1]=b;inverseMatrix.props[4]=c;inverseMatrix.props[5]=d;inverseMatrix.props[12]=e;inverseMatrix.props[13]=f;return inverseMatrix;}function inversePoint(pt){var inverseMatrix=this.getInverseMatrix();return inverseMatrix.applyToPointArray(pt[0],pt[1],pt[2]||0);}function inversePoints(pts){var i;var len=pts.length;var retPts=[];for(i=0;i<len;i+=1){retPts[i]=inversePoint(pts[i]);}return retPts;}function applyToTriplePoints(pt1,pt2,pt3){var arr=createTypedArray('float32',6);if(this.isIdentity()){arr[0]=pt1[0];arr[1]=pt1[1];arr[2]=pt2[0];arr[3]=pt2[1];arr[4]=pt3[0];arr[5]=pt3[1];}else{var p0=this.props[0];var p1=this.props[1];var p4=this.props[4];var p5=this.props[5];var p12=this.props[12];var p13=this.props[13];arr[0]=pt1[0]*p0+pt1[1]*p4+p12;arr[1]=pt1[0]*p1+pt1[1]*p5+p13;arr[2]=pt2[0]*p0+pt2[1]*p4+p12;arr[3]=pt2[0]*p1+pt2[1]*p5+p13;arr[4]=pt3[0]*p0+pt3[1]*p4+p12;arr[5]=pt3[0]*p1+pt3[1]*p5+p13;}return arr;}function applyToPointArray(x,y,z){var arr;if(this.isIdentity()){arr=[x,y,z];}else{arr=[x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12],x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13],x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14]];}return arr;}function applyToPointStringified(x,y){if(this.isIdentity()){return x+','+y;}var _p=this.props;return Math.round((x*_p[0]+y*_p[4]+_p[12])*100)/100+','+Math.round((x*_p[1]+y*_p[5]+_p[13])*100)/100;}function toCSS(){// Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
/* if(this.isIdentity()) {
            return '';
        } */var i=0;var props=this.props;var cssValue='matrix3d(';var v=10000;while(i<16){cssValue+=_rnd(props[i]*v)/v;cssValue+=i===15?')':',';i+=1;}return cssValue;}function roundMatrixProperty(val){var v=10000;if(val<0.000001&&val>0||val>-0.000001&&val<0){return _rnd(val*v)/v;}return val;}function to2dCSS(){// Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
/* if(this.isIdentity()) {
            return '';
        } */var props=this.props;var _a=roundMatrixProperty(props[0]);var _b=roundMatrixProperty(props[1]);var _c=roundMatrixProperty(props[4]);var _d=roundMatrixProperty(props[5]);var _e=roundMatrixProperty(props[12]);var _f=roundMatrixProperty(props[13]);return'matrix('+_a+','+_b+','+_c+','+_d+','+_e+','+_f+')';}return function(){this.reset=reset;this.rotate=rotate;this.rotateX=rotateX;this.rotateY=rotateY;this.rotateZ=rotateZ;this.skew=skew;this.skewFromAxis=skewFromAxis;this.shear=shear;this.scale=scale;this.setTransform=setTransform;this.translate=translate;this.transform=transform;this.applyToPoint=applyToPoint;this.applyToX=applyToX;this.applyToY=applyToY;this.applyToZ=applyToZ;this.applyToPointArray=applyToPointArray;this.applyToTriplePoints=applyToTriplePoints;this.applyToPointStringified=applyToPointStringified;this.toCSS=toCSS;this.to2dCSS=to2dCSS;this.clone=clone;this.cloneFromProps=cloneFromProps;this.equals=equals;this.inversePoints=inversePoints;this.inversePoint=inversePoint;this.getInverseMatrix=getInverseMatrix;this._t=this.transform;this.isIdentity=isIdentity;this._identity=true;this._identityCalculated=false;this.props=createTypedArray('float32',16);this.reset();};}();/* eslint-disable */ /*
 Copyright 2014 David Bau.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 */(function(pool,math){//
// The following constants are related to IEEE 754 limits.
//
var global=this,width=256,// each RC4 output is 0 <= x < 256
chunks=6,// at least six RC4 outputs for each double
digits=52,// there are 52 significant digits in a double
rngname='random',// rngname: name for Math.random and Math.seedrandom
startdenom=math.pow(width,chunks),significance=math.pow(2,digits),overflow=significance*2,mask=width-1,nodecrypto;// node.js crypto module, initialized at the bottom.
//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed,options,callback){var key=[];options=options===true?{entropy:true}:options||{};// Flatten the seed string or build one from local entropy if needed.
var shortseed=mixkey(flatten(options.entropy?[seed,tostring(pool)]:seed===null?autoseed():seed,3),key);// Use the seed to initialize an ARC4 generator.
var arc4=new ARC4(key);// This function returns a random double in [0, 1) that contains
// randomness in every bit of the mantissa of the IEEE 754 value.
var prng=function prng(){var n=arc4.g(chunks),// Start with a numerator n < 2 ^ 48
d=startdenom,//   and denominator d = 2 ^ 48.
x=0;//   and no 'extra last byte'.
while(n<significance){// Fill up all significant digits by
n=(n+x)*width;//   shifting numerator and
d*=width;//   denominator and generating a
x=arc4.g(1);//   new least-significant-byte.
}while(n>=overflow){// To avoid rounding up, before adding
n/=2;//   last byte, shift everything
d/=2;//   right using integer math until
x>>>=1;//   we have exactly the desired bits.
}return(n+x)/d;// Form the number within [0, 1).
};prng.int32=function(){return arc4.g(4)|0;};prng.quick=function(){return arc4.g(4)/0x100000000;};prng.double=prng;// Mix the randomness into accumulated entropy.
mixkey(tostring(arc4.S),pool);// Calling convention: what to return as a function of prng, seed, is_math.
return(options.pass||callback||function(prng,seed,is_math_call,state){if(state){// Load the arc4 state from the given state if it has an S array.
if(state.S){copy(state,arc4);}// Only provide the .state method if requested via options.state.
prng.state=function(){return copy(arc4,{});};}// If called as a method of Math (Math.seedrandom()), mutate
// Math.random because that is how seedrandom.js has worked since v1.0.
if(is_math_call){math[rngname]=prng;return seed;}// Otherwise, it is a newer calling convention, so return the
// prng directly.
else return prng;})(prng,shortseed,'global'in options?options.global:this==math,options.state);}math['seed'+rngname]=seedrandom;//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key){var t,keylen=key.length,me=this,i=0,j=me.i=me.j=0,s=me.S=[];// The empty key [] is treated as [0].
if(!keylen){key=[keylen++];}// Set up S using the standard key scheduling algorithm.
while(i<width){s[i]=i++;}for(i=0;i<width;i++){s[i]=s[j=mask&j+key[i%keylen]+(t=s[i])];s[j]=t;}// The "g" method returns the next (count) outputs as one number.
me.g=function(count){// Using instance members instead of closure state nearly doubles speed.
var t,r=0,i=me.i,j=me.j,s=me.S;while(count--){t=s[i=mask&i+1];r=r*width+s[mask&(s[i]=s[j=mask&j+t])+(s[j]=t)];}me.i=i;me.j=j;return r;// For robust unpredictability, the function call below automatically
// discards an initial batch of values.  This is called RC4-drop[256].
// See http://google.com/search?q=rsa+fluhrer+response&btnI
};}//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f,t){t.i=f.i;t.j=f.j;t.S=f.S.slice();return t;}//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj,depth){var result=[],typ=typeof obj,prop;if(depth&&typ=='object'){for(prop in obj){try{result.push(flatten(obj[prop],depth-1));}catch(e){}}}return result.length?result:typ=='string'?obj:obj+'\0';}//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed,key){var stringseed=seed+'',smear,j=0;while(j<stringseed.length){key[mask&j]=mask&(smear^=key[mask&j]*19)+stringseed.charCodeAt(j++);}return tostring(key);}//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed(){try{if(nodecrypto){return tostring(nodecrypto.randomBytes(width));}var out=new Uint8Array(width);(global.crypto||global.msCrypto).getRandomValues(out);return tostring(out);}catch(e){var browser=global.navigator,plugins=browser&&browser.plugins;return[+new Date(),global,plugins,global.screen,tostring(pool)];}}//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a){return String.fromCharCode.apply(0,a);}//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(),pool);//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
// End anonymous scope, and pass initial values.
})([],// pool: entropy pool starts empty
BMMath// math: package containing random, pow, and seedrandom
);/* eslint-disable */var BezierFactory=function(){/**
     * BezierEasing - use bezier curve for transition easing function
     * by Gaëtan Renaudeau 2014 - 2015 – MIT License
     *
     * Credits: is based on Firefox's nsSMILKeySpline.cpp
     * Usage:
     * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
     * spline.get(x) => returns the easing value | x must be in [0, 1] range
     *
     */var ob={};ob.getBezierEasing=getBezierEasing;var beziers={};function getBezierEasing(a,b,c,d,nm){var str=nm||('bez_'+a+'_'+b+'_'+c+'_'+d).replace(/\./g,'p');if(beziers[str]){return beziers[str];}var bezEasing=new BezierEasing([a,b,c,d]);beziers[str]=bezEasing;return bezEasing;}// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var float32ArraySupported=typeof Float32Array==='function';function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}function C(aA1){return 3.0*aA1;}// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){var currentX,currentT,i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0)return aGuessT;var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}/**
     * points is an array of [ mX1, mY1, mX2, mY2 ]
     */function BezierEasing(points){this._p=points;this._mSampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);this._precomputed=false;this.get=this.get.bind(this);}BezierEasing.prototype={get:function get(x){var mX1=this._p[0],mY1=this._p[1],mX2=this._p[2],mY2=this._p[3];if(!this._precomputed)this._precompute();if(mX1===mY1&&mX2===mY2)return x;// linear
// Because JavaScript number are imprecise, we should guarantee the extremes are right.
if(x===0)return 0;if(x===1)return 1;return calcBezier(this._getTForX(x),mY1,mY2);},// Private part
_precompute:function _precompute(){var mX1=this._p[0],mY1=this._p[1],mX2=this._p[2],mY2=this._p[3];this._precomputed=true;if(mX1!==mY1||mX2!==mY2){this._calcSampleValues();}},_calcSampleValues:function _calcSampleValues(){var mX1=this._p[0],mX2=this._p[2];for(var i=0;i<kSplineTableSize;++i){this._mSampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}},/**
         * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
         */_getTForX:function _getTForX(aX){var mX1=this._p[0],mX2=this._p[2],mSampleValues=this._mSampleValues;var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&mSampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;// Interpolate to provide an initial guess for t
var dist=(aX-mSampleValues[currentSample])/(mSampleValues[currentSample+1]-mSampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}if(initialSlope===0.0){return guessForT;}return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};return ob;}();(function(){var lastTime=0;var vendors=['ms','moz','webkit','o'];for(var x=0;x<vendors.length&&!window.requestAnimationFrame;++x){// eslint-disable-line no-plusplus
window.requestAnimationFrame=window[vendors[x]+'RequestAnimationFrame'];window.cancelAnimationFrame=window[vendors[x]+'CancelAnimationFrame']||window[vendors[x]+'CancelRequestAnimationFrame'];}if(!window.requestAnimationFrame){window.requestAnimationFrame=function(callback){var currTime=new Date().getTime();var timeToCall=Math.max(0,16-(currTime-lastTime));var id=setTimeout(function(){callback(currTime+timeToCall);},timeToCall);lastTime=currTime+timeToCall;return id;};}if(!window.cancelAnimationFrame){window.cancelAnimationFrame=function(id){clearTimeout(id);};}})();/* exported extendPrototype, getDescriptor, createProxyFunction */function extendPrototype(sources,destination){var i;var len=sources.length;var sourcePrototype;for(i=0;i<len;i+=1){sourcePrototype=sources[i].prototype;for(var attr in sourcePrototype){if(Object.prototype.hasOwnProperty.call(sourcePrototype,attr))destination.prototype[attr]=sourcePrototype[attr];}}}function getDescriptor(object,prop){return Object.getOwnPropertyDescriptor(object,prop);}function createProxyFunction(prototype){function ProxyFunction(){}ProxyFunction.prototype=prototype;return ProxyFunction;}/* global segmentsLengthPool, defaultCurveSegments, createSizedArray, bmPow, bmSqrt, bmFloor, createTypedArray, bezierLengthPool */ /* exported bez */function bezFunction(){var math=Math;function pointOnLine2D(x1,y1,x2,y2,x3,y3){var det1=x1*y2+y1*x3+x2*y3-x3*y2-y3*x1-x2*y1;return det1>-0.001&&det1<0.001;}function pointOnLine3D(x1,y1,z1,x2,y2,z2,x3,y3,z3){if(z1===0&&z2===0&&z3===0){return pointOnLine2D(x1,y1,x2,y2,x3,y3);}var dist1=math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2)+math.pow(z2-z1,2));var dist2=math.sqrt(math.pow(x3-x1,2)+math.pow(y3-y1,2)+math.pow(z3-z1,2));var dist3=math.sqrt(math.pow(x3-x2,2)+math.pow(y3-y2,2)+math.pow(z3-z2,2));var diffDist;if(dist1>dist2){if(dist1>dist3){diffDist=dist1-dist2-dist3;}else{diffDist=dist3-dist2-dist1;}}else if(dist3>dist2){diffDist=dist3-dist2-dist1;}else{diffDist=dist2-dist1-dist3;}return diffDist>-0.0001&&diffDist<0.0001;}var getBezierLength=function(){return function(pt1,pt2,pt3,pt4){var curveSegments=defaultCurveSegments;var k;var i;var len;var ptCoord;var perc;var addedLength=0;var ptDistance;var point=[];var lastPoint=[];var lengthData=bezierLengthPool.newElement();len=pt3.length;for(k=0;k<curveSegments;k+=1){perc=k/(curveSegments-1);ptDistance=0;for(i=0;i<len;i+=1){ptCoord=bmPow(1-perc,3)*pt1[i]+3*bmPow(1-perc,2)*perc*pt3[i]+3*(1-perc)*bmPow(perc,2)*pt4[i]+bmPow(perc,3)*pt2[i];point[i]=ptCoord;if(lastPoint[i]!==null){ptDistance+=bmPow(point[i]-lastPoint[i],2);}lastPoint[i]=point[i];}if(ptDistance){ptDistance=bmSqrt(ptDistance);addedLength+=ptDistance;}lengthData.percents[k]=perc;lengthData.lengths[k]=addedLength;}lengthData.addedLength=addedLength;return lengthData;};}();function getSegmentsLength(shapeData){var segmentsLength=segmentsLengthPool.newElement();var closed=shapeData.c;var pathV=shapeData.v;var pathO=shapeData.o;var pathI=shapeData.i;var i;var len=shapeData._length;var lengths=segmentsLength.lengths;var totalLength=0;for(i=0;i<len-1;i+=1){lengths[i]=getBezierLength(pathV[i],pathV[i+1],pathO[i],pathI[i+1]);totalLength+=lengths[i].addedLength;}if(closed&&len){lengths[i]=getBezierLength(pathV[i],pathV[0],pathO[i],pathI[0]);totalLength+=lengths[i].addedLength;}segmentsLength.totalLength=totalLength;return segmentsLength;}function BezierData(length){this.segmentLength=0;this.points=new Array(length);}function PointData(partial,point){this.partialLength=partial;this.point=point;}var buildBezierData=function(){var storedData={};return function(pt1,pt2,pt3,pt4){var bezierName=(pt1[0]+'_'+pt1[1]+'_'+pt2[0]+'_'+pt2[1]+'_'+pt3[0]+'_'+pt3[1]+'_'+pt4[0]+'_'+pt4[1]).replace(/\./g,'p');if(!storedData[bezierName]){var curveSegments=defaultCurveSegments;var k;var i;var len;var ptCoord;var perc;var addedLength=0;var ptDistance;var point;var lastPoint=null;if(pt1.length===2&&(pt1[0]!==pt2[0]||pt1[1]!==pt2[1])&&pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt1[0]+pt3[0],pt1[1]+pt3[1])&&pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt2[0]+pt4[0],pt2[1]+pt4[1])){curveSegments=2;}var bezierData=new BezierData(curveSegments);len=pt3.length;for(k=0;k<curveSegments;k+=1){point=createSizedArray(len);perc=k/(curveSegments-1);ptDistance=0;for(i=0;i<len;i+=1){ptCoord=bmPow(1-perc,3)*pt1[i]+3*bmPow(1-perc,2)*perc*(pt1[i]+pt3[i])+3*(1-perc)*bmPow(perc,2)*(pt2[i]+pt4[i])+bmPow(perc,3)*pt2[i];point[i]=ptCoord;if(lastPoint!==null){ptDistance+=bmPow(point[i]-lastPoint[i],2);}}ptDistance=bmSqrt(ptDistance);addedLength+=ptDistance;bezierData.points[k]=new PointData(ptDistance,point);lastPoint=point;}bezierData.segmentLength=addedLength;storedData[bezierName]=bezierData;}return storedData[bezierName];};}();function getDistancePerc(perc,bezierData){var percents=bezierData.percents;var lengths=bezierData.lengths;var len=percents.length;var initPos=bmFloor((len-1)*perc);var lengthPos=perc*bezierData.addedLength;var lPerc=0;if(initPos===len-1||initPos===0||lengthPos===lengths[initPos]){return percents[initPos];}var dir=lengths[initPos]>lengthPos?-1:1;var flag=true;while(flag){if(lengths[initPos]<=lengthPos&&lengths[initPos+1]>lengthPos){lPerc=(lengthPos-lengths[initPos])/(lengths[initPos+1]-lengths[initPos]);flag=false;}else{initPos+=dir;}if(initPos<0||initPos>=len-1){// FIX for TypedArrays that don't store floating point values with enough accuracy
if(initPos===len-1){return percents[initPos];}flag=false;}}return percents[initPos]+(percents[initPos+1]-percents[initPos])*lPerc;}function getPointInSegment(pt1,pt2,pt3,pt4,percent,bezierData){var t1=getDistancePerc(percent,bezierData);var u1=1-t1;var ptX=math.round((u1*u1*u1*pt1[0]+(t1*u1*u1+u1*t1*u1+u1*u1*t1)*pt3[0]+(t1*t1*u1+u1*t1*t1+t1*u1*t1)*pt4[0]+t1*t1*t1*pt2[0])*1000)/1000;var ptY=math.round((u1*u1*u1*pt1[1]+(t1*u1*u1+u1*t1*u1+u1*u1*t1)*pt3[1]+(t1*t1*u1+u1*t1*t1+t1*u1*t1)*pt4[1]+t1*t1*t1*pt2[1])*1000)/1000;return[ptX,ptY];}var bezierSegmentPoints=createTypedArray('float32',8);function getNewSegment(pt1,pt2,pt3,pt4,startPerc,endPerc,bezierData){if(startPerc<0){startPerc=0;}else if(startPerc>1){startPerc=1;}var t0=getDistancePerc(startPerc,bezierData);endPerc=endPerc>1?1:endPerc;var t1=getDistancePerc(endPerc,bezierData);var i;var len=pt1.length;var u0=1-t0;var u1=1-t1;var u0u0u0=u0*u0*u0;var t0u0u0_3=t0*u0*u0*3;// eslint-disable-line camelcase
var t0t0u0_3=t0*t0*u0*3;// eslint-disable-line camelcase
var t0t0t0=t0*t0*t0;//
var u0u0u1=u0*u0*u1;var t0u0u1_3=t0*u0*u1+u0*t0*u1+u0*u0*t1;// eslint-disable-line camelcase
var t0t0u1_3=t0*t0*u1+u0*t0*t1+t0*u0*t1;// eslint-disable-line camelcase
var t0t0t1=t0*t0*t1;//
var u0u1u1=u0*u1*u1;var t0u1u1_3=t0*u1*u1+u0*t1*u1+u0*u1*t1;// eslint-disable-line camelcase
var t0t1u1_3=t0*t1*u1+u0*t1*t1+t0*u1*t1;// eslint-disable-line camelcase
var t0t1t1=t0*t1*t1;//
var u1u1u1=u1*u1*u1;var t1u1u1_3=t1*u1*u1+u1*t1*u1+u1*u1*t1;// eslint-disable-line camelcase
var t1t1u1_3=t1*t1*u1+u1*t1*t1+t1*u1*t1;// eslint-disable-line camelcase
var t1t1t1=t1*t1*t1;for(i=0;i<len;i+=1){bezierSegmentPoints[i*4]=math.round((u0u0u0*pt1[i]+t0u0u0_3*pt3[i]+t0t0u0_3*pt4[i]+t0t0t0*pt2[i])*1000)/1000;// eslint-disable-line camelcase
bezierSegmentPoints[i*4+1]=math.round((u0u0u1*pt1[i]+t0u0u1_3*pt3[i]+t0t0u1_3*pt4[i]+t0t0t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
bezierSegmentPoints[i*4+2]=math.round((u0u1u1*pt1[i]+t0u1u1_3*pt3[i]+t0t1u1_3*pt4[i]+t0t1t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
bezierSegmentPoints[i*4+3]=math.round((u1u1u1*pt1[i]+t1u1u1_3*pt3[i]+t1t1u1_3*pt4[i]+t1t1t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
}return bezierSegmentPoints;}return{getSegmentsLength:getSegmentsLength,getNewSegment:getNewSegment,getPointInSegment:getPointInSegment,buildBezierData:buildBezierData,pointOnLine2D:pointOnLine2D,pointOnLine3D:pointOnLine3D};}var bez=bezFunction();/* exported dataManager */function dataFunctionManager(){// var tCanvasHelper = createTag('canvas').getContext('2d');
function completeLayers(layers,comps,fontManager){var layerData;var i;var len=layers.length;var j;var jLen;var k;var kLen;for(i=0;i<len;i+=1){layerData=layers[i];if('ks'in layerData&&!layerData.completed){layerData.completed=true;if(layerData.tt){layers[i-1].td=layerData.tt;}if(layerData.hasMask){var maskProps=layerData.masksProperties;jLen=maskProps.length;for(j=0;j<jLen;j+=1){if(maskProps[j].pt.k.i){convertPathsToAbsoluteValues(maskProps[j].pt.k);}else{kLen=maskProps[j].pt.k.length;for(k=0;k<kLen;k+=1){if(maskProps[j].pt.k[k].s){convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);}if(maskProps[j].pt.k[k].e){convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);}}}}}if(layerData.ty===0){layerData.layers=findCompLayers(layerData.refId,comps);completeLayers(layerData.layers,comps,fontManager);}else if(layerData.ty===4){completeShapes(layerData.shapes);}else if(layerData.ty===5){completeText(layerData,fontManager);}}}}function findCompLayers(id,comps){var i=0;var len=comps.length;while(i<len){if(comps[i].id===id){if(!comps[i].layers.__used){comps[i].layers.__used=true;return comps[i].layers;}return JSON.parse(JSON.stringify(comps[i].layers));}i+=1;}return null;}function completeShapes(arr){var i;var len=arr.length;var j;var jLen;for(i=len-1;i>=0;i-=1){if(arr[i].ty==='sh'){if(arr[i].ks.k.i){convertPathsToAbsoluteValues(arr[i].ks.k);}else{jLen=arr[i].ks.k.length;for(j=0;j<jLen;j+=1){if(arr[i].ks.k[j].s){convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);}if(arr[i].ks.k[j].e){convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);}}}}else if(arr[i].ty==='gr'){completeShapes(arr[i].it);}}}function convertPathsToAbsoluteValues(path){var i;var len=path.i.length;for(i=0;i<len;i+=1){path.i[i][0]+=path.v[i][0];path.i[i][1]+=path.v[i][1];path.o[i][0]+=path.v[i][0];path.o[i][1]+=path.v[i][1];}}function checkVersion(minimum,animVersionString){var animVersion=animVersionString?animVersionString.split('.'):[100,100,100];if(minimum[0]>animVersion[0]){return true;}if(animVersion[0]>minimum[0]){return false;}if(minimum[1]>animVersion[1]){return true;}if(animVersion[1]>minimum[1]){return false;}if(minimum[2]>animVersion[2]){return true;}if(animVersion[2]>minimum[2]){return false;}return null;}var checkText=function(){var minimumVersion=[4,4,14];function updateTextLayer(textLayer){var documentData=textLayer.t.d;textLayer.t.d={k:[{s:documentData,t:0}]};}function iterateLayers(layers){var i;var len=layers.length;for(i=0;i<len;i+=1){if(layers[i].ty===5){updateTextLayer(layers[i]);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();var checkChars=function(){var minimumVersion=[4,7,99];return function(animationData){if(animationData.chars&&!checkVersion(minimumVersion,animationData.v)){var i;var len=animationData.chars.length;var j;var jLen;var pathData;var paths;for(i=0;i<len;i+=1){if(animationData.chars[i].data&&animationData.chars[i].data.shapes){paths=animationData.chars[i].data.shapes[0].it;jLen=paths.length;for(j=0;j<jLen;j+=1){pathData=paths[j].ks.k;if(!pathData.__converted){convertPathsToAbsoluteValues(paths[j].ks.k);pathData.__converted=true;}}}}}};}();var checkColors=function(){var minimumVersion=[4,1,9];function iterateShapes(shapes){var i;var len=shapes.length;var j;var jLen;for(i=0;i<len;i+=1){if(shapes[i].ty==='gr'){iterateShapes(shapes[i].it);}else if(shapes[i].ty==='fl'||shapes[i].ty==='st'){if(shapes[i].c.k&&shapes[i].c.k[0].i){jLen=shapes[i].c.k.length;for(j=0;j<jLen;j+=1){if(shapes[i].c.k[j].s){shapes[i].c.k[j].s[0]/=255;shapes[i].c.k[j].s[1]/=255;shapes[i].c.k[j].s[2]/=255;shapes[i].c.k[j].s[3]/=255;}if(shapes[i].c.k[j].e){shapes[i].c.k[j].e[0]/=255;shapes[i].c.k[j].e[1]/=255;shapes[i].c.k[j].e[2]/=255;shapes[i].c.k[j].e[3]/=255;}}}else{shapes[i].c.k[0]/=255;shapes[i].c.k[1]/=255;shapes[i].c.k[2]/=255;shapes[i].c.k[3]/=255;}}}}function iterateLayers(layers){var i;var len=layers.length;for(i=0;i<len;i+=1){if(layers[i].ty===4){iterateShapes(layers[i].shapes);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();var checkShapes=function(){var minimumVersion=[4,4,18];function completeClosingShapes(arr){var i;var len=arr.length;var j;var jLen;for(i=len-1;i>=0;i-=1){if(arr[i].ty==='sh'){if(arr[i].ks.k.i){arr[i].ks.k.c=arr[i].closed;}else{jLen=arr[i].ks.k.length;for(j=0;j<jLen;j+=1){if(arr[i].ks.k[j].s){arr[i].ks.k[j].s[0].c=arr[i].closed;}if(arr[i].ks.k[j].e){arr[i].ks.k[j].e[0].c=arr[i].closed;}}}}else if(arr[i].ty==='gr'){completeClosingShapes(arr[i].it);}}}function iterateLayers(layers){var layerData;var i;var len=layers.length;var j;var jLen;var k;var kLen;for(i=0;i<len;i+=1){layerData=layers[i];if(layerData.hasMask){var maskProps=layerData.masksProperties;jLen=maskProps.length;for(j=0;j<jLen;j+=1){if(maskProps[j].pt.k.i){maskProps[j].pt.k.c=maskProps[j].cl;}else{kLen=maskProps[j].pt.k.length;for(k=0;k<kLen;k+=1){if(maskProps[j].pt.k[k].s){maskProps[j].pt.k[k].s[0].c=maskProps[j].cl;}if(maskProps[j].pt.k[k].e){maskProps[j].pt.k[k].e[0].c=maskProps[j].cl;}}}}}if(layerData.ty===4){completeClosingShapes(layerData.shapes);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();function completeData(animationData,fontManager){if(animationData.__complete){return;}checkColors(animationData);checkText(animationData);checkChars(animationData);checkShapes(animationData);completeLayers(animationData.layers,animationData.assets,fontManager);animationData.__complete=true;}function completeText(data){if(data.t.a.length===0&&!('m'in data.t.p)){data.singleShape=true;}}var moduleOb={};moduleOb.completeData=completeData;moduleOb.checkColors=checkColors;moduleOb.checkChars=checkChars;moduleOb.checkShapes=checkShapes;moduleOb.completeLayers=completeLayers;return moduleOb;}var dataManager=dataFunctionManager();/* exported getFontProperties */function getFontProperties(fontData){var styles=fontData.fStyle?fontData.fStyle.split(' '):[];var fWeight='normal';var fStyle='normal';var len=styles.length;var styleName;for(var i=0;i<len;i+=1){styleName=styles[i].toLowerCase();switch(styleName){case'italic':fStyle='italic';break;case'bold':fWeight='700';break;case'black':fWeight='900';break;case'medium':fWeight='500';break;case'regular':case'normal':fWeight='400';break;case'light':case'thin':fWeight='200';break;default:break;}}return{style:fStyle,weight:fontData.fWeight||fWeight};}/* global createNS, createTag, getFontProperties */ /* exported FontManager */var FontManager=function(){var maxWaitingTime=5000;var emptyChar={w:0,size:0,shapes:[]};var combinedCharacters=[];// Hindi characters
combinedCharacters=combinedCharacters.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);function trimFontOptions(font){var familyArray=font.split(',');var i;var len=familyArray.length;var enabledFamilies=[];for(i=0;i<len;i+=1){if(familyArray[i]!=='sans-serif'&&familyArray[i]!=='monospace'){enabledFamilies.push(familyArray[i]);}}return enabledFamilies.join(',');}function setUpNode(font,family){var parentNode=createTag('span');parentNode.style.fontFamily=family;var node=createTag('span');// Characters that vary significantly among different fonts
node.innerText='giItT1WQy@!-/#';// Visible - so we can measure it - but not on the screen
parentNode.style.position='absolute';parentNode.style.left='-10000px';parentNode.style.top='-10000px';// Large font size makes even subtle changes obvious
parentNode.style.fontSize='300px';// Reset any font properties
parentNode.style.fontVariant='normal';parentNode.style.fontStyle='normal';parentNode.style.fontWeight='normal';parentNode.style.letterSpacing='0';parentNode.appendChild(node);document.body.appendChild(parentNode);// Remember width with no applied web font
var width=node.offsetWidth;node.style.fontFamily=trimFontOptions(font)+', '+family;return{node:node,w:width,parent:parentNode};}function checkLoadedFonts(){var i;var len=this.fonts.length;var node;var w;var loadedCount=len;for(i=0;i<len;i+=1){if(this.fonts[i].loaded){loadedCount-=1;}else if(this.fonts[i].fOrigin==='n'||this.fonts[i].origin===0){this.fonts[i].loaded=true;}else{node=this.fonts[i].monoCase.node;w=this.fonts[i].monoCase.w;if(node.offsetWidth!==w){loadedCount-=1;this.fonts[i].loaded=true;}else{node=this.fonts[i].sansCase.node;w=this.fonts[i].sansCase.w;if(node.offsetWidth!==w){loadedCount-=1;this.fonts[i].loaded=true;}}if(this.fonts[i].loaded){this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);}}}if(loadedCount!==0&&Date.now()-this.initTime<maxWaitingTime){setTimeout(this.checkLoadedFontsBinded,20);}else{setTimeout(this.setIsLoadedBinded,10);}}function createHelper(def,fontData){var tHelper=createNS('text');tHelper.style.fontSize='100px';// tHelper.style.fontFamily = fontData.fFamily;
var fontProps=getFontProperties(fontData);tHelper.setAttribute('font-family',fontData.fFamily);tHelper.setAttribute('font-style',fontProps.style);tHelper.setAttribute('font-weight',fontProps.weight);tHelper.textContent='1';if(fontData.fClass){tHelper.style.fontFamily='inherit';tHelper.setAttribute('class',fontData.fClass);}else{tHelper.style.fontFamily=fontData.fFamily;}def.appendChild(tHelper);var tCanvasHelper=createTag('canvas').getContext('2d');tCanvasHelper.font=fontData.fWeight+' '+fontData.fStyle+' 100px '+fontData.fFamily;// tCanvasHelper.font = ' 100px '+ fontData.fFamily;
return tHelper;}function addFonts(fontData,defs){if(!fontData){this.isLoaded=true;return;}if(this.chars){this.isLoaded=true;this.fonts=fontData.list;return;}var fontArr=fontData.list;var i;var len=fontArr.length;var _pendingFonts=len;for(i=0;i<len;i+=1){var shouldLoadFont=true;var loadedSelector;var j;fontArr[i].loaded=false;fontArr[i].monoCase=setUpNode(fontArr[i].fFamily,'monospace');fontArr[i].sansCase=setUpNode(fontArr[i].fFamily,'sans-serif');if(!fontArr[i].fPath){fontArr[i].loaded=true;_pendingFonts-=1;}else if(fontArr[i].fOrigin==='p'||fontArr[i].origin===3){loadedSelector=document.querySelectorAll('style[f-forigin="p"][f-family="'+fontArr[i].fFamily+'"], style[f-origin="3"][f-family="'+fontArr[i].fFamily+'"]');if(loadedSelector.length>0){shouldLoadFont=false;}if(shouldLoadFont){var s=createTag('style');s.setAttribute('f-forigin',fontArr[i].fOrigin);s.setAttribute('f-origin',fontArr[i].origin);s.setAttribute('f-family',fontArr[i].fFamily);s.type='text/css';s.innerText='@font-face {font-family: '+fontArr[i].fFamily+"; font-style: normal; src: url('"+fontArr[i].fPath+"');}";defs.appendChild(s);}}else if(fontArr[i].fOrigin==='g'||fontArr[i].origin===1){loadedSelector=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');for(j=0;j<loadedSelector.length;j+=1){if(loadedSelector[j].href.indexOf(fontArr[i].fPath)!==-1){// Font is already loaded
shouldLoadFont=false;}}if(shouldLoadFont){var l=createTag('link');l.setAttribute('f-forigin',fontArr[i].fOrigin);l.setAttribute('f-origin',fontArr[i].origin);l.type='text/css';l.rel='stylesheet';l.href=fontArr[i].fPath;document.body.appendChild(l);}}else if(fontArr[i].fOrigin==='t'||fontArr[i].origin===2){loadedSelector=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');for(j=0;j<loadedSelector.length;j+=1){if(fontArr[i].fPath===loadedSelector[j].src){// Font is already loaded
shouldLoadFont=false;}}if(shouldLoadFont){var sc=createTag('link');sc.setAttribute('f-forigin',fontArr[i].fOrigin);sc.setAttribute('f-origin',fontArr[i].origin);sc.setAttribute('rel','stylesheet');sc.setAttribute('href',fontArr[i].fPath);defs.appendChild(sc);}}fontArr[i].helper=createHelper(defs,fontArr[i]);fontArr[i].cache={};this.fonts.push(fontArr[i]);}if(_pendingFonts===0){this.isLoaded=true;}else{// On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
// Adding this timeout seems to fix it
setTimeout(this.checkLoadedFonts.bind(this),100);}}function addChars(chars){if(!chars){return;}if(!this.chars){this.chars=[];}var i;var len=chars.length;var j;var jLen=this.chars.length;var found;for(i=0;i<len;i+=1){j=0;found=false;while(j<jLen){if(this.chars[j].style===chars[i].style&&this.chars[j].fFamily===chars[i].fFamily&&this.chars[j].ch===chars[i].ch){found=true;}j+=1;}if(!found){this.chars.push(chars[i]);jLen+=1;}}}function getCharData(char,style,font){var i=0;var len=this.chars.length;while(i<len){if(this.chars[i].ch===char&&this.chars[i].style===style&&this.chars[i].fFamily===font){return this.chars[i];}i+=1;}if((typeof char==='string'&&char.charCodeAt(0)!==13||!char)&&console&&console.warn// eslint-disable-line no-console
&&!this._warned){this._warned=true;console.warn('Missing character from exported characters list: ',char,style,font);// eslint-disable-line no-console
}return emptyChar;}function measureText(char,fontName,size){var fontData=this.getFontByName(fontName);var index=char.charCodeAt(0);if(!fontData.cache[index+1]){var tHelper=fontData.helper;// Canvas version
// fontData.cache[index] = tHelper.measureText(char).width / 100;
// SVG version
// console.log(tHelper.getBBox().width)
if(char===' '){tHelper.textContent='|'+char+'|';var doubleSize=tHelper.getComputedTextLength();tHelper.textContent='||';var singleSize=tHelper.getComputedTextLength();fontData.cache[index+1]=(doubleSize-singleSize)/100;}else{tHelper.textContent=char;fontData.cache[index+1]=tHelper.getComputedTextLength()/100;}}return fontData.cache[index+1]*size;}function getFontByName(name){var i=0;var len=this.fonts.length;while(i<len){if(this.fonts[i].fName===name){return this.fonts[i];}i+=1;}return this.fonts[0];}function getCombinedCharacterCodes(){return combinedCharacters;}function setIsLoaded(){this.isLoaded=true;}var Font=function Font(){this.fonts=[];this.chars=null;this.typekitLoaded=0;this.isLoaded=false;this._warned=false;this.initTime=Date.now();this.setIsLoadedBinded=this.setIsLoaded.bind(this);this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this);};// TODO: for now I'm adding these methods to the Class and not the prototype. Think of a better way to implement it.
Font.getCombinedCharacterCodes=getCombinedCharacterCodes;var fontPrototype={addChars:addChars,addFonts:addFonts,getCharData:getCharData,getFontByName:getFontByName,measureText:measureText,checkLoadedFonts:checkLoadedFonts,setIsLoaded:setIsLoaded};Font.prototype=fontPrototype;return Font;}();/* global initialDefaultFrame, BezierFactory, degToRads, bez, createTypedArray */ /* exported PropertyFactory */var PropertyFactory=function(){var initFrame=initialDefaultFrame;var mathAbs=Math.abs;function interpolateValue(frameNum,caching){var offsetTime=this.offsetTime;var newValue;if(this.propType==='multidimensional'){newValue=createTypedArray('float32',this.pv.length);}var iterationIndex=caching.lastIndex;var i=iterationIndex;var len=this.keyframes.length-1;var flag=true;var keyData;var nextKeyData;while(flag){keyData=this.keyframes[i];nextKeyData=this.keyframes[i+1];if(i===len-1&&frameNum>=nextKeyData.t-offsetTime){if(keyData.h){keyData=nextKeyData;}iterationIndex=0;break;}if(nextKeyData.t-offsetTime>frameNum){iterationIndex=i;break;}if(i<len-1){i+=1;}else{iterationIndex=0;flag=false;}}var k;var kLen;var perc;var jLen;var j;var fnc;var nextKeyTime=nextKeyData.t-offsetTime;var keyTime=keyData.t-offsetTime;var endValue;if(keyData.to){if(!keyData.bezierData){keyData.bezierData=bez.buildBezierData(keyData.s,nextKeyData.s||keyData.e,keyData.to,keyData.ti);}var bezierData=keyData.bezierData;if(frameNum>=nextKeyTime||frameNum<keyTime){var ind=frameNum>=nextKeyTime?bezierData.points.length-1:0;kLen=bezierData.points[ind].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[ind].point[k];}// caching._lastKeyframeIndex = -1;
}else{if(keyData.__fnct){fnc=keyData.__fnct;}else{fnc=BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y,keyData.n).get;keyData.__fnct=fnc;}perc=fnc((frameNum-keyTime)/(nextKeyTime-keyTime));var distanceInLine=bezierData.segmentLength*perc;var segmentPerc;var addedLength=caching.lastFrame<frameNum&&caching._lastKeyframeIndex===i?caching._lastAddedLength:0;j=caching.lastFrame<frameNum&&caching._lastKeyframeIndex===i?caching._lastPoint:0;flag=true;jLen=bezierData.points.length;while(flag){addedLength+=bezierData.points[j].partialLength;if(distanceInLine===0||perc===0||j===bezierData.points.length-1){kLen=bezierData.points[j].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[j].point[k];}break;}else if(distanceInLine>=addedLength&&distanceInLine<addedLength+bezierData.points[j+1].partialLength){segmentPerc=(distanceInLine-addedLength)/bezierData.points[j+1].partialLength;kLen=bezierData.points[j].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[j].point[k]+(bezierData.points[j+1].point[k]-bezierData.points[j].point[k])*segmentPerc;}break;}if(j<jLen-1){j+=1;}else{flag=false;}}caching._lastPoint=j;caching._lastAddedLength=addedLength-bezierData.points[j].partialLength;caching._lastKeyframeIndex=i;}}else{var outX;var outY;var inX;var inY;var keyValue;len=keyData.s.length;endValue=nextKeyData.s||keyData.e;if(this.sh&&keyData.h!==1){if(frameNum>=nextKeyTime){newValue[0]=endValue[0];newValue[1]=endValue[1];newValue[2]=endValue[2];}else if(frameNum<=keyTime){newValue[0]=keyData.s[0];newValue[1]=keyData.s[1];newValue[2]=keyData.s[2];}else{var quatStart=createQuaternion(keyData.s);var quatEnd=createQuaternion(endValue);var time=(frameNum-keyTime)/(nextKeyTime-keyTime);quaternionToEuler(newValue,slerp(quatStart,quatEnd,time));}}else{for(i=0;i<len;i+=1){if(keyData.h!==1){if(frameNum>=nextKeyTime){perc=1;}else if(frameNum<keyTime){perc=0;}else{if(keyData.o.x.constructor===Array){if(!keyData.__fnct){keyData.__fnct=[];}if(!keyData.__fnct[i]){outX=typeof keyData.o.x[i]==='undefined'?keyData.o.x[0]:keyData.o.x[i];outY=typeof keyData.o.y[i]==='undefined'?keyData.o.y[0]:keyData.o.y[i];inX=typeof keyData.i.x[i]==='undefined'?keyData.i.x[0]:keyData.i.x[i];inY=typeof keyData.i.y[i]==='undefined'?keyData.i.y[0]:keyData.i.y[i];fnc=BezierFactory.getBezierEasing(outX,outY,inX,inY).get;keyData.__fnct[i]=fnc;}else{fnc=keyData.__fnct[i];}}else if(!keyData.__fnct){outX=keyData.o.x;outY=keyData.o.y;inX=keyData.i.x;inY=keyData.i.y;fnc=BezierFactory.getBezierEasing(outX,outY,inX,inY).get;keyData.__fnct=fnc;}else{fnc=keyData.__fnct;}perc=fnc((frameNum-keyTime)/(nextKeyTime-keyTime));}}endValue=nextKeyData.s||keyData.e;keyValue=keyData.h===1?keyData.s[i]:keyData.s[i]+(endValue[i]-keyData.s[i])*perc;if(this.propType==='multidimensional'){newValue[i]=keyValue;}else{newValue=keyValue;}}}}caching.lastIndex=iterationIndex;return newValue;}// based on @Toji's https://github.com/toji/gl-matrix/
function slerp(a,b,t){var out=[];var ax=a[0];var ay=a[1];var az=a[2];var aw=a[3];var bx=b[0];var by=b[1];var bz=b[2];var bw=b[3];var omega;var cosom;var sinom;var scale0;var scale1;cosom=ax*bx+ay*by+az*bz+aw*bw;if(cosom<0.0){cosom=-cosom;bx=-bx;by=-by;bz=-bz;bw=-bw;}if(1.0-cosom>0.000001){omega=Math.acos(cosom);sinom=Math.sin(omega);scale0=Math.sin((1.0-t)*omega)/sinom;scale1=Math.sin(t*omega)/sinom;}else{scale0=1.0-t;scale1=t;}out[0]=scale0*ax+scale1*bx;out[1]=scale0*ay+scale1*by;out[2]=scale0*az+scale1*bz;out[3]=scale0*aw+scale1*bw;return out;}function quaternionToEuler(out,quat){var qx=quat[0];var qy=quat[1];var qz=quat[2];var qw=quat[3];var heading=Math.atan2(2*qy*qw-2*qx*qz,1-2*qy*qy-2*qz*qz);var attitude=Math.asin(2*qx*qy+2*qz*qw);var bank=Math.atan2(2*qx*qw-2*qy*qz,1-2*qx*qx-2*qz*qz);out[0]=heading/degToRads;out[1]=attitude/degToRads;out[2]=bank/degToRads;}function createQuaternion(values){var heading=values[0]*degToRads;var attitude=values[1]*degToRads;var bank=values[2]*degToRads;var c1=Math.cos(heading/2);var c2=Math.cos(attitude/2);var c3=Math.cos(bank/2);var s1=Math.sin(heading/2);var s2=Math.sin(attitude/2);var s3=Math.sin(bank/2);var w=c1*c2*c3-s1*s2*s3;var x=s1*s2*c3+c1*c2*s3;var y=s1*c2*c3+c1*s2*s3;var z=c1*s2*c3-s1*c2*s3;return[x,y,z,w];}function getValueAtCurrentTime(){var frameNum=this.comp.renderedFrame-this.offsetTime;var initTime=this.keyframes[0].t-this.offsetTime;var endTime=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(frameNum===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=endTime&&frameNum>=endTime||this._caching.lastFrame<initTime&&frameNum<initTime))){if(this._caching.lastFrame>=frameNum){this._caching._lastKeyframeIndex=-1;this._caching.lastIndex=0;}var renderResult=this.interpolateValue(frameNum,this._caching);this.pv=renderResult;}this._caching.lastFrame=frameNum;return this.pv;}function setVValue(val){var multipliedValue;if(this.propType==='unidimensional'){multipliedValue=val*this.mult;if(mathAbs(this.v-multipliedValue)>0.00001){this.v=multipliedValue;this._mdf=true;}}else{var i=0;var len=this.v.length;while(i<len){multipliedValue=val[i]*this.mult;if(mathAbs(this.v[i]-multipliedValue)>0.00001){this.v[i]=multipliedValue;this._mdf=true;}i+=1;}}}function processEffectsSequence(){if(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length){return;}if(this.lock){this.setVValue(this.pv);return;}this.lock=true;this._mdf=this._isFirstFrame;var i;var len=this.effectsSequence.length;var finalValue=this.kf?this.pv:this.data.k;for(i=0;i<len;i+=1){finalValue=this.effectsSequence[i](finalValue);}this.setVValue(finalValue);this._isFirstFrame=false;this.lock=false;this.frameId=this.elem.globalData.frameId;}function addEffect(effectFunction){this.effectsSequence.push(effectFunction);this.container.addDynamicProperty(this);}function ValueProperty(elem,data,mult,container){this.propType='unidimensional';this.mult=mult||1;this.data=data;this.v=mult?data.k*mult:data.k;this.pv=data.k;this._mdf=false;this.elem=elem;this.container=container;this.comp=elem.comp;this.k=false;this.kf=false;this.vel=0;this.effectsSequence=[];this._isFirstFrame=true;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.addEffect=addEffect;}function MultiDimensionalProperty(elem,data,mult,container){this.propType='multidimensional';this.mult=mult||1;this.data=data;this._mdf=false;this.elem=elem;this.container=container;this.comp=elem.comp;this.k=false;this.kf=false;this.frameId=-1;var i;var len=data.k.length;this.v=createTypedArray('float32',len);this.pv=createTypedArray('float32',len);this.vel=createTypedArray('float32',len);for(i=0;i<len;i+=1){this.v[i]=data.k[i]*this.mult;this.pv[i]=data.k[i];}this._isFirstFrame=true;this.effectsSequence=[];this.getValue=processEffectsSequence;this.setVValue=setVValue;this.addEffect=addEffect;}function KeyframedValueProperty(elem,data,mult,container){this.propType='unidimensional';this.keyframes=data.k;this.offsetTime=elem.data.st;this.frameId=-1;this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1};this.k=true;this.kf=true;this.data=data;this.mult=mult||1;this.elem=elem;this.container=container;this.comp=elem.comp;this.v=initFrame;this.pv=initFrame;this._isFirstFrame=true;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.interpolateValue=interpolateValue;this.effectsSequence=[getValueAtCurrentTime.bind(this)];this.addEffect=addEffect;}function KeyframedMultidimensionalProperty(elem,data,mult,container){this.propType='multidimensional';var i;var len=data.k.length;var s;var e;var to;var ti;for(i=0;i<len-1;i+=1){if(data.k[i].to&&data.k[i].s&&data.k[i+1]&&data.k[i+1].s){s=data.k[i].s;e=data.k[i+1].s;to=data.k[i].to;ti=data.k[i].ti;if(s.length===2&&!(s[0]===e[0]&&s[1]===e[1])&&bez.pointOnLine2D(s[0],s[1],e[0],e[1],s[0]+to[0],s[1]+to[1])&&bez.pointOnLine2D(s[0],s[1],e[0],e[1],e[0]+ti[0],e[1]+ti[1])||s.length===3&&!(s[0]===e[0]&&s[1]===e[1]&&s[2]===e[2])&&bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],s[0]+to[0],s[1]+to[1],s[2]+to[2])&&bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],e[0]+ti[0],e[1]+ti[1],e[2]+ti[2])){data.k[i].to=null;data.k[i].ti=null;}if(s[0]===e[0]&&s[1]===e[1]&&to[0]===0&&to[1]===0&&ti[0]===0&&ti[1]===0){if(s.length===2||s[2]===e[2]&&to[2]===0&&ti[2]===0){data.k[i].to=null;data.k[i].ti=null;}}}}this.effectsSequence=[getValueAtCurrentTime.bind(this)];this.data=data;this.keyframes=data.k;this.offsetTime=elem.data.st;this.k=true;this.kf=true;this._isFirstFrame=true;this.mult=mult||1;this.elem=elem;this.container=container;this.comp=elem.comp;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.interpolateValue=interpolateValue;this.frameId=-1;var arrLen=data.k[0].s.length;this.v=createTypedArray('float32',arrLen);this.pv=createTypedArray('float32',arrLen);for(i=0;i<arrLen;i+=1){this.v[i]=initFrame;this.pv[i]=initFrame;}this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray('float32',arrLen)};this.addEffect=addEffect;}function getProp(elem,data,type,mult,container){var p;if(!data.k.length){p=new ValueProperty(elem,data,mult,container);}else if(typeof data.k[0]==='number'){p=new MultiDimensionalProperty(elem,data,mult,container);}else{switch(type){case 0:p=new KeyframedValueProperty(elem,data,mult,container);break;case 1:p=new KeyframedMultidimensionalProperty(elem,data,mult,container);break;default:break;}}if(p.effectsSequence.length){container.addDynamicProperty(p);}return p;}var ob={getProp:getProp};return ob;}();/* global Matrix, degToRads, PropertyFactory, extendPrototype, DynamicPropertyContainer */ /* exported TransformPropertyFactory */var TransformPropertyFactory=function(){var defaultVector=[0,0];function applyToMatrix(mat){var _mdf=this._mdf;this.iterateDynamicProperties();this._mdf=this._mdf||_mdf;if(this.a){mat.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);}if(this.s){mat.scale(this.s.v[0],this.s.v[1],this.s.v[2]);}if(this.sk){mat.skewFromAxis(-this.sk.v,this.sa.v);}if(this.r){mat.rotate(-this.r.v);}else{mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);}if(this.data.p.s){if(this.data.p.z){mat.translate(this.px.v,this.py.v,-this.pz.v);}else{mat.translate(this.px.v,this.py.v,0);}}else{mat.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);}}function processKeys(forceRender){if(this.elem.globalData.frameId===this.frameId){return;}if(this._isDirty){this.precalculateMatrix();this._isDirty=false;}this.iterateDynamicProperties();if(this._mdf||forceRender){var frameRate;this.v.cloneFromProps(this.pre.props);if(this.appliedTransformations<1){this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);}if(this.appliedTransformations<2){this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]);}if(this.sk&&this.appliedTransformations<3){this.v.skewFromAxis(-this.sk.v,this.sa.v);}if(this.r&&this.appliedTransformations<4){this.v.rotate(-this.r.v);}else if(!this.r&&this.appliedTransformations<4){this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);}if(this.autoOriented){var v1;var v2;frameRate=this.elem.globalData.frameRate;if(this.p&&this.p.keyframes&&this.p.getValueAtTime){if(this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t){v1=this.p.getValueAtTime((this.p.keyframes[0].t+0.01)/frameRate,0);v2=this.p.getValueAtTime(this.p.keyframes[0].t/frameRate,0);}else if(this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t){v1=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/frameRate,0);v2=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-0.05)/frameRate,0);}else{v1=this.p.pv;v2=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-0.01)/frameRate,this.p.offsetTime);}}else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){v1=[];v2=[];var px=this.px;var py=this.py;if(px._caching.lastFrame+px.offsetTime<=px.keyframes[0].t){v1[0]=px.getValueAtTime((px.keyframes[0].t+0.01)/frameRate,0);v1[1]=py.getValueAtTime((py.keyframes[0].t+0.01)/frameRate,0);v2[0]=px.getValueAtTime(px.keyframes[0].t/frameRate,0);v2[1]=py.getValueAtTime(py.keyframes[0].t/frameRate,0);}else if(px._caching.lastFrame+px.offsetTime>=px.keyframes[px.keyframes.length-1].t){v1[0]=px.getValueAtTime(px.keyframes[px.keyframes.length-1].t/frameRate,0);v1[1]=py.getValueAtTime(py.keyframes[py.keyframes.length-1].t/frameRate,0);v2[0]=px.getValueAtTime((px.keyframes[px.keyframes.length-1].t-0.01)/frameRate,0);v2[1]=py.getValueAtTime((py.keyframes[py.keyframes.length-1].t-0.01)/frameRate,0);}else{v1=[px.pv,py.pv];v2[0]=px.getValueAtTime((px._caching.lastFrame+px.offsetTime-0.01)/frameRate,px.offsetTime);v2[1]=py.getValueAtTime((py._caching.lastFrame+py.offsetTime-0.01)/frameRate,py.offsetTime);}}else{v2=defaultVector;v1=v2;}this.v.rotate(-Math.atan2(v1[1]-v2[1],v1[0]-v2[0]));}if(this.data.p&&this.data.p.s){if(this.data.p.z){this.v.translate(this.px.v,this.py.v,-this.pz.v);}else{this.v.translate(this.px.v,this.py.v,0);}}else{this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);}}this.frameId=this.elem.globalData.frameId;}function precalculateMatrix(){if(!this.a.k){this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);this.appliedTransformations=1;}else{return;}if(!this.s.effectsSequence.length){this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]);this.appliedTransformations=2;}else{return;}if(this.sk){if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length){this.pre.skewFromAxis(-this.sk.v,this.sa.v);this.appliedTransformations=3;}else{return;}}if(this.r){if(!this.r.effectsSequence.length){this.pre.rotate(-this.r.v);this.appliedTransformations=4;}}else if(!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length){this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);this.appliedTransformations=4;}}function autoOrient(){//
// var prevP = this.getValueAtTime();
}function addDynamicProperty(prop){this._addDynamicProperty(prop);this.elem.addDynamicProperty(prop);this._isDirty=true;}function TransformProperty(elem,data,container){this.elem=elem;this.frameId=-1;this.propType='transform';this.data=data;this.v=new Matrix();// Precalculated matrix with non animated properties
this.pre=new Matrix();this.appliedTransformations=0;this.initDynamicPropertyContainer(container||elem);if(data.p&&data.p.s){this.px=PropertyFactory.getProp(elem,data.p.x,0,0,this);this.py=PropertyFactory.getProp(elem,data.p.y,0,0,this);if(data.p.z){this.pz=PropertyFactory.getProp(elem,data.p.z,0,0,this);}}else{this.p=PropertyFactory.getProp(elem,data.p||{k:[0,0,0]},1,0,this);}if(data.rx){this.rx=PropertyFactory.getProp(elem,data.rx,0,degToRads,this);this.ry=PropertyFactory.getProp(elem,data.ry,0,degToRads,this);this.rz=PropertyFactory.getProp(elem,data.rz,0,degToRads,this);if(data.or.k[0].ti){var i;var len=data.or.k.length;for(i=0;i<len;i+=1){data.or.k[i].to=null;data.or.k[i].ti=null;}}this.or=PropertyFactory.getProp(elem,data.or,1,degToRads,this);// sh Indicates it needs to be capped between -180 and 180
this.or.sh=true;}else{this.r=PropertyFactory.getProp(elem,data.r||{k:0},0,degToRads,this);}if(data.sk){this.sk=PropertyFactory.getProp(elem,data.sk,0,degToRads,this);this.sa=PropertyFactory.getProp(elem,data.sa,0,degToRads,this);}this.a=PropertyFactory.getProp(elem,data.a||{k:[0,0,0]},1,0,this);this.s=PropertyFactory.getProp(elem,data.s||{k:[100,100,100]},1,0.01,this);// Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.
if(data.o){this.o=PropertyFactory.getProp(elem,data.o,0,0.01,elem);}else{this.o={_mdf:false,v:1};}this._isDirty=true;if(!this.dynamicProperties.length){this.getValue(true);}}TransformProperty.prototype={applyToMatrix:applyToMatrix,getValue:processKeys,precalculateMatrix:precalculateMatrix,autoOrient:autoOrient};extendPrototype([DynamicPropertyContainer],TransformProperty);TransformProperty.prototype.addDynamicProperty=addDynamicProperty;TransformProperty.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function getTransformProperty(elem,data,container){return new TransformProperty(elem,data,container);}return{getTransformProperty:getTransformProperty};}();/* global createSizedArray, createSizedArray, pointPool */function ShapePath(){this.c=false;this._length=0;this._maxLength=8;this.v=createSizedArray(this._maxLength);this.o=createSizedArray(this._maxLength);this.i=createSizedArray(this._maxLength);}ShapePath.prototype.setPathData=function(closed,len){this.c=closed;this.setLength(len);var i=0;while(i<len){this.v[i]=pointPool.newElement();this.o[i]=pointPool.newElement();this.i[i]=pointPool.newElement();i+=1;}};ShapePath.prototype.setLength=function(len){while(this._maxLength<len){this.doubleArrayLength();}this._length=len;};ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength));this.i=this.i.concat(createSizedArray(this._maxLength));this.o=this.o.concat(createSizedArray(this._maxLength));this._maxLength*=2;};ShapePath.prototype.setXYAt=function(x,y,type,pos,replace){var arr;this._length=Math.max(this._length,pos+1);if(this._length>=this._maxLength){this.doubleArrayLength();}switch(type){case'v':arr=this.v;break;case'i':arr=this.i;break;case'o':arr=this.o;break;default:arr=[];break;}if(!arr[pos]||arr[pos]&&!replace){arr[pos]=pointPool.newElement();}arr[pos][0]=x;arr[pos][1]=y;};ShapePath.prototype.setTripleAt=function(vX,vY,oX,oY,iX,iY,pos,replace){this.setXYAt(vX,vY,'v',pos,replace);this.setXYAt(oX,oY,'o',pos,replace);this.setXYAt(iX,iY,'i',pos,replace);};ShapePath.prototype.reverse=function(){var newPath=new ShapePath();newPath.setPathData(this.c,this._length);var vertices=this.v;var outPoints=this.o;var inPoints=this.i;var init=0;if(this.c){newPath.setTripleAt(vertices[0][0],vertices[0][1],inPoints[0][0],inPoints[0][1],outPoints[0][0],outPoints[0][1],0,false);init=1;}var cnt=this._length-1;var len=this._length;var i;for(i=init;i<len;i+=1){newPath.setTripleAt(vertices[cnt][0],vertices[cnt][1],inPoints[cnt][0],inPoints[cnt][1],outPoints[cnt][0],outPoints[cnt][1],i,false);cnt-=1;}return newPath;};/* global extendPrototype, roundCorner, BezierFactory, shapePool, degToRads,
  shapeCollectionPool, PropertyFactory, bmMin, DynamicPropertyContainer */ /* exported ShapePropertyFactory */var ShapePropertyFactory=function(){var initFrame=-999999;function interpolateShape(frameNum,previousValue,caching){var iterationIndex=caching.lastIndex;var keyPropS;var keyPropE;var isHold;var j;var k;var jLen;var kLen;var perc;var vertexValue;var kf=this.keyframes;if(frameNum<kf[0].t-this.offsetTime){keyPropS=kf[0].s[0];isHold=true;iterationIndex=0;}else if(frameNum>=kf[kf.length-1].t-this.offsetTime){keyPropS=kf[kf.length-1].s?kf[kf.length-1].s[0]:kf[kf.length-2].e[0];/* if(kf[kf.length - 1].s){
                keyPropS = kf[kf.length - 1].s[0];
            }else{
                keyPropS = kf[kf.length - 2].e[0];
            } */isHold=true;}else{var i=iterationIndex;var len=kf.length-1;var flag=true;var keyData;var nextKeyData;while(flag){keyData=kf[i];nextKeyData=kf[i+1];if(nextKeyData.t-this.offsetTime>frameNum){break;}if(i<len-1){i+=1;}else{flag=false;}}isHold=keyData.h===1;iterationIndex=i;if(!isHold){if(frameNum>=nextKeyData.t-this.offsetTime){perc=1;}else if(frameNum<keyData.t-this.offsetTime){perc=0;}else{var fnc;if(keyData.__fnct){fnc=keyData.__fnct;}else{fnc=BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y).get;keyData.__fnct=fnc;}perc=fnc((frameNum-(keyData.t-this.offsetTime))/(nextKeyData.t-this.offsetTime-(keyData.t-this.offsetTime)));}keyPropE=nextKeyData.s?nextKeyData.s[0]:keyData.e[0];}keyPropS=keyData.s[0];}jLen=previousValue._length;kLen=keyPropS.i[0].length;caching.lastIndex=iterationIndex;for(j=0;j<jLen;j+=1){for(k=0;k<kLen;k+=1){vertexValue=isHold?keyPropS.i[j][k]:keyPropS.i[j][k]+(keyPropE.i[j][k]-keyPropS.i[j][k])*perc;previousValue.i[j][k]=vertexValue;vertexValue=isHold?keyPropS.o[j][k]:keyPropS.o[j][k]+(keyPropE.o[j][k]-keyPropS.o[j][k])*perc;previousValue.o[j][k]=vertexValue;vertexValue=isHold?keyPropS.v[j][k]:keyPropS.v[j][k]+(keyPropE.v[j][k]-keyPropS.v[j][k])*perc;previousValue.v[j][k]=vertexValue;}}}function interpolateShapeCurrentTime(){var frameNum=this.comp.renderedFrame-this.offsetTime;var initTime=this.keyframes[0].t-this.offsetTime;var endTime=this.keyframes[this.keyframes.length-1].t-this.offsetTime;var lastFrame=this._caching.lastFrame;if(!(lastFrame!==initFrame&&(lastFrame<initTime&&frameNum<initTime||lastFrame>endTime&&frameNum>endTime))){/// /
this._caching.lastIndex=lastFrame<frameNum?this._caching.lastIndex:0;this.interpolateShape(frameNum,this.pv,this._caching);/// /
}this._caching.lastFrame=frameNum;return this.pv;}function resetShape(){this.paths=this.localShapeCollection;}function shapesEqual(shape1,shape2){if(shape1._length!==shape2._length||shape1.c!==shape2.c){return false;}var i;var len=shape1._length;for(i=0;i<len;i+=1){if(shape1.v[i][0]!==shape2.v[i][0]||shape1.v[i][1]!==shape2.v[i][1]||shape1.o[i][0]!==shape2.o[i][0]||shape1.o[i][1]!==shape2.o[i][1]||shape1.i[i][0]!==shape2.i[i][0]||shape1.i[i][1]!==shape2.i[i][1]){return false;}}return true;}function setVValue(newPath){if(!shapesEqual(this.v,newPath)){this.v=shapePool.clone(newPath);this.localShapeCollection.releaseShapes();this.localShapeCollection.addShape(this.v);this._mdf=true;this.paths=this.localShapeCollection;}}function processEffectsSequence(){if(this.elem.globalData.frameId===this.frameId){return;}if(!this.effectsSequence.length){this._mdf=false;return;}if(this.lock){this.setVValue(this.pv);return;}this.lock=true;this._mdf=false;var finalValue;if(this.kf){finalValue=this.pv;}else if(this.data.ks){finalValue=this.data.ks.k;}else{finalValue=this.data.pt.k;}var i;var len=this.effectsSequence.length;for(i=0;i<len;i+=1){finalValue=this.effectsSequence[i](finalValue);}this.setVValue(finalValue);this.lock=false;this.frameId=this.elem.globalData.frameId;}function ShapeProperty(elem,data,type){this.propType='shape';this.comp=elem.comp;this.container=elem;this.elem=elem;this.data=data;this.k=false;this.kf=false;this._mdf=false;var pathData=type===3?data.pt.k:data.ks.k;this.v=shapePool.clone(pathData);this.pv=shapePool.clone(this.v);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.paths.addShape(this.v);this.reset=resetShape;this.effectsSequence=[];}function addEffect(effectFunction){this.effectsSequence.push(effectFunction);this.container.addDynamicProperty(this);}ShapeProperty.prototype.interpolateShape=interpolateShape;ShapeProperty.prototype.getValue=processEffectsSequence;ShapeProperty.prototype.setVValue=setVValue;ShapeProperty.prototype.addEffect=addEffect;function KeyframedShapeProperty(elem,data,type){this.propType='shape';this.comp=elem.comp;this.elem=elem;this.container=elem;this.offsetTime=elem.data.st;this.keyframes=type===3?data.pt.k:data.ks.k;this.k=true;this.kf=true;var len=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement();this.v.setPathData(this.keyframes[0].s[0].c,len);this.pv=shapePool.clone(this.v);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.paths.addShape(this.v);this.lastFrame=initFrame;this.reset=resetShape;this._caching={lastFrame:initFrame,lastIndex:0};this.effectsSequence=[interpolateShapeCurrentTime.bind(this)];}KeyframedShapeProperty.prototype.getValue=processEffectsSequence;KeyframedShapeProperty.prototype.interpolateShape=interpolateShape;KeyframedShapeProperty.prototype.setVValue=setVValue;KeyframedShapeProperty.prototype.addEffect=addEffect;var EllShapeProperty=function(){var cPoint=roundCorner;function EllShapePropertyFactory(elem,data){/* this.v = {
                v: createSizedArray(4),
                i: createSizedArray(4),
                o: createSizedArray(4),
                c: true
            }; */this.v=shapePool.newElement();this.v.setPathData(true,4);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.localShapeCollection.addShape(this.v);this.d=data.d;this.elem=elem;this.comp=elem.comp;this.frameId=-1;this.initDynamicPropertyContainer(elem);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.s=PropertyFactory.getProp(elem,data.s,1,0,this);if(this.dynamicProperties.length){this.k=true;}else{this.k=false;this.convertEllToPath();}}EllShapePropertyFactory.prototype={reset:resetShape,getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertEllToPath();}},convertEllToPath:function convertEllToPath(){var p0=this.p.v[0];var p1=this.p.v[1];var s0=this.s.v[0]/2;var s1=this.s.v[1]/2;var _cw=this.d!==3;var _v=this.v;_v.v[0][0]=p0;_v.v[0][1]=p1-s1;_v.v[1][0]=_cw?p0+s0:p0-s0;_v.v[1][1]=p1;_v.v[2][0]=p0;_v.v[2][1]=p1+s1;_v.v[3][0]=_cw?p0-s0:p0+s0;_v.v[3][1]=p1;_v.i[0][0]=_cw?p0-s0*cPoint:p0+s0*cPoint;_v.i[0][1]=p1-s1;_v.i[1][0]=_cw?p0+s0:p0-s0;_v.i[1][1]=p1-s1*cPoint;_v.i[2][0]=_cw?p0+s0*cPoint:p0-s0*cPoint;_v.i[2][1]=p1+s1;_v.i[3][0]=_cw?p0-s0:p0+s0;_v.i[3][1]=p1+s1*cPoint;_v.o[0][0]=_cw?p0+s0*cPoint:p0-s0*cPoint;_v.o[0][1]=p1-s1;_v.o[1][0]=_cw?p0+s0:p0-s0;_v.o[1][1]=p1+s1*cPoint;_v.o[2][0]=_cw?p0-s0*cPoint:p0+s0*cPoint;_v.o[2][1]=p1+s1;_v.o[3][0]=_cw?p0-s0:p0+s0;_v.o[3][1]=p1-s1*cPoint;}};extendPrototype([DynamicPropertyContainer],EllShapePropertyFactory);return EllShapePropertyFactory;}();var StarShapeProperty=function(){function StarShapePropertyFactory(elem,data){this.v=shapePool.newElement();this.v.setPathData(true,0);this.elem=elem;this.comp=elem.comp;this.data=data;this.frameId=-1;this.d=data.d;this.initDynamicPropertyContainer(elem);if(data.sy===1){this.ir=PropertyFactory.getProp(elem,data.ir,0,0,this);this.is=PropertyFactory.getProp(elem,data.is,0,0.01,this);this.convertToPath=this.convertStarToPath;}else{this.convertToPath=this.convertPolygonToPath;}this.pt=PropertyFactory.getProp(elem,data.pt,0,0,this);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.r=PropertyFactory.getProp(elem,data.r,0,degToRads,this);this.or=PropertyFactory.getProp(elem,data.or,0,0,this);this.os=PropertyFactory.getProp(elem,data.os,0,0.01,this);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.localShapeCollection.addShape(this.v);this.paths=this.localShapeCollection;if(this.dynamicProperties.length){this.k=true;}else{this.k=false;this.convertToPath();}}StarShapePropertyFactory.prototype={reset:resetShape,getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertToPath();}},convertStarToPath:function convertStarToPath(){var numPts=Math.floor(this.pt.v)*2;var angle=Math.PI*2/numPts;/* this.v.v.length = numPts;
                this.v.i.length = numPts;
                this.v.o.length = numPts; */var longFlag=true;var longRad=this.or.v;var shortRad=this.ir.v;var longRound=this.os.v;var shortRound=this.is.v;var longPerimSegment=2*Math.PI*longRad/(numPts*2);var shortPerimSegment=2*Math.PI*shortRad/(numPts*2);var i;var rad;var roundness;var perimSegment;var currentAng=-Math.PI/2;currentAng+=this.r.v;var dir=this.data.d===3?-1:1;this.v._length=0;for(i=0;i<numPts;i+=1){rad=longFlag?longRad:shortRad;roundness=longFlag?longRound:shortRound;perimSegment=longFlag?longPerimSegment:shortPerimSegment;var x=rad*Math.cos(currentAng);var y=rad*Math.sin(currentAng);var ox=x===0&&y===0?0:y/Math.sqrt(x*x+y*y);var oy=x===0&&y===0?0:-x/Math.sqrt(x*x+y*y);x+=+this.p.v[0];y+=+this.p.v[1];this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir,i,true);/* this.v.v[i] = [x,y];
                    this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
                    this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
                    this.v._length = numPts; */longFlag=!longFlag;currentAng+=angle*dir;}},convertPolygonToPath:function convertPolygonToPath(){var numPts=Math.floor(this.pt.v);var angle=Math.PI*2/numPts;var rad=this.or.v;var roundness=this.os.v;var perimSegment=2*Math.PI*rad/(numPts*4);var i;var currentAng=-Math.PI*0.5;var dir=this.data.d===3?-1:1;currentAng+=this.r.v;this.v._length=0;for(i=0;i<numPts;i+=1){var x=rad*Math.cos(currentAng);var y=rad*Math.sin(currentAng);var ox=x===0&&y===0?0:y/Math.sqrt(x*x+y*y);var oy=x===0&&y===0?0:-x/Math.sqrt(x*x+y*y);x+=+this.p.v[0];y+=+this.p.v[1];this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir,i,true);currentAng+=angle*dir;}this.paths.length=0;this.paths[0]=this.v;}};extendPrototype([DynamicPropertyContainer],StarShapePropertyFactory);return StarShapePropertyFactory;}();var RectShapeProperty=function(){function RectShapePropertyFactory(elem,data){this.v=shapePool.newElement();this.v.c=true;this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.localShapeCollection.addShape(this.v);this.paths=this.localShapeCollection;this.elem=elem;this.comp=elem.comp;this.frameId=-1;this.d=data.d;this.initDynamicPropertyContainer(elem);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.s=PropertyFactory.getProp(elem,data.s,1,0,this);this.r=PropertyFactory.getProp(elem,data.r,0,0,this);if(this.dynamicProperties.length){this.k=true;}else{this.k=false;this.convertRectToPath();}}RectShapePropertyFactory.prototype={convertRectToPath:function convertRectToPath(){var p0=this.p.v[0];var p1=this.p.v[1];var v0=this.s.v[0]/2;var v1=this.s.v[1]/2;var round=bmMin(v0,v1,this.r.v);var cPoint=round*(1-roundCorner);this.v._length=0;if(this.d===2||this.d===1){this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,0,true);this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,p0+v0,p1+v1-round,1,true);if(round!==0){this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,2,true);this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,p0-v0+round,p1+v1,3,true);this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,4,true);this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,p0-v0,p1-v1+round,5,true);this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,6,true);this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,p0+v0-round,p1-v1,7,true);}else{this.v.setTripleAt(p0-v0,p1+v1,p0-v0+cPoint,p1+v1,p0-v0,p1+v1,2);this.v.setTripleAt(p0-v0,p1-v1,p0-v0,p1-v1+cPoint,p0-v0,p1-v1,3);}}else{this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,p0+v0,p1-v1+round,0,true);if(round!==0){this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,1,true);this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,p0-v0+round,p1-v1,2,true);this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,3,true);this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,p0-v0,p1+v1-round,4,true);this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,5,true);this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,p0+v0-round,p1+v1,6,true);this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,7,true);}else{this.v.setTripleAt(p0-v0,p1-v1,p0-v0+cPoint,p1-v1,p0-v0,p1-v1,1,true);this.v.setTripleAt(p0-v0,p1+v1,p0-v0,p1+v1-cPoint,p0-v0,p1+v1,2,true);this.v.setTripleAt(p0+v0,p1+v1,p0+v0-cPoint,p1+v1,p0+v0,p1+v1,3,true);}}},getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertRectToPath();}},reset:resetShape};extendPrototype([DynamicPropertyContainer],RectShapePropertyFactory);return RectShapePropertyFactory;}();function getShapeProp(elem,data,type){var prop;if(type===3||type===4){var dataProp=type===3?data.pt:data.ks;var keys=dataProp.k;if(keys.length){prop=new KeyframedShapeProperty(elem,data,type);}else{prop=new ShapeProperty(elem,data,type);}}else if(type===5){prop=new RectShapeProperty(elem,data);}else if(type===6){prop=new EllShapeProperty(elem,data);}else if(type===7){prop=new StarShapeProperty(elem,data);}if(prop.k){elem.addDynamicProperty(prop);}return prop;}function getConstructorFunction(){return ShapeProperty;}function getKeyframedConstructorFunction(){return KeyframedShapeProperty;}var ob={};ob.getShapeProp=getShapeProp;ob.getConstructorFunction=getConstructorFunction;ob.getKeyframedConstructorFunction=getKeyframedConstructorFunction;return ob;}();/* global shapeCollectionPool, initialDefaultFrame, extendPrototype, DynamicPropertyContainer */ /* exported ShapeModifiers */var ShapeModifiers=function(){var ob={};var modifiers={};ob.registerModifier=registerModifier;ob.getModifier=getModifier;function registerModifier(nm,factory){if(!modifiers[nm]){modifiers[nm]=factory;}}function getModifier(nm,elem,data){return new modifiers[nm](elem,data);}return ob;}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){};ShapeModifier.prototype.addShapeToModifier=function(){};ShapeModifier.prototype.addShape=function(data){if(!this.closed){// Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.
data.sh.container.addDynamicProperty(data.sh);var shapeData={shape:data.sh,data:data,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(shapeData);this.addShapeToModifier(shapeData);if(this._isAnimated){data.setAsAnimated();}}};ShapeModifier.prototype.init=function(elem,data){this.shapes=[];this.elem=elem;this.initDynamicPropertyContainer(elem);this.initModifierProperties(elem,data);this.frameId=initialDefaultFrame;this.closed=false;this.k=false;if(this.dynamicProperties.length){this.k=true;}else{this.getValue(true);}};ShapeModifier.prototype.processKeys=function(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();};extendPrototype([DynamicPropertyContainer],ShapeModifier);/* global extendPrototype, ShapeModifier, PropertyFactory, segmentsLengthPool, bez, shapePool, ShapeModifiers */function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier);TrimModifier.prototype.initModifierProperties=function(elem,data){this.s=PropertyFactory.getProp(elem,data.s,0,0.01,this);this.e=PropertyFactory.getProp(elem,data.e,0,0.01,this);this.o=PropertyFactory.getProp(elem,data.o,0,0,this);this.sValue=0;this.eValue=0;this.getValue=this.processKeys;this.m=data.m;this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length;};TrimModifier.prototype.addShapeToModifier=function(shapeData){shapeData.pathsData=[];};TrimModifier.prototype.calculateShapeEdges=function(s,e,shapeLength,addedLength,totalModifierLength){var segments=[];if(e<=1){segments.push({s:s,e:e});}else if(s>=1){segments.push({s:s-1,e:e-1});}else{segments.push({s:s,e:1});segments.push({s:0,e:e-1});}var shapeSegments=[];var i;var len=segments.length;var segmentOb;for(i=0;i<len;i+=1){segmentOb=segments[i];if(!(segmentOb.e*totalModifierLength<addedLength||segmentOb.s*totalModifierLength>addedLength+shapeLength)){var shapeS;var shapeE;if(segmentOb.s*totalModifierLength<=addedLength){shapeS=0;}else{shapeS=(segmentOb.s*totalModifierLength-addedLength)/shapeLength;}if(segmentOb.e*totalModifierLength>=addedLength+shapeLength){shapeE=1;}else{shapeE=(segmentOb.e*totalModifierLength-addedLength)/shapeLength;}shapeSegments.push([shapeS,shapeE]);}}if(!shapeSegments.length){shapeSegments.push([0,0]);}return shapeSegments;};TrimModifier.prototype.releasePathsData=function(pathsData){var i;var len=pathsData.length;for(i=0;i<len;i+=1){segmentsLengthPool.release(pathsData[i]);}pathsData.length=0;return pathsData;};TrimModifier.prototype.processShapes=function(_isFirstFrame){var s;var e;if(this._mdf||_isFirstFrame){var o=this.o.v%360/360;if(o<0){o+=1;}if(this.s.v>1){s=1+o;}else if(this.s.v<0){s=0+o;}else{s=this.s.v+o;}if(this.e.v>1){e=1+o;}else if(this.e.v<0){e=0+o;}else{e=this.e.v+o;}if(s>e){var _s=s;s=e;e=_s;}s=Math.round(s*10000)*0.0001;e=Math.round(e*10000)*0.0001;this.sValue=s;this.eValue=e;}else{s=this.sValue;e=this.eValue;}var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var pathsData;var pathData;var totalShapeLength;var totalModifierLength=0;if(e===s){for(i=0;i<len;i+=1){this.shapes[i].localShapeCollection.releaseShapes();this.shapes[i].shape._mdf=true;this.shapes[i].shape.paths=this.shapes[i].localShapeCollection;if(this._mdf){this.shapes[i].pathsData.length=0;}}}else if(!(e===1&&s===0||e===0&&s===1)){var segments=[];var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];// if shape hasn't changed and trim properties haven't changed, cached previous path can be used
if(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame&&this.m!==2){shapeData.shape.paths=shapeData.localShapeCollection;}else{shapePaths=shapeData.shape.paths;jLen=shapePaths._length;totalShapeLength=0;if(!shapeData.shape._mdf&&shapeData.pathsData.length){totalShapeLength=shapeData.totalShapeLength;}else{pathsData=this.releasePathsData(shapeData.pathsData);for(j=0;j<jLen;j+=1){pathData=bez.getSegmentsLength(shapePaths.shapes[j]);pathsData.push(pathData);totalShapeLength+=pathData.totalLength;}shapeData.totalShapeLength=totalShapeLength;shapeData.pathsData=pathsData;}totalModifierLength+=totalShapeLength;shapeData.shape._mdf=true;}}var shapeS=s;var shapeE=e;var addedLength=0;var edges;for(i=len-1;i>=0;i-=1){shapeData=this.shapes[i];if(shapeData.shape._mdf){localShapeCollection=shapeData.localShapeCollection;localShapeCollection.releaseShapes();// if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group
if(this.m===2&&len>1){edges=this.calculateShapeEdges(s,e,shapeData.totalShapeLength,addedLength,totalModifierLength);addedLength+=shapeData.totalShapeLength;}else{edges=[[shapeS,shapeE]];}jLen=edges.length;for(j=0;j<jLen;j+=1){shapeS=edges[j][0];shapeE=edges[j][1];segments.length=0;if(shapeE<=1){segments.push({s:shapeData.totalShapeLength*shapeS,e:shapeData.totalShapeLength*shapeE});}else if(shapeS>=1){segments.push({s:shapeData.totalShapeLength*(shapeS-1),e:shapeData.totalShapeLength*(shapeE-1)});}else{segments.push({s:shapeData.totalShapeLength*shapeS,e:shapeData.totalShapeLength});segments.push({s:0,e:shapeData.totalShapeLength*(shapeE-1)});}var newShapesData=this.addShapes(shapeData,segments[0]);if(segments[0].s!==segments[0].e){if(segments.length>1){var lastShapeInCollection=shapeData.shape.paths.shapes[shapeData.shape.paths._length-1];if(lastShapeInCollection.c){var lastShape=newShapesData.pop();this.addPaths(newShapesData,localShapeCollection);newShapesData=this.addShapes(shapeData,segments[1],lastShape);}else{this.addPaths(newShapesData,localShapeCollection);newShapesData=this.addShapes(shapeData,segments[1]);}}this.addPaths(newShapesData,localShapeCollection);}}shapeData.shape.paths=localShapeCollection;}}}else if(this._mdf){for(i=0;i<len;i+=1){// Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
// Don't remove this even if it's losing cached info.
this.shapes[i].pathsData.length=0;this.shapes[i].shape._mdf=true;}}};TrimModifier.prototype.addPaths=function(newPaths,localShapeCollection){var i;var len=newPaths.length;for(i=0;i<len;i+=1){localShapeCollection.addShape(newPaths[i]);}};TrimModifier.prototype.addSegment=function(pt1,pt2,pt3,pt4,shapePath,pos,newShape){shapePath.setXYAt(pt2[0],pt2[1],'o',pos);shapePath.setXYAt(pt3[0],pt3[1],'i',pos+1);if(newShape){shapePath.setXYAt(pt1[0],pt1[1],'v',pos);}shapePath.setXYAt(pt4[0],pt4[1],'v',pos+1);};TrimModifier.prototype.addSegmentFromArray=function(points,shapePath,pos,newShape){shapePath.setXYAt(points[1],points[5],'o',pos);shapePath.setXYAt(points[2],points[6],'i',pos+1);if(newShape){shapePath.setXYAt(points[0],points[4],'v',pos);}shapePath.setXYAt(points[3],points[7],'v',pos+1);};TrimModifier.prototype.addShapes=function(shapeData,shapeSegment,shapePath){var pathsData=shapeData.pathsData;var shapePaths=shapeData.shape.paths.shapes;var i;var len=shapeData.shape.paths._length;var j;var jLen;var addedLength=0;var currentLengthData;var segmentCount;var lengths;var segment;var shapes=[];var initPos;var newShape=true;if(!shapePath){shapePath=shapePool.newElement();segmentCount=0;initPos=0;}else{segmentCount=shapePath._length;initPos=shapePath._length;}shapes.push(shapePath);for(i=0;i<len;i+=1){lengths=pathsData[i].lengths;shapePath.c=shapePaths[i].c;jLen=shapePaths[i].c?lengths.length:lengths.length+1;for(j=1;j<jLen;j+=1){currentLengthData=lengths[j-1];if(addedLength+currentLengthData.addedLength<shapeSegment.s){addedLength+=currentLengthData.addedLength;shapePath.c=false;}else if(addedLength>shapeSegment.e){shapePath.c=false;break;}else{if(shapeSegment.s<=addedLength&&shapeSegment.e>=addedLength+currentLengthData.addedLength){this.addSegment(shapePaths[i].v[j-1],shapePaths[i].o[j-1],shapePaths[i].i[j],shapePaths[i].v[j],shapePath,segmentCount,newShape);newShape=false;}else{segment=bez.getNewSegment(shapePaths[i].v[j-1],shapePaths[i].v[j],shapePaths[i].o[j-1],shapePaths[i].i[j],(shapeSegment.s-addedLength)/currentLengthData.addedLength,(shapeSegment.e-addedLength)/currentLengthData.addedLength,lengths[j-1]);this.addSegmentFromArray(segment,shapePath,segmentCount,newShape);// this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
newShape=false;shapePath.c=false;}addedLength+=currentLengthData.addedLength;segmentCount+=1;}}if(shapePaths[i].c&&lengths.length){currentLengthData=lengths[j-1];if(addedLength<=shapeSegment.e){var segmentLength=lengths[j-1].addedLength;if(shapeSegment.s<=addedLength&&shapeSegment.e>=addedLength+segmentLength){this.addSegment(shapePaths[i].v[j-1],shapePaths[i].o[j-1],shapePaths[i].i[0],shapePaths[i].v[0],shapePath,segmentCount,newShape);newShape=false;}else{segment=bez.getNewSegment(shapePaths[i].v[j-1],shapePaths[i].v[0],shapePaths[i].o[j-1],shapePaths[i].i[0],(shapeSegment.s-addedLength)/segmentLength,(shapeSegment.e-addedLength)/segmentLength,lengths[j-1]);this.addSegmentFromArray(segment,shapePath,segmentCount,newShape);// this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
newShape=false;shapePath.c=false;}}else{shapePath.c=false;}addedLength+=currentLengthData.addedLength;segmentCount+=1;}if(shapePath._length){shapePath.setXYAt(shapePath.v[initPos][0],shapePath.v[initPos][1],'i',initPos);shapePath.setXYAt(shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1],'o',shapePath._length-1);}if(addedLength>shapeSegment.e){break;}if(i<len-1){shapePath=shapePool.newElement();newShape=true;shapes.push(shapePath);segmentCount=0;}}return shapes;};ShapeModifiers.registerModifier('tm',TrimModifier);/* global extendPrototype, ShapeModifier, PropertyFactory, shapePool, roundCorner, ShapeModifiers */function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier);RoundCornersModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.rd=PropertyFactory.getProp(elem,data.r,0,null,this);this._isAnimated=!!this.rd.effectsSequence.length;};RoundCornersModifier.prototype.processPath=function(path,round){var clonedPath=shapePool.newElement();clonedPath.c=path.c;var i;var len=path._length;var currentV;var currentI;var currentO;var closerV;var distance;var newPosPerc;var index=0;var vX;var vY;var oX;var oY;var iX;var iY;for(i=0;i<len;i+=1){currentV=path.v[i];currentO=path.o[i];currentI=path.i[i];if(currentV[0]===currentO[0]&&currentV[1]===currentO[1]&&currentV[0]===currentI[0]&&currentV[1]===currentI[1]){if((i===0||i===len-1)&&!path.c){clonedPath.setTripleAt(currentV[0],currentV[1],currentO[0],currentO[1],currentI[0],currentI[1],index);/* clonedPath.v[index] = currentV;
                clonedPath.o[index] = currentO;
                clonedPath.i[index] = currentI; */index+=1;}else{if(i===0){closerV=path.v[len-1];}else{closerV=path.v[i-1];}distance=Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));newPosPerc=distance?Math.min(distance/2,round)/distance:0;iX=currentV[0]+(closerV[0]-currentV[0])*newPosPerc;vX=iX;iY=currentV[1]-(currentV[1]-closerV[1])*newPosPerc;vY=iY;oX=vX-(vX-currentV[0])*roundCorner;oY=vY-(vY-currentV[1])*roundCorner;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,index);index+=1;if(i===len-1){closerV=path.v[0];}else{closerV=path.v[i+1];}distance=Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));newPosPerc=distance?Math.min(distance/2,round)/distance:0;oX=currentV[0]+(closerV[0]-currentV[0])*newPosPerc;vX=oX;oY=currentV[1]+(closerV[1]-currentV[1])*newPosPerc;vY=oY;iX=vX-(vX-currentV[0])*roundCorner;iY=vY-(vY-currentV[1])*roundCorner;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,index);index+=1;}}else{clonedPath.setTripleAt(path.v[i][0],path.v[i][1],path.o[i][0],path.o[i][1],path.i[i][0],path.i[i][1],index);index+=1;}}return clonedPath;};RoundCornersModifier.prototype.processShapes=function(_isFirstFrame){var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var rd=this.rd.v;if(rd!==0){var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];localShapeCollection=shapeData.localShapeCollection;if(!(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame)){localShapeCollection.releaseShapes();shapeData.shape._mdf=true;shapePaths=shapeData.shape.paths.shapes;jLen=shapeData.shape.paths._length;for(j=0;j<jLen;j+=1){localShapeCollection.addShape(this.processPath(shapePaths[j],rd));}}shapeData.shape.paths=shapeData.localShapeCollection;}}if(!this.dynamicProperties.length){this._mdf=false;}};ShapeModifiers.registerModifier('rd',RoundCornersModifier);/* global extendPrototype, ShapeModifier, PropertyFactory, shapePool, ShapeModifiers */function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier);PuckerAndBloatModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.amount=PropertyFactory.getProp(elem,data.a,0,null,this);this._isAnimated=!!this.amount.effectsSequence.length;};PuckerAndBloatModifier.prototype.processPath=function(path,amount){var percent=amount/100;var centerPoint=[0,0];var pathLength=path._length;var i=0;for(i=0;i<pathLength;i+=1){centerPoint[0]+=path.v[i][0];centerPoint[1]+=path.v[i][1];}centerPoint[0]/=pathLength;centerPoint[1]/=pathLength;var clonedPath=shapePool.newElement();clonedPath.c=path.c;var vX;var vY;var oX;var oY;var iX;var iY;for(i=0;i<pathLength;i+=1){vX=path.v[i][0]+(centerPoint[0]-path.v[i][0])*percent;vY=path.v[i][1]+(centerPoint[1]-path.v[i][1])*percent;oX=path.o[i][0]+(centerPoint[0]-path.o[i][0])*-percent;oY=path.o[i][1]+(centerPoint[1]-path.o[i][1])*-percent;iX=path.i[i][0]+(centerPoint[0]-path.i[i][0])*-percent;iY=path.i[i][1]+(centerPoint[1]-path.i[i][1])*-percent;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,i);}return clonedPath;};PuckerAndBloatModifier.prototype.processShapes=function(_isFirstFrame){var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var amount=this.amount.v;if(amount!==0){var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];localShapeCollection=shapeData.localShapeCollection;if(!(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame)){localShapeCollection.releaseShapes();shapeData.shape._mdf=true;shapePaths=shapeData.shape.paths.shapes;jLen=shapeData.shape.paths._length;for(j=0;j<jLen;j+=1){localShapeCollection.addShape(this.processPath(shapePaths[j],amount));}}shapeData.shape.paths=shapeData.localShapeCollection;}}if(!this.dynamicProperties.length){this._mdf=false;}};ShapeModifiers.registerModifier('pb',PuckerAndBloatModifier);/* global extendPrototype, ShapeModifier, TransformPropertyFactory, PropertyFactory, Matrix, ShapeModifiers */function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier);RepeaterModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.c=PropertyFactory.getProp(elem,data.c,0,null,this);this.o=PropertyFactory.getProp(elem,data.o,0,null,this);this.tr=TransformPropertyFactory.getTransformProperty(elem,data.tr,this);this.so=PropertyFactory.getProp(elem,data.tr.so,0,0.01,this);this.eo=PropertyFactory.getProp(elem,data.tr.eo,0,0.01,this);this.data=data;if(!this.dynamicProperties.length){this.getValue(true);}this._isAnimated=!!this.dynamicProperties.length;this.pMatrix=new Matrix();this.rMatrix=new Matrix();this.sMatrix=new Matrix();this.tMatrix=new Matrix();this.matrix=new Matrix();};RepeaterModifier.prototype.applyTransforms=function(pMatrix,rMatrix,sMatrix,transform,perc,inv){var dir=inv?-1:1;var scaleX=transform.s.v[0]+(1-transform.s.v[0])*(1-perc);var scaleY=transform.s.v[1]+(1-transform.s.v[1])*(1-perc);pMatrix.translate(transform.p.v[0]*dir*perc,transform.p.v[1]*dir*perc,transform.p.v[2]);rMatrix.translate(-transform.a.v[0],-transform.a.v[1],transform.a.v[2]);rMatrix.rotate(-transform.r.v*dir*perc);rMatrix.translate(transform.a.v[0],transform.a.v[1],transform.a.v[2]);sMatrix.translate(-transform.a.v[0],-transform.a.v[1],transform.a.v[2]);sMatrix.scale(inv?1/scaleX:scaleX,inv?1/scaleY:scaleY);sMatrix.translate(transform.a.v[0],transform.a.v[1],transform.a.v[2]);};RepeaterModifier.prototype.init=function(elem,arr,pos,elemsData){this.elem=elem;this.arr=arr;this.pos=pos;this.elemsData=elemsData;this._currentCopies=0;this._elements=[];this._groups=[];this.frameId=-1;this.initDynamicPropertyContainer(elem);this.initModifierProperties(elem,arr[pos]);while(pos>0){pos-=1;// this._elements.unshift(arr.splice(pos,1)[0]);
this._elements.unshift(arr[pos]);}if(this.dynamicProperties.length){this.k=true;}else{this.getValue(true);}};RepeaterModifier.prototype.resetElements=function(elements){var i;var len=elements.length;for(i=0;i<len;i+=1){elements[i]._processed=false;if(elements[i].ty==='gr'){this.resetElements(elements[i].it);}}};RepeaterModifier.prototype.cloneElements=function(elements){var newElements=JSON.parse(JSON.stringify(elements));this.resetElements(newElements);return newElements;};RepeaterModifier.prototype.changeGroupRender=function(elements,renderFlag){var i;var len=elements.length;for(i=0;i<len;i+=1){elements[i]._render=renderFlag;if(elements[i].ty==='gr'){this.changeGroupRender(elements[i].it,renderFlag);}}};RepeaterModifier.prototype.processShapes=function(_isFirstFrame){var items;var itemsTransform;var i;var dir;var cont;var hasReloaded=false;if(this._mdf||_isFirstFrame){var copies=Math.ceil(this.c.v);if(this._groups.length<copies){while(this._groups.length<copies){var group={it:this.cloneElements(this._elements),ty:'gr'};group.it.push({a:{a:0,ix:1,k:[0,0]},nm:'Transform',o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:'tr'});this.arr.splice(0,0,group);this._groups.splice(0,0,group);this._currentCopies+=1;}this.elem.reloadShapes();hasReloaded=true;}cont=0;var renderFlag;for(i=0;i<=this._groups.length-1;i+=1){renderFlag=cont<copies;this._groups[i]._render=renderFlag;this.changeGroupRender(this._groups[i].it,renderFlag);if(!renderFlag){var elems=this.elemsData[i].it;var transformData=elems[elems.length-1];if(transformData.transform.op.v!==0){transformData.transform.op._mdf=true;transformData.transform.op.v=0;}else{transformData.transform.op._mdf=false;}}cont+=1;}this._currentCopies=copies;/// /
var offset=this.o.v;var offsetModulo=offset%1;var roundOffset=offset>0?Math.floor(offset):Math.ceil(offset);var pProps=this.pMatrix.props;var rProps=this.rMatrix.props;var sProps=this.sMatrix.props;this.pMatrix.reset();this.rMatrix.reset();this.sMatrix.reset();this.tMatrix.reset();this.matrix.reset();var iteration=0;if(offset>0){while(iteration<roundOffset){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,false);iteration+=1;}if(offsetModulo){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,offsetModulo,false);iteration+=offsetModulo;}}else if(offset<0){while(iteration>roundOffset){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,true);iteration-=1;}if(offsetModulo){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-offsetModulo,true);iteration-=offsetModulo;}}i=this.data.m===1?0:this._currentCopies-1;dir=this.data.m===1?1:-1;cont=this._currentCopies;var j;var jLen;while(cont){items=this.elemsData[i].it;itemsTransform=items[items.length-1].transform.mProps.v.props;jLen=itemsTransform.length;items[items.length-1].transform.mProps._mdf=true;items[items.length-1].transform.op._mdf=true;items[items.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1));if(iteration!==0){if(i!==0&&dir===1||i!==this._currentCopies-1&&dir===-1){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,false);}this.matrix.transform(rProps[0],rProps[1],rProps[2],rProps[3],rProps[4],rProps[5],rProps[6],rProps[7],rProps[8],rProps[9],rProps[10],rProps[11],rProps[12],rProps[13],rProps[14],rProps[15]);this.matrix.transform(sProps[0],sProps[1],sProps[2],sProps[3],sProps[4],sProps[5],sProps[6],sProps[7],sProps[8],sProps[9],sProps[10],sProps[11],sProps[12],sProps[13],sProps[14],sProps[15]);this.matrix.transform(pProps[0],pProps[1],pProps[2],pProps[3],pProps[4],pProps[5],pProps[6],pProps[7],pProps[8],pProps[9],pProps[10],pProps[11],pProps[12],pProps[13],pProps[14],pProps[15]);for(j=0;j<jLen;j+=1){itemsTransform[j]=this.matrix.props[j];}this.matrix.reset();}else{this.matrix.reset();for(j=0;j<jLen;j+=1){itemsTransform[j]=this.matrix.props[j];}}iteration+=1;cont-=1;i+=dir;}}else{cont=this._currentCopies;i=0;dir=1;while(cont){items=this.elemsData[i].it;itemsTransform=items[items.length-1].transform.mProps.v.props;items[items.length-1].transform.mProps._mdf=false;items[items.length-1].transform.op._mdf=false;cont-=1;i+=dir;}}return hasReloaded;};RepeaterModifier.prototype.addShape=function(){};ShapeModifiers.registerModifier('rp',RepeaterModifier);/* global createSizedArray, shapePool */function ShapeCollection(){this._length=0;this._maxLength=4;this.shapes=createSizedArray(this._maxLength);}ShapeCollection.prototype.addShape=function(shapeData){if(this._length===this._maxLength){this.shapes=this.shapes.concat(createSizedArray(this._maxLength));this._maxLength*=2;}this.shapes[this._length]=shapeData;this._length+=1;};ShapeCollection.prototype.releaseShapes=function(){var i;for(i=0;i<this._length;i+=1){shapePool.release(this.shapes[i]);}this._length=0;};/* global createSizedArray, createTypedArray, PropertyFactory, extendPrototype, DynamicPropertyContainer */function DashProperty(elem,data,renderer,container){this.elem=elem;this.frameId=-1;this.dataProps=createSizedArray(data.length);this.renderer=renderer;this.k=false;this.dashStr='';this.dashArray=createTypedArray('float32',data.length?data.length-1:0);this.dashoffset=createTypedArray('float32',1);this.initDynamicPropertyContainer(container);var i;var len=data.length||0;var prop;for(i=0;i<len;i+=1){prop=PropertyFactory.getProp(elem,data[i].v,0,0,this);this.k=prop.k||this.k;this.dataProps[i]={n:data[i].n,p:prop};}if(!this.k){this.getValue(true);}this._isAnimated=this.k;}DashProperty.prototype.getValue=function(forceRender){if(this.elem.globalData.frameId===this.frameId&&!forceRender){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();this._mdf=this._mdf||forceRender;if(this._mdf){var i=0;var len=this.dataProps.length;if(this.renderer==='svg'){this.dashStr='';}for(i=0;i<len;i+=1){if(this.dataProps[i].n!=='o'){if(this.renderer==='svg'){this.dashStr+=' '+this.dataProps[i].p.v;}else{this.dashArray[i]=this.dataProps[i].p.v;}}else{this.dashoffset[0]=this.dataProps[i].p.v;}}}};extendPrototype([DynamicPropertyContainer],DashProperty);/* global createTypedArray, PropertyFactory, extendPrototype, DynamicPropertyContainer */function GradientProperty(elem,data,container){this.data=data;this.c=createTypedArray('uint8c',data.p*4);var cLength=data.k.k[0].s?data.k.k[0].s.length-data.p*4:data.k.k.length-data.p*4;this.o=createTypedArray('float32',cLength);this._cmdf=false;this._omdf=false;this._collapsable=this.checkCollapsable();this._hasOpacity=cLength;this.initDynamicPropertyContainer(container);this.prop=PropertyFactory.getProp(elem,data.k,1,null,this);this.k=this.prop.k;this.getValue(true);}GradientProperty.prototype.comparePoints=function(values,points){var i=0;var len=this.o.length/2;var diff;while(i<len){diff=Math.abs(values[i*4]-values[points*4+i*2]);if(diff>0.01){return false;}i+=1;}return true;};GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4){return false;}if(this.data.k.k[0].s){var i=0;var len=this.data.k.k.length;while(i<len){if(!this.comparePoints(this.data.k.k[i].s,this.data.p)){return false;}i+=1;}}else if(!this.comparePoints(this.data.k.k,this.data.p)){return false;}return true;};GradientProperty.prototype.getValue=function(forceRender){this.prop.getValue();this._mdf=false;this._cmdf=false;this._omdf=false;if(this.prop._mdf||forceRender){var i;var len=this.data.p*4;var mult;var val;for(i=0;i<len;i+=1){mult=i%4===0?100:255;val=Math.round(this.prop.v[i]*mult);if(this.c[i]!==val){this.c[i]=val;this._cmdf=!forceRender;}}if(this.o.length){len=this.prop.v.length;for(i=this.data.p*4;i<len;i+=1){mult=i%2===0?100:1;val=i%2===0?Math.round(this.prop.v[i]*100):this.prop.v[i];if(this.o[i-this.data.p*4]!==val){this.o[i-this.data.p*4]=val;this._omdf=!forceRender;}}}this._mdf=!forceRender;}};extendPrototype([DynamicPropertyContainer],GradientProperty);/* exported buildShapeString */var buildShapeString=function buildShapeString(pathNodes,length,closed,mat){if(length===0){return'';}var _o=pathNodes.o;var _i=pathNodes.i;var _v=pathNodes.v;var i;var shapeString=' M'+mat.applyToPointStringified(_v[0][0],_v[0][1]);for(i=1;i<length;i+=1){shapeString+=' C'+mat.applyToPointStringified(_o[i-1][0],_o[i-1][1])+' '+mat.applyToPointStringified(_i[i][0],_i[i][1])+' '+mat.applyToPointStringified(_v[i][0],_v[i][1]);}if(closed&&length){shapeString+=' C'+mat.applyToPointStringified(_o[i-1][0],_o[i-1][1])+' '+mat.applyToPointStringified(_i[0][0],_i[0][1])+' '+mat.applyToPointStringified(_v[0][0],_v[0][1]);shapeString+='z';}return shapeString;};/* global Howl */ /* exported audioControllerFactory */var audioControllerFactory=function(){function AudioController(audioFactory){this.audios=[];this.audioFactory=audioFactory;this._volume=1;this._isMuted=false;}AudioController.prototype={addAudio:function addAudio(audio){this.audios.push(audio);},pause:function pause(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].pause();}},resume:function resume(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].resume();}},setRate:function setRate(rateValue){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].setRate(rateValue);}},createAudio:function createAudio(assetPath){if(this.audioFactory){return this.audioFactory(assetPath);}if(Howl){return new Howl({src:[assetPath]});}return{isPlaying:false,play:function play(){this.isPlaying=true;},seek:function seek(){this.isPlaying=false;},playing:function playing(){},rate:function rate(){},setVolume:function setVolume(){}};},setAudioFactory:function setAudioFactory(audioFactory){this.audioFactory=audioFactory;},setVolume:function setVolume(value){this._volume=value;this._updateVolume();},mute:function mute(){this._isMuted=true;this._updateVolume();},unmute:function unmute(){this._isMuted=false;this._updateVolume();},getVolume:function getVolume(){return this._volume;},_updateVolume:function _updateVolume(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].volume(this._volume*(this._isMuted?0:1));}}};return function(){return new AudioController();};}();/* global createTag, createNS, isSafari */ /* exported ImagePreloader */var ImagePreloader=function(){var proxyImage=function(){var canvas=createTag('canvas');canvas.width=1;canvas.height=1;var ctx=canvas.getContext('2d');ctx.fillStyle='rgba(0,0,0,0)';ctx.fillRect(0,0,1,1);return canvas;}();function imageLoaded(){this.loadedAssets+=1;if(this.loadedAssets===this.totalImages){if(this.imagesLoadedCb){this.imagesLoadedCb(null);}}}function getAssetsPath(assetData,assetsPath,originalPath){var path='';if(assetData.e){path=assetData.p;}else if(assetsPath){var imagePath=assetData.p;if(imagePath.indexOf('images/')!==-1){imagePath=imagePath.split('/')[1];}path=assetsPath+imagePath;}else{path=originalPath;path+=assetData.u?assetData.u:'';path+=assetData.p;}return path;}function testImageLoaded(img){var _count=0;var intervalId=setInterval(function(){var box=img.getBBox();if(box.width||_count>500){this._imageLoaded();clearInterval(intervalId);}_count+=1;}.bind(this),50);}function createImageData(assetData){var path=getAssetsPath(assetData,this.assetsPath,this.path);var img=createNS('image');if(isSafari){this.testImageLoaded(img);}else{img.addEventListener('load',this._imageLoaded,false);}img.addEventListener('error',function(){ob.img=proxyImage;this._imageLoaded();}.bind(this),false);img.setAttributeNS('http://www.w3.org/1999/xlink','href',path);if(this._elementHelper.append){this._elementHelper.append(img);}else{this._elementHelper.appendChild(img);}var ob={img:img,assetData:assetData};return ob;}function createImgData(assetData){var path=getAssetsPath(assetData,this.assetsPath,this.path);var img=createTag('img');img.crossOrigin='anonymous';img.addEventListener('load',this._imageLoaded,false);img.addEventListener('error',function(){ob.img=proxyImage;this._imageLoaded();}.bind(this),false);img.src=path;var ob={img:img,assetData:assetData};return ob;}function loadAssets(assets,cb){this.imagesLoadedCb=cb;var i;var len=assets.length;for(i=0;i<len;i+=1){if(!assets[i].layers){this.totalImages+=1;this.images.push(this._createImageData(assets[i]));}}}function setPath(path){this.path=path||'';}function setAssetsPath(path){this.assetsPath=path||'';}function getImage(assetData){var i=0;var len=this.images.length;while(i<len){if(this.images[i].assetData===assetData){return this.images[i].img;}i+=1;}return null;}function destroy(){this.imagesLoadedCb=null;this.images.length=0;}function loaded(){return this.totalImages===this.loadedAssets;}function setCacheType(type,elementHelper){if(type==='svg'){this._elementHelper=elementHelper;this._createImageData=this.createImageData.bind(this);}else{this._createImageData=this.createImgData.bind(this);}}function ImagePreloaderFactory(){this._imageLoaded=imageLoaded.bind(this);this.testImageLoaded=testImageLoaded.bind(this);this.assetsPath='';this.path='';this.totalImages=0;this.loadedAssets=0;this.imagesLoadedCb=null;this.images=[];}ImagePreloaderFactory.prototype={loadAssets:loadAssets,setAssetsPath:setAssetsPath,setPath:setPath,loaded:loaded,destroy:destroy,getImage:getImage,createImgData:createImgData,createImageData:createImageData,imageLoaded:imageLoaded,setCacheType:setCacheType};return ImagePreloaderFactory;}();/* exported featureSupport */var featureSupport=function(){var ob={maskType:true};if(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent)){ob.maskType=false;}return ob;}();/* global createNS */ /* exported filtersFactory */var filtersFactory=function(){var ob={};ob.createFilter=createFilter;ob.createAlphaToLuminanceFilter=createAlphaToLuminanceFilter;function createFilter(filId,skipCoordinates){var fil=createNS('filter');fil.setAttribute('id',filId);if(skipCoordinates!==true){fil.setAttribute('filterUnits','objectBoundingBox');fil.setAttribute('x','0%');fil.setAttribute('y','0%');fil.setAttribute('width','100%');fil.setAttribute('height','100%');}return fil;}function createAlphaToLuminanceFilter(){var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');return feColorMatrix;}return ob;}();/* exported assetLoader */var assetLoader=function(){function formatResponse(xhr){if(xhr.response&&typeof xhr.response==='object'){return xhr.response;}if(xhr.response&&typeof xhr.response==='string'){return JSON.parse(xhr.response);}if(xhr.responseText){return JSON.parse(xhr.responseText);}return null;}function loadAsset(path,callback,errorCallback){var response;var xhr=new XMLHttpRequest();// set responseType after calling open or IE will break.
try{// This crashes on Android WebView prior to KitKat
xhr.responseType='json';}catch(err){}// eslint-disable-line no-empty
xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200){response=formatResponse(xhr);callback(response);}else{try{response=formatResponse(xhr);callback(response);}catch(err){if(errorCallback){errorCallback(err);}}}}};xhr.open('GET',path,true);xhr.send();}return{load:loadAsset};}();/* global createSizedArray, PropertyFactory, TextAnimatorDataProperty, bez, addHueToRGB,
  addSaturationToRGB, addBrightnessToRGB, LetterProps, Matrix, extendPrototype, DynamicPropertyContainer */function TextAnimatorProperty(textData,renderType,elem){this._isFirstFrame=true;this._hasMaskedPath=false;this._frameId=-1;this._textData=textData;this._renderType=renderType;this._elem=elem;this._animatorsData=createSizedArray(this._textData.a.length);this._pathData={};this._moreOptions={alignment:{}};this.renderedLetters=[];this.lettersChangedFlag=false;this.initDynamicPropertyContainer(elem);}TextAnimatorProperty.prototype.searchProperties=function(){var i;var len=this._textData.a.length;var animatorProps;var getProp=PropertyFactory.getProp;for(i=0;i<len;i+=1){animatorProps=this._textData.a[i];this._animatorsData[i]=new TextAnimatorDataProperty(this._elem,animatorProps,this);}if(this._textData.p&&'m'in this._textData.p){this._pathData={f:getProp(this._elem,this._textData.p.f,0,0,this),l:getProp(this._elem,this._textData.p.l,0,0,this),r:this._textData.p.r,m:this._elem.maskManager.getMaskProperty(this._textData.p.m)};this._hasMaskedPath=true;}else{this._hasMaskedPath=false;}this._moreOptions.alignment=getProp(this._elem,this._textData.m.a,1,0,this);};TextAnimatorProperty.prototype.getMeasures=function(documentData,lettersChangedFlag){this.lettersChangedFlag=lettersChangedFlag;if(!this._mdf&&!this._isFirstFrame&&!lettersChangedFlag&&(!this._hasMaskedPath||!this._pathData.m._mdf)){return;}this._isFirstFrame=false;var alignment=this._moreOptions.alignment.v;var animators=this._animatorsData;var textData=this._textData;var matrixHelper=this.mHelper;var renderType=this._renderType;var renderedLettersCount=this.renderedLetters.length;var xPos;var yPos;var i;var len;var letters=documentData.l;var pathInfo;var currentLength;var currentPoint;var segmentLength;var flag;var pointInd;var segmentInd;var prevPoint;var points;var segments;var partialLength;var totalLength;var perc;var tanAngle;var mask;if(this._hasMaskedPath){mask=this._pathData.m;if(!this._pathData.n||this._pathData._mdf){var paths=mask.v;if(this._pathData.r){paths=paths.reverse();}// TODO: release bezier data cached from previous pathInfo: this._pathData.pi
pathInfo={tLength:0,segments:[]};len=paths._length-1;var bezierData;totalLength=0;for(i=0;i<len;i+=1){bezierData=bez.buildBezierData(paths.v[i],paths.v[i+1],[paths.o[i][0]-paths.v[i][0],paths.o[i][1]-paths.v[i][1]],[paths.i[i+1][0]-paths.v[i+1][0],paths.i[i+1][1]-paths.v[i+1][1]]);pathInfo.tLength+=bezierData.segmentLength;pathInfo.segments.push(bezierData);totalLength+=bezierData.segmentLength;}i=len;if(mask.v.c){bezierData=bez.buildBezierData(paths.v[i],paths.v[0],[paths.o[i][0]-paths.v[i][0],paths.o[i][1]-paths.v[i][1]],[paths.i[0][0]-paths.v[0][0],paths.i[0][1]-paths.v[0][1]]);pathInfo.tLength+=bezierData.segmentLength;pathInfo.segments.push(bezierData);totalLength+=bezierData.segmentLength;}this._pathData.pi=pathInfo;}pathInfo=this._pathData.pi;currentLength=this._pathData.f.v;segmentInd=0;pointInd=1;segmentLength=0;flag=true;segments=pathInfo.segments;if(currentLength<0&&mask.v.c){if(pathInfo.tLength<Math.abs(currentLength)){currentLength=-Math.abs(currentLength)%pathInfo.tLength;}segmentInd=segments.length-1;points=segments[segmentInd].points;pointInd=points.length-1;while(currentLength<0){currentLength+=points[pointInd].partialLength;pointInd-=1;if(pointInd<0){segmentInd-=1;points=segments[segmentInd].points;pointInd=points.length-1;}}}points=segments[segmentInd].points;prevPoint=points[pointInd-1];currentPoint=points[pointInd];partialLength=currentPoint.partialLength;}len=letters.length;xPos=0;yPos=0;var yOff=documentData.finalSize*1.2*0.714;var firstLine=true;var animatorProps;var animatorSelector;var j;var jLen;var letterValue;jLen=animators.length;var mult;var ind=-1;var offf;var xPathPos;var yPathPos;var initPathPos=currentLength;var initSegmentInd=segmentInd;var initPointInd=pointInd;var currentLine=-1;var elemOpacity;var sc;var sw;var fc;var k;var letterSw;var letterSc;var letterFc;var letterM='';var letterP=this.defaultPropsArray;var letterO;//
if(documentData.j===2||documentData.j===1){var animatorJustifyOffset=0;var animatorFirstCharOffset=0;var justifyOffsetMult=documentData.j===2?-0.5:-1;var lastIndex=0;var isNewLine=true;for(i=0;i<len;i+=1){if(letters[i].n){if(animatorJustifyOffset){animatorJustifyOffset+=animatorFirstCharOffset;}while(lastIndex<i){letters[lastIndex].animatorJustifyOffset=animatorJustifyOffset;lastIndex+=1;}animatorJustifyOffset=0;isNewLine=true;}else{for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.t.propType){if(isNewLine&&documentData.j===2){animatorFirstCharOffset+=animatorProps.t.v*justifyOffsetMult;}animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorJustifyOffset+=animatorProps.t.v*mult[0]*justifyOffsetMult;}else{animatorJustifyOffset+=animatorProps.t.v*mult*justifyOffsetMult;}}}isNewLine=false;}}if(animatorJustifyOffset){animatorJustifyOffset+=animatorFirstCharOffset;}while(lastIndex<i){letters[lastIndex].animatorJustifyOffset=animatorJustifyOffset;lastIndex+=1;}}//
for(i=0;i<len;i+=1){matrixHelper.reset();elemOpacity=1;if(letters[i].n){xPos=0;yPos+=documentData.yOffset;yPos+=firstLine?1:0;currentLength=initPathPos;firstLine=false;if(this._hasMaskedPath){segmentInd=initSegmentInd;pointInd=initPointInd;points=segments[segmentInd].points;prevPoint=points[pointInd-1];currentPoint=points[pointInd];partialLength=currentPoint.partialLength;segmentLength=0;}letterM='';letterFc='';letterSw='';letterO='';letterP=this.defaultPropsArray;}else{if(this._hasMaskedPath){if(currentLine!==letters[i].line){switch(documentData.j){case 1:currentLength+=totalLength-documentData.lineWidths[letters[i].line];break;case 2:currentLength+=(totalLength-documentData.lineWidths[letters[i].line])/2;break;default:break;}currentLine=letters[i].line;}if(ind!==letters[i].ind){if(letters[ind]){currentLength+=letters[ind].extra;}currentLength+=letters[i].an/2;ind=letters[i].ind;}currentLength+=alignment[0]*letters[i].an*0.005;var animatorOffset=0;for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.p.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorOffset+=animatorProps.p.v[0]*mult[0];}else{animatorOffset+=animatorProps.p.v[0]*mult;}}if(animatorProps.a.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorOffset+=animatorProps.a.v[0]*mult[0];}else{animatorOffset+=animatorProps.a.v[0]*mult;}}}flag=true;while(flag){if(segmentLength+partialLength>=currentLength+animatorOffset||!points){perc=(currentLength+animatorOffset-segmentLength)/currentPoint.partialLength;xPathPos=prevPoint.point[0]+(currentPoint.point[0]-prevPoint.point[0])*perc;yPathPos=prevPoint.point[1]+(currentPoint.point[1]-prevPoint.point[1])*perc;matrixHelper.translate(-alignment[0]*letters[i].an*0.005,-(alignment[1]*yOff)*0.01);flag=false;}else if(points){segmentLength+=currentPoint.partialLength;pointInd+=1;if(pointInd>=points.length){pointInd=0;segmentInd+=1;if(!segments[segmentInd]){if(mask.v.c){pointInd=0;segmentInd=0;points=segments[segmentInd].points;}else{segmentLength-=currentPoint.partialLength;points=null;}}else{points=segments[segmentInd].points;}}if(points){prevPoint=currentPoint;currentPoint=points[pointInd];partialLength=currentPoint.partialLength;}}}offf=letters[i].an/2-letters[i].add;matrixHelper.translate(-offf,0,0);}else{offf=letters[i].an/2-letters[i].add;matrixHelper.translate(-offf,0,0);// Grouping alignment
matrixHelper.translate(-alignment[0]*letters[i].an*0.005,-alignment[1]*yOff*0.01,0);}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.t.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);// This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"
if(xPos!==0||documentData.j!==0){if(this._hasMaskedPath){if(mult.length){currentLength+=animatorProps.t.v*mult[0];}else{currentLength+=animatorProps.t.v*mult;}}else if(mult.length){xPos+=animatorProps.t.v*mult[0];}else{xPos+=animatorProps.t.v*mult;}}}}if(documentData.strokeWidthAnim){sw=documentData.sw||0;}if(documentData.strokeColorAnim){if(documentData.sc){sc=[documentData.sc[0],documentData.sc[1],documentData.sc[2]];}else{sc=[0,0,0];}}if(documentData.fillColorAnim&&documentData.fc){fc=[documentData.fc[0],documentData.fc[1],documentData.fc[2]];}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.a.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){matrixHelper.translate(-animatorProps.a.v[0]*mult[0],-animatorProps.a.v[1]*mult[1],animatorProps.a.v[2]*mult[2]);}else{matrixHelper.translate(-animatorProps.a.v[0]*mult,-animatorProps.a.v[1]*mult,animatorProps.a.v[2]*mult);}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.s.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){matrixHelper.scale(1+(animatorProps.s.v[0]-1)*mult[0],1+(animatorProps.s.v[1]-1)*mult[1],1);}else{matrixHelper.scale(1+(animatorProps.s.v[0]-1)*mult,1+(animatorProps.s.v[1]-1)*mult,1);}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(animatorProps.sk.propType){if(mult.length){matrixHelper.skewFromAxis(-animatorProps.sk.v*mult[0],animatorProps.sa.v*mult[1]);}else{matrixHelper.skewFromAxis(-animatorProps.sk.v*mult,animatorProps.sa.v*mult);}}if(animatorProps.r.propType){if(mult.length){matrixHelper.rotateZ(-animatorProps.r.v*mult[2]);}else{matrixHelper.rotateZ(-animatorProps.r.v*mult);}}if(animatorProps.ry.propType){if(mult.length){matrixHelper.rotateY(animatorProps.ry.v*mult[1]);}else{matrixHelper.rotateY(animatorProps.ry.v*mult);}}if(animatorProps.rx.propType){if(mult.length){matrixHelper.rotateX(animatorProps.rx.v*mult[0]);}else{matrixHelper.rotateX(animatorProps.rx.v*mult);}}if(animatorProps.o.propType){if(mult.length){elemOpacity+=(animatorProps.o.v*mult[0]-elemOpacity)*mult[0];}else{elemOpacity+=(animatorProps.o.v*mult-elemOpacity)*mult;}}if(documentData.strokeWidthAnim&&animatorProps.sw.propType){if(mult.length){sw+=animatorProps.sw.v*mult[0];}else{sw+=animatorProps.sw.v*mult;}}if(documentData.strokeColorAnim&&animatorProps.sc.propType){for(k=0;k<3;k+=1){if(mult.length){sc[k]+=(animatorProps.sc.v[k]-sc[k])*mult[0];}else{sc[k]+=(animatorProps.sc.v[k]-sc[k])*mult;}}}if(documentData.fillColorAnim&&documentData.fc){if(animatorProps.fc.propType){for(k=0;k<3;k+=1){if(mult.length){fc[k]+=(animatorProps.fc.v[k]-fc[k])*mult[0];}else{fc[k]+=(animatorProps.fc.v[k]-fc[k])*mult;}}}if(animatorProps.fh.propType){if(mult.length){fc=addHueToRGB(fc,animatorProps.fh.v*mult[0]);}else{fc=addHueToRGB(fc,animatorProps.fh.v*mult);}}if(animatorProps.fs.propType){if(mult.length){fc=addSaturationToRGB(fc,animatorProps.fs.v*mult[0]);}else{fc=addSaturationToRGB(fc,animatorProps.fs.v*mult);}}if(animatorProps.fb.propType){if(mult.length){fc=addBrightnessToRGB(fc,animatorProps.fb.v*mult[0]);}else{fc=addBrightnessToRGB(fc,animatorProps.fb.v*mult);}}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.p.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(this._hasMaskedPath){if(mult.length){matrixHelper.translate(0,animatorProps.p.v[1]*mult[0],-animatorProps.p.v[2]*mult[1]);}else{matrixHelper.translate(0,animatorProps.p.v[1]*mult,-animatorProps.p.v[2]*mult);}}else if(mult.length){matrixHelper.translate(animatorProps.p.v[0]*mult[0],animatorProps.p.v[1]*mult[1],-animatorProps.p.v[2]*mult[2]);}else{matrixHelper.translate(animatorProps.p.v[0]*mult,animatorProps.p.v[1]*mult,-animatorProps.p.v[2]*mult);}}}if(documentData.strokeWidthAnim){letterSw=sw<0?0:sw;}if(documentData.strokeColorAnim){letterSc='rgb('+Math.round(sc[0]*255)+','+Math.round(sc[1]*255)+','+Math.round(sc[2]*255)+')';}if(documentData.fillColorAnim&&documentData.fc){letterFc='rgb('+Math.round(fc[0]*255)+','+Math.round(fc[1]*255)+','+Math.round(fc[2]*255)+')';}if(this._hasMaskedPath){matrixHelper.translate(0,-documentData.ls);matrixHelper.translate(0,alignment[1]*yOff*0.01+yPos,0);if(textData.p.p){tanAngle=(currentPoint.point[1]-prevPoint.point[1])/(currentPoint.point[0]-prevPoint.point[0]);var rot=Math.atan(tanAngle)*180/Math.PI;if(currentPoint.point[0]<prevPoint.point[0]){rot+=180;}matrixHelper.rotate(-rot*Math.PI/180);}matrixHelper.translate(xPathPos,yPathPos,0);currentLength-=alignment[0]*letters[i].an*0.005;if(letters[i+1]&&ind!==letters[i+1].ind){currentLength+=letters[i].an/2;currentLength+=documentData.tr*0.001*documentData.finalSize;}}else{matrixHelper.translate(xPos,yPos,0);if(documentData.ps){// matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
matrixHelper.translate(documentData.ps[0],documentData.ps[1]+documentData.ascent,0);}switch(documentData.j){case 1:matrixHelper.translate(letters[i].animatorJustifyOffset+documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[letters[i].line]),0,0);break;case 2:matrixHelper.translate(letters[i].animatorJustifyOffset+documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[letters[i].line])/2,0,0);break;default:break;}matrixHelper.translate(0,-documentData.ls);matrixHelper.translate(offf,0,0);matrixHelper.translate(alignment[0]*letters[i].an*0.005,alignment[1]*yOff*0.01,0);xPos+=letters[i].l+documentData.tr*0.001*documentData.finalSize;}if(renderType==='html'){letterM=matrixHelper.toCSS();}else if(renderType==='svg'){letterM=matrixHelper.to2dCSS();}else{letterP=[matrixHelper.props[0],matrixHelper.props[1],matrixHelper.props[2],matrixHelper.props[3],matrixHelper.props[4],matrixHelper.props[5],matrixHelper.props[6],matrixHelper.props[7],matrixHelper.props[8],matrixHelper.props[9],matrixHelper.props[10],matrixHelper.props[11],matrixHelper.props[12],matrixHelper.props[13],matrixHelper.props[14],matrixHelper.props[15]];}letterO=elemOpacity;}if(renderedLettersCount<=i){letterValue=new LetterProps(letterO,letterSw,letterSc,letterFc,letterM,letterP);this.renderedLetters.push(letterValue);renderedLettersCount+=1;this.lettersChangedFlag=true;}else{letterValue=this.renderedLetters[i];this.lettersChangedFlag=letterValue.update(letterO,letterSw,letterSc,letterFc,letterM,letterP)||this.lettersChangedFlag;}}};TextAnimatorProperty.prototype.getValue=function(){if(this._elem.globalData.frameId===this._frameId){return;}this._frameId=this._elem.globalData.frameId;this.iterateDynamicProperties();};TextAnimatorProperty.prototype.mHelper=new Matrix();TextAnimatorProperty.prototype.defaultPropsArray=[];extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);/* global PropertyFactory, degToRads, TextSelectorProp */ /* exported TextAnimatorDataProperty */function TextAnimatorDataProperty(elem,animatorProps,container){var defaultData={propType:false};var getProp=PropertyFactory.getProp;var textAnimatorAnimatables=animatorProps.a;this.a={r:textAnimatorAnimatables.r?getProp(elem,textAnimatorAnimatables.r,0,degToRads,container):defaultData,rx:textAnimatorAnimatables.rx?getProp(elem,textAnimatorAnimatables.rx,0,degToRads,container):defaultData,ry:textAnimatorAnimatables.ry?getProp(elem,textAnimatorAnimatables.ry,0,degToRads,container):defaultData,sk:textAnimatorAnimatables.sk?getProp(elem,textAnimatorAnimatables.sk,0,degToRads,container):defaultData,sa:textAnimatorAnimatables.sa?getProp(elem,textAnimatorAnimatables.sa,0,degToRads,container):defaultData,s:textAnimatorAnimatables.s?getProp(elem,textAnimatorAnimatables.s,1,0.01,container):defaultData,a:textAnimatorAnimatables.a?getProp(elem,textAnimatorAnimatables.a,1,0,container):defaultData,o:textAnimatorAnimatables.o?getProp(elem,textAnimatorAnimatables.o,0,0.01,container):defaultData,p:textAnimatorAnimatables.p?getProp(elem,textAnimatorAnimatables.p,1,0,container):defaultData,sw:textAnimatorAnimatables.sw?getProp(elem,textAnimatorAnimatables.sw,0,0,container):defaultData,sc:textAnimatorAnimatables.sc?getProp(elem,textAnimatorAnimatables.sc,1,0,container):defaultData,fc:textAnimatorAnimatables.fc?getProp(elem,textAnimatorAnimatables.fc,1,0,container):defaultData,fh:textAnimatorAnimatables.fh?getProp(elem,textAnimatorAnimatables.fh,0,0,container):defaultData,fs:textAnimatorAnimatables.fs?getProp(elem,textAnimatorAnimatables.fs,0,0.01,container):defaultData,fb:textAnimatorAnimatables.fb?getProp(elem,textAnimatorAnimatables.fb,0,0.01,container):defaultData,t:textAnimatorAnimatables.t?getProp(elem,textAnimatorAnimatables.t,0,0,container):defaultData};this.s=TextSelectorProp.getTextSelectorProp(elem,animatorProps.s,container);this.s.t=animatorProps.s.t;}function LetterProps(o,sw,sc,fc,m,p){this.o=o;this.sw=sw;this.sc=sc;this.fc=fc;this.m=m;this.p=p;this._mdf={o:true,sw:!!sw,sc:!!sc,fc:!!fc,m:true,p:true};}LetterProps.prototype.update=function(o,sw,sc,fc,m,p){this._mdf.o=false;this._mdf.sw=false;this._mdf.sc=false;this._mdf.fc=false;this._mdf.m=false;this._mdf.p=false;var updated=false;if(this.o!==o){this.o=o;this._mdf.o=true;updated=true;}if(this.sw!==sw){this.sw=sw;this._mdf.sw=true;updated=true;}if(this.sc!==sc){this.sc=sc;this._mdf.sc=true;updated=true;}if(this.fc!==fc){this.fc=fc;this._mdf.fc=true;updated=true;}if(this.m!==m){this.m=m;this._mdf.m=true;updated=true;}if(p.length&&(this.p[0]!==p[0]||this.p[1]!==p[1]||this.p[4]!==p[4]||this.p[5]!==p[5]||this.p[12]!==p[12]||this.p[13]!==p[13])){this.p=p;this._mdf.p=true;updated=true;}return updated;};/* global FontManager, initialDefaultFrame, getFontProperties */ /* exported TextProperty */function TextProperty(elem,data){this._frameId=initialDefaultFrame;this.pv='';this.v='';this.kf=false;this._isFirstFrame=true;this._mdf=false;this.data=data;this.elem=elem;this.comp=this.elem.comp;this.keysIndex=0;this.canResize=false;this.minimumFontSize=1;this.effectsSequence=[];this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:'',fStyle:'',fWeight:'',fc:'',j:'',justifyOffset:'',l:[],lh:0,lineWidths:[],ls:'',of:'',s:'',sc:'',sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:false,strokeColorAnim:false,strokeWidthAnim:false,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:false};this.copyData(this.currentData,this.data.d.k[0].s);if(!this.searchProperty()){this.completeTextData(this.currentData);}}TextProperty.prototype.defaultBoxWidth=[0,0];TextProperty.prototype.copyData=function(obj,data){for(var s in data){if(Object.prototype.hasOwnProperty.call(data,s)){obj[s]=data[s];}}return obj;};TextProperty.prototype.setCurrentData=function(data){if(!data.__complete){this.completeTextData(data);}this.currentData=data;this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth;this._mdf=true;};TextProperty.prototype.searchProperty=function(){return this.searchKeyframes();};TextProperty.prototype.searchKeyframes=function(){this.kf=this.data.d.k.length>1;if(this.kf){this.addEffect(this.getKeyframeValue.bind(this));}return this.kf;};TextProperty.prototype.addEffect=function(effectFunction){this.effectsSequence.push(effectFunction);this.elem.addDynamicProperty(this);};TextProperty.prototype.getValue=function(_finalValue){if((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!_finalValue){return;}this.currentData.t=this.data.d.k[this.keysIndex].s.t;var currentValue=this.currentData;var currentIndex=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return;}this.lock=true;this._mdf=false;var i;var len=this.effectsSequence.length;var finalValue=_finalValue||this.data.d.k[this.keysIndex].s;for(i=0;i<len;i+=1){// Checking if index changed to prevent creating a new object every time the expression updates.
if(currentIndex!==this.keysIndex){finalValue=this.effectsSequence[i](finalValue,finalValue.t);}else{finalValue=this.effectsSequence[i](this.currentData,finalValue.t);}}if(currentValue!==finalValue){this.setCurrentData(finalValue);}this.v=this.currentData;this.pv=this.v;this.lock=false;this.frameId=this.elem.globalData.frameId;};TextProperty.prototype.getKeyframeValue=function(){var textKeys=this.data.d.k;var frameNum=this.elem.comp.renderedFrame;var i=0;var len=textKeys.length;while(i<=len-1){if(i===len-1||textKeys[i+1].t>frameNum){break;}i+=1;}if(this.keysIndex!==i){this.keysIndex=i;}return this.data.d.k[this.keysIndex].s;};TextProperty.prototype.buildFinalText=function(text){var combinedCharacters=FontManager.getCombinedCharacterCodes();var charactersArray=[];var i=0;var len=text.length;var charCode;while(i<len){charCode=text.charCodeAt(i);if(combinedCharacters.indexOf(charCode)!==-1){charactersArray[charactersArray.length-1]+=text.charAt(i);}else if(charCode>=0xD800&&charCode<=0xDBFF){charCode=text.charCodeAt(i+1);if(charCode>=0xDC00&&charCode<=0xDFFF){charactersArray.push(text.substr(i,2));i+=1;}else{charactersArray.push(text.charAt(i));}}else{charactersArray.push(text.charAt(i));}i+=1;}return charactersArray;};TextProperty.prototype.completeTextData=function(documentData){documentData.__complete=true;var fontManager=this.elem.globalData.fontManager;var data=this.data;var letters=[];var i;var len;var newLineFlag;var index=0;var val;var anchorGrouping=data.m.g;var currentSize=0;var currentPos=0;var currentLine=0;var lineWidths=[];var lineWidth=0;var maxLineWidth=0;var j;var jLen;var fontData=fontManager.getFontByName(documentData.f);var charData;var cLength=0;var fontProps=getFontProperties(fontData);documentData.fWeight=fontProps.weight;documentData.fStyle=fontProps.style;documentData.finalSize=documentData.s;documentData.finalText=this.buildFinalText(documentData.t);len=documentData.finalText.length;documentData.finalLineHeight=documentData.lh;var trackingOffset=documentData.tr/1000*documentData.finalSize;var charCode;if(documentData.sz){var flag=true;var boxWidth=documentData.sz[0];var boxHeight=documentData.sz[1];var currentHeight;var finalText;while(flag){finalText=this.buildFinalText(documentData.t);currentHeight=0;lineWidth=0;len=finalText.length;trackingOffset=documentData.tr/1000*documentData.finalSize;var lastSpaceIndex=-1;for(i=0;i<len;i+=1){charCode=finalText[i].charCodeAt(0);newLineFlag=false;if(finalText[i]===' '){lastSpaceIndex=i;}else if(charCode===13||charCode===3){lineWidth=0;newLineFlag=true;currentHeight+=documentData.finalLineHeight||documentData.finalSize*1.2;}if(fontManager.chars){charData=fontManager.getCharData(finalText[i],fontData.fStyle,fontData.fFamily);cLength=newLineFlag?0:charData.w*documentData.finalSize/100;}else{// tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
cLength=fontManager.measureText(finalText[i],documentData.f,documentData.finalSize);}if(lineWidth+cLength>boxWidth&&finalText[i]!==' '){if(lastSpaceIndex===-1){len+=1;}else{i=lastSpaceIndex;}currentHeight+=documentData.finalLineHeight||documentData.finalSize*1.2;finalText.splice(i,lastSpaceIndex===i?1:0,'\r');// finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);
lastSpaceIndex=-1;lineWidth=0;}else{lineWidth+=cLength;lineWidth+=trackingOffset;}}currentHeight+=fontData.ascent*documentData.finalSize/100;if(this.canResize&&documentData.finalSize>this.minimumFontSize&&boxHeight<currentHeight){documentData.finalSize-=1;documentData.finalLineHeight=documentData.finalSize*documentData.lh/documentData.s;}else{documentData.finalText=finalText;len=documentData.finalText.length;flag=false;}}}lineWidth=-trackingOffset;cLength=0;var uncollapsedSpaces=0;var currentChar;for(i=0;i<len;i+=1){newLineFlag=false;currentChar=documentData.finalText[i];charCode=currentChar.charCodeAt(0);if(charCode===13||charCode===3){uncollapsedSpaces=0;lineWidths.push(lineWidth);maxLineWidth=lineWidth>maxLineWidth?lineWidth:maxLineWidth;lineWidth=-2*trackingOffset;val='';newLineFlag=true;currentLine+=1;}else{val=currentChar;}if(fontManager.chars){charData=fontManager.getCharData(currentChar,fontData.fStyle,fontManager.getFontByName(documentData.f).fFamily);cLength=newLineFlag?0:charData.w*documentData.finalSize/100;}else{// var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
// tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
cLength=fontManager.measureText(val,documentData.f,documentData.finalSize);}//
if(currentChar===' '){uncollapsedSpaces+=cLength+trackingOffset;}else{lineWidth+=cLength+trackingOffset+uncollapsedSpaces;uncollapsedSpaces=0;}letters.push({l:cLength,an:cLength,add:currentSize,n:newLineFlag,anIndexes:[],val:val,line:currentLine,animatorJustifyOffset:0});if(anchorGrouping==2){// eslint-disable-line eqeqeq
currentSize+=cLength;if(val===''||val===' '||i===len-1){if(val===''||val===' '){currentSize-=cLength;}while(currentPos<=i){letters[currentPos].an=currentSize;letters[currentPos].ind=index;letters[currentPos].extra=cLength;currentPos+=1;}index+=1;currentSize=0;}}else if(anchorGrouping==3){// eslint-disable-line eqeqeq
currentSize+=cLength;if(val===''||i===len-1){if(val===''){currentSize-=cLength;}while(currentPos<=i){letters[currentPos].an=currentSize;letters[currentPos].ind=index;letters[currentPos].extra=cLength;currentPos+=1;}currentSize=0;index+=1;}}else{letters[index].ind=index;letters[index].extra=0;index+=1;}}documentData.l=letters;maxLineWidth=lineWidth>maxLineWidth?lineWidth:maxLineWidth;lineWidths.push(lineWidth);if(documentData.sz){documentData.boxWidth=documentData.sz[0];documentData.justifyOffset=0;}else{documentData.boxWidth=maxLineWidth;switch(documentData.j){case 1:documentData.justifyOffset=-documentData.boxWidth;break;case 2:documentData.justifyOffset=-documentData.boxWidth/2;break;default:documentData.justifyOffset=0;}}documentData.lineWidths=lineWidths;var animators=data.a;var animatorData;var letterData;jLen=animators.length;var based;var ind;var indexes=[];for(j=0;j<jLen;j+=1){animatorData=animators[j];if(animatorData.a.sc){documentData.strokeColorAnim=true;}if(animatorData.a.sw){documentData.strokeWidthAnim=true;}if(animatorData.a.fc||animatorData.a.fh||animatorData.a.fs||animatorData.a.fb){documentData.fillColorAnim=true;}ind=0;based=animatorData.s.b;for(i=0;i<len;i+=1){letterData=letters[i];letterData.anIndexes[j]=ind;if(based==1&&letterData.val!==''||based==2&&letterData.val!==''&&letterData.val!==' '||based==3&&(letterData.n||letterData.val==' '||i==len-1)||based==4&&(letterData.n||i==len-1)){// eslint-disable-line eqeqeq
if(animatorData.s.rn===1){indexes.push(ind);}ind+=1;}}data.a[j].s.totalChars=ind;var currentInd=-1;var newInd;if(animatorData.s.rn===1){for(i=0;i<len;i+=1){letterData=letters[i];if(currentInd!=letterData.anIndexes[j]){// eslint-disable-line eqeqeq
currentInd=letterData.anIndexes[j];newInd=indexes.splice(Math.floor(Math.random()*indexes.length),1)[0];}letterData.anIndexes[j]=newInd;}}}documentData.yOffset=documentData.finalLineHeight||documentData.finalSize*1.2;documentData.ls=documentData.ls||0;documentData.ascent=fontData.ascent*documentData.finalSize/100;};TextProperty.prototype.updateDocumentData=function(newData,index){index=index===undefined?this.keysIndex:index;var dData=this.copyData({},this.data.d.k[index].s);dData=this.copyData(dData,newData);this.data.d.k[index].s=dData;this.recalculate(index);this.elem.addDynamicProperty(this);};TextProperty.prototype.recalculate=function(index){var dData=this.data.d.k[index].s;dData.__complete=false;this.keysIndex=0;this._isFirstFrame=true;this.getValue(dData);};TextProperty.prototype.canResizeFont=function(_canResize){this.canResize=_canResize;this.recalculate(this.keysIndex);this.elem.addDynamicProperty(this);};TextProperty.prototype.setMinimumFontSize=function(_fontValue){this.minimumFontSize=Math.floor(_fontValue)||1;this.recalculate(this.keysIndex);this.elem.addDynamicProperty(this);};/* global extendPrototype, BezierFactory, PropertyFactory, DynamicPropertyContainer */ /* exported TextSelectorProp */var TextSelectorProp=function(){var max=Math.max;var min=Math.min;var floor=Math.floor;function TextSelectorPropFactory(elem,data){this._currentTextLength=-1;this.k=false;this.data=data;this.elem=elem;this.comp=elem.comp;this.finalS=0;this.finalE=0;this.initDynamicPropertyContainer(elem);this.s=PropertyFactory.getProp(elem,data.s||{k:0},0,0,this);if('e'in data){this.e=PropertyFactory.getProp(elem,data.e,0,0,this);}else{this.e={v:100};}this.o=PropertyFactory.getProp(elem,data.o||{k:0},0,0,this);this.xe=PropertyFactory.getProp(elem,data.xe||{k:0},0,0,this);this.ne=PropertyFactory.getProp(elem,data.ne||{k:0},0,0,this);this.a=PropertyFactory.getProp(elem,data.a,0,0.01,this);if(!this.dynamicProperties.length){this.getValue();}}TextSelectorPropFactory.prototype={getMult:function getMult(ind){if(this._currentTextLength!==this.elem.textProperty.currentData.l.length){this.getValue();}// var easer = bez.getEasingCurve(this.ne.v/100,0,1-this.xe.v/100,1);
var x1=0;var y1=0;var x2=1;var y2=1;if(this.ne.v>0){x1=this.ne.v/100.0;}else{y1=-this.ne.v/100.0;}if(this.xe.v>0){x2=1.0-this.xe.v/100.0;}else{y2=1.0+this.xe.v/100.0;}var easer=BezierFactory.getBezierEasing(x1,y1,x2,y2).get;var mult=0;var s=this.finalS;var e=this.finalE;var type=this.data.sh;if(type===2){if(e===s){mult=ind>=e?1:0;}else{mult=max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));}mult=easer(mult);}else if(type===3){if(e===s){mult=ind>=e?0:1;}else{mult=1-max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));}mult=easer(mult);}else if(type===4){if(e===s){mult=0;}else{mult=max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));if(mult<0.5){mult*=2;}else{mult=1-2*(mult-0.5);}}mult=easer(mult);}else if(type===5){if(e===s){mult=0;}else{var tot=e-s;/* ind += 0.5;
                    mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind; */ind=min(max(0,ind+0.5-s),e-s);var x=-tot/2+ind;var a=tot/2;mult=Math.sqrt(1-x*x/(a*a));}mult=easer(mult);}else if(type===6){if(e===s){mult=0;}else{ind=min(max(0,ind+0.5-s),e-s);mult=(1+Math.cos(Math.PI+Math.PI*2*ind/(e-s)))/2;// eslint-disable-line
}mult=easer(mult);}else{if(ind>=floor(s)){if(ind-s<0){mult=max(0,min(min(e,1)-(s-ind),1));}else{mult=max(0,min(e-ind,1));}}mult=easer(mult);}return mult*this.a.v;},getValue:function getValue(newCharsFlag){this.iterateDynamicProperties();this._mdf=newCharsFlag||this._mdf;this._currentTextLength=this.elem.textProperty.currentData.l.length||0;if(newCharsFlag&&this.data.r===2){this.e.v=this._currentTextLength;}var divisor=this.data.r===2?1:100/this.data.totalChars;var o=this.o.v/divisor;var s=this.s.v/divisor+o;var e=this.e.v/divisor+o;if(s>e){var _s=s;s=e;e=_s;}this.finalS=s;this.finalE=e;}};extendPrototype([DynamicPropertyContainer],TextSelectorPropFactory);function getTextSelectorProp(elem,data,arr){return new TextSelectorPropFactory(elem,data,arr);}return{getTextSelectorProp:getTextSelectorProp};}();/* global createSizedArray, pooling */ /* exported poolFactory */var poolFactory=function(){return function(initialLength,_create,_release){var _length=0;var _maxLength=initialLength;var pool=createSizedArray(_maxLength);var ob={newElement:newElement,release:release};function newElement(){var element;if(_length){_length-=1;element=pool[_length];}else{element=_create();}return element;}function release(element){if(_length===_maxLength){pool=pooling.double(pool);_maxLength*=2;}if(_release){_release(element);}pool[_length]=element;_length+=1;}return ob;};}();/* global createSizedArray */ /* exported pooling */var pooling=function(){function double(arr){return arr.concat(createSizedArray(arr.length));}return{double:double};}();/* global createTypedArray, poolFactory */ /* exported pointPool */var pointPool=function(){function create(){return createTypedArray('float32',2);}return poolFactory(8,create);}();/* global ShapePath, pointPool, poolFactory */ /* exported shapePool */var shapePool=function(){function create(){return new ShapePath();}function release(shapePath){var len=shapePath._length;var i;for(i=0;i<len;i+=1){pointPool.release(shapePath.v[i]);pointPool.release(shapePath.i[i]);pointPool.release(shapePath.o[i]);shapePath.v[i]=null;shapePath.i[i]=null;shapePath.o[i]=null;}shapePath._length=0;shapePath.c=false;}function clone(shape){var cloned=factory.newElement();var i;var len=shape._length===undefined?shape.v.length:shape._length;cloned.setLength(len);cloned.c=shape.c;for(i=0;i<len;i+=1){cloned.setTripleAt(shape.v[i][0],shape.v[i][1],shape.o[i][0],shape.o[i][1],shape.i[i][0],shape.i[i][1],i);}return cloned;}var factory=poolFactory(4,create,release);factory.clone=clone;return factory;}();/* global createSizedArray, ShapeCollection, shapePool, pooling */ /* exported shapeCollectionPool */var shapeCollectionPool=function(){var ob={newShapeCollection:newShapeCollection,release:release};var _length=0;var _maxLength=4;var pool=createSizedArray(_maxLength);function newShapeCollection(){var shapeCollection;if(_length){_length-=1;shapeCollection=pool[_length];}else{shapeCollection=new ShapeCollection();}return shapeCollection;}function release(shapeCollection){var i;var len=shapeCollection._length;for(i=0;i<len;i+=1){shapePool.release(shapeCollection.shapes[i]);}shapeCollection._length=0;if(_length===_maxLength){pool=pooling.double(pool);_maxLength*=2;}pool[_length]=shapeCollection;_length+=1;}return ob;}();/* global poolFactory, bezierLengthPool */ /* exported segmentsLengthPool */var segmentsLengthPool=function(){function create(){return{lengths:[],totalLength:0};}function release(element){var i;var len=element.lengths.length;for(i=0;i<len;i+=1){bezierLengthPool.release(element.lengths[i]);}element.lengths.length=0;}return poolFactory(8,create,release);}();/* global createTypedArray, defaultCurveSegments, poolFactory */ /* exported bezierLengthPool */var bezierLengthPool=function(){function create(){return{addedLength:0,percents:createTypedArray('float32',defaultCurveSegments),lengths:createTypedArray('float32',defaultCurveSegments)};}return poolFactory(8,create);}();/* exported markerParser */var markerParser=function(){function parsePayloadLines(payload){var lines=payload.split('\r\n');var keys={};var line;var keysCount=0;for(var i=0;i<lines.length;i+=1){line=lines[i].split(':');if(line.length===2){keys[line[0]]=line[1].trim();keysCount+=1;}}if(keysCount===0){throw new Error();}return keys;}return function(_markers){var markers=[];for(var i=0;i<_markers.length;i+=1){var _marker=_markers[i];var markerData={time:_marker.tm,duration:_marker.dr};try{markerData.payload=JSON.parse(_markers[i].cm);}catch(_){try{markerData.payload=parsePayloadLines(_markers[i].cm);}catch(__){markerData.payload={name:_markers[i]};}}markers.push(markerData);}return markers;};}();/* global AudioElement, FontManager */function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(num){var i;var len=this.layers.length;var data;this.completeLayers=true;for(i=len-1;i>=0;i-=1){if(!this.elements[i]){data=this.layers[i];if(data.ip-data.st<=num-this.layers[i].st&&data.op-data.st>num-this.layers[i].st){this.buildItem(i);}}this.completeLayers=this.elements[i]?this.completeLayers:false;}this.checkPendingElements();};BaseRenderer.prototype.createItem=function(layer){switch(layer.ty){case 2:return this.createImage(layer);case 0:return this.createComp(layer);case 1:return this.createSolid(layer);case 3:return this.createNull(layer);case 4:return this.createShape(layer);case 5:return this.createText(layer);case 6:return this.createAudio(layer);case 13:return this.createCamera(layer);default:return this.createNull(layer);}};BaseRenderer.prototype.createCamera=function(){throw new Error('You\'re using a 3d camera. Try the html renderer.');};BaseRenderer.prototype.createAudio=function(data){return new AudioElement(data,this.globalData,this);};BaseRenderer.prototype.buildAllItems=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){this.buildItem(i);}this.checkPendingElements();};BaseRenderer.prototype.includeLayers=function(newLayers){this.completeLayers=false;var i;var len=newLayers.length;var j;var jLen=this.layers.length;for(i=0;i<len;i+=1){j=0;while(j<jLen){if(this.layers[j].id===newLayers[i].id){this.layers[j]=newLayers[i];break;}j+=1;}}};BaseRenderer.prototype.setProjectInterface=function(pInterface){this.globalData.projectInterface=pInterface;};BaseRenderer.prototype.initItems=function(){if(!this.globalData.progressiveLoad){this.buildAllItems();}};BaseRenderer.prototype.buildElementParenting=function(element,parentName,hierarchy){var elements=this.elements;var layers=this.layers;var i=0;var len=layers.length;while(i<len){if(layers[i].ind==parentName){// eslint-disable-line eqeqeq
if(!elements[i]||elements[i]===true){this.buildItem(i);this.addPendingElement(element);}else{hierarchy.push(elements[i]);elements[i].setAsParent();if(layers[i].parent!==undefined){this.buildElementParenting(element,layers[i].parent,hierarchy);}else{element.setHierarchy(hierarchy);}}}i+=1;}};BaseRenderer.prototype.addPendingElement=function(element){this.pendingElements.push(element);};BaseRenderer.prototype.searchExtraCompositions=function(assets){var i;var len=assets.length;for(i=0;i<len;i+=1){if(assets[i].xt){var comp=this.createComp(assets[i]);comp.initExpressions();this.globalData.projectInterface.registerComposition(comp);}}};BaseRenderer.prototype.setupGlobalData=function(animData,fontsContainer){this.globalData.fontManager=new FontManager();this.globalData.fontManager.addChars(animData.chars);this.globalData.fontManager.addFonts(animData.fonts,fontsContainer);this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem);this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem);this.globalData.imageLoader=this.animationItem.imagePreloader;this.globalData.audioController=this.animationItem.audioController;this.globalData.frameId=0;this.globalData.frameRate=animData.fr;this.globalData.nm=animData.nm;this.globalData.compSize={w:animData.w,h:animData.h};};/* global createElementID, extendPrototype, BaseRenderer, NullElement, SVGShapeElement, SVGTextLottieElement,
IImageElement, SVGCompElement, ISolidElement, createNS, locationHref, createSizedArray, expressionsPlugin */function SVGRenderer(animationItem,config){this.animationItem=animationItem;this.layers=null;this.renderedFrame=-1;this.svgElement=createNS('svg');var ariaLabel='';if(config&&config.title){var titleElement=createNS('title');var titleId=createElementID();titleElement.setAttribute('id',titleId);titleElement.textContent=config.title;this.svgElement.appendChild(titleElement);ariaLabel+=titleId;}if(config&&config.description){var descElement=createNS('desc');var descId=createElementID();descElement.setAttribute('id',descId);descElement.textContent=config.description;this.svgElement.appendChild(descElement);ariaLabel+=' '+descId;}if(ariaLabel){this.svgElement.setAttribute('aria-labelledby',ariaLabel);}var defs=createNS('defs');this.svgElement.appendChild(defs);var maskElement=createNS('g');this.svgElement.appendChild(maskElement);this.layerElement=maskElement;this.renderConfig={preserveAspectRatio:config&&config.preserveAspectRatio||'xMidYMid meet',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',progressiveLoad:config&&config.progressiveLoad||false,hideOnTransparent:!(config&&config.hideOnTransparent===false),viewBoxOnly:config&&config.viewBoxOnly||false,viewBoxSize:config&&config.viewBoxSize||false,className:config&&config.className||'',id:config&&config.id||'',focusable:config&&config.focusable,filterSize:{width:config&&config.filterSize&&config.filterSize.width||'100%',height:config&&config.filterSize&&config.filterSize.height||'100%',x:config&&config.filterSize&&config.filterSize.x||'0%',y:config&&config.filterSize&&config.filterSize.y||'0%'}};this.globalData={_mdf:false,frameNum:-1,defs:defs,renderConfig:this.renderConfig};this.elements=[];this.pendingElements=[];this.destroyed=false;this.rendererType='svg';}extendPrototype([BaseRenderer],SVGRenderer);SVGRenderer.prototype.createNull=function(data){return new NullElement(data,this.globalData,this);};SVGRenderer.prototype.createShape=function(data){return new SVGShapeElement(data,this.globalData,this);};SVGRenderer.prototype.createText=function(data){return new SVGTextLottieElement(data,this.globalData,this);};SVGRenderer.prototype.createImage=function(data){return new IImageElement(data,this.globalData,this);};SVGRenderer.prototype.createComp=function(data){return new SVGCompElement(data,this.globalData,this);};SVGRenderer.prototype.createSolid=function(data){return new ISolidElement(data,this.globalData,this);};SVGRenderer.prototype.configAnimation=function(animData){this.svgElement.setAttribute('xmlns','http://www.w3.org/2000/svg');if(this.renderConfig.viewBoxSize){this.svgElement.setAttribute('viewBox',this.renderConfig.viewBoxSize);}else{this.svgElement.setAttribute('viewBox','0 0 '+animData.w+' '+animData.h);}if(!this.renderConfig.viewBoxOnly){this.svgElement.setAttribute('width',animData.w);this.svgElement.setAttribute('height',animData.h);this.svgElement.style.width='100%';this.svgElement.style.height='100%';this.svgElement.style.transform='translate3d(0,0,0)';}if(this.renderConfig.className){this.svgElement.setAttribute('class',this.renderConfig.className);}if(this.renderConfig.id){this.svgElement.setAttribute('id',this.renderConfig.id);}if(this.renderConfig.focusable!==undefined){this.svgElement.setAttribute('focusable',this.renderConfig.focusable);}this.svgElement.setAttribute('preserveAspectRatio',this.renderConfig.preserveAspectRatio);// this.layerElement.style.transform = 'translate3d(0,0,0)';
// this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";
this.animationItem.wrapper.appendChild(this.svgElement);// Mask animation
var defs=this.globalData.defs;this.setupGlobalData(animData,defs);this.globalData.progressiveLoad=this.renderConfig.progressiveLoad;this.data=animData;var maskElement=createNS('clipPath');var rect=createNS('rect');rect.setAttribute('width',animData.w);rect.setAttribute('height',animData.h);rect.setAttribute('x',0);rect.setAttribute('y',0);var maskId=createElementID();maskElement.setAttribute('id',maskId);maskElement.appendChild(rect);this.layerElement.setAttribute('clip-path','url('+locationHref+'#'+maskId+')');defs.appendChild(maskElement);this.layers=animData.layers;this.elements=createSizedArray(animData.layers.length);};SVGRenderer.prototype.destroy=function(){if(this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}this.layerElement=null;this.globalData.defs=null;var i;var len=this.layers?this.layers.length:0;for(i=0;i<len;i+=1){if(this.elements[i]){this.elements[i].destroy();}}this.elements.length=0;this.destroyed=true;this.animationItem=null;};SVGRenderer.prototype.updateContainerSize=function(){};SVGRenderer.prototype.buildItem=function(pos){var elements=this.elements;if(elements[pos]||this.layers[pos].ty===99){return;}elements[pos]=true;var element=this.createItem(this.layers[pos]);elements[pos]=element;if(expressionsPlugin){if(this.layers[pos].ty===0){this.globalData.projectInterface.registerComposition(element);}element.initExpressions();}this.appendElementInPos(element,pos);if(this.layers[pos].tt){if(!this.elements[pos-1]||this.elements[pos-1]===true){this.buildItem(pos-1);this.addPendingElement(element);}else{element.setMatte(elements[pos-1].layerId);}}};SVGRenderer.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();if(element.data.tt){var i=0;var len=this.elements.length;while(i<len){if(this.elements[i]===element){element.setMatte(this.elements[i-1].layerId);break;}i+=1;}}}};SVGRenderer.prototype.renderFrame=function(num){if(this.renderedFrame===num||this.destroyed){return;}if(num===null){num=this.renderedFrame;}else{this.renderedFrame=num;}// console.log('-------');
// console.log('FRAME ',num);
this.globalData.frameNum=num;this.globalData.frameId+=1;this.globalData.projectInterface.currentFrame=num;this.globalData._mdf=false;var i;var len=this.layers.length;if(!this.completeLayers){this.checkLayers(num);}for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(num-this.layers[i].st);}}if(this.globalData._mdf){for(i=0;i<len;i+=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}}};SVGRenderer.prototype.appendElementInPos=function(element,pos){var newElement=element.getBaseElement();if(!newElement){return;}var i=0;var nextElement;while(i<pos){if(this.elements[i]&&this.elements[i]!==true&&this.elements[i].getBaseElement()){nextElement=this.elements[i].getBaseElement();}i+=1;}if(nextElement){this.layerElement.insertBefore(newElement,nextElement);}else{this.layerElement.appendChild(newElement);}};SVGRenderer.prototype.hide=function(){this.layerElement.style.display='none';};SVGRenderer.prototype.show=function(){this.layerElement.style.display='block';};/* global CVContextData, Matrix, extendPrototype, BaseRenderer, CVShapeElement, CVTextElement,
CVImageElement, CVCompElement, CVSolidElement, SVGRenderer, createTag, createSizedArray */function CanvasRenderer(animationItem,config){this.animationItem=animationItem;this.renderConfig={clearCanvas:config&&config.clearCanvas!==undefined?config.clearCanvas:true,context:config&&config.context||null,progressiveLoad:config&&config.progressiveLoad||false,preserveAspectRatio:config&&config.preserveAspectRatio||'xMidYMid meet',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',className:config&&config.className||'',id:config&&config.id||''};this.renderConfig.dpr=config&&config.dpr||1;if(this.animationItem.wrapper){this.renderConfig.dpr=config&&config.dpr||window.devicePixelRatio||1;}this.renderedFrame=-1;this.globalData={frameNum:-1,_mdf:false,renderConfig:this.renderConfig,currentGlobalAlpha:-1};this.contextData=new CVContextData();this.elements=[];this.pendingElements=[];this.transformMat=new Matrix();this.completeLayers=false;this.rendererType='canvas';}extendPrototype([BaseRenderer],CanvasRenderer);CanvasRenderer.prototype.createShape=function(data){return new CVShapeElement(data,this.globalData,this);};CanvasRenderer.prototype.createText=function(data){return new CVTextElement(data,this.globalData,this);};CanvasRenderer.prototype.createImage=function(data){return new CVImageElement(data,this.globalData,this);};CanvasRenderer.prototype.createComp=function(data){return new CVCompElement(data,this.globalData,this);};CanvasRenderer.prototype.createSolid=function(data){return new CVSolidElement(data,this.globalData,this);};CanvasRenderer.prototype.createNull=SVGRenderer.prototype.createNull;CanvasRenderer.prototype.ctxTransform=function(props){if(props[0]===1&&props[1]===0&&props[4]===0&&props[5]===1&&props[12]===0&&props[13]===0){return;}if(!this.renderConfig.clearCanvas){this.canvasContext.transform(props[0],props[1],props[4],props[5],props[12],props[13]);return;}this.transformMat.cloneFromProps(props);var cProps=this.contextData.cTr.props;this.transformMat.transform(cProps[0],cProps[1],cProps[2],cProps[3],cProps[4],cProps[5],cProps[6],cProps[7],cProps[8],cProps[9],cProps[10],cProps[11],cProps[12],cProps[13],cProps[14],cProps[15]);// this.contextData.cTr.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
this.contextData.cTr.cloneFromProps(this.transformMat.props);var trProps=this.contextData.cTr.props;this.canvasContext.setTransform(trProps[0],trProps[1],trProps[4],trProps[5],trProps[12],trProps[13]);};CanvasRenderer.prototype.ctxOpacity=function(op){/* if(op === 1){
        return;
    } */if(!this.renderConfig.clearCanvas){this.canvasContext.globalAlpha*=op<0?0:op;this.globalData.currentGlobalAlpha=this.contextData.cO;return;}this.contextData.cO*=op<0?0:op;if(this.globalData.currentGlobalAlpha!==this.contextData.cO){this.canvasContext.globalAlpha=this.contextData.cO;this.globalData.currentGlobalAlpha=this.contextData.cO;}};CanvasRenderer.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return;}this.contextData.reset();};CanvasRenderer.prototype.save=function(actionFlag){if(!this.renderConfig.clearCanvas){this.canvasContext.save();return;}if(actionFlag){this.canvasContext.save();}var props=this.contextData.cTr.props;if(this.contextData._length<=this.contextData.cArrPos){this.contextData.duplicate();}var i;var arr=this.contextData.saved[this.contextData.cArrPos];for(i=0;i<16;i+=1){arr[i]=props[i];}this.contextData.savedOp[this.contextData.cArrPos]=this.contextData.cO;this.contextData.cArrPos+=1;};CanvasRenderer.prototype.restore=function(actionFlag){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return;}if(actionFlag){this.canvasContext.restore();this.globalData.blendMode='source-over';}this.contextData.cArrPos-=1;var popped=this.contextData.saved[this.contextData.cArrPos];var i;var arr=this.contextData.cTr.props;for(i=0;i<16;i+=1){arr[i]=popped[i];}this.canvasContext.setTransform(popped[0],popped[1],popped[4],popped[5],popped[12],popped[13]);popped=this.contextData.savedOp[this.contextData.cArrPos];this.contextData.cO=popped;if(this.globalData.currentGlobalAlpha!==popped){this.canvasContext.globalAlpha=popped;this.globalData.currentGlobalAlpha=popped;}};CanvasRenderer.prototype.configAnimation=function(animData){if(this.animationItem.wrapper){this.animationItem.container=createTag('canvas');var containerStyle=this.animationItem.container.style;containerStyle.width='100%';containerStyle.height='100%';var origin='0px 0px 0px';containerStyle.transformOrigin=origin;containerStyle.mozTransformOrigin=origin;containerStyle.webkitTransformOrigin=origin;containerStyle['-webkit-transform']=origin;this.animationItem.wrapper.appendChild(this.animationItem.container);this.canvasContext=this.animationItem.container.getContext('2d');if(this.renderConfig.className){this.animationItem.container.setAttribute('class',this.renderConfig.className);}if(this.renderConfig.id){this.animationItem.container.setAttribute('id',this.renderConfig.id);}}else{this.canvasContext=this.renderConfig.context;}this.data=animData;this.layers=animData.layers;this.transformCanvas={w:animData.w,h:animData.h,sx:0,sy:0,tx:0,ty:0};this.setupGlobalData(animData,document.body);this.globalData.canvasContext=this.canvasContext;this.globalData.renderer=this;this.globalData.isDashed=false;this.globalData.progressiveLoad=this.renderConfig.progressiveLoad;this.globalData.transformCanvas=this.transformCanvas;this.elements=createSizedArray(animData.layers.length);this.updateContainerSize();};CanvasRenderer.prototype.updateContainerSize=function(){this.reset();var elementWidth;var elementHeight;if(this.animationItem.wrapper&&this.animationItem.container){elementWidth=this.animationItem.wrapper.offsetWidth;elementHeight=this.animationItem.wrapper.offsetHeight;this.animationItem.container.setAttribute('width',elementWidth*this.renderConfig.dpr);this.animationItem.container.setAttribute('height',elementHeight*this.renderConfig.dpr);}else{elementWidth=this.canvasContext.canvas.width*this.renderConfig.dpr;elementHeight=this.canvasContext.canvas.height*this.renderConfig.dpr;}var elementRel;var animationRel;if(this.renderConfig.preserveAspectRatio.indexOf('meet')!==-1||this.renderConfig.preserveAspectRatio.indexOf('slice')!==-1){var par=this.renderConfig.preserveAspectRatio.split(' ');var fillType=par[1]||'meet';var pos=par[0]||'xMidYMid';var xPos=pos.substr(0,4);var yPos=pos.substr(4);elementRel=elementWidth/elementHeight;animationRel=this.transformCanvas.w/this.transformCanvas.h;if(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice'){this.transformCanvas.sx=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);this.transformCanvas.sy=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);}else{this.transformCanvas.sx=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);this.transformCanvas.sy=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);}if(xPos==='xMid'&&(animationRel<elementRel&&fillType==='meet'||animationRel>elementRel&&fillType==='slice')){this.transformCanvas.tx=(elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))/2*this.renderConfig.dpr;}else if(xPos==='xMax'&&(animationRel<elementRel&&fillType==='meet'||animationRel>elementRel&&fillType==='slice')){this.transformCanvas.tx=(elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))*this.renderConfig.dpr;}else{this.transformCanvas.tx=0;}if(yPos==='YMid'&&(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice')){this.transformCanvas.ty=(elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))/2*this.renderConfig.dpr;}else if(yPos==='YMax'&&(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice')){this.transformCanvas.ty=(elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))*this.renderConfig.dpr;}else{this.transformCanvas.ty=0;}}else if(this.renderConfig.preserveAspectRatio==='none'){this.transformCanvas.sx=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);this.transformCanvas.sy=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);this.transformCanvas.tx=0;this.transformCanvas.ty=0;}else{this.transformCanvas.sx=this.renderConfig.dpr;this.transformCanvas.sy=this.renderConfig.dpr;this.transformCanvas.tx=0;this.transformCanvas.ty=0;}this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1];/* var i, len = this.elements.length;
    for(i=0;i<len;i+=1){
        if(this.elements[i] && this.elements[i].data.ty === 0){
            this.elements[i].resize(this.globalData.transformCanvas);
        }
    } */this.ctxTransform(this.transformCanvas.props);this.canvasContext.beginPath();this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h);this.canvasContext.closePath();this.canvasContext.clip();this.renderFrame(this.renderedFrame,true);};CanvasRenderer.prototype.destroy=function(){if(this.renderConfig.clearCanvas&&this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}var i;var len=this.layers?this.layers.length:0;for(i=len-1;i>=0;i-=1){if(this.elements[i]){this.elements[i].destroy();}}this.elements.length=0;this.globalData.canvasContext=null;this.animationItem.container=null;this.destroyed=true;};CanvasRenderer.prototype.renderFrame=function(num,forceRender){if(this.renderedFrame===num&&this.renderConfig.clearCanvas===true&&!forceRender||this.destroyed||num===-1){return;}this.renderedFrame=num;this.globalData.frameNum=num-this.animationItem._isFirstFrame;this.globalData.frameId+=1;this.globalData._mdf=!this.renderConfig.clearCanvas||forceRender;this.globalData.projectInterface.currentFrame=num;// console.log('--------');
// console.log('NEW: ',num);
var i;var len=this.layers.length;if(!this.completeLayers){this.checkLayers(num);}for(i=0;i<len;i+=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(num-this.layers[i].st);}}if(this.globalData._mdf){if(this.renderConfig.clearCanvas===true){this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h);}else{this.save();}for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}if(this.renderConfig.clearCanvas!==true){this.restore();}}};CanvasRenderer.prototype.buildItem=function(pos){var elements=this.elements;if(elements[pos]||this.layers[pos].ty===99){return;}var element=this.createItem(this.layers[pos],this,this.globalData);elements[pos]=element;element.initExpressions();/* if(this.layers[pos].ty === 0){
        element.resize(this.globalData.transformCanvas);
    } */};CanvasRenderer.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();}};CanvasRenderer.prototype.hide=function(){this.animationItem.container.style.display='none';};CanvasRenderer.prototype.show=function(){this.animationItem.container.style.display='block';};/* global extendPrototype, BaseRenderer, SVGRenderer, SVGShapeElement, HShapeElement, SVGTextLottieElement,
HTextElement, HCameraElement, IImageElement, HImageElement, SVGCompElement, HCompElement, ISolidElement,
HSolidElement, styleDiv, createTag, createNS */function HybridRenderer(animationItem,config){this.animationItem=animationItem;this.layers=null;this.renderedFrame=-1;this.renderConfig={className:config&&config.className||'',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',hideOnTransparent:!(config&&config.hideOnTransparent===false),filterSize:{width:config&&config.filterSize&&config.filterSize.width||'400%',height:config&&config.filterSize&&config.filterSize.height||'400%',x:config&&config.filterSize&&config.filterSize.x||'-100%',y:config&&config.filterSize&&config.filterSize.y||'-100%'}};this.globalData={_mdf:false,frameNum:-1,renderConfig:this.renderConfig};this.pendingElements=[];this.elements=[];this.threeDElements=[];this.destroyed=false;this.camera=null;this.supports3d=true;this.rendererType='html';}extendPrototype([BaseRenderer],HybridRenderer);HybridRenderer.prototype.buildItem=SVGRenderer.prototype.buildItem;HybridRenderer.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();}};HybridRenderer.prototype.appendElementInPos=function(element,pos){var newDOMElement=element.getBaseElement();if(!newDOMElement){return;}var layer=this.layers[pos];if(!layer.ddd||!this.supports3d){if(this.threeDElements){this.addTo3dContainer(newDOMElement,pos);}else{var i=0;var nextDOMElement;var nextLayer;var tmpDOMElement;while(i<pos){if(this.elements[i]&&this.elements[i]!==true&&this.elements[i].getBaseElement){nextLayer=this.elements[i];tmpDOMElement=this.layers[i].ddd?this.getThreeDContainerByPos(i):nextLayer.getBaseElement();nextDOMElement=tmpDOMElement||nextDOMElement;}i+=1;}if(nextDOMElement){if(!layer.ddd||!this.supports3d){this.layerElement.insertBefore(newDOMElement,nextDOMElement);}}else if(!layer.ddd||!this.supports3d){this.layerElement.appendChild(newDOMElement);}}}else{this.addTo3dContainer(newDOMElement,pos);}};HybridRenderer.prototype.createShape=function(data){if(!this.supports3d){return new SVGShapeElement(data,this.globalData,this);}return new HShapeElement(data,this.globalData,this);};HybridRenderer.prototype.createText=function(data){if(!this.supports3d){return new SVGTextLottieElement(data,this.globalData,this);}return new HTextElement(data,this.globalData,this);};HybridRenderer.prototype.createCamera=function(data){this.camera=new HCameraElement(data,this.globalData,this);return this.camera;};HybridRenderer.prototype.createImage=function(data){if(!this.supports3d){return new IImageElement(data,this.globalData,this);}return new HImageElement(data,this.globalData,this);};HybridRenderer.prototype.createComp=function(data){if(!this.supports3d){return new SVGCompElement(data,this.globalData,this);}return new HCompElement(data,this.globalData,this);};HybridRenderer.prototype.createSolid=function(data){if(!this.supports3d){return new ISolidElement(data,this.globalData,this);}return new HSolidElement(data,this.globalData,this);};HybridRenderer.prototype.createNull=SVGRenderer.prototype.createNull;HybridRenderer.prototype.getThreeDContainerByPos=function(pos){var i=0;var len=this.threeDElements.length;while(i<len){if(this.threeDElements[i].startPos<=pos&&this.threeDElements[i].endPos>=pos){return this.threeDElements[i].perspectiveElem;}i+=1;}return null;};HybridRenderer.prototype.createThreeDContainer=function(pos,type){var perspectiveElem=createTag('div');var style;var containerStyle;styleDiv(perspectiveElem);var container=createTag('div');styleDiv(container);if(type==='3d'){style=perspectiveElem.style;style.width=this.globalData.compSize.w+'px';style.height=this.globalData.compSize.h+'px';var center='50% 50%';style.webkitTransformOrigin=center;style.mozTransformOrigin=center;style.transformOrigin=center;containerStyle=container.style;var matrix='matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';containerStyle.transform=matrix;containerStyle.webkitTransform=matrix;}perspectiveElem.appendChild(container);// this.resizerElem.appendChild(perspectiveElem);
var threeDContainerData={container:container,perspectiveElem:perspectiveElem,startPos:pos,endPos:pos,type:type};this.threeDElements.push(threeDContainerData);return threeDContainerData;};HybridRenderer.prototype.build3dContainers=function(){var i;var len=this.layers.length;var lastThreeDContainerData;var currentContainer='';for(i=0;i<len;i+=1){if(this.layers[i].ddd&&this.layers[i].ty!==3){if(currentContainer!=='3d'){currentContainer='3d';lastThreeDContainerData=this.createThreeDContainer(i,'3d');}lastThreeDContainerData.endPos=Math.max(lastThreeDContainerData.endPos,i);}else{if(currentContainer!=='2d'){currentContainer='2d';lastThreeDContainerData=this.createThreeDContainer(i,'2d');}lastThreeDContainerData.endPos=Math.max(lastThreeDContainerData.endPos,i);}}len=this.threeDElements.length;for(i=len-1;i>=0;i-=1){this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);}};HybridRenderer.prototype.addTo3dContainer=function(elem,pos){var i=0;var len=this.threeDElements.length;while(i<len){if(pos<=this.threeDElements[i].endPos){var j=this.threeDElements[i].startPos;var nextElement;while(j<pos){if(this.elements[j]&&this.elements[j].getBaseElement){nextElement=this.elements[j].getBaseElement();}j+=1;}if(nextElement){this.threeDElements[i].container.insertBefore(elem,nextElement);}else{this.threeDElements[i].container.appendChild(elem);}break;}i+=1;}};HybridRenderer.prototype.configAnimation=function(animData){var resizerElem=createTag('div');var wrapper=this.animationItem.wrapper;var style=resizerElem.style;style.width=animData.w+'px';style.height=animData.h+'px';this.resizerElem=resizerElem;styleDiv(resizerElem);style.transformStyle='flat';style.mozTransformStyle='flat';style.webkitTransformStyle='flat';if(this.renderConfig.className){resizerElem.setAttribute('class',this.renderConfig.className);}wrapper.appendChild(resizerElem);style.overflow='hidden';var svg=createNS('svg');svg.setAttribute('width','1');svg.setAttribute('height','1');styleDiv(svg);this.resizerElem.appendChild(svg);var defs=createNS('defs');svg.appendChild(defs);this.data=animData;// Mask animation
this.setupGlobalData(animData,svg);this.globalData.defs=defs;this.layers=animData.layers;this.layerElement=this.resizerElem;this.build3dContainers();this.updateContainerSize();};HybridRenderer.prototype.destroy=function(){if(this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}this.animationItem.container=null;this.globalData.defs=null;var i;var len=this.layers?this.layers.length:0;for(i=0;i<len;i+=1){this.elements[i].destroy();}this.elements.length=0;this.destroyed=true;this.animationItem=null;};HybridRenderer.prototype.updateContainerSize=function(){var elementWidth=this.animationItem.wrapper.offsetWidth;var elementHeight=this.animationItem.wrapper.offsetHeight;var elementRel=elementWidth/elementHeight;var animationRel=this.globalData.compSize.w/this.globalData.compSize.h;var sx;var sy;var tx;var ty;if(animationRel>elementRel){sx=elementWidth/this.globalData.compSize.w;sy=elementWidth/this.globalData.compSize.w;tx=0;ty=(elementHeight-this.globalData.compSize.h*(elementWidth/this.globalData.compSize.w))/2;}else{sx=elementHeight/this.globalData.compSize.h;sy=elementHeight/this.globalData.compSize.h;tx=(elementWidth-this.globalData.compSize.w*(elementHeight/this.globalData.compSize.h))/2;ty=0;}var style=this.resizerElem.style;style.webkitTransform='matrix3d('+sx+',0,0,0,0,'+sy+',0,0,0,0,1,0,'+tx+','+ty+',0,1)';style.transform=style.webkitTransform;};HybridRenderer.prototype.renderFrame=SVGRenderer.prototype.renderFrame;HybridRenderer.prototype.hide=function(){this.resizerElem.style.display='none';};HybridRenderer.prototype.show=function(){this.resizerElem.style.display='block';};HybridRenderer.prototype.initItems=function(){this.buildAllItems();if(this.camera){this.camera.setup();}else{var cWidth=this.globalData.compSize.w;var cHeight=this.globalData.compSize.h;var i;var len=this.threeDElements.length;for(i=0;i<len;i+=1){var style=this.threeDElements[i].perspectiveElem.style;style.webkitPerspective=Math.sqrt(Math.pow(cWidth,2)+Math.pow(cHeight,2))+'px';style.perspective=style.webkitPerspective;}}};HybridRenderer.prototype.searchExtraCompositions=function(assets){var i;var len=assets.length;var floatingContainer=createTag('div');for(i=0;i<len;i+=1){if(assets[i].xt){var comp=this.createComp(assets[i],floatingContainer,this.globalData.comp,null);comp.initExpressions();this.globalData.projectInterface.registerComposition(comp);}}};/* global createSizedArray, createElementID, PropertyFactory, ShapePropertyFactory, createNS, locationHref */function MaskElement(data,element,globalData){this.data=data;this.element=element;this.globalData=globalData;this.storedData=[];this.masksProperties=this.data.masksProperties||[];this.maskElement=null;var defs=this.globalData.defs;var i;var len=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(len);this.solidPath='';var path;var properties=this.masksProperties;var count=0;var currentMasks=[];var j;var jLen;var layerId=createElementID();var rect;var expansor;var feMorph;var x;var maskType='clipPath';var maskRef='clip-path';for(i=0;i<len;i+=1){if(properties[i].mode!=='a'&&properties[i].mode!=='n'||properties[i].inv||properties[i].o.k!==100||properties[i].o.x){maskType='mask';maskRef='mask';}if((properties[i].mode==='s'||properties[i].mode==='i')&&count===0){rect=createNS('rect');rect.setAttribute('fill','#ffffff');rect.setAttribute('width',this.element.comp.data.w||0);rect.setAttribute('height',this.element.comp.data.h||0);currentMasks.push(rect);}else{rect=null;}path=createNS('path');if(properties[i].mode==='n'){// TODO move this to a factory or to a constructor
this.viewData[i]={op:PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),elem:path,lastPath:''};defs.appendChild(path);}else{count+=1;path.setAttribute('fill',properties[i].mode==='s'?'#000000':'#ffffff');path.setAttribute('clip-rule','nonzero');var filterID;if(properties[i].x.k!==0){maskType='mask';maskRef='mask';x=PropertyFactory.getProp(this.element,properties[i].x,0,null,this.element);filterID=createElementID();expansor=createNS('filter');expansor.setAttribute('id',filterID);feMorph=createNS('feMorphology');feMorph.setAttribute('operator','erode');feMorph.setAttribute('in','SourceGraphic');feMorph.setAttribute('radius','0');expansor.appendChild(feMorph);defs.appendChild(expansor);path.setAttribute('stroke',properties[i].mode==='s'?'#000000':'#ffffff');}else{feMorph=null;x=null;}// TODO move this to a factory or to a constructor
this.storedData[i]={elem:path,x:x,expan:feMorph,lastPath:'',lastOperator:'',filterId:filterID,lastRadius:0};if(properties[i].mode==='i'){jLen=currentMasks.length;var g=createNS('g');for(j=0;j<jLen;j+=1){g.appendChild(currentMasks[j]);}var mask=createNS('mask');mask.setAttribute('mask-type','alpha');mask.setAttribute('id',layerId+'_'+count);mask.appendChild(path);defs.appendChild(mask);g.setAttribute('mask','url('+locationHref+'#'+layerId+'_'+count+')');currentMasks.length=0;currentMasks.push(g);}else{currentMasks.push(path);}if(properties[i].inv&&!this.solidPath){this.solidPath=this.createLayerSolidPath();}// TODO move this to a factory or to a constructor
this.viewData[i]={elem:path,lastPath:'',op:PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),invRect:rect};if(!this.viewData[i].prop.k){this.drawPath(properties[i],this.viewData[i].prop.v,this.viewData[i]);}}}this.maskElement=createNS(maskType);len=currentMasks.length;for(i=0;i<len;i+=1){this.maskElement.appendChild(currentMasks[i]);}if(count>0){this.maskElement.setAttribute('id',layerId);this.element.maskedElement.setAttribute(maskRef,'url('+locationHref+'#'+layerId+')');defs.appendChild(this.maskElement);}if(this.viewData.length){this.element.addRenderableComponent(this);}}MaskElement.prototype.getMaskProperty=function(pos){return this.viewData[pos].prop;};MaskElement.prototype.renderFrame=function(isFirstFrame){var finalMat=this.element.finalTransform.mat;var i;var len=this.masksProperties.length;for(i=0;i<len;i+=1){if(this.viewData[i].prop._mdf||isFirstFrame){this.drawPath(this.masksProperties[i],this.viewData[i].prop.v,this.viewData[i]);}if(this.viewData[i].op._mdf||isFirstFrame){this.viewData[i].elem.setAttribute('fill-opacity',this.viewData[i].op.v);}if(this.masksProperties[i].mode!=='n'){if(this.viewData[i].invRect&&(this.element.finalTransform.mProp._mdf||isFirstFrame)){this.viewData[i].invRect.setAttribute('transform',finalMat.getInverseMatrix().to2dCSS());}if(this.storedData[i].x&&(this.storedData[i].x._mdf||isFirstFrame)){var feMorph=this.storedData[i].expan;if(this.storedData[i].x.v<0){if(this.storedData[i].lastOperator!=='erode'){this.storedData[i].lastOperator='erode';this.storedData[i].elem.setAttribute('filter','url('+locationHref+'#'+this.storedData[i].filterId+')');}feMorph.setAttribute('radius',-this.storedData[i].x.v);}else{if(this.storedData[i].lastOperator!=='dilate'){this.storedData[i].lastOperator='dilate';this.storedData[i].elem.setAttribute('filter',null);}this.storedData[i].elem.setAttribute('stroke-width',this.storedData[i].x.v*2);}}}}};MaskElement.prototype.getMaskelement=function(){return this.maskElement;};MaskElement.prototype.createLayerSolidPath=function(){var path='M0,0 ';path+=' h'+this.globalData.compSize.w;path+=' v'+this.globalData.compSize.h;path+=' h-'+this.globalData.compSize.w;path+=' v-'+this.globalData.compSize.h+' ';return path;};MaskElement.prototype.drawPath=function(pathData,pathNodes,viewData){var pathString=' M'+pathNodes.v[0][0]+','+pathNodes.v[0][1];var i;var len;len=pathNodes._length;for(i=1;i<len;i+=1){// pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
pathString+=' C'+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1]+' '+pathNodes.i[i][0]+','+pathNodes.i[i][1]+' '+pathNodes.v[i][0]+','+pathNodes.v[i][1];}// pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
if(pathNodes.c&&len>1){pathString+=' C'+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1]+' '+pathNodes.i[0][0]+','+pathNodes.i[0][1]+' '+pathNodes.v[0][0]+','+pathNodes.v[0][1];}// pathNodes.__renderedString = pathString;
if(viewData.lastPath!==pathString){var pathShapeValue='';if(viewData.elem){if(pathNodes.c){pathShapeValue=pathData.inv?this.solidPath+pathString:pathString;}viewData.elem.setAttribute('d',pathShapeValue);}viewData.lastPath=pathString;}};MaskElement.prototype.destroy=function(){this.element=null;this.globalData=null;this.maskElement=null;this.data=null;this.masksProperties=null;};/**
 * @file
 * Handles AE's layer parenting property.
 *
 */function HierarchyElement(){}HierarchyElement.prototype={/**
     * @function
     * Initializes hierarchy properties
     *
     */initHierarchy:function initHierarchy(){// element's parent list
this.hierarchy=[];// if element is parent of another layer _isParent will be true
this._isParent=false;this.checkParenting();},/**
     * @function
     * Sets layer's hierarchy.
     * @param {array} hierarch
     * layer's parent list
     *
     */setHierarchy:function setHierarchy(hierarchy){this.hierarchy=hierarchy;},/**
     * @function
     * Sets layer as parent.
     *
     */setAsParent:function setAsParent(){this._isParent=true;},/**
     * @function
     * Searches layer's parenting chain
     *
     */checkParenting:function checkParenting(){if(this.data.parent!==undefined){this.comp.buildElementParenting(this,this.data.parent,[]);}}};/**
 * @file
 * Handles element's layer frame update.
 * Checks layer in point and out point
 *
 */function FrameElement(){}FrameElement.prototype={/**
     * @function
     * Initializes frame related properties.
     *
     */initFrame:function initFrame(){// set to true when inpoint is rendered
this._isFirstFrame=false;// list of animated properties
this.dynamicProperties=[];// If layer has been modified in current tick this will be true
this._mdf=false;},/**
     * @function
     * Calculates all dynamic values
     *
     * @param {number} num
     * current frame number in Layer's time
     * @param {boolean} isVisible
     * if layers is currently in range
     *
     */prepareProperties:function prepareProperties(num,isVisible){var i;var len=this.dynamicProperties.length;for(i=0;i<len;i+=1){if(isVisible||this._isParent&&this.dynamicProperties[i].propType==='transform'){this.dynamicProperties[i].getValue();if(this.dynamicProperties[i]._mdf){this.globalData._mdf=true;this._mdf=true;}}}},addDynamicProperty:function addDynamicProperty(prop){if(this.dynamicProperties.indexOf(prop)===-1){this.dynamicProperties.push(prop);}}};/* global TransformPropertyFactory, Matrix */function TransformElement(){}TransformElement.prototype={initTransform:function initTransform(){this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:false,_opMdf:false,mat:new Matrix()};if(this.data.ao){this.finalTransform.mProp.autoOriented=true;}// TODO: check TYPE 11: Guided elements
if(this.data.ty!==11){// this.createElements();
}},renderTransform:function renderTransform(){this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame;this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame;if(this.hierarchy){var mat;var finalMat=this.finalTransform.mat;var i=0;var len=this.hierarchy.length;// Checking if any of the transformation matrices in the hierarchy chain has changed.
if(!this.finalTransform._matMdf){while(i<len){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=true;break;}i+=1;}}if(this.finalTransform._matMdf){mat=this.finalTransform.mProp.v.props;finalMat.cloneFromProps(mat);for(i=0;i<len;i+=1){mat=this.hierarchy[i].finalTransform.mProp.v.props;finalMat.transform(mat[0],mat[1],mat[2],mat[3],mat[4],mat[5],mat[6],mat[7],mat[8],mat[9],mat[10],mat[11],mat[12],mat[13],mat[14],mat[15]);}}}},globalToLocal:function globalToLocal(pt){var transforms=[];transforms.push(this.finalTransform);var flag=true;var comp=this.comp;while(flag){if(comp.finalTransform){if(comp.data.hasMask){transforms.splice(0,0,comp.finalTransform);}comp=comp.comp;}else{flag=false;}}var i;var len=transforms.length;var ptNew;for(i=0;i<len;i+=1){ptNew=transforms[i].mat.applyToPointArray(0,0,0);// ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);
pt=[pt[0]-ptNew[0],pt[1]-ptNew[1],0];}return pt;},mHelper:new Matrix()};function RenderableElement(){}RenderableElement.prototype={initRenderable:function initRenderable(){// layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
this.isInRange=false;// layer's display state
this.hidden=false;// If layer's transparency equals 0, it can be hidden
this.isTransparent=false;// list of animated components
this.renderableComponents=[];},addRenderableComponent:function addRenderableComponent(component){if(this.renderableComponents.indexOf(component)===-1){this.renderableComponents.push(component);}},removeRenderableComponent:function removeRenderableComponent(component){if(this.renderableComponents.indexOf(component)!==-1){this.renderableComponents.splice(this.renderableComponents.indexOf(component),1);}},prepareRenderableFrame:function prepareRenderableFrame(num){this.checkLayerLimits(num);},checkTransparency:function checkTransparency(){if(this.finalTransform.mProp.o.v<=0){if(!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent){this.isTransparent=true;this.hide();}}else if(this.isTransparent){this.isTransparent=false;this.show();}},/**
     * @function
     * Initializes frame related properties.
     *
     * @param {number} num
     * current frame number in Layer's time
     *
     */checkLayerLimits:function checkLayerLimits(num){if(this.data.ip-this.data.st<=num&&this.data.op-this.data.st>num){if(this.isInRange!==true){this.globalData._mdf=true;this._mdf=true;this.isInRange=true;this.show();}}else if(this.isInRange!==false){this.globalData._mdf=true;this.isInRange=false;this.hide();}},renderRenderable:function renderRenderable(){var i;var len=this.renderableComponents.length;for(i=0;i<len;i+=1){this.renderableComponents[i].renderFrame(this._isFirstFrame);}/* this.maskManager.renderFrame(this.finalTransform.mat);
        this.renderableEffectsManager.renderFrame(this._isFirstFrame); */},sourceRectAtTime:function sourceRectAtTime(){return{top:0,left:0,width:100,height:100};},getLayerSize:function getLayerSize(){if(this.data.ty===5){return{w:this.data.textData.width,h:this.data.textData.height};}return{w:this.data.width,h:this.data.height};}};/* global extendPrototype, RenderableElement, createProxyFunction */function RenderableDOMElement(){}(function(){var _prototype={initElement:function initElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initTransform(data,globalData,comp);this.initHierarchy();this.initRenderable();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();this.createContent();this.hide();},hide:function hide(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){var elem=this.baseElement||this.layerElement;elem.style.display='none';this.hidden=true;}},show:function show(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var elem=this.baseElement||this.layerElement;elem.style.display='block';}this.hidden=false;this._isFirstFrame=true;}},renderFrame:function renderFrame(){// If it is exported as hidden (data.hd === true) no need to render
// If it is not visible no need to render
if(this.data.hd||this.hidden){return;}this.renderTransform();this.renderRenderable();this.renderElement();this.renderInnerContent();if(this._isFirstFrame){this._isFirstFrame=false;}},renderInnerContent:function renderInnerContent(){},prepareFrame:function prepareFrame(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);this.checkTransparency();},destroy:function destroy(){this.innerElem=null;this.destroyBaseElement();}};extendPrototype([RenderableElement,createProxyFunction(_prototype)],RenderableDOMElement);})();/* exported ProcessedElement */function ProcessedElement(element,position){this.elem=element;this.pos=position;}/* global createNS */function SVGStyleData(data,level){this.data=data;this.type=data.ty;this.d='';this.lvl=level;this._mdf=false;this.closed=data.hd===true;this.pElem=createNS('path');this.msElem=null;}SVGStyleData.prototype.reset=function(){this.d='';this._mdf=false;};function SVGShapeData(transformers,level,shape){this.caches=[];this.styles=[];this.transformers=transformers;this.lStr='';this.sh=shape;this.lvl=level;// TODO find if there are some cases where _isAnimated can be false.
// For now, since shapes add up with other shapes. They have to be calculated every time.
// One way of finding out is checking if all styles associated to this shape depend only of this shape
this._isAnimated=!!shape.k;// TODO: commenting this for now since all shapes are animated
var i=0;var len=transformers.length;while(i<len){if(transformers[i].mProps.dynamicProperties.length){this._isAnimated=true;break;}i+=1;}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=true;};/* exported SVGTransformData */function SVGTransformData(mProps,op,container){this.transform={mProps:mProps,op:op,container:container};this.elements=[];this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length;}/* global DashProperty, PropertyFactory, extendPrototype, DynamicPropertyContainer */function SVGStrokeStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.w=PropertyFactory.getProp(elem,data.w,0,null,this);this.d=new DashProperty(elem,data.d||{},'svg',this);this.c=PropertyFactory.getProp(elem,data.c,1,255,this);this.style=styleOb;this._isAnimated=!!this._isAnimated;}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);/* global PropertyFactory, extendPrototype, DynamicPropertyContainer */function SVGFillStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.c=PropertyFactory.getProp(elem,data.c,1,255,this);this.style=styleOb;}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);/* global PropertyFactory, degToRads, GradientProperty, createElementID, createNS, locationHref,
extendPrototype, DynamicPropertyContainer */function SVGGradientFillStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.initGradientData(elem,data,styleOb);}SVGGradientFillStyleData.prototype.initGradientData=function(elem,data,styleOb){this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.s=PropertyFactory.getProp(elem,data.s,1,null,this);this.e=PropertyFactory.getProp(elem,data.e,1,null,this);this.h=PropertyFactory.getProp(elem,data.h||{k:0},0,0.01,this);this.a=PropertyFactory.getProp(elem,data.a||{k:0},0,degToRads,this);this.g=new GradientProperty(elem,data.g,this);this.style=styleOb;this.stops=[];this.setGradientData(styleOb.pElem,data);this.setGradientOpacity(data,styleOb);this._isAnimated=!!this._isAnimated;};SVGGradientFillStyleData.prototype.setGradientData=function(pathElement,data){var gradientId=createElementID();var gfill=createNS(data.t===1?'linearGradient':'radialGradient');gfill.setAttribute('id',gradientId);gfill.setAttribute('spreadMethod','pad');gfill.setAttribute('gradientUnits','userSpaceOnUse');var stops=[];var stop;var j;var jLen;jLen=data.g.p*4;for(j=0;j<jLen;j+=4){stop=createNS('stop');gfill.appendChild(stop);stops.push(stop);}pathElement.setAttribute(data.ty==='gf'?'fill':'stroke','url('+locationHref+'#'+gradientId+')');this.gf=gfill;this.cst=stops;};SVGGradientFillStyleData.prototype.setGradientOpacity=function(data,styleOb){if(this.g._hasOpacity&&!this.g._collapsable){var stop;var j;var jLen;var mask=createNS('mask');var maskElement=createNS('path');mask.appendChild(maskElement);var opacityId=createElementID();var maskId=createElementID();mask.setAttribute('id',maskId);var opFill=createNS(data.t===1?'linearGradient':'radialGradient');opFill.setAttribute('id',opacityId);opFill.setAttribute('spreadMethod','pad');opFill.setAttribute('gradientUnits','userSpaceOnUse');jLen=data.g.k.k[0].s?data.g.k.k[0].s.length:data.g.k.k.length;var stops=this.stops;for(j=data.g.p*4;j<jLen;j+=2){stop=createNS('stop');stop.setAttribute('stop-color','rgb(255,255,255)');opFill.appendChild(stop);stops.push(stop);}maskElement.setAttribute(data.ty==='gf'?'fill':'stroke','url('+locationHref+'#'+opacityId+')');this.of=opFill;this.ms=mask;this.ost=stops;this.maskId=maskId;styleOb.msElem=maskElement;}};extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);/* global PropertyFactory, DashProperty, extendPrototype, SVGGradientFillStyleData, DynamicPropertyContainer */function SVGGradientStrokeStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.w=PropertyFactory.getProp(elem,data.w,0,null,this);this.d=new DashProperty(elem,data.d||{},'svg',this);this.initGradientData(elem,data,styleOb);this._isAnimated=!!this._isAnimated;}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);/* global createNS */ /* exported ShapeGroupData */function ShapeGroupData(){this.it=[];this.prevViewData=[];this.gr=createNS('g');}/* global Matrix, buildShapeString, bmFloor */ /* exported SVGElementsRenderer */var SVGElementsRenderer=function(){var _identityMatrix=new Matrix();var _matrixHelper=new Matrix();var ob={createRenderFunction:createRenderFunction};function createRenderFunction(data){switch(data.ty){case'fl':return renderFill;case'gf':return renderGradient;case'gs':return renderGradientStroke;case'st':return renderStroke;case'sh':case'el':case'rc':case'sr':return renderPath;case'tr':return renderContentTransform;default:return null;}}function renderContentTransform(styleData,itemData,isFirstFrame){if(isFirstFrame||itemData.transform.op._mdf){itemData.transform.container.setAttribute('opacity',itemData.transform.op.v);}if(isFirstFrame||itemData.transform.mProps._mdf){itemData.transform.container.setAttribute('transform',itemData.transform.mProps.v.to2dCSS());}}function renderPath(styleData,itemData,isFirstFrame){var j;var jLen;var pathStringTransformed;var redraw;var pathNodes;var l;var lLen=itemData.styles.length;var lvl=itemData.lvl;var paths;var mat;var props;var iterations;var k;for(l=0;l<lLen;l+=1){redraw=itemData.sh._mdf||isFirstFrame;if(itemData.styles[l].lvl<lvl){mat=_matrixHelper.reset();iterations=lvl-itemData.styles[l].lvl;k=itemData.transformers.length-1;while(!redraw&&iterations>0){redraw=itemData.transformers[k].mProps._mdf||redraw;iterations-=1;k-=1;}if(redraw){iterations=lvl-itemData.styles[l].lvl;k=itemData.transformers.length-1;while(iterations>0){props=itemData.transformers[k].mProps.v.props;mat.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);iterations-=1;k-=1;}}}else{mat=_identityMatrix;}paths=itemData.sh.paths;jLen=paths._length;if(redraw){pathStringTransformed='';for(j=0;j<jLen;j+=1){pathNodes=paths.shapes[j];if(pathNodes&&pathNodes._length){pathStringTransformed+=buildShapeString(pathNodes,pathNodes._length,pathNodes.c,mat);}}itemData.caches[l]=pathStringTransformed;}else{pathStringTransformed=itemData.caches[l];}itemData.styles[l].d+=styleData.hd===true?'':pathStringTransformed;itemData.styles[l]._mdf=redraw||itemData.styles[l]._mdf;}}function renderFill(styleData,itemData,isFirstFrame){var styleElem=itemData.style;if(itemData.c._mdf||isFirstFrame){styleElem.pElem.setAttribute('fill','rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')');}if(itemData.o._mdf||isFirstFrame){styleElem.pElem.setAttribute('fill-opacity',itemData.o.v);}}function renderGradientStroke(styleData,itemData,isFirstFrame){renderGradient(styleData,itemData,isFirstFrame);renderStroke(styleData,itemData,isFirstFrame);}function renderGradient(styleData,itemData,isFirstFrame){var gfill=itemData.gf;var hasOpacity=itemData.g._hasOpacity;var pt1=itemData.s.v;var pt2=itemData.e.v;if(itemData.o._mdf||isFirstFrame){var attr=styleData.ty==='gf'?'fill-opacity':'stroke-opacity';itemData.style.pElem.setAttribute(attr,itemData.o.v);}if(itemData.s._mdf||isFirstFrame){var attr1=styleData.t===1?'x1':'cx';var attr2=attr1==='x1'?'y1':'cy';gfill.setAttribute(attr1,pt1[0]);gfill.setAttribute(attr2,pt1[1]);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute(attr1,pt1[0]);itemData.of.setAttribute(attr2,pt1[1]);}}var stops;var i;var len;var stop;if(itemData.g._cmdf||isFirstFrame){stops=itemData.cst;var cValues=itemData.g.c;len=stops.length;for(i=0;i<len;i+=1){stop=stops[i];stop.setAttribute('offset',cValues[i*4]+'%');stop.setAttribute('stop-color','rgb('+cValues[i*4+1]+','+cValues[i*4+2]+','+cValues[i*4+3]+')');}}if(hasOpacity&&(itemData.g._omdf||isFirstFrame)){var oValues=itemData.g.o;if(itemData.g._collapsable){stops=itemData.cst;}else{stops=itemData.ost;}len=stops.length;for(i=0;i<len;i+=1){stop=stops[i];if(!itemData.g._collapsable){stop.setAttribute('offset',oValues[i*2]+'%');}stop.setAttribute('stop-opacity',oValues[i*2+1]);}}if(styleData.t===1){if(itemData.e._mdf||isFirstFrame){gfill.setAttribute('x2',pt2[0]);gfill.setAttribute('y2',pt2[1]);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('x2',pt2[0]);itemData.of.setAttribute('y2',pt2[1]);}}}else{var rad;if(itemData.s._mdf||itemData.e._mdf||isFirstFrame){rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));gfill.setAttribute('r',rad);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('r',rad);}}if(itemData.e._mdf||itemData.h._mdf||itemData.a._mdf||isFirstFrame){if(!rad){rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));}var ang=Math.atan2(pt2[1]-pt1[1],pt2[0]-pt1[0]);var percent=itemData.h.v;if(percent>=1){percent=0.99;}else if(percent<=-1){percent=-0.99;}var dist=rad*percent;var x=Math.cos(ang+itemData.a.v)*dist+pt1[0];var y=Math.sin(ang+itemData.a.v)*dist+pt1[1];gfill.setAttribute('fx',x);gfill.setAttribute('fy',y);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('fx',x);itemData.of.setAttribute('fy',y);}}// gfill.setAttribute('fy','200');
}}function renderStroke(styleData,itemData,isFirstFrame){var styleElem=itemData.style;var d=itemData.d;if(d&&(d._mdf||isFirstFrame)&&d.dashStr){styleElem.pElem.setAttribute('stroke-dasharray',d.dashStr);styleElem.pElem.setAttribute('stroke-dashoffset',d.dashoffset[0]);}if(itemData.c&&(itemData.c._mdf||isFirstFrame)){styleElem.pElem.setAttribute('stroke','rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')');}if(itemData.o._mdf||isFirstFrame){styleElem.pElem.setAttribute('stroke-opacity',itemData.o.v);}if(itemData.w._mdf||isFirstFrame){styleElem.pElem.setAttribute('stroke-width',itemData.w.v);if(styleElem.msElem){styleElem.msElem.setAttribute('stroke-width',itemData.w.v);}}}return ob;}();/* global Matrix */function ShapeTransformManager(){this.sequences={};this.sequenceList=[];this.transform_key_count=0;}ShapeTransformManager.prototype={addTransformSequence:function addTransformSequence(transforms){var i;var len=transforms.length;var key='_';for(i=0;i<len;i+=1){key+=transforms[i].transform.key+'_';}var sequence=this.sequences[key];if(!sequence){sequence={transforms:[].concat(transforms),finalTransform:new Matrix(),_mdf:false};this.sequences[key]=sequence;this.sequenceList.push(sequence);}return sequence;},processSequence:function processSequence(sequence,isFirstFrame){var i=0;var len=sequence.transforms.length;var _mdf=isFirstFrame;while(i<len&&!isFirstFrame){if(sequence.transforms[i].transform.mProps._mdf){_mdf=true;break;}i+=1;}if(_mdf){var props;sequence.finalTransform.reset();for(i=len-1;i>=0;i-=1){props=sequence.transforms[i].transform.mProps.v.props;sequence.finalTransform.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);}}sequence._mdf=_mdf;},processSequences:function processSequences(isFirstFrame){var i;var len=this.sequenceList.length;for(i=0;i<len;i+=1){this.processSequence(this.sequenceList[i],isFirstFrame);}},getNewKey:function getNewKey(){this.transform_key_count+=1;return'_'+this.transform_key_count;}};/* global ShapePropertyFactory, SVGShapeData */function CVShapeData(element,data,styles,transformsManager){this.styledShapes=[];this.tr=[0,0,0,0,0,0];var ty=4;if(data.ty==='rc'){ty=5;}else if(data.ty==='el'){ty=6;}else if(data.ty==='sr'){ty=7;}this.sh=ShapePropertyFactory.getShapeProp(element,data,ty,element);var i;var len=styles.length;var styledShape;for(i=0;i<len;i+=1){if(!styles[i].closed){styledShape={transforms:transformsManager.addTransformSequence(styles[i].transforms),trNodes:[]};this.styledShapes.push(styledShape);styles[i].elements.push(styledShape);}}}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;/* global LayerExpressionInterface, EffectsExpressionInterface, CompExpressionInterface, ShapeExpressionInterface,
TextExpressionInterface, getBlendMode,createElementID, EffectsManager */function BaseElement(){}BaseElement.prototype={checkMasks:function checkMasks(){if(!this.data.hasMask){return false;}var i=0;var len=this.data.masksProperties.length;while(i<len){if(this.data.masksProperties[i].mode!=='n'&&this.data.masksProperties[i].cl!==false){return true;}i+=1;}return false;},initExpressions:function initExpressions(){this.layerInterface=LayerExpressionInterface(this);if(this.data.hasMask&&this.maskManager){this.layerInterface.registerMaskInterface(this.maskManager);}var effectsInterface=EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(effectsInterface);if(this.data.ty===0||this.data.xt){this.compInterface=CompExpressionInterface(this);}else if(this.data.ty===4){this.layerInterface.shapeInterface=ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface);this.layerInterface.content=this.layerInterface.shapeInterface;}else if(this.data.ty===5){this.layerInterface.textInterface=TextExpressionInterface(this);this.layerInterface.text=this.layerInterface.textInterface;}},setBlendMode:function setBlendMode(){var blendModeValue=getBlendMode(this.data.bm);var elem=this.baseElement||this.layerElement;elem.style['mix-blend-mode']=blendModeValue;},initBaseData:function initBaseData(data,globalData,comp){this.globalData=globalData;this.comp=comp;this.data=data;this.layerId=createElementID();// Stretch factor for old animations missing this property.
if(!this.data.sr){this.data.sr=1;}// effects manager
this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties);},getType:function getType(){return this.type;},sourceRectAtTime:function sourceRectAtTime(){}};/* global extendPrototype, BaseElement, TransformElement, HierarchyElement, FrameElement */function NullElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initFrame();this.initTransform(data,globalData,comp);this.initHierarchy();}NullElement.prototype.prepareFrame=function(num){this.prepareProperties(num,true);};NullElement.prototype.renderFrame=function(){};NullElement.prototype.getBaseElement=function(){return null;};NullElement.prototype.destroy=function(){};NullElement.prototype.sourceRectAtTime=function(){};NullElement.prototype.hide=function(){};extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);/* global filtersFactory, featureSupport, filtersFactory, createElementID, createNS, MaskElement, SVGEffects, locationHref */function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function initRendererElement(){this.layerElement=createNS('g');},createContainerElements:function createContainerElements(){this.matteElement=createNS('g');this.transformedElement=this.layerElement;this.maskedElement=this.layerElement;this._sizeChanged=false;var layerElementParent=null;// If this layer acts as a mask for the following layer
var filId;var fil;var gg;if(this.data.td){if(this.data.td==3||this.data.td==1){// eslint-disable-line eqeqeq
var masker=createNS('mask');masker.setAttribute('id',this.layerId);masker.setAttribute('mask-type',this.data.td==3?'luminance':'alpha');// eslint-disable-line eqeqeq
masker.appendChild(this.layerElement);layerElementParent=masker;this.globalData.defs.appendChild(masker);// This is only for IE and Edge when mask if of type alpha
if(!featureSupport.maskType&&this.data.td==1){// eslint-disable-line eqeqeq
masker.setAttribute('mask-type','luminance');filId=createElementID();fil=filtersFactory.createFilter(filId);this.globalData.defs.appendChild(fil);fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());gg=createNS('g');gg.appendChild(this.layerElement);layerElementParent=gg;masker.appendChild(gg);gg.setAttribute('filter','url('+locationHref+'#'+filId+')');}}else if(this.data.td==2){// eslint-disable-line eqeqeq
var maskGroup=createNS('mask');maskGroup.setAttribute('id',this.layerId);maskGroup.setAttribute('mask-type','alpha');var maskGrouper=createNS('g');maskGroup.appendChild(maskGrouper);filId=createElementID();fil=filtersFactory.createFilter(filId);/// /
// This solution doesn't work on Android when meta tag with viewport attribute is set
/* var feColorMatrix = createNS('feColorMatrix');
                feColorMatrix.setAttribute('type', 'matrix');
                feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
                feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 -1 1');
                fil.appendChild(feColorMatrix); */ /// /
var feCTr=createNS('feComponentTransfer');feCTr.setAttribute('in','SourceGraphic');fil.appendChild(feCTr);var feFunc=createNS('feFuncA');feFunc.setAttribute('type','table');feFunc.setAttribute('tableValues','1.0 0.0');feCTr.appendChild(feFunc);/// /
this.globalData.defs.appendChild(fil);var alphaRect=createNS('rect');alphaRect.setAttribute('width',this.comp.data.w);alphaRect.setAttribute('height',this.comp.data.h);alphaRect.setAttribute('x','0');alphaRect.setAttribute('y','0');alphaRect.setAttribute('fill','#ffffff');alphaRect.setAttribute('opacity','0');maskGrouper.setAttribute('filter','url('+locationHref+'#'+filId+')');maskGrouper.appendChild(alphaRect);maskGrouper.appendChild(this.layerElement);layerElementParent=maskGrouper;if(!featureSupport.maskType){maskGroup.setAttribute('mask-type','luminance');fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());gg=createNS('g');maskGrouper.appendChild(alphaRect);gg.appendChild(this.layerElement);layerElementParent=gg;maskGrouper.appendChild(gg);}this.globalData.defs.appendChild(maskGroup);}}else if(this.data.tt){this.matteElement.appendChild(this.layerElement);layerElementParent=this.matteElement;this.baseElement=this.matteElement;}else{this.baseElement=this.layerElement;}if(this.data.ln){this.layerElement.setAttribute('id',this.data.ln);}if(this.data.cl){this.layerElement.setAttribute('class',this.data.cl);}// Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped
if(this.data.ty===0&&!this.data.hd){var cp=createNS('clipPath');var pt=createNS('path');pt.setAttribute('d','M0,0 L'+this.data.w+',0 L'+this.data.w+','+this.data.h+' L0,'+this.data.h+'z');var clipId=createElementID();cp.setAttribute('id',clipId);cp.appendChild(pt);this.globalData.defs.appendChild(cp);if(this.checkMasks()){var cpGroup=createNS('g');cpGroup.setAttribute('clip-path','url('+locationHref+'#'+clipId+')');cpGroup.appendChild(this.layerElement);this.transformedElement=cpGroup;if(layerElementParent){layerElementParent.appendChild(this.transformedElement);}else{this.baseElement=this.transformedElement;}}else{this.layerElement.setAttribute('clip-path','url('+locationHref+'#'+clipId+')');}}if(this.data.bm!==0){this.setBlendMode();}},renderElement:function renderElement(){if(this.finalTransform._matMdf){this.transformedElement.setAttribute('transform',this.finalTransform.mat.to2dCSS());}if(this.finalTransform._opMdf){this.transformedElement.setAttribute('opacity',this.finalTransform.mProp.o.v);}},destroyBaseElement:function destroyBaseElement(){this.layerElement=null;this.matteElement=null;this.maskManager.destroy();},getBaseElement:function getBaseElement(){if(this.data.hd){return null;}return this.baseElement;},createRenderableComponents:function createRenderableComponents(){this.maskManager=new MaskElement(this.data,this,this.globalData);this.renderableEffectsManager=new SVGEffects(this);},setMatte:function setMatte(id){if(!this.matteElement){return;}this.matteElement.setAttribute('mask','url('+locationHref+'#'+id+')');}};/* global ProcessedElement */function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function addShapeToModifiers(data){var i;var len=this.shapeModifiers.length;for(i=0;i<len;i+=1){this.shapeModifiers[i].addShape(data);}},isShapeInAnimatedModifiers:function isShapeInAnimatedModifiers(data){var i=0;var len=this.shapeModifiers.length;while(i<len){if(this.shapeModifiers[i].isAnimatedWithShape(data)){return true;}}return false;},renderModifiers:function renderModifiers(){if(!this.shapeModifiers.length){return;}var i;var len=this.shapes.length;for(i=0;i<len;i+=1){this.shapes[i].sh.reset();}len=this.shapeModifiers.length;var shouldBreakProcess;for(i=len-1;i>=0;i-=1){shouldBreakProcess=this.shapeModifiers[i].processShapes(this._isFirstFrame);// workaround to fix cases where a repeater resets the shape so the following processes get called twice
// TODO: find a better solution for this
if(shouldBreakProcess){break;}}},lcEnum:{1:'butt',2:'round',3:'square'},ljEnum:{1:'miter',2:'round',3:'bevel'},searchProcessedElement:function searchProcessedElement(elem){var elements=this.processedElements;var i=0;var len=elements.length;while(i<len){if(elements[i].elem===elem){return elements[i].pos;}i+=1;}return 0;},addProcessedElement:function addProcessedElement(elem,pos){var elements=this.processedElements;var i=elements.length;while(i){i-=1;if(elements[i].elem===elem){elements[i].pos=pos;return;}}elements.push(new ProcessedElement(elem,pos));},prepareFrame:function prepareFrame(num){this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);}};/* global TextProperty, TextAnimatorProperty, buildShapeString, LetterProps */function ITextElement(){}ITextElement.prototype.initElement=function(data,globalData,comp){this.lettersChangedFlag=true;this.initFrame();this.initBaseData(data,globalData,comp);this.textProperty=new TextProperty(this,data.t,this.dynamicProperties);this.textAnimator=new TextAnimatorProperty(data.t,this.renderType,this);this.initTransform(data,globalData,comp);this.initHierarchy();this.initRenderable();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();this.createContent();this.hide();this.textAnimator.searchProperties(this.dynamicProperties);};ITextElement.prototype.prepareFrame=function(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);if(this.textProperty._mdf||this.textProperty._isFirstFrame){this.buildNewText();this.textProperty._isFirstFrame=false;this.textProperty._mdf=false;}};ITextElement.prototype.createPathShape=function(matrixHelper,shapes){var j;var jLen=shapes.length;var pathNodes;var shapeStr='';for(j=0;j<jLen;j+=1){pathNodes=shapes[j].ks.k;shapeStr+=buildShapeString(pathNodes,pathNodes.i.length,true,matrixHelper);}return shapeStr;};ITextElement.prototype.updateDocumentData=function(newData,index){this.textProperty.updateDocumentData(newData,index);};ITextElement.prototype.canResizeFont=function(_canResize){this.textProperty.canResizeFont(_canResize);};ITextElement.prototype.setMinimumFontSize=function(_fontSize){this.textProperty.setMinimumFontSize(_fontSize);};ITextElement.prototype.applyTextPropertiesToMatrix=function(documentData,matrixHelper,lineNumber,xPos,yPos){if(documentData.ps){matrixHelper.translate(documentData.ps[0],documentData.ps[1]+documentData.ascent,0);}matrixHelper.translate(0,-documentData.ls,0);switch(documentData.j){case 1:matrixHelper.translate(documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[lineNumber]),0,0);break;case 2:matrixHelper.translate(documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[lineNumber])/2,0,0);break;default:break;}matrixHelper.translate(xPos,yPos,0);};ITextElement.prototype.buildColor=function(colorData){return'rgb('+Math.round(colorData[0]*255)+','+Math.round(colorData[1]*255)+','+Math.round(colorData[2]*255)+')';};ITextElement.prototype.emptyProp=new LetterProps();ITextElement.prototype.destroy=function(){};/* global extendPrototype, BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement */function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement);ICompElement.prototype.initElement=function(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initTransform(data,globalData,comp);this.initRenderable();this.initHierarchy();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();if(this.data.xt||!globalData.progressiveLoad){this.buildAllItems();}this.hide();};/* ICompElement.prototype.hide = function(){
    if(!this.hidden){
        this.hideElement();
        var i,len = this.elements.length;
        for( i = 0; i < len; i+=1 ){
            if(this.elements[i]){
                this.elements[i].hide();
            }
        }
    }
}; */ICompElement.prototype.prepareFrame=function(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);if(!this.isInRange&&!this.data.xt){return;}if(!this.tm._placeholder){var timeRemapped=this.tm.v;if(timeRemapped===this.data.op){timeRemapped=this.data.op-1;}this.renderedFrame=timeRemapped;}else{this.renderedFrame=num/this.data.sr;}var i;var len=this.elements.length;if(!this.completeLayers){this.checkLayers(this.renderedFrame);}// This iteration needs to be backwards because of how expressions connect between each other
for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(this.renderedFrame-this.layers[i].st);if(this.elements[i]._mdf){this._mdf=true;}}}};ICompElement.prototype.renderInnerContent=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}};ICompElement.prototype.setElements=function(elems){this.elements=elems;};ICompElement.prototype.getElements=function(){return this.elements;};ICompElement.prototype.destroyElements=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){if(this.elements[i]){this.elements[i].destroy();}}};ICompElement.prototype.destroy=function(){this.destroyElements();this.destroyBaseElement();};/* global extendPrototype, BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, createNS */function IImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);this.initElement(data,globalData,comp);this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h};}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement);IImageElement.prototype.createContent=function(){var assetPath=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS('image');this.innerElem.setAttribute('width',this.assetData.w+'px');this.innerElem.setAttribute('height',this.assetData.h+'px');this.innerElem.setAttribute('preserveAspectRatio',this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio);this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);this.layerElement.appendChild(this.innerElem);};IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect;};/* global extendPrototype, IImageElement, createNS */function ISolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([IImageElement],ISolidElement);ISolidElement.prototype.createContent=function(){var rect=createNS('rect');/// /rect.style.width = this.data.sw;
/// /rect.style.height = this.data.sh;
/// /rect.style.fill = this.data.sc;
rect.setAttribute('width',this.data.sw);rect.setAttribute('height',this.data.sh);rect.setAttribute('fill',this.data.sc);this.layerElement.appendChild(rect);};/* global PropertyFactory, extendPrototype, RenderableElement, BaseElement, FrameElement */function AudioElement(data,globalData,comp){this.initFrame();this.initRenderable();this.assetData=globalData.getAssetData(data.refId);this.initBaseData(data,globalData,comp);this._isPlaying=false;this._canPlay=false;var assetPath=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(assetPath);this._currentTime=0;this.globalData.audioController.addAudio(this);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}AudioElement.prototype.prepareFrame=function(num){this.prepareRenderableFrame(num,true);this.prepareProperties(num,true);if(!this.tm._placeholder){var timeRemapped=this.tm.v;this._currentTime=timeRemapped;}else{this._currentTime=num/this.data.sr;}};extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement);AudioElement.prototype.renderFrame=function(){if(this.isInRange&&this._canPlay){if(!this._isPlaying){this.audio.play();this.audio.seek(this._currentTime/this.globalData.frameRate);this._isPlaying=true;}else if(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>0.1){this.audio.seek(this._currentTime/this.globalData.frameRate);}}};AudioElement.prototype.show=function(){// this.audio.play()
};AudioElement.prototype.hide=function(){this.audio.pause();this._isPlaying=false;};AudioElement.prototype.pause=function(){this.audio.pause();this._isPlaying=false;this._canPlay=false;};AudioElement.prototype.resume=function(){this._canPlay=true;};AudioElement.prototype.setRate=function(rateValue){this.audio.rate(rateValue);};AudioElement.prototype.volume=function(volumeValue){this.audio.volume(volumeValue);};AudioElement.prototype.getBaseElement=function(){return null;};AudioElement.prototype.destroy=function(){};AudioElement.prototype.sourceRectAtTime=function(){};AudioElement.prototype.initExpressions=function(){};/* global createSizedArray, PropertyFactory, extendPrototype, SVGRenderer, ICompElement, SVGBaseElement */function SVGCompElement(data,globalData,comp){this.layers=data.layers;this.supports3d=true;this.completeLayers=false;this.pendingElements=[];this.elements=this.layers?createSizedArray(this.layers.length):[];// this.layerElement = createNS('g');
this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([SVGRenderer,ICompElement,SVGBaseElement],SVGCompElement);/* global extendPrototype, BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement,
RenderableDOMElement, ITextElement, createSizedArray, createNS */function SVGTextLottieElement(data,globalData,comp){this.textSpans=[];this.renderType='svg';this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement);SVGTextLottieElement.prototype.createContent=function(){if(this.data.singleShape&&!this.globalData.fontManager.chars){this.textContainer=createNS('text');}};SVGTextLottieElement.prototype.buildTextContents=function(textArray){var i=0;var len=textArray.length;var textContents=[];var currentTextContent='';while(i<len){if(textArray[i]===String.fromCharCode(13)||textArray[i]===String.fromCharCode(3)){textContents.push(currentTextContent);currentTextContent='';}else{currentTextContent+=textArray[i];}i+=1;}textContents.push(currentTextContent);return textContents;};SVGTextLottieElement.prototype.buildNewText=function(){var i;var len;var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData?documentData.l.length:0);if(documentData.fc){this.layerElement.setAttribute('fill',this.buildColor(documentData.fc));}else{this.layerElement.setAttribute('fill','rgba(0,0,0,0)');}if(documentData.sc){this.layerElement.setAttribute('stroke',this.buildColor(documentData.sc));this.layerElement.setAttribute('stroke-width',documentData.sw);}this.layerElement.setAttribute('font-size',documentData.finalSize);var fontData=this.globalData.fontManager.getFontByName(documentData.f);if(fontData.fClass){this.layerElement.setAttribute('class',fontData.fClass);}else{this.layerElement.setAttribute('font-family',fontData.fFamily);var fWeight=documentData.fWeight;var fStyle=documentData.fStyle;this.layerElement.setAttribute('font-style',fStyle);this.layerElement.setAttribute('font-weight',fWeight);}this.layerElement.setAttribute('aria-label',documentData.t);var letters=documentData.l||[];var usesGlyphs=!!this.globalData.fontManager.chars;len=letters.length;var tSpan;var matrixHelper=this.mHelper;var shapes;var shapeStr='';var singleShape=this.data.singleShape;var xPos=0;var yPos=0;var firstLine=true;var trackingOffset=documentData.tr*0.001*documentData.finalSize;if(singleShape&&!usesGlyphs&&!documentData.sz){var tElement=this.textContainer;var justify='start';switch(documentData.j){case 1:justify='end';break;case 2:justify='middle';break;default:justify='start';break;}tElement.setAttribute('text-anchor',justify);tElement.setAttribute('letter-spacing',trackingOffset);var textContent=this.buildTextContents(documentData.finalText);len=textContent.length;yPos=documentData.ps?documentData.ps[1]+documentData.ascent:0;for(i=0;i<len;i+=1){tSpan=this.textSpans[i]||createNS('tspan');tSpan.textContent=textContent[i];tSpan.setAttribute('x',0);tSpan.setAttribute('y',yPos);tSpan.style.display='inherit';tElement.appendChild(tSpan);this.textSpans[i]=tSpan;yPos+=documentData.finalLineHeight;}this.layerElement.appendChild(tElement);}else{var cachedSpansLength=this.textSpans.length;var shapeData;var charData;for(i=0;i<len;i+=1){if(!usesGlyphs||!singleShape||i===0){tSpan=cachedSpansLength>i?this.textSpans[i]:createNS(usesGlyphs?'path':'text');if(cachedSpansLength<=i){tSpan.setAttribute('stroke-linecap','butt');tSpan.setAttribute('stroke-linejoin','round');tSpan.setAttribute('stroke-miterlimit','4');this.textSpans[i]=tSpan;this.layerElement.appendChild(tSpan);}tSpan.style.display='inherit';}matrixHelper.reset();matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);if(singleShape){if(letters[i].n){xPos=-trackingOffset;yPos+=documentData.yOffset;yPos+=firstLine?1:0;firstLine=false;}this.applyTextPropertiesToMatrix(documentData,matrixHelper,letters[i].line,xPos,yPos);xPos+=letters[i].l||0;// xPos += letters[i].val === ' ' ? 0 : trackingOffset;
xPos+=trackingOffset;}if(usesGlyphs){charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);shapeData=charData&&charData.data||{};shapes=shapeData.shapes?shapeData.shapes[0].it:[];if(!singleShape){tSpan.setAttribute('d',this.createPathShape(matrixHelper,shapes));}else{shapeStr+=this.createPathShape(matrixHelper,shapes);}}else{if(singleShape){tSpan.setAttribute('transform','translate('+matrixHelper.props[12]+','+matrixHelper.props[13]+')');}tSpan.textContent=letters[i].val;tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace','xml:space','preserve');}//
}if(singleShape&&tSpan){tSpan.setAttribute('d',shapeStr);}}while(i<this.textSpans.length){this.textSpans[i].style.display='none';i+=1;}this._sizeChanged=true;};SVGTextLottieElement.prototype.sourceRectAtTime=function(){this.prepareFrame(this.comp.renderedFrame-this.data.st);this.renderInnerContent();if(this._sizeChanged){this._sizeChanged=false;var textBox=this.layerElement.getBBox();this.bbox={top:textBox.y,left:textBox.x,width:textBox.width,height:textBox.height};}return this.bbox;};SVGTextLottieElement.prototype.renderInnerContent=function(){if(!this.data.singleShape){this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);if(this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){this._sizeChanged=true;var i;var len;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var textSpan;for(i=0;i<len;i+=1){if(!letters[i].n){renderedLetter=renderedLetters[i];textSpan=this.textSpans[i];if(renderedLetter._mdf.m){textSpan.setAttribute('transform',renderedLetter.m);}if(renderedLetter._mdf.o){textSpan.setAttribute('opacity',renderedLetter.o);}if(renderedLetter._mdf.sw){textSpan.setAttribute('stroke-width',renderedLetter.sw);}if(renderedLetter._mdf.sc){textSpan.setAttribute('stroke',renderedLetter.sc);}if(renderedLetter._mdf.fc){textSpan.setAttribute('fill',renderedLetter.fc);}}}}}};/* global extendPrototype, BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement,
FrameElement, RenderableDOMElement, Matrix, SVGStyleData, SVGStrokeStyleData, SVGFillStyleData,
SVGGradientFillStyleData, SVGGradientStrokeStyleData, locationHref, getBlendMode, ShapeGroupData,
TransformPropertyFactory, SVGTransformData, ShapePropertyFactory, SVGShapeData, SVGElementsRenderer, ShapeModifiers */function SVGShapeElement(data,globalData,comp){// List of drawable elements
this.shapes=[];// Full shape data
this.shapesData=data.shapes;// List of styles that will be applied to shapes
this.stylesList=[];// List of modifiers that will be applied to shapes
this.shapeModifiers=[];// List of items in shape tree
this.itemsData=[];// List of items in previous shape tree
this.processedElements=[];// List of animated components
this.animatedContents=[];this.initElement(data,globalData,comp);// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
// List of elements that have been created
this.prevViewData=[];// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement);SVGShapeElement.prototype.initSecondaryElement=function(){};SVGShapeElement.prototype.identityMatrix=new Matrix();SVGShapeElement.prototype.buildExpressionInterface=function(){};SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],true);this.filterUniqueShapes();};/*
This method searches for multiple shapes that affect a single element and one of them is animated
*/SVGShapeElement.prototype.filterUniqueShapes=function(){var i;var len=this.shapes.length;var shape;var j;var jLen=this.stylesList.length;var style;var tempShapes=[];var areAnimated=false;for(j=0;j<jLen;j+=1){style=this.stylesList[j];areAnimated=false;tempShapes.length=0;for(i=0;i<len;i+=1){shape=this.shapes[i];if(shape.styles.indexOf(style)!==-1){tempShapes.push(shape);areAnimated=shape._isAnimated||areAnimated;}}if(tempShapes.length>1&&areAnimated){this.setShapesAsAnimated(tempShapes);}}};SVGShapeElement.prototype.setShapesAsAnimated=function(shapes){var i;var len=shapes.length;for(i=0;i<len;i+=1){shapes[i].setAsAnimated();}};SVGShapeElement.prototype.createStyleElement=function(data,level){// TODO: prevent drawing of hidden styles
var elementData;var styleOb=new SVGStyleData(data,level);var pathElement=styleOb.pElem;if(data.ty==='st'){elementData=new SVGStrokeStyleData(this,data,styleOb);}else if(data.ty==='fl'){elementData=new SVGFillStyleData(this,data,styleOb);}else if(data.ty==='gf'||data.ty==='gs'){var GradientConstructor=data.ty==='gf'?SVGGradientFillStyleData:SVGGradientStrokeStyleData;elementData=new GradientConstructor(this,data,styleOb);this.globalData.defs.appendChild(elementData.gf);if(elementData.maskId){this.globalData.defs.appendChild(elementData.ms);this.globalData.defs.appendChild(elementData.of);pathElement.setAttribute('mask','url('+locationHref+'#'+elementData.maskId+')');}}if(data.ty==='st'||data.ty==='gs'){pathElement.setAttribute('stroke-linecap',this.lcEnum[data.lc]||'round');pathElement.setAttribute('stroke-linejoin',this.ljEnum[data.lj]||'round');pathElement.setAttribute('fill-opacity','0');if(data.lj===1){pathElement.setAttribute('stroke-miterlimit',data.ml);}}if(data.r===2){pathElement.setAttribute('fill-rule','evenodd');}if(data.ln){pathElement.setAttribute('id',data.ln);}if(data.cl){pathElement.setAttribute('class',data.cl);}if(data.bm){pathElement.style['mix-blend-mode']=getBlendMode(data.bm);}this.stylesList.push(styleOb);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.createGroupElement=function(data){var elementData=new ShapeGroupData();if(data.ln){elementData.gr.setAttribute('id',data.ln);}if(data.cl){elementData.gr.setAttribute('class',data.cl);}if(data.bm){elementData.gr.style['mix-blend-mode']=getBlendMode(data.bm);}return elementData;};SVGShapeElement.prototype.createTransformElement=function(data,container){var transformProperty=TransformPropertyFactory.getTransformProperty(this,data,this);var elementData=new SVGTransformData(transformProperty,transformProperty.o,container);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.createShapeElement=function(data,ownTransformers,level){var ty=4;if(data.ty==='rc'){ty=5;}else if(data.ty==='el'){ty=6;}else if(data.ty==='sr'){ty=7;}var shapeProperty=ShapePropertyFactory.getShapeProp(this,data,ty,this);var elementData=new SVGShapeData(ownTransformers,level,shapeProperty);this.shapes.push(elementData);this.addShapeToModifiers(elementData);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.addToAnimatedContents=function(data,element){var i=0;var len=this.animatedContents.length;while(i<len){if(this.animatedContents[i].element===element){return;}i+=1;}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(data),element:element,data:data});};SVGShapeElement.prototype.setElementStyles=function(elementData){var arr=elementData.styles;var j;var jLen=this.stylesList.length;for(j=0;j<jLen;j+=1){if(!this.stylesList[j].closed){arr.push(this.stylesList[j]);}}};SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=true;var i;var len=this.itemsData.length;for(i=0;i<len;i+=1){this.prevViewData[i]=this.itemsData[i];}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],true);this.filterUniqueShapes();len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();}this.renderModifiers();};SVGShapeElement.prototype.searchShapes=function(arr,itemsData,prevViewData,container,level,transformers,render){var ownTransformers=[].concat(transformers);var i;var len=arr.length-1;var j;var jLen;var ownStyles=[];var ownModifiers=[];var currentTransform;var modifier;var processedPos;for(i=len;i>=0;i-=1){processedPos=this.searchProcessedElement(arr[i]);if(!processedPos){arr[i]._render=render;}else{itemsData[i]=prevViewData[processedPos-1];}if(arr[i].ty==='fl'||arr[i].ty==='st'||arr[i].ty==='gf'||arr[i].ty==='gs'){if(!processedPos){itemsData[i]=this.createStyleElement(arr[i],level);}else{itemsData[i].style.closed=false;}if(arr[i]._render){container.appendChild(itemsData[i].style.pElem);}ownStyles.push(itemsData[i].style);}else if(arr[i].ty==='gr'){if(!processedPos){itemsData[i]=this.createGroupElement(arr[i]);}else{jLen=itemsData[i].it.length;for(j=0;j<jLen;j+=1){itemsData[i].prevViewData[j]=itemsData[i].it[j];}}this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,itemsData[i].gr,level+1,ownTransformers,render);if(arr[i]._render){container.appendChild(itemsData[i].gr);}}else if(arr[i].ty==='tr'){if(!processedPos){itemsData[i]=this.createTransformElement(arr[i],container);}currentTransform=itemsData[i].transform;ownTransformers.push(currentTransform);}else if(arr[i].ty==='sh'||arr[i].ty==='rc'||arr[i].ty==='el'||arr[i].ty==='sr'){if(!processedPos){itemsData[i]=this.createShapeElement(arr[i],ownTransformers,level);}this.setElementStyles(itemsData[i]);}else if(arr[i].ty==='tm'||arr[i].ty==='rd'||arr[i].ty==='ms'||arr[i].ty==='pb'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);modifier.init(this,arr[i]);itemsData[i]=modifier;this.shapeModifiers.push(modifier);}else{modifier=itemsData[i];modifier.closed=false;}ownModifiers.push(modifier);}else if(arr[i].ty==='rp'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);itemsData[i]=modifier;modifier.init(this,arr,i,itemsData);this.shapeModifiers.push(modifier);render=false;}else{modifier=itemsData[i];modifier.closed=true;}ownModifiers.push(modifier);}this.addProcessedElement(arr[i],i+1);}len=ownStyles.length;for(i=0;i<len;i+=1){ownStyles[i].closed=true;}len=ownModifiers.length;for(i=0;i<len;i+=1){ownModifiers[i].closed=true;}};SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){this.stylesList[i].reset();}this.renderShape();for(i=0;i<len;i+=1){if(this.stylesList[i]._mdf||this._isFirstFrame){if(this.stylesList[i].msElem){this.stylesList[i].msElem.setAttribute('d',this.stylesList[i].d);// Adding M0 0 fixes same mask bug on all browsers
this.stylesList[i].d='M0 0'+this.stylesList[i].d;}this.stylesList[i].pElem.setAttribute('d',this.stylesList[i].d||'M0 0');}}};SVGShapeElement.prototype.renderShape=function(){var i;var len=this.animatedContents.length;var animatedContent;for(i=0;i<len;i+=1){animatedContent=this.animatedContents[i];if((this._isFirstFrame||animatedContent.element._isAnimated)&&animatedContent.data!==true){animatedContent.fn(animatedContent.data,animatedContent.element,this._isFirstFrame);}}};SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement();this.shapesData=null;this.itemsData=null;};/* global createNS */function SVGTintFilter(filter,filterManager){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');feColorMatrix.setAttribute('result','f1');filter.appendChild(feColorMatrix);feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');feColorMatrix.setAttribute('result','f2');filter.appendChild(feColorMatrix);this.matrixFilter=feColorMatrix;if(filterManager.effectElements[2].p.v!==100||filterManager.effectElements[2].p.k){var feMerge=createNS('feMerge');filter.appendChild(feMerge);var feMergeNode;feMergeNode=createNS('feMergeNode');feMergeNode.setAttribute('in','SourceGraphic');feMerge.appendChild(feMergeNode);feMergeNode=createNS('feMergeNode');feMergeNode.setAttribute('in','f2');feMerge.appendChild(feMergeNode);}}SVGTintFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var colorBlack=this.filterManager.effectElements[0].p.v;var colorWhite=this.filterManager.effectElements[1].p.v;var opacity=this.filterManager.effectElements[2].p.v/100;this.matrixFilter.setAttribute('values',colorWhite[0]-colorBlack[0]+' 0 0 0 '+colorBlack[0]+' '+(colorWhite[1]-colorBlack[1])+' 0 0 0 '+colorBlack[1]+' '+(colorWhite[2]-colorBlack[2])+' 0 0 0 '+colorBlack[2]+' 0 0 0 '+opacity+' 0');}};/* global createNS */function SVGFillFilter(filter,filterManager){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');filter.appendChild(feColorMatrix);this.matrixFilter=feColorMatrix;}SVGFillFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var color=this.filterManager.effectElements[2].p.v;var opacity=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute('values','0 0 0 0 '+color[0]+' 0 0 0 0 '+color[1]+' 0 0 0 0 '+color[2]+' 0 0 0 '+opacity+' 0');}};/* global createNS */function SVGGaussianBlurEffect(filter,filterManager){// Outset the filter region by 100% on all sides to accommodate blur expansion.
filter.setAttribute('x','-100%');filter.setAttribute('y','-100%');filter.setAttribute('width','300%');filter.setAttribute('height','300%');this.filterManager=filterManager;var feGaussianBlur=createNS('feGaussianBlur');filter.appendChild(feGaussianBlur);this.feGaussianBlur=feGaussianBlur;}SVGGaussianBlurEffect.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){// Empirical value, matching AE's blur appearance.
var kBlurrinessToSigma=0.3;var sigma=this.filterManager.effectElements[0].p.v*kBlurrinessToSigma;// Dimensions mapping:
//
//   1 -> horizontal & vertical
//   2 -> horizontal only
//   3 -> vertical only
//
var dimensions=this.filterManager.effectElements[1].p.v;var sigmaX=dimensions==3?0:sigma;// eslint-disable-line eqeqeq
var sigmaY=dimensions==2?0:sigma;// eslint-disable-line eqeqeq
this.feGaussianBlur.setAttribute('stdDeviation',sigmaX+' '+sigmaY);// Repeat edges mapping:
//
//   0 -> off -> duplicate
//   1 -> on  -> wrap
var edgeMode=this.filterManager.effectElements[2].p.v==1?'wrap':'duplicate';// eslint-disable-line eqeqeq
this.feGaussianBlur.setAttribute('edgeMode',edgeMode);}};/* global createNS, createElementID, locationHref, bmFloor */function SVGStrokeEffect(elem,filterManager){this.initialized=false;this.filterManager=filterManager;this.elem=elem;this.paths=[];}SVGStrokeEffect.prototype.initialize=function(){var elemChildren=this.elem.layerElement.children||this.elem.layerElement.childNodes;var path;var groupPath;var i;var len;if(this.filterManager.effectElements[1].p.v===1){len=this.elem.maskManager.masksProperties.length;i=0;}else{i=this.filterManager.effectElements[0].p.v-1;len=i+1;}groupPath=createNS('g');groupPath.setAttribute('fill','none');groupPath.setAttribute('stroke-linecap','round');groupPath.setAttribute('stroke-dashoffset',1);for(i;i<len;i+=1){path=createNS('path');groupPath.appendChild(path);this.paths.push({p:path,m:i});}if(this.filterManager.effectElements[10].p.v===3){var mask=createNS('mask');var id=createElementID();mask.setAttribute('id',id);mask.setAttribute('mask-type','alpha');mask.appendChild(groupPath);this.elem.globalData.defs.appendChild(mask);var g=createNS('g');g.setAttribute('mask','url('+locationHref+'#'+id+')');while(elemChildren[0]){g.appendChild(elemChildren[0]);}this.elem.layerElement.appendChild(g);this.masker=mask;groupPath.setAttribute('stroke','#fff');}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2){elemChildren=this.elem.layerElement.children||this.elem.layerElement.childNodes;while(elemChildren.length){this.elem.layerElement.removeChild(elemChildren[0]);}}this.elem.layerElement.appendChild(groupPath);this.elem.layerElement.removeAttribute('mask');groupPath.setAttribute('stroke','#fff');}this.initialized=true;this.pathMasker=groupPath;};SVGStrokeEffect.prototype.renderFrame=function(forceRender){if(!this.initialized){this.initialize();}var i;var len=this.paths.length;var mask;var path;for(i=0;i<len;i+=1){if(this.paths[i].m!==-1){mask=this.elem.maskManager.viewData[this.paths[i].m];path=this.paths[i].p;if(forceRender||this.filterManager._mdf||mask.prop._mdf){path.setAttribute('d',mask.lastPath);}if(forceRender||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||mask.prop._mdf){var dasharrayValue;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var s=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*0.01;var e=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*0.01;var l=path.getTotalLength();dasharrayValue='0 0 0 '+l*s+' ';var lineLength=l*(e-s);var segment=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01;var units=Math.floor(lineLength/segment);var j;for(j=0;j<units;j+=1){dasharrayValue+='1 '+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01+' ';}dasharrayValue+='0 '+l*10+' 0 0';}else{dasharrayValue='1 '+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01;}path.setAttribute('stroke-dasharray',dasharrayValue);}}}if(forceRender||this.filterManager.effectElements[4].p._mdf){this.pathMasker.setAttribute('stroke-width',this.filterManager.effectElements[4].p.v*2);}if(forceRender||this.filterManager.effectElements[6].p._mdf){this.pathMasker.setAttribute('opacity',this.filterManager.effectElements[6].p.v);}if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(forceRender||this.filterManager.effectElements[3].p._mdf){var color=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute('stroke','rgb('+bmFloor(color[0]*255)+','+bmFloor(color[1]*255)+','+bmFloor(color[2]*255)+')');}}};/* global createNS */function SVGTritoneFilter(filter,filterManager){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');feColorMatrix.setAttribute('result','f1');filter.appendChild(feColorMatrix);var feComponentTransfer=createNS('feComponentTransfer');feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');filter.appendChild(feComponentTransfer);this.matrixFilter=feComponentTransfer;var feFuncR=createNS('feFuncR');feFuncR.setAttribute('type','table');feComponentTransfer.appendChild(feFuncR);this.feFuncR=feFuncR;var feFuncG=createNS('feFuncG');feFuncG.setAttribute('type','table');feComponentTransfer.appendChild(feFuncG);this.feFuncG=feFuncG;var feFuncB=createNS('feFuncB');feFuncB.setAttribute('type','table');feComponentTransfer.appendChild(feFuncB);this.feFuncB=feFuncB;}SVGTritoneFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var color1=this.filterManager.effectElements[0].p.v;var color2=this.filterManager.effectElements[1].p.v;var color3=this.filterManager.effectElements[2].p.v;var tableR=color3[0]+' '+color2[0]+' '+color1[0];var tableG=color3[1]+' '+color2[1]+' '+color1[1];var tableB=color3[2]+' '+color2[2]+' '+color1[2];this.feFuncR.setAttribute('tableValues',tableR);this.feFuncG.setAttribute('tableValues',tableG);this.feFuncB.setAttribute('tableValues',tableB);// var opacity = this.filterManager.effectElements[2].p.v/100;
// this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
}};/* global createNS */function SVGProLevelsFilter(filter,filterManager){this.filterManager=filterManager;var effectElements=this.filterManager.effectElements;var feComponentTransfer=createNS('feComponentTransfer');if(effectElements[10].p.k||effectElements[10].p.v!==0||effectElements[11].p.k||effectElements[11].p.v!==1||effectElements[12].p.k||effectElements[12].p.v!==1||effectElements[13].p.k||effectElements[13].p.v!==0||effectElements[14].p.k||effectElements[14].p.v!==1){this.feFuncR=this.createFeFunc('feFuncR',feComponentTransfer);}if(effectElements[17].p.k||effectElements[17].p.v!==0||effectElements[18].p.k||effectElements[18].p.v!==1||effectElements[19].p.k||effectElements[19].p.v!==1||effectElements[20].p.k||effectElements[20].p.v!==0||effectElements[21].p.k||effectElements[21].p.v!==1){this.feFuncG=this.createFeFunc('feFuncG',feComponentTransfer);}if(effectElements[24].p.k||effectElements[24].p.v!==0||effectElements[25].p.k||effectElements[25].p.v!==1||effectElements[26].p.k||effectElements[26].p.v!==1||effectElements[27].p.k||effectElements[27].p.v!==0||effectElements[28].p.k||effectElements[28].p.v!==1){this.feFuncB=this.createFeFunc('feFuncB',feComponentTransfer);}if(effectElements[31].p.k||effectElements[31].p.v!==0||effectElements[32].p.k||effectElements[32].p.v!==1||effectElements[33].p.k||effectElements[33].p.v!==1||effectElements[34].p.k||effectElements[34].p.v!==0||effectElements[35].p.k||effectElements[35].p.v!==1){this.feFuncA=this.createFeFunc('feFuncA',feComponentTransfer);}if(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA){feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');filter.appendChild(feComponentTransfer);feComponentTransfer=createNS('feComponentTransfer');}if(effectElements[3].p.k||effectElements[3].p.v!==0||effectElements[4].p.k||effectElements[4].p.v!==1||effectElements[5].p.k||effectElements[5].p.v!==1||effectElements[6].p.k||effectElements[6].p.v!==0||effectElements[7].p.k||effectElements[7].p.v!==1){feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');filter.appendChild(feComponentTransfer);this.feFuncRComposed=this.createFeFunc('feFuncR',feComponentTransfer);this.feFuncGComposed=this.createFeFunc('feFuncG',feComponentTransfer);this.feFuncBComposed=this.createFeFunc('feFuncB',feComponentTransfer);}}SVGProLevelsFilter.prototype.createFeFunc=function(type,feComponentTransfer){var feFunc=createNS(type);feFunc.setAttribute('type','table');feComponentTransfer.appendChild(feFunc);return feFunc;};SVGProLevelsFilter.prototype.getTableValue=function(inputBlack,inputWhite,gamma,outputBlack,outputWhite){var cnt=0;var segments=256;var perc;var min=Math.min(inputBlack,inputWhite);var max=Math.max(inputBlack,inputWhite);var table=Array.call(null,{length:segments});var colorValue;var pos=0;var outputDelta=outputWhite-outputBlack;var inputDelta=inputWhite-inputBlack;while(cnt<=256){perc=cnt/256;if(perc<=min){colorValue=inputDelta<0?outputWhite:outputBlack;}else if(perc>=max){colorValue=inputDelta<0?outputBlack:outputWhite;}else{colorValue=outputBlack+outputDelta*Math.pow((perc-inputBlack)/inputDelta,1/gamma);}table[pos]=colorValue;pos+=1;cnt+=256/(segments-1);}return table.join(' ');};SVGProLevelsFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var val;var effectElements=this.filterManager.effectElements;if(this.feFuncRComposed&&(forceRender||effectElements[3].p._mdf||effectElements[4].p._mdf||effectElements[5].p._mdf||effectElements[6].p._mdf||effectElements[7].p._mdf)){val=this.getTableValue(effectElements[3].p.v,effectElements[4].p.v,effectElements[5].p.v,effectElements[6].p.v,effectElements[7].p.v);this.feFuncRComposed.setAttribute('tableValues',val);this.feFuncGComposed.setAttribute('tableValues',val);this.feFuncBComposed.setAttribute('tableValues',val);}if(this.feFuncR&&(forceRender||effectElements[10].p._mdf||effectElements[11].p._mdf||effectElements[12].p._mdf||effectElements[13].p._mdf||effectElements[14].p._mdf)){val=this.getTableValue(effectElements[10].p.v,effectElements[11].p.v,effectElements[12].p.v,effectElements[13].p.v,effectElements[14].p.v);this.feFuncR.setAttribute('tableValues',val);}if(this.feFuncG&&(forceRender||effectElements[17].p._mdf||effectElements[18].p._mdf||effectElements[19].p._mdf||effectElements[20].p._mdf||effectElements[21].p._mdf)){val=this.getTableValue(effectElements[17].p.v,effectElements[18].p.v,effectElements[19].p.v,effectElements[20].p.v,effectElements[21].p.v);this.feFuncG.setAttribute('tableValues',val);}if(this.feFuncB&&(forceRender||effectElements[24].p._mdf||effectElements[25].p._mdf||effectElements[26].p._mdf||effectElements[27].p._mdf||effectElements[28].p._mdf)){val=this.getTableValue(effectElements[24].p.v,effectElements[25].p.v,effectElements[26].p.v,effectElements[27].p.v,effectElements[28].p.v);this.feFuncB.setAttribute('tableValues',val);}if(this.feFuncA&&(forceRender||effectElements[31].p._mdf||effectElements[32].p._mdf||effectElements[33].p._mdf||effectElements[34].p._mdf||effectElements[35].p._mdf)){val=this.getTableValue(effectElements[31].p.v,effectElements[32].p.v,effectElements[33].p.v,effectElements[34].p.v,effectElements[35].p.v);this.feFuncA.setAttribute('tableValues',val);}}};/* global createNS, rgbToHex, degToRads */function SVGDropShadowEffect(filter,filterManager){var filterSize=filterManager.container.globalData.renderConfig.filterSize;filter.setAttribute('x',filterSize.x);filter.setAttribute('y',filterSize.y);filter.setAttribute('width',filterSize.width);filter.setAttribute('height',filterSize.height);this.filterManager=filterManager;var feGaussianBlur=createNS('feGaussianBlur');feGaussianBlur.setAttribute('in','SourceAlpha');feGaussianBlur.setAttribute('result','drop_shadow_1');feGaussianBlur.setAttribute('stdDeviation','0');this.feGaussianBlur=feGaussianBlur;filter.appendChild(feGaussianBlur);var feOffset=createNS('feOffset');feOffset.setAttribute('dx','25');feOffset.setAttribute('dy','0');feOffset.setAttribute('in','drop_shadow_1');feOffset.setAttribute('result','drop_shadow_2');this.feOffset=feOffset;filter.appendChild(feOffset);var feFlood=createNS('feFlood');feFlood.setAttribute('flood-color','#00ff00');feFlood.setAttribute('flood-opacity','1');feFlood.setAttribute('result','drop_shadow_3');this.feFlood=feFlood;filter.appendChild(feFlood);var feComposite=createNS('feComposite');feComposite.setAttribute('in','drop_shadow_3');feComposite.setAttribute('in2','drop_shadow_2');feComposite.setAttribute('operator','in');feComposite.setAttribute('result','drop_shadow_4');filter.appendChild(feComposite);var feMerge=createNS('feMerge');filter.appendChild(feMerge);var feMergeNode;feMergeNode=createNS('feMergeNode');feMerge.appendChild(feMergeNode);feMergeNode=createNS('feMergeNode');feMergeNode.setAttribute('in','SourceGraphic');this.feMergeNode=feMergeNode;this.feMerge=feMerge;this.originalNodeAdded=false;feMerge.appendChild(feMergeNode);}SVGDropShadowEffect.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){if(forceRender||this.filterManager.effectElements[4].p._mdf){this.feGaussianBlur.setAttribute('stdDeviation',this.filterManager.effectElements[4].p.v/4);}if(forceRender||this.filterManager.effectElements[0].p._mdf){var col=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute('flood-color',rgbToHex(Math.round(col[0]*255),Math.round(col[1]*255),Math.round(col[2]*255)));}if(forceRender||this.filterManager.effectElements[1].p._mdf){this.feFlood.setAttribute('flood-opacity',this.filterManager.effectElements[1].p.v/255);}if(forceRender||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var distance=this.filterManager.effectElements[3].p.v;var angle=(this.filterManager.effectElements[2].p.v-90)*degToRads;var x=distance*Math.cos(angle);var y=distance*Math.sin(angle);this.feOffset.setAttribute('dx',x);this.feOffset.setAttribute('dy',y);}/* if(forceRender || this.filterManager.effectElements[5].p._mdf){
            if(this.filterManager.effectElements[5].p.v === 1 && this.originalNodeAdded) {
                this.feMerge.removeChild(this.feMergeNode);
                this.originalNodeAdded = false;
            } else if(this.filterManager.effectElements[5].p.v === 0 && !this.originalNodeAdded) {
                this.feMerge.appendChild(this.feMergeNode);
                this.originalNodeAdded = true;
            }
        } */}};/* global createElementID, createNS */var _svgMatteSymbols=[];function SVGMatte3Effect(filterElem,filterManager,elem){this.initialized=false;this.filterManager=filterManager;this.filterElem=filterElem;this.elem=elem;elem.matteElement=createNS('g');elem.matteElement.appendChild(elem.layerElement);elem.matteElement.appendChild(elem.transformedElement);elem.baseElement=elem.matteElement;}SVGMatte3Effect.prototype.findSymbol=function(mask){var i=0;var len=_svgMatteSymbols.length;while(i<len){if(_svgMatteSymbols[i]===mask){return _svgMatteSymbols[i];}i+=1;}return null;};SVGMatte3Effect.prototype.replaceInParent=function(mask,symbolId){var parentNode=mask.layerElement.parentNode;if(!parentNode){return;}var children=parentNode.children;var i=0;var len=children.length;while(i<len){if(children[i]===mask.layerElement){break;}i+=1;}var nextChild;if(i<=len-2){nextChild=children[i+1];}var useElem=createNS('use');useElem.setAttribute('href','#'+symbolId);if(nextChild){parentNode.insertBefore(useElem,nextChild);}else{parentNode.appendChild(useElem);}};SVGMatte3Effect.prototype.setElementAsMask=function(elem,mask){if(!this.findSymbol(mask)){var symbolId=createElementID();var masker=createNS('mask');masker.setAttribute('id',mask.layerId);masker.setAttribute('mask-type','alpha');_svgMatteSymbols.push(mask);var defs=elem.globalData.defs;defs.appendChild(masker);var symbol=createNS('symbol');symbol.setAttribute('id',symbolId);this.replaceInParent(mask,symbolId);symbol.appendChild(mask.layerElement);defs.appendChild(symbol);var useElem=createNS('use');useElem.setAttribute('href','#'+symbolId);masker.appendChild(useElem);mask.data.hd=false;mask.show();}elem.setMatte(mask.layerId);};SVGMatte3Effect.prototype.initialize=function(){var ind=this.filterManager.effectElements[0].p.v;var elements=this.elem.comp.elements;var i=0;var len=elements.length;while(i<len){if(elements[i]&&elements[i].data.ind===ind){this.setElementAsMask(this.elem,elements[i]);}i+=1;}this.initialized=true;};SVGMatte3Effect.prototype.renderFrame=function(){if(!this.initialized){this.initialize();}};/* global createElementID, filtersFactory, SVGTintFilter, SVGFillFilter, SVGStrokeEffect, SVGTritoneFilter,
SVGProLevelsFilter, SVGDropShadowEffect, SVGMatte3Effect, SVGGaussianBlurEffect, locationHref */function SVGEffects(elem){var i;var len=elem.data.ef?elem.data.ef.length:0;var filId=createElementID();var fil=filtersFactory.createFilter(filId,true);var count=0;this.filters=[];var filterManager;for(i=0;i<len;i+=1){filterManager=null;if(elem.data.ef[i].ty===20){count+=1;filterManager=new SVGTintFilter(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===21){count+=1;filterManager=new SVGFillFilter(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===22){filterManager=new SVGStrokeEffect(elem,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===23){count+=1;filterManager=new SVGTritoneFilter(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===24){count+=1;filterManager=new SVGProLevelsFilter(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===25){count+=1;filterManager=new SVGDropShadowEffect(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===28){// count += 1;
filterManager=new SVGMatte3Effect(fil,elem.effectsManager.effectElements[i],elem);}else if(elem.data.ef[i].ty===29){count+=1;filterManager=new SVGGaussianBlurEffect(fil,elem.effectsManager.effectElements[i]);}if(filterManager){this.filters.push(filterManager);}}if(count){elem.globalData.defs.appendChild(fil);elem.layerElement.setAttribute('filter','url('+locationHref+'#'+filId+')');}if(this.filters.length){elem.addRenderableComponent(this);}}SVGEffects.prototype.renderFrame=function(_isFirstFrame){var i;var len=this.filters.length;for(i=0;i<len;i+=1){this.filters[i].renderFrame(_isFirstFrame);}};/* global Matrix, createTypedArray */function CVContextData(){this.saved=[];this.cArrPos=0;this.cTr=new Matrix();this.cO=1;var i;var len=15;this.savedOp=createTypedArray('float32',len);for(i=0;i<len;i+=1){this.saved[i]=createTypedArray('float32',16);}this._length=len;}CVContextData.prototype.duplicate=function(){var newLength=this._length*2;var currentSavedOp=this.savedOp;this.savedOp=createTypedArray('float32',newLength);this.savedOp.set(currentSavedOp);var i=0;for(i=this._length;i<newLength;i+=1){this.saved[i]=createTypedArray('float32',16);}this._length=newLength;};CVContextData.prototype.reset=function(){this.cArrPos=0;this.cTr.reset();this.cO=1;};/* global CVEffects, getBlendMode, CVMaskElement, Matrix */function CVBaseElement(){}CVBaseElement.prototype={createElements:function createElements(){},initRendererElement:function initRendererElement(){},createContainerElements:function createContainerElements(){this.canvasContext=this.globalData.canvasContext;this.renderableEffectsManager=new CVEffects(this);},createContent:function createContent(){},setBlendMode:function setBlendMode(){var globalData=this.globalData;if(globalData.blendMode!==this.data.bm){globalData.blendMode=this.data.bm;var blendModeValue=getBlendMode(this.data.bm);globalData.canvasContext.globalCompositeOperation=blendModeValue;}},createRenderableComponents:function createRenderableComponents(){this.maskManager=new CVMaskElement(this.data,this);},hideElement:function hideElement(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){this.hidden=true;}},showElement:function showElement(){if(this.isInRange&&!this.isTransparent){this.hidden=false;this._isFirstFrame=true;this.maskManager._isFirstFrame=true;}},renderFrame:function renderFrame(){if(this.hidden||this.data.hd){return;}this.renderTransform();this.renderRenderable();this.setBlendMode();var forceRealStack=this.data.ty===0;this.globalData.renderer.save(forceRealStack);this.globalData.renderer.ctxTransform(this.finalTransform.mat.props);this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v);this.renderInnerContent();this.globalData.renderer.restore(forceRealStack);if(this.maskManager.hasMasks){this.globalData.renderer.restore(true);}if(this._isFirstFrame){this._isFirstFrame=false;}},destroy:function destroy(){this.canvasContext=null;this.data=null;this.globalData=null;this.maskManager.destroy();},mHelper:new Matrix()};CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement;CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;/* global extendPrototype, BaseElement, TransformElement, CVBaseElement,HierarchyElement, FrameElement,
RenderableElement, SVGShapeElement, IImageElement, createTag */function CVImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);this.img=globalData.imageLoader.getImage(this.assetData);this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement);CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement;CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame;CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var canvas=createTag('canvas');canvas.width=this.assetData.w;canvas.height=this.assetData.h;var ctx=canvas.getContext('2d');var imgW=this.img.width;var imgH=this.img.height;var imgRel=imgW/imgH;var canvasRel=this.assetData.w/this.assetData.h;var widthCrop;var heightCrop;var par=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;if(imgRel>canvasRel&&par==='xMidYMid slice'||imgRel<canvasRel&&par!=='xMidYMid slice'){heightCrop=imgH;widthCrop=heightCrop*canvasRel;}else{widthCrop=imgW;heightCrop=widthCrop/canvasRel;}ctx.drawImage(this.img,(imgW-widthCrop)/2,(imgH-heightCrop)/2,widthCrop,heightCrop,0,0,this.assetData.w,this.assetData.h);this.img=canvas;}};CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0);};CVImageElement.prototype.destroy=function(){this.img=null;};/* global createSizedArray, PropertyFactory, extendPrototype, CanvasRenderer, ICompElement, CVBaseElement */function CVCompElement(data,globalData,comp){this.completeLayers=false;this.layers=data.layers;this.pendingElements=[];this.elements=createSizedArray(this.layers.length);this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([CanvasRenderer,ICompElement,CVBaseElement],CVCompElement);CVCompElement.prototype.renderInnerContent=function(){var ctx=this.canvasContext;ctx.beginPath();ctx.moveTo(0,0);ctx.lineTo(this.data.w,0);ctx.lineTo(this.data.w,this.data.h);ctx.lineTo(0,this.data.h);ctx.lineTo(0,0);ctx.clip();var i;var len=this.layers.length;for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}};CVCompElement.prototype.destroy=function(){var i;var len=this.layers.length;for(i=len-1;i>=0;i-=1){if(this.elements[i]){this.elements[i].destroy();}}this.layers=null;this.elements=null;};/* global createSizedArray, ShapePropertyFactory, MaskElement */function CVMaskElement(data,element){this.data=data;this.element=element;this.masksProperties=this.data.masksProperties||[];this.viewData=createSizedArray(this.masksProperties.length);var i;var len=this.masksProperties.length;var hasMasks=false;for(i=0;i<len;i+=1){if(this.masksProperties[i].mode!=='n'){hasMasks=true;}this.viewData[i]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[i],3);}this.hasMasks=hasMasks;if(hasMasks){this.element.addRenderableComponent(this);}}CVMaskElement.prototype.renderFrame=function(){if(!this.hasMasks){return;}var transform=this.element.finalTransform.mat;var ctx=this.element.canvasContext;var i;var len=this.masksProperties.length;var pt;var pts;var data;ctx.beginPath();for(i=0;i<len;i+=1){if(this.masksProperties[i].mode!=='n'){if(this.masksProperties[i].inv){ctx.moveTo(0,0);ctx.lineTo(this.element.globalData.compSize.w,0);ctx.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h);ctx.lineTo(0,this.element.globalData.compSize.h);ctx.lineTo(0,0);}data=this.viewData[i].v;pt=transform.applyToPointArray(data.v[0][0],data.v[0][1],0);ctx.moveTo(pt[0],pt[1]);var j;var jLen=data._length;for(j=1;j<jLen;j+=1){pts=transform.applyToTriplePoints(data.o[j-1],data.i[j],data.v[j]);ctx.bezierCurveTo(pts[0],pts[1],pts[2],pts[3],pts[4],pts[5]);}pts=transform.applyToTriplePoints(data.o[j-1],data.i[0],data.v[0]);ctx.bezierCurveTo(pts[0],pts[1],pts[2],pts[3],pts[4],pts[5]);}}this.element.globalData.renderer.save(true);ctx.clip();};CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty;CVMaskElement.prototype.destroy=function(){this.element=null;};/* global ShapeTransformManager, extendPrototype, BaseElement, TransformElement, CVBaseElement, IShapeElement,
HierarchyElement, FrameElement, RenderableElement, RenderableDOMElement, PropertyFactory, degToRads, GradientProperty,
DashProperty, TransformPropertyFactory, CVShapeData, ShapeModifiers, bmFloor */function CVShapeElement(data,globalData,comp){this.shapes=[];this.shapesData=data.shapes;this.stylesList=[];this.itemsData=[];this.prevViewData=[];this.shapeModifiers=[];this.processedElements=[];this.transformsManager=new ShapeTransformManager();this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement);CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement;CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:false};CVShapeElement.prototype.dashResetter=[];CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,true,[]);};CVShapeElement.prototype.createStyleElement=function(data,transforms){var styleElem={data:data,type:data.ty,preTransforms:this.transformsManager.addTransformSequence(transforms),transforms:[],elements:[],closed:data.hd===true};var elementData={};if(data.ty==='fl'||data.ty==='st'){elementData.c=PropertyFactory.getProp(this,data.c,1,255,this);if(!elementData.c.k){styleElem.co='rgb('+bmFloor(elementData.c.v[0])+','+bmFloor(elementData.c.v[1])+','+bmFloor(elementData.c.v[2])+')';}}else if(data.ty==='gf'||data.ty==='gs'){elementData.s=PropertyFactory.getProp(this,data.s,1,null,this);elementData.e=PropertyFactory.getProp(this,data.e,1,null,this);elementData.h=PropertyFactory.getProp(this,data.h||{k:0},0,0.01,this);elementData.a=PropertyFactory.getProp(this,data.a||{k:0},0,degToRads,this);elementData.g=new GradientProperty(this,data.g,this);}elementData.o=PropertyFactory.getProp(this,data.o,0,0.01,this);if(data.ty==='st'||data.ty==='gs'){styleElem.lc=this.lcEnum[data.lc]||'round';styleElem.lj=this.ljEnum[data.lj]||'round';if(data.lj==1){// eslint-disable-line eqeqeq
styleElem.ml=data.ml;}elementData.w=PropertyFactory.getProp(this,data.w,0,null,this);if(!elementData.w.k){styleElem.wi=elementData.w.v;}if(data.d){var d=new DashProperty(this,data.d,'canvas',this);elementData.d=d;if(!elementData.d.k){styleElem.da=elementData.d.dashArray;styleElem.do=elementData.d.dashoffset[0];}}}else{styleElem.r=data.r===2?'evenodd':'nonzero';}this.stylesList.push(styleElem);elementData.style=styleElem;return elementData;};CVShapeElement.prototype.createGroupElement=function(){var elementData={it:[],prevViewData:[]};return elementData;};CVShapeElement.prototype.createTransformElement=function(data){var elementData={transform:{opacity:1,_opMdf:false,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,data.o,0,0.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,data,this)}};return elementData;};CVShapeElement.prototype.createShapeElement=function(data){var elementData=new CVShapeData(this,data,this.stylesList,this.transformsManager);this.shapes.push(elementData);this.addShapeToModifiers(elementData);return elementData;};CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=true;var i;var len=this.itemsData.length;for(i=0;i<len;i+=1){this.prevViewData[i]=this.itemsData[i];}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,true,[]);len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();}this.renderModifiers();this.transformsManager.processSequences(this._isFirstFrame);};CVShapeElement.prototype.addTransformToStyleList=function(transform){var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){if(!this.stylesList[i].closed){this.stylesList[i].transforms.push(transform);}}};CVShapeElement.prototype.removeTransformFromStyleList=function(){var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){if(!this.stylesList[i].closed){this.stylesList[i].transforms.pop();}}};CVShapeElement.prototype.closeStyles=function(styles){var i;var len=styles.length;for(i=0;i<len;i+=1){styles[i].closed=true;}};CVShapeElement.prototype.searchShapes=function(arr,itemsData,prevViewData,shouldRender,transforms){var i;var len=arr.length-1;var j;var jLen;var ownStyles=[];var ownModifiers=[];var processedPos;var modifier;var currentTransform;var ownTransforms=[].concat(transforms);for(i=len;i>=0;i-=1){processedPos=this.searchProcessedElement(arr[i]);if(!processedPos){arr[i]._shouldRender=shouldRender;}else{itemsData[i]=prevViewData[processedPos-1];}if(arr[i].ty==='fl'||arr[i].ty==='st'||arr[i].ty==='gf'||arr[i].ty==='gs'){if(!processedPos){itemsData[i]=this.createStyleElement(arr[i],ownTransforms);}else{itemsData[i].style.closed=false;}ownStyles.push(itemsData[i].style);}else if(arr[i].ty==='gr'){if(!processedPos){itemsData[i]=this.createGroupElement(arr[i]);}else{jLen=itemsData[i].it.length;for(j=0;j<jLen;j+=1){itemsData[i].prevViewData[j]=itemsData[i].it[j];}}this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,shouldRender,ownTransforms);}else if(arr[i].ty==='tr'){if(!processedPos){currentTransform=this.createTransformElement(arr[i]);itemsData[i]=currentTransform;}ownTransforms.push(itemsData[i]);this.addTransformToStyleList(itemsData[i]);}else if(arr[i].ty==='sh'||arr[i].ty==='rc'||arr[i].ty==='el'||arr[i].ty==='sr'){if(!processedPos){itemsData[i]=this.createShapeElement(arr[i]);}}else if(arr[i].ty==='tm'||arr[i].ty==='rd'||arr[i].ty==='pb'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);modifier.init(this,arr[i]);itemsData[i]=modifier;this.shapeModifiers.push(modifier);}else{modifier=itemsData[i];modifier.closed=false;}ownModifiers.push(modifier);}else if(arr[i].ty==='rp'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);itemsData[i]=modifier;modifier.init(this,arr,i,itemsData);this.shapeModifiers.push(modifier);shouldRender=false;}else{modifier=itemsData[i];modifier.closed=true;}ownModifiers.push(modifier);}this.addProcessedElement(arr[i],i+1);}this.removeTransformFromStyleList();this.closeStyles(ownStyles);len=ownModifiers.length;for(i=0;i<len;i+=1){ownModifiers[i].closed=true;}};CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1;this.transformHelper._opMdf=false;this.renderModifiers();this.transformsManager.processSequences(this._isFirstFrame);this.renderShape(this.transformHelper,this.shapesData,this.itemsData,true);};CVShapeElement.prototype.renderShapeTransform=function(parentTransform,groupTransform){if(parentTransform._opMdf||groupTransform.op._mdf||this._isFirstFrame){groupTransform.opacity=parentTransform.opacity;groupTransform.opacity*=groupTransform.op.v;groupTransform._opMdf=true;}};CVShapeElement.prototype.drawLayer=function(){var i;var len=this.stylesList.length;var j;var jLen;var k;var kLen;var elems;var nodes;var renderer=this.globalData.renderer;var ctx=this.globalData.canvasContext;var type;var currentStyle;for(i=0;i<len;i+=1){currentStyle=this.stylesList[i];type=currentStyle.type;// Skipping style when
// Stroke width equals 0
// style should not be rendered (extra unused repeaters)
// current opacity equals 0
// global opacity equals 0
if(!((type==='st'||type==='gs')&&currentStyle.wi===0||!currentStyle.data._shouldRender||currentStyle.coOp===0||this.globalData.currentGlobalAlpha===0)){renderer.save();elems=currentStyle.elements;if(type==='st'||type==='gs'){ctx.strokeStyle=type==='st'?currentStyle.co:currentStyle.grd;ctx.lineWidth=currentStyle.wi;ctx.lineCap=currentStyle.lc;ctx.lineJoin=currentStyle.lj;ctx.miterLimit=currentStyle.ml||0;}else{ctx.fillStyle=type==='fl'?currentStyle.co:currentStyle.grd;}renderer.ctxOpacity(currentStyle.coOp);if(type!=='st'&&type!=='gs'){ctx.beginPath();}renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);jLen=elems.length;for(j=0;j<jLen;j+=1){if(type==='st'||type==='gs'){ctx.beginPath();if(currentStyle.da){ctx.setLineDash(currentStyle.da);ctx.lineDashOffset=currentStyle.do;}}nodes=elems[j].trNodes;kLen=nodes.length;for(k=0;k<kLen;k+=1){if(nodes[k].t==='m'){ctx.moveTo(nodes[k].p[0],nodes[k].p[1]);}else if(nodes[k].t==='c'){ctx.bezierCurveTo(nodes[k].pts[0],nodes[k].pts[1],nodes[k].pts[2],nodes[k].pts[3],nodes[k].pts[4],nodes[k].pts[5]);}else{ctx.closePath();}}if(type==='st'||type==='gs'){ctx.stroke();if(currentStyle.da){ctx.setLineDash(this.dashResetter);}}}if(type!=='st'&&type!=='gs'){ctx.fill(currentStyle.r);}renderer.restore();}}};CVShapeElement.prototype.renderShape=function(parentTransform,items,data,isMain){var i;var len=items.length-1;var groupTransform;groupTransform=parentTransform;for(i=len;i>=0;i-=1){if(items[i].ty==='tr'){groupTransform=data[i].transform;this.renderShapeTransform(parentTransform,groupTransform);}else if(items[i].ty==='sh'||items[i].ty==='el'||items[i].ty==='rc'||items[i].ty==='sr'){this.renderPath(items[i],data[i]);}else if(items[i].ty==='fl'){this.renderFill(items[i],data[i],groupTransform);}else if(items[i].ty==='st'){this.renderStroke(items[i],data[i],groupTransform);}else if(items[i].ty==='gf'||items[i].ty==='gs'){this.renderGradientFill(items[i],data[i],groupTransform);}else if(items[i].ty==='gr'){this.renderShape(groupTransform,items[i].it,data[i].it);}else if(items[i].ty==='tm'){//
}}if(isMain){this.drawLayer();}};CVShapeElement.prototype.renderStyledShape=function(styledShape,shape){if(this._isFirstFrame||shape._mdf||styledShape.transforms._mdf){var shapeNodes=styledShape.trNodes;var paths=shape.paths;var i;var len;var j;var jLen=paths._length;shapeNodes.length=0;var groupTransformMat=styledShape.transforms.finalTransform;for(j=0;j<jLen;j+=1){var pathNodes=paths.shapes[j];if(pathNodes&&pathNodes.v){len=pathNodes._length;for(i=1;i<len;i+=1){if(i===1){shapeNodes.push({t:'m',p:groupTransformMat.applyToPointArray(pathNodes.v[0][0],pathNodes.v[0][1],0)});}shapeNodes.push({t:'c',pts:groupTransformMat.applyToTriplePoints(pathNodes.o[i-1],pathNodes.i[i],pathNodes.v[i])});}if(len===1){shapeNodes.push({t:'m',p:groupTransformMat.applyToPointArray(pathNodes.v[0][0],pathNodes.v[0][1],0)});}if(pathNodes.c&&len){shapeNodes.push({t:'c',pts:groupTransformMat.applyToTriplePoints(pathNodes.o[i-1],pathNodes.i[0],pathNodes.v[0])});shapeNodes.push({t:'z'});}}}styledShape.trNodes=shapeNodes;}};CVShapeElement.prototype.renderPath=function(pathData,itemData){if(pathData.hd!==true&&pathData._shouldRender){var i;var len=itemData.styledShapes.length;for(i=0;i<len;i+=1){this.renderStyledShape(itemData.styledShapes[i],itemData.sh);}}};CVShapeElement.prototype.renderFill=function(styleData,itemData,groupTransform){var styleElem=itemData.style;if(itemData.c._mdf||this._isFirstFrame){styleElem.co='rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')';}if(itemData.o._mdf||groupTransform._opMdf||this._isFirstFrame){styleElem.coOp=itemData.o.v*groupTransform.opacity;}};CVShapeElement.prototype.renderGradientFill=function(styleData,itemData,groupTransform){var styleElem=itemData.style;var grd;if(!styleElem.grd||itemData.g._mdf||itemData.s._mdf||itemData.e._mdf||styleData.t!==1&&(itemData.h._mdf||itemData.a._mdf)){var ctx=this.globalData.canvasContext;var pt1=itemData.s.v;var pt2=itemData.e.v;if(styleData.t===1){grd=ctx.createLinearGradient(pt1[0],pt1[1],pt2[0],pt2[1]);}else{var rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));var ang=Math.atan2(pt2[1]-pt1[1],pt2[0]-pt1[0]);var percent=itemData.h.v;if(percent>=1){percent=0.99;}else if(percent<=-1){percent=-0.99;}var dist=rad*percent;var x=Math.cos(ang+itemData.a.v)*dist+pt1[0];var y=Math.sin(ang+itemData.a.v)*dist+pt1[1];grd=ctx.createRadialGradient(x,y,0,pt1[0],pt1[1],rad);}var i;var len=styleData.g.p;var cValues=itemData.g.c;var opacity=1;for(i=0;i<len;i+=1){if(itemData.g._hasOpacity&&itemData.g._collapsable){opacity=itemData.g.o[i*2+1];}grd.addColorStop(cValues[i*4]/100,'rgba('+cValues[i*4+1]+','+cValues[i*4+2]+','+cValues[i*4+3]+','+opacity+')');}styleElem.grd=grd;}styleElem.coOp=itemData.o.v*groupTransform.opacity;};CVShapeElement.prototype.renderStroke=function(styleData,itemData,groupTransform){var styleElem=itemData.style;var d=itemData.d;if(d&&(d._mdf||this._isFirstFrame)){styleElem.da=d.dashArray;styleElem.do=d.dashoffset[0];}if(itemData.c._mdf||this._isFirstFrame){styleElem.co='rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')';}if(itemData.o._mdf||groupTransform._opMdf||this._isFirstFrame){styleElem.coOp=itemData.o.v*groupTransform.opacity;}if(itemData.w._mdf||this._isFirstFrame){styleElem.wi=itemData.w.v;}};CVShapeElement.prototype.destroy=function(){this.shapesData=null;this.globalData=null;this.canvasContext=null;this.stylesList.length=0;this.itemsData.length=0;};/* global extendPrototype, BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement,
SVGShapeElement, IImageElement */function CVSolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement);CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement;CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame;CVSolidElement.prototype.renderInnerContent=function(){var ctx=this.canvasContext;ctx.fillStyle=this.data.sc;ctx.fillRect(0,0,this.data.sw,this.data.sh);//
};/* global extendPrototype, BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement,
RenderableElement, ITextElement, createTag, createSizedArray */function CVTextElement(data,globalData,comp){this.textSpans=[];this.yOffset=0;this.fillColorAnim=false;this.strokeColorAnim=false;this.strokeWidthAnim=false;this.stroke=false;this.fill=false;this.justifyOffset=0;this.currentRender=null;this.renderType='canvas';this.values={fill:'rgba(0,0,0,0)',stroke:'rgba(0,0,0,0)',sWidth:0,fValue:''};this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement);CVTextElement.prototype.tHelper=createTag('canvas').getContext('2d');CVTextElement.prototype.buildNewText=function(){var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData.l?documentData.l.length:0);var hasFill=false;if(documentData.fc){hasFill=true;this.values.fill=this.buildColor(documentData.fc);}else{this.values.fill='rgba(0,0,0,0)';}this.fill=hasFill;var hasStroke=false;if(documentData.sc){hasStroke=true;this.values.stroke=this.buildColor(documentData.sc);this.values.sWidth=documentData.sw;}var fontData=this.globalData.fontManager.getFontByName(documentData.f);var i;var len;var letters=documentData.l;var matrixHelper=this.mHelper;this.stroke=hasStroke;this.values.fValue=documentData.finalSize+'px '+this.globalData.fontManager.getFontByName(documentData.f).fFamily;len=documentData.finalText.length;// this.tHelper.font = this.values.fValue;
var charData;var shapeData;var k;var kLen;var shapes;var j;var jLen;var pathNodes;var commands;var pathArr;var singleShape=this.data.singleShape;var trackingOffset=documentData.tr*0.001*documentData.finalSize;var xPos=0;var yPos=0;var firstLine=true;var cnt=0;for(i=0;i<len;i+=1){charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);shapeData=charData&&charData.data||{};matrixHelper.reset();if(singleShape&&letters[i].n){xPos=-trackingOffset;yPos+=documentData.yOffset;yPos+=firstLine?1:0;firstLine=false;}shapes=shapeData.shapes?shapeData.shapes[0].it:[];jLen=shapes.length;matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);if(singleShape){this.applyTextPropertiesToMatrix(documentData,matrixHelper,letters[i].line,xPos,yPos);}commands=createSizedArray(jLen);for(j=0;j<jLen;j+=1){kLen=shapes[j].ks.k.i.length;pathNodes=shapes[j].ks.k;pathArr=[];for(k=1;k<kLen;k+=1){if(k===1){pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));}pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToY(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToX(pathNodes.v[k][0],pathNodes.v[k][1],0),matrixHelper.applyToY(pathNodes.v[k][0],pathNodes.v[k][1],0));}pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToY(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));commands[j]=pathArr;}if(singleShape){xPos+=letters[i].l;xPos+=trackingOffset;}if(this.textSpans[cnt]){this.textSpans[cnt].elem=commands;}else{this.textSpans[cnt]={elem:commands};}cnt+=1;}};CVTextElement.prototype.renderInnerContent=function(){var ctx=this.canvasContext;ctx.font=this.values.fValue;ctx.lineCap='butt';ctx.lineJoin='miter';ctx.miterLimit=4;if(!this.data.singleShape){this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);}var i;var len;var j;var jLen;var k;var kLen;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var lastFill=null;var lastStroke=null;var lastStrokeW=null;var commands;var pathArr;for(i=0;i<len;i+=1){if(!letters[i].n){renderedLetter=renderedLetters[i];if(renderedLetter){this.globalData.renderer.save();this.globalData.renderer.ctxTransform(renderedLetter.p);this.globalData.renderer.ctxOpacity(renderedLetter.o);}if(this.fill){if(renderedLetter&&renderedLetter.fc){if(lastFill!==renderedLetter.fc){lastFill=renderedLetter.fc;ctx.fillStyle=renderedLetter.fc;}}else if(lastFill!==this.values.fill){lastFill=this.values.fill;ctx.fillStyle=this.values.fill;}commands=this.textSpans[i].elem;jLen=commands.length;this.globalData.canvasContext.beginPath();for(j=0;j<jLen;j+=1){pathArr=commands[j];kLen=pathArr.length;this.globalData.canvasContext.moveTo(pathArr[0],pathArr[1]);for(k=2;k<kLen;k+=6){this.globalData.canvasContext.bezierCurveTo(pathArr[k],pathArr[k+1],pathArr[k+2],pathArr[k+3],pathArr[k+4],pathArr[k+5]);}}this.globalData.canvasContext.closePath();this.globalData.canvasContext.fill();/// ctx.fillText(this.textSpans[i].val,0,0);
}if(this.stroke){if(renderedLetter&&renderedLetter.sw){if(lastStrokeW!==renderedLetter.sw){lastStrokeW=renderedLetter.sw;ctx.lineWidth=renderedLetter.sw;}}else if(lastStrokeW!==this.values.sWidth){lastStrokeW=this.values.sWidth;ctx.lineWidth=this.values.sWidth;}if(renderedLetter&&renderedLetter.sc){if(lastStroke!==renderedLetter.sc){lastStroke=renderedLetter.sc;ctx.strokeStyle=renderedLetter.sc;}}else if(lastStroke!==this.values.stroke){lastStroke=this.values.stroke;ctx.strokeStyle=this.values.stroke;}commands=this.textSpans[i].elem;jLen=commands.length;this.globalData.canvasContext.beginPath();for(j=0;j<jLen;j+=1){pathArr=commands[j];kLen=pathArr.length;this.globalData.canvasContext.moveTo(pathArr[0],pathArr[1]);for(k=2;k<kLen;k+=6){this.globalData.canvasContext.bezierCurveTo(pathArr[k],pathArr[k+1],pathArr[k+2],pathArr[k+3],pathArr[k+4],pathArr[k+5]);}}this.globalData.canvasContext.closePath();this.globalData.canvasContext.stroke();/// ctx.strokeText(letters[i].val,0,0);
}if(renderedLetter){this.globalData.renderer.restore();}}}};function CVEffects(){}CVEffects.prototype.renderFrame=function(){};/* global createTag, createNS, styleDiv, CVEffects, MaskElement, SVGBaseElement, HybridRenderer */function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function checkBlendMode(){},initRendererElement:function initRendererElement(){this.baseElement=createTag(this.data.tg||'div');if(this.data.hasMask){this.svgElement=createNS('svg');this.layerElement=createNS('g');this.maskedElement=this.layerElement;this.svgElement.appendChild(this.layerElement);this.baseElement.appendChild(this.svgElement);}else{this.layerElement=this.baseElement;}styleDiv(this.baseElement);},createContainerElements:function createContainerElements(){this.renderableEffectsManager=new CVEffects(this);this.transformedElement=this.baseElement;this.maskedElement=this.layerElement;if(this.data.ln){this.layerElement.setAttribute('id',this.data.ln);}if(this.data.cl){this.layerElement.setAttribute('class',this.data.cl);}if(this.data.bm!==0){this.setBlendMode();}},renderElement:function renderElement(){var transformedElementStyle=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var matrixValue=this.finalTransform.mat.toCSS();transformedElementStyle.transform=matrixValue;transformedElementStyle.webkitTransform=matrixValue;}if(this.finalTransform._opMdf){transformedElementStyle.opacity=this.finalTransform.mProp.o.v;}},renderFrame:function renderFrame(){// If it is exported as hidden (data.hd === true) no need to render
// If it is not visible no need to render
if(this.data.hd||this.hidden){return;}this.renderTransform();this.renderRenderable();this.renderElement();this.renderInnerContent();if(this._isFirstFrame){this._isFirstFrame=false;}},destroy:function destroy(){this.layerElement=null;this.transformedElement=null;if(this.matteElement){this.matteElement=null;}if(this.maskManager){this.maskManager.destroy();this.maskManager=null;}},createRenderableComponents:function createRenderableComponents(){this.maskManager=new MaskElement(this.data,this,this.globalData);},addEffects:function addEffects(){},setMatte:function setMatte(){}};HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement;HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy;HBaseElement.prototype.buildElementParenting=HybridRenderer.prototype.buildElementParenting;/* global extendPrototype, BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement,
RenderableDOMElement, createNS, createTag */function HSolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement);HSolidElement.prototype.createContent=function(){var rect;if(this.data.hasMask){rect=createNS('rect');rect.setAttribute('width',this.data.sw);rect.setAttribute('height',this.data.sh);rect.setAttribute('fill',this.data.sc);this.svgElement.setAttribute('width',this.data.sw);this.svgElement.setAttribute('height',this.data.sh);}else{rect=createTag('div');rect.style.width=this.data.sw+'px';rect.style.height=this.data.sh+'px';rect.style.backgroundColor=this.data.sc;}this.layerElement.appendChild(rect);};/* global createSizedArray, PropertyFactory, extendPrototype, HybridRenderer, ICompElement, HBaseElement */function HCompElement(data,globalData,comp){this.layers=data.layers;this.supports3d=!data.hasMask;this.completeLayers=false;this.pendingElements=[];this.elements=this.layers?createSizedArray(this.layers.length):[];this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([HybridRenderer,ICompElement,HBaseElement],HCompElement);HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements;HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements();// divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';
if(this.data.hasMask){this.svgElement.setAttribute('width',this.data.w);this.svgElement.setAttribute('height',this.data.h);this.transformedElement=this.baseElement;}else{this.transformedElement=this.layerElement;}};HCompElement.prototype.addTo3dContainer=function(elem,pos){var j=0;var nextElement;while(j<pos){if(this.elements[j]&&this.elements[j].getBaseElement){nextElement=this.elements[j].getBaseElement();}j+=1;}if(nextElement){this.layerElement.insertBefore(elem,nextElement);}else{this.layerElement.appendChild(elem);}};/* global createNS, extendPrototype, BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement,
HierarchyElement, FrameElement, RenderableElement, createNS, bmMin, bmSqrt, bmMin, bmMax, bmPow */function HShapeElement(data,globalData,comp){// List of drawable elements
this.shapes=[];// Full shape data
this.shapesData=data.shapes;// List of styles that will be applied to shapes
this.stylesList=[];// List of modifiers that will be applied to shapes
this.shapeModifiers=[];// List of items in shape tree
this.itemsData=[];// List of items in previous shape tree
this.processedElements=[];// List of animated components
this.animatedContents=[];this.shapesContainer=createNS('g');this.initElement(data,globalData,comp);// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
// List of elements that have been created
this.prevViewData=[];this.currentBBox={x:999999,y:-999999,h:0,w:0};}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement);HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent;HShapeElement.prototype.createContent=function(){var cont;this.baseElement.style.fontSize=0;if(this.data.hasMask){this.layerElement.appendChild(this.shapesContainer);cont=this.svgElement;}else{cont=createNS('svg');var size=this.comp.data?this.comp.data:this.globalData.compSize;cont.setAttribute('width',size.w);cont.setAttribute('height',size.h);cont.appendChild(this.shapesContainer);this.layerElement.appendChild(cont);}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],true);this.filterUniqueShapes();this.shapeCont=cont;};HShapeElement.prototype.getTransformedPoint=function(transformers,point){var i;var len=transformers.length;for(i=0;i<len;i+=1){point=transformers[i].mProps.v.applyToPointArray(point[0],point[1],0);}return point;};HShapeElement.prototype.calculateShapeBoundingBox=function(item,boundingBox){var shape=item.sh.v;var transformers=item.transformers;var i;var len=shape._length;var vPoint;var oPoint;var nextIPoint;var nextVPoint;if(len<=1){return;}for(i=0;i<len-1;i+=1){vPoint=this.getTransformedPoint(transformers,shape.v[i]);oPoint=this.getTransformedPoint(transformers,shape.o[i]);nextIPoint=this.getTransformedPoint(transformers,shape.i[i+1]);nextVPoint=this.getTransformedPoint(transformers,shape.v[i+1]);this.checkBounds(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox);}if(shape.c){vPoint=this.getTransformedPoint(transformers,shape.v[i]);oPoint=this.getTransformedPoint(transformers,shape.o[i]);nextIPoint=this.getTransformedPoint(transformers,shape.i[0]);nextVPoint=this.getTransformedPoint(transformers,shape.v[0]);this.checkBounds(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox);}};HShapeElement.prototype.checkBounds=function(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox){this.getBoundsOfCurve(vPoint,oPoint,nextIPoint,nextVPoint);var bounds=this.shapeBoundingBox;boundingBox.x=bmMin(bounds.left,boundingBox.x);boundingBox.xMax=bmMax(bounds.right,boundingBox.xMax);boundingBox.y=bmMin(bounds.top,boundingBox.y);boundingBox.yMax=bmMax(bounds.bottom,boundingBox.yMax);};HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0};HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0};HShapeElement.prototype.getBoundsOfCurve=function(p0,p1,p2,p3){var bounds=[[p0[0],p3[0]],[p0[1],p3[1]]];for(var a,b,c,t,b2ac,t1,t2,i=0;i<2;++i){// eslint-disable-line no-plusplus
b=6*p0[i]-12*p1[i]+6*p2[i];a=-3*p0[i]+9*p1[i]-9*p2[i]+3*p3[i];c=3*p1[i]-3*p0[i];b|=0;// eslint-disable-line no-bitwise
a|=0;// eslint-disable-line no-bitwise
c|=0;// eslint-disable-line no-bitwise
if(a===0&&b===0){//
}else if(a===0){t=-c/b;if(t>0&&t<1){bounds[i].push(this.calculateF(t,p0,p1,p2,p3,i));}}else{b2ac=b*b-4*c*a;if(b2ac>=0){t1=(-b+bmSqrt(b2ac))/(2*a);if(t1>0&&t1<1)bounds[i].push(this.calculateF(t1,p0,p1,p2,p3,i));t2=(-b-bmSqrt(b2ac))/(2*a);if(t2>0&&t2<1)bounds[i].push(this.calculateF(t2,p0,p1,p2,p3,i));}}}this.shapeBoundingBox.left=bmMin.apply(null,bounds[0]);this.shapeBoundingBox.top=bmMin.apply(null,bounds[1]);this.shapeBoundingBox.right=bmMax.apply(null,bounds[0]);this.shapeBoundingBox.bottom=bmMax.apply(null,bounds[1]);};HShapeElement.prototype.calculateF=function(t,p0,p1,p2,p3,i){return bmPow(1-t,3)*p0[i]+3*bmPow(1-t,2)*t*p1[i]+3*(1-t)*bmPow(t,2)*p2[i]+bmPow(t,3)*p3[i];};HShapeElement.prototype.calculateBoundingBox=function(itemsData,boundingBox){var i;var len=itemsData.length;for(i=0;i<len;i+=1){if(itemsData[i]&&itemsData[i].sh){this.calculateShapeBoundingBox(itemsData[i],boundingBox);}else if(itemsData[i]&&itemsData[i].it){this.calculateBoundingBox(itemsData[i].it,boundingBox);}}};HShapeElement.prototype.currentBoxContains=function(box){return this.currentBBox.x<=box.x&&this.currentBBox.y<=box.y&&this.currentBBox.width+this.currentBBox.x>=box.x+box.width&&this.currentBBox.height+this.currentBBox.y>=box.y+box.height;};HShapeElement.prototype.renderInnerContent=function(){this._renderShapeFrame();if(!this.hidden&&(this._isFirstFrame||this._mdf)){var tempBoundingBox=this.tempBoundingBox;var max=999999;tempBoundingBox.x=max;tempBoundingBox.xMax=-max;tempBoundingBox.y=max;tempBoundingBox.yMax=-max;this.calculateBoundingBox(this.itemsData,tempBoundingBox);tempBoundingBox.width=tempBoundingBox.xMax<tempBoundingBox.x?0:tempBoundingBox.xMax-tempBoundingBox.x;tempBoundingBox.height=tempBoundingBox.yMax<tempBoundingBox.y?0:tempBoundingBox.yMax-tempBoundingBox.y;// var tempBoundingBox = this.shapeCont.getBBox();
if(this.currentBoxContains(tempBoundingBox)){return;}var changed=false;if(this.currentBBox.w!==tempBoundingBox.width){this.currentBBox.w=tempBoundingBox.width;this.shapeCont.setAttribute('width',tempBoundingBox.width);changed=true;}if(this.currentBBox.h!==tempBoundingBox.height){this.currentBBox.h=tempBoundingBox.height;this.shapeCont.setAttribute('height',tempBoundingBox.height);changed=true;}if(changed||this.currentBBox.x!==tempBoundingBox.x||this.currentBBox.y!==tempBoundingBox.y){this.currentBBox.w=tempBoundingBox.width;this.currentBBox.h=tempBoundingBox.height;this.currentBBox.x=tempBoundingBox.x;this.currentBBox.y=tempBoundingBox.y;this.shapeCont.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);var shapeStyle=this.shapeCont.style;var shapeTransform='translate('+this.currentBBox.x+'px,'+this.currentBBox.y+'px)';shapeStyle.transform=shapeTransform;shapeStyle.webkitTransform=shapeTransform;}}};/* global extendPrototype, BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement,
RenderableDOMElement, ITextElement, createSizedArray, createTag, styleDiv, createNS */function HTextElement(data,globalData,comp){this.textSpans=[];this.textPaths=[];this.currentBBox={x:999999,y:-999999,h:0,w:0};this.renderType='svg';this.isMasked=false;this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement);HTextElement.prototype.createContent=function(){this.isMasked=this.checkMasks();if(this.isMasked){this.renderType='svg';this.compW=this.comp.data.w;this.compH=this.comp.data.h;this.svgElement.setAttribute('width',this.compW);this.svgElement.setAttribute('height',this.compH);var g=createNS('g');this.maskedElement.appendChild(g);this.innerElem=g;}else{this.renderType='html';this.innerElem=this.layerElement;}this.checkParenting();};HTextElement.prototype.buildNewText=function(){var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData.l?documentData.l.length:0);var innerElemStyle=this.innerElem.style;var textColor=documentData.fc?this.buildColor(documentData.fc):'rgba(0,0,0,0)';innerElemStyle.fill=textColor;innerElemStyle.color=textColor;if(documentData.sc){innerElemStyle.stroke=this.buildColor(documentData.sc);innerElemStyle.strokeWidth=documentData.sw+'px';}var fontData=this.globalData.fontManager.getFontByName(documentData.f);if(!this.globalData.fontManager.chars){innerElemStyle.fontSize=documentData.finalSize+'px';innerElemStyle.lineHeight=documentData.finalSize+'px';if(fontData.fClass){this.innerElem.className=fontData.fClass;}else{innerElemStyle.fontFamily=fontData.fFamily;var fWeight=documentData.fWeight;var fStyle=documentData.fStyle;innerElemStyle.fontStyle=fStyle;innerElemStyle.fontWeight=fWeight;}}var i;var len;var letters=documentData.l;len=letters.length;var tSpan;var tParent;var tCont;var matrixHelper=this.mHelper;var shapes;var shapeStr='';var cnt=0;for(i=0;i<len;i+=1){if(this.globalData.fontManager.chars){if(!this.textPaths[cnt]){tSpan=createNS('path');tSpan.setAttribute('stroke-linecap','butt');tSpan.setAttribute('stroke-linejoin','round');tSpan.setAttribute('stroke-miterlimit','4');}else{tSpan=this.textPaths[cnt];}if(!this.isMasked){if(this.textSpans[cnt]){tParent=this.textSpans[cnt];tCont=tParent.children[0];}else{tParent=createTag('div');tParent.style.lineHeight=0;tCont=createNS('svg');tCont.appendChild(tSpan);styleDiv(tParent);}}}else if(!this.isMasked){if(this.textSpans[cnt]){tParent=this.textSpans[cnt];tSpan=this.textPaths[cnt];}else{tParent=createTag('span');styleDiv(tParent);tSpan=createTag('span');styleDiv(tSpan);tParent.appendChild(tSpan);}}else{tSpan=this.textPaths[cnt]?this.textPaths[cnt]:createNS('text');}// tSpan.setAttribute('visibility', 'hidden');
if(this.globalData.fontManager.chars){var charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);var shapeData;if(charData){shapeData=charData.data;}else{shapeData=null;}matrixHelper.reset();if(shapeData&&shapeData.shapes){shapes=shapeData.shapes[0].it;matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);shapeStr=this.createPathShape(matrixHelper,shapes);tSpan.setAttribute('d',shapeStr);}if(!this.isMasked){this.innerElem.appendChild(tParent);if(shapeData&&shapeData.shapes){// document.body.appendChild is needed to get exact measure of shape
document.body.appendChild(tCont);var boundingBox=tCont.getBBox();tCont.setAttribute('width',boundingBox.width+2);tCont.setAttribute('height',boundingBox.height+2);tCont.setAttribute('viewBox',boundingBox.x-1+' '+(boundingBox.y-1)+' '+(boundingBox.width+2)+' '+(boundingBox.height+2));var tContStyle=tCont.style;var tContTranslation='translate('+(boundingBox.x-1)+'px,'+(boundingBox.y-1)+'px)';tContStyle.transform=tContTranslation;tContStyle.webkitTransform=tContTranslation;letters[i].yOffset=boundingBox.y-1;}else{tCont.setAttribute('width',1);tCont.setAttribute('height',1);}tParent.appendChild(tCont);}else{this.innerElem.appendChild(tSpan);}}else{tSpan.textContent=letters[i].val;tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace','xml:space','preserve');if(!this.isMasked){this.innerElem.appendChild(tParent);//
var tStyle=tSpan.style;var tSpanTranslation='translate3d(0,'+-documentData.finalSize/1.2+'px,0)';tStyle.transform=tSpanTranslation;tStyle.webkitTransform=tSpanTranslation;}else{this.innerElem.appendChild(tSpan);}}//
if(!this.isMasked){this.textSpans[cnt]=tParent;}else{this.textSpans[cnt]=tSpan;}this.textSpans[cnt].style.display='block';this.textPaths[cnt]=tSpan;cnt+=1;}while(cnt<this.textSpans.length){this.textSpans[cnt].style.display='none';cnt+=1;}};HTextElement.prototype.renderInnerContent=function(){var svgStyle;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag){return;}if(this.isMasked&&this.finalTransform._matMdf){// Todo Benchmark if using this is better than getBBox
this.svgElement.setAttribute('viewBox',-this.finalTransform.mProp.p.v[0]+' '+-this.finalTransform.mProp.p.v[1]+' '+this.compW+' '+this.compH);svgStyle=this.svgElement.style;var translation='translate('+-this.finalTransform.mProp.p.v[0]+'px,'+-this.finalTransform.mProp.p.v[1]+'px)';svgStyle.transform=translation;svgStyle.webkitTransform=translation;}}this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);if(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag){return;}var i;var len;var count=0;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var textSpan;var textPath;for(i=0;i<len;i+=1){if(letters[i].n){count+=1;}else{textSpan=this.textSpans[i];textPath=this.textPaths[i];renderedLetter=renderedLetters[count];count+=1;if(renderedLetter._mdf.m){if(!this.isMasked){textSpan.style.webkitTransform=renderedLetter.m;textSpan.style.transform=renderedLetter.m;}else{textSpan.setAttribute('transform',renderedLetter.m);}}/// /textSpan.setAttribute('opacity',renderedLetter.o);
textSpan.style.opacity=renderedLetter.o;if(renderedLetter.sw&&renderedLetter._mdf.sw){textPath.setAttribute('stroke-width',renderedLetter.sw);}if(renderedLetter.sc&&renderedLetter._mdf.sc){textPath.setAttribute('stroke',renderedLetter.sc);}if(renderedLetter.fc&&renderedLetter._mdf.fc){textPath.setAttribute('fill',renderedLetter.fc);textPath.style.color=renderedLetter.fc;}}}if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var boundingBox=this.innerElem.getBBox();if(this.currentBBox.w!==boundingBox.width){this.currentBBox.w=boundingBox.width;this.svgElement.setAttribute('width',boundingBox.width);}if(this.currentBBox.h!==boundingBox.height){this.currentBBox.h=boundingBox.height;this.svgElement.setAttribute('height',boundingBox.height);}var margin=1;if(this.currentBBox.w!==boundingBox.width+margin*2||this.currentBBox.h!==boundingBox.height+margin*2||this.currentBBox.x!==boundingBox.x-margin||this.currentBBox.y!==boundingBox.y-margin){this.currentBBox.w=boundingBox.width+margin*2;this.currentBBox.h=boundingBox.height+margin*2;this.currentBBox.x=boundingBox.x-margin;this.currentBBox.y=boundingBox.y-margin;this.svgElement.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);svgStyle=this.svgElement.style;var svgTransform='translate('+this.currentBBox.x+'px,'+this.currentBBox.y+'px)';svgStyle.transform=svgTransform;svgStyle.webkitTransform=svgTransform;}}};/* global extendPrototype, BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement,
FrameElement, RenderableElement, createNS */function HImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement);HImageElement.prototype.createContent=function(){var assetPath=this.globalData.getAssetsPath(this.assetData);var img=new Image();if(this.data.hasMask){this.imageElem=createNS('image');this.imageElem.setAttribute('width',this.assetData.w+'px');this.imageElem.setAttribute('height',this.assetData.h+'px');this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);this.layerElement.appendChild(this.imageElem);this.baseElement.setAttribute('width',this.assetData.w);this.baseElement.setAttribute('height',this.assetData.h);}else{this.layerElement.appendChild(img);}img.crossOrigin='anonymous';img.src=assetPath;if(this.data.ln){this.baseElement.setAttribute('id',this.data.ln);}};/* global PropertyFactory, degToRads, Matrix, extendPrototype, BaseElement, FrameElement, HierarchyElement */function HCameraElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initHierarchy();var getProp=PropertyFactory.getProp;this.pe=getProp(this,data.pe,0,0,this);if(data.ks.p.s){this.px=getProp(this,data.ks.p.x,1,0,this);this.py=getProp(this,data.ks.p.y,1,0,this);this.pz=getProp(this,data.ks.p.z,1,0,this);}else{this.p=getProp(this,data.ks.p,1,0,this);}if(data.ks.a){this.a=getProp(this,data.ks.a,1,0,this);}if(data.ks.or.k.length&&data.ks.or.k[0].to){var i;var len=data.ks.or.k.length;for(i=0;i<len;i+=1){data.ks.or.k[i].to=null;data.ks.or.k[i].ti=null;}}this.or=getProp(this,data.ks.or,1,degToRads,this);this.or.sh=true;this.rx=getProp(this,data.ks.rx,0,degToRads,this);this.ry=getProp(this,data.ks.ry,0,degToRads,this);this.rz=getProp(this,data.ks.rz,0,degToRads,this);this.mat=new Matrix();this._prevMat=new Matrix();this._isFirstFrame=true;// TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.
this.finalTransform={mProp:this};}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement);HCameraElement.prototype.setup=function(){var i;var len=this.comp.threeDElements.length;var comp;var perspectiveStyle;var containerStyle;for(i=0;i<len;i+=1){// [perspectiveElem,container]
comp=this.comp.threeDElements[i];if(comp.type==='3d'){perspectiveStyle=comp.perspectiveElem.style;containerStyle=comp.container.style;var perspective=this.pe.v+'px';var origin='0px 0px 0px';var matrix='matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';perspectiveStyle.perspective=perspective;perspectiveStyle.webkitPerspective=perspective;containerStyle.transformOrigin=origin;containerStyle.mozTransformOrigin=origin;containerStyle.webkitTransformOrigin=origin;perspectiveStyle.transform=matrix;perspectiveStyle.webkitTransform=matrix;}}};HCameraElement.prototype.createElements=function(){};HCameraElement.prototype.hide=function(){};HCameraElement.prototype.renderFrame=function(){var _mdf=this._isFirstFrame;var i;var len;if(this.hierarchy){len=this.hierarchy.length;for(i=0;i<len;i+=1){_mdf=this.hierarchy[i].finalTransform.mProp._mdf||_mdf;}}if(_mdf||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){this.mat.reset();if(this.hierarchy){len=this.hierarchy.length-1;for(i=len;i>=0;i-=1){var mTransf=this.hierarchy[i].finalTransform.mProp;this.mat.translate(-mTransf.p.v[0],-mTransf.p.v[1],mTransf.p.v[2]);this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);this.mat.scale(1/mTransf.s.v[0],1/mTransf.s.v[1],1/mTransf.s.v[2]);this.mat.translate(mTransf.a.v[0],mTransf.a.v[1],mTransf.a.v[2]);}}if(this.p){this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]);}else{this.mat.translate(-this.px.v,-this.py.v,this.pz.v);}if(this.a){var diffVector;if(this.p){diffVector=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]];}else{diffVector=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];}var mag=Math.sqrt(Math.pow(diffVector[0],2)+Math.pow(diffVector[1],2)+Math.pow(diffVector[2],2));// var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));
var lookDir=[diffVector[0]/mag,diffVector[1]/mag,diffVector[2]/mag];var lookLengthOnXZ=Math.sqrt(lookDir[2]*lookDir[2]+lookDir[0]*lookDir[0]);var mRotationX=Math.atan2(lookDir[1],lookLengthOnXZ);var mRotationY=Math.atan2(lookDir[0],-lookDir[2]);this.mat.rotateY(mRotationY).rotateX(-mRotationX);}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0);this.mat.translate(0,0,this.pe.v);var hasMatrixChanged=!this._prevMat.equals(this.mat);if((hasMatrixChanged||this.pe._mdf)&&this.comp.threeDElements){len=this.comp.threeDElements.length;var comp;var perspectiveStyle;var containerStyle;for(i=0;i<len;i+=1){comp=this.comp.threeDElements[i];if(comp.type==='3d'){if(hasMatrixChanged){var matValue=this.mat.toCSS();containerStyle=comp.container.style;containerStyle.transform=matValue;containerStyle.webkitTransform=matValue;}if(this.pe._mdf){perspectiveStyle=comp.perspectiveElem.style;perspectiveStyle.perspective=this.pe.v+'px';perspectiveStyle.webkitPerspective=this.pe.v+'px';}}}this.mat.clone(this._prevMat);}}this._isFirstFrame=false;};HCameraElement.prototype.prepareFrame=function(num){this.prepareProperties(num,true);};HCameraElement.prototype.destroy=function(){};HCameraElement.prototype.getBaseElement=function(){return null;};function HEffects(){}HEffects.prototype.renderFrame=function(){};/* global createTag, AnimationItem */ /* exported animationManager */var animationManager=function(){var moduleOb={};var registeredAnimations=[];var initTime=0;var len=0;var playingAnimationsNum=0;var _stopped=true;var _isFrozen=false;function removeElement(ev){var i=0;var animItem=ev.target;while(i<len){if(registeredAnimations[i].animation===animItem){registeredAnimations.splice(i,1);i-=1;len-=1;if(!animItem.isPaused){subtractPlayingCount();}}i+=1;}}function registerAnimation(element,animationData){if(!element){return null;}var i=0;while(i<len){if(registeredAnimations[i].elem===element&&registeredAnimations[i].elem!==null){return registeredAnimations[i].animation;}i+=1;}var animItem=new AnimationItem();setupAnimation(animItem,element);animItem.setData(element,animationData);return animItem;}function getRegisteredAnimations(){var i;var lenAnims=registeredAnimations.length;var animations=[];for(i=0;i<lenAnims;i+=1){animations.push(registeredAnimations[i].animation);}return animations;}function addPlayingCount(){playingAnimationsNum+=1;activate();}function subtractPlayingCount(){playingAnimationsNum-=1;}function setupAnimation(animItem,element){animItem.addEventListener('destroy',removeElement);animItem.addEventListener('_active',addPlayingCount);animItem.addEventListener('_idle',subtractPlayingCount);registeredAnimations.push({elem:element,animation:animItem});len+=1;}function loadAnimation(params){var animItem=new AnimationItem();setupAnimation(animItem,null);animItem.setParams(params);return animItem;}function setSpeed(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setSpeed(val,animation);}}function setDirection(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setDirection(val,animation);}}function play(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.play(animation);}}function resume(nowTime){var elapsedTime=nowTime-initTime;var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.advanceTime(elapsedTime);}initTime=nowTime;if(playingAnimationsNum&&!_isFrozen){window.requestAnimationFrame(resume);}else{_stopped=true;}}function first(nowTime){initTime=nowTime;window.requestAnimationFrame(resume);}function pause(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.pause(animation);}}function goToAndStop(value,isFrame,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.goToAndStop(value,isFrame,animation);}}function stop(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.stop(animation);}}function togglePause(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.togglePause(animation);}}function destroy(animation){var i;for(i=len-1;i>=0;i-=1){registeredAnimations[i].animation.destroy(animation);}}function searchAnimations(animationData,standalone,renderer){var animElements=[].concat([].slice.call(document.getElementsByClassName('lottie')),[].slice.call(document.getElementsByClassName('bodymovin')));var i;var lenAnims=animElements.length;for(i=0;i<lenAnims;i+=1){if(renderer){animElements[i].setAttribute('data-bm-type',renderer);}registerAnimation(animElements[i],animationData);}if(standalone&&lenAnims===0){if(!renderer){renderer='svg';}var body=document.getElementsByTagName('body')[0];body.innerText='';var div=createTag('div');div.style.width='100%';div.style.height='100%';div.setAttribute('data-bm-type',renderer);body.appendChild(div);registerAnimation(div,animationData);}}function resize(){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.resize();}}function activate(){if(!_isFrozen&&playingAnimationsNum){if(_stopped){window.requestAnimationFrame(first);_stopped=false;}}}function freeze(){_isFrozen=true;}function unfreeze(){_isFrozen=false;activate();}function setVolume(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setVolume(val,animation);}}function mute(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.mute(animation);}}function unmute(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.unmute(animation);}}moduleOb.registerAnimation=registerAnimation;moduleOb.loadAnimation=loadAnimation;moduleOb.setSpeed=setSpeed;moduleOb.setDirection=setDirection;moduleOb.play=play;moduleOb.pause=pause;moduleOb.stop=stop;moduleOb.togglePause=togglePause;moduleOb.searchAnimations=searchAnimations;moduleOb.resize=resize;// moduleOb.start = start;
moduleOb.goToAndStop=goToAndStop;moduleOb.destroy=destroy;moduleOb.freeze=freeze;moduleOb.unfreeze=unfreeze;moduleOb.setVolume=setVolume;moduleOb.mute=mute;moduleOb.unmute=unmute;moduleOb.getRegisteredAnimations=getRegisteredAnimations;return moduleOb;}();/* global createElementID, subframeEnabled, ProjectInterface, ImagePreloader, audioControllerFactory, extendPrototype, BaseEvent,
CanvasRenderer, SVGRenderer, HybridRenderer, assetLoader, dataManager, expressionsPlugin, BMEnterFrameEvent, BMCompleteLoopEvent,
BMCompleteEvent, BMSegmentStartEvent, BMDestroyEvent, BMEnterFrameEvent, BMCompleteLoopEvent, BMCompleteEvent, BMSegmentStartEvent,
BMDestroyEvent, BMRenderFrameErrorEvent, BMConfigErrorEvent, markerParser */var AnimationItem=function AnimationItem(){this._cbs=[];this.name='';this.path='';this.isLoaded=false;this.currentFrame=0;this.currentRawFrame=0;this.firstFrame=0;this.totalFrames=0;this.frameRate=0;this.frameMult=0;this.playSpeed=1;this.playDirection=1;this.playCount=0;this.animationData={};this.assets=[];this.isPaused=true;this.autoplay=false;this.loop=true;this.renderer=null;this.animationID=createElementID();this.assetsPath='';this.timeCompleted=0;this.segmentPos=0;this.isSubframeEnabled=subframeEnabled;this.segments=[];this._idle=true;this._completedLoop=false;this.projectInterface=ProjectInterface();this.imagePreloader=new ImagePreloader();this.audioController=audioControllerFactory();this.markers=[];};extendPrototype([BaseEvent],AnimationItem);AnimationItem.prototype.setParams=function(params){if(params.wrapper||params.container){this.wrapper=params.wrapper||params.container;}var animType='svg';if(params.animType){animType=params.animType;}else if(params.renderer){animType=params.renderer;}switch(animType){case'canvas':this.renderer=new CanvasRenderer(this,params.rendererSettings);break;case'svg':this.renderer=new SVGRenderer(this,params.rendererSettings);break;default:this.renderer=new HybridRenderer(this,params.rendererSettings);break;}this.imagePreloader.setCacheType(animType,this.renderer.globalData.defs);this.renderer.setProjectInterface(this.projectInterface);this.animType=animType;if(params.loop===''||params.loop===null||params.loop===undefined||params.loop===true){this.loop=true;}else if(params.loop===false){this.loop=false;}else{this.loop=parseInt(params.loop,10);}this.autoplay='autoplay'in params?params.autoplay:true;this.name=params.name?params.name:'';this.autoloadSegments=Object.prototype.hasOwnProperty.call(params,'autoloadSegments')?params.autoloadSegments:true;this.assetsPath=params.assetsPath;this.initialSegment=params.initialSegment;if(params.audioFactory){this.audioController.setAudioFactory(params.audioFactory);}if(params.animationData){this.configAnimation(params.animationData);}else if(params.path){if(params.path.lastIndexOf('\\')!==-1){this.path=params.path.substr(0,params.path.lastIndexOf('\\')+1);}else{this.path=params.path.substr(0,params.path.lastIndexOf('/')+1);}this.fileName=params.path.substr(params.path.lastIndexOf('/')+1);this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf('.json'));assetLoader.load(params.path,this.configAnimation.bind(this),function(){this.trigger('data_failed');}.bind(this));}};AnimationItem.prototype.setData=function(wrapper,animationData){if(animationData){if(typeof animationData!=='object'){animationData=JSON.parse(animationData);}}var params={wrapper:wrapper,animationData:animationData};var wrapperAttributes=wrapper.attributes;params.path=wrapperAttributes.getNamedItem('data-animation-path')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-animation-path').value:wrapperAttributes.getNamedItem('data-bm-path')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-path').value:wrapperAttributes.getNamedItem('bm-path')?wrapperAttributes.getNamedItem('bm-path').value:'';params.animType=wrapperAttributes.getNamedItem('data-anim-type')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-anim-type').value:wrapperAttributes.getNamedItem('data-bm-type')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-type').value:wrapperAttributes.getNamedItem('bm-type')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('bm-type').value:wrapperAttributes.getNamedItem('data-bm-renderer')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-renderer').value:wrapperAttributes.getNamedItem('bm-renderer')?wrapperAttributes.getNamedItem('bm-renderer').value:'canvas';var loop=wrapperAttributes.getNamedItem('data-anim-loop')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-anim-loop').value:wrapperAttributes.getNamedItem('data-bm-loop')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-loop').value:wrapperAttributes.getNamedItem('bm-loop')?wrapperAttributes.getNamedItem('bm-loop').value:'';if(loop==='false'){params.loop=false;}else if(loop==='true'){params.loop=true;}else if(loop!==''){params.loop=parseInt(loop,10);}var autoplay=wrapperAttributes.getNamedItem('data-anim-autoplay')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-anim-autoplay').value:wrapperAttributes.getNamedItem('data-bm-autoplay')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-autoplay').value:wrapperAttributes.getNamedItem('bm-autoplay')?wrapperAttributes.getNamedItem('bm-autoplay').value:true;params.autoplay=autoplay!=='false';params.name=wrapperAttributes.getNamedItem('data-name')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-name').value:wrapperAttributes.getNamedItem('data-bm-name')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-name').value:wrapperAttributes.getNamedItem('bm-name')?wrapperAttributes.getNamedItem('bm-name').value:'';var prerender=wrapperAttributes.getNamedItem('data-anim-prerender')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-anim-prerender').value:wrapperAttributes.getNamedItem('data-bm-prerender')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-prerender').value:wrapperAttributes.getNamedItem('bm-prerender')?wrapperAttributes.getNamedItem('bm-prerender').value:'';if(prerender==='false'){params.prerender=false;}this.setParams(params);};AnimationItem.prototype.includeLayers=function(data){if(data.op>this.animationData.op){this.animationData.op=data.op;this.totalFrames=Math.floor(data.op-this.animationData.ip);}var layers=this.animationData.layers;var i;var len=layers.length;var newLayers=data.layers;var j;var jLen=newLayers.length;for(j=0;j<jLen;j+=1){i=0;while(i<len){if(layers[i].id===newLayers[j].id){layers[i]=newLayers[j];break;}i+=1;}}if(data.chars||data.fonts){this.renderer.globalData.fontManager.addChars(data.chars);this.renderer.globalData.fontManager.addFonts(data.fonts,this.renderer.globalData.defs);}if(data.assets){len=data.assets.length;for(i=0;i<len;i+=1){this.animationData.assets.push(data.assets[i]);}}this.animationData.__complete=false;dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);this.renderer.includeLayers(data.layers);if(expressionsPlugin){expressionsPlugin.initExpressions(this);}this.loadNextSegment();};AnimationItem.prototype.loadNextSegment=function(){var segments=this.animationData.segments;if(!segments||segments.length===0||!this.autoloadSegments){this.trigger('data_ready');this.timeCompleted=this.totalFrames;return;}var segment=segments.shift();this.timeCompleted=segment.time*this.frameRate;var segmentPath=this.path+this.fileName+'_'+this.segmentPos+'.json';this.segmentPos+=1;assetLoader.load(segmentPath,this.includeLayers.bind(this),function(){this.trigger('data_failed');}.bind(this));};AnimationItem.prototype.loadSegments=function(){var segments=this.animationData.segments;if(!segments){this.timeCompleted=this.totalFrames;}this.loadNextSegment();};AnimationItem.prototype.imagesLoaded=function(){this.trigger('loaded_images');this.checkLoaded();};AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath);this.imagePreloader.setPath(this.path);this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this));};AnimationItem.prototype.configAnimation=function(animData){if(!this.renderer){return;}try{this.animationData=animData;if(this.initialSegment){this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]);this.firstFrame=Math.round(this.initialSegment[0]);}else{this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip);this.firstFrame=Math.round(this.animationData.ip);}this.renderer.configAnimation(animData);if(!animData.assets){animData.assets=[];}this.assets=this.animationData.assets;this.frameRate=this.animationData.fr;this.frameMult=this.animationData.fr/1000;this.renderer.searchExtraCompositions(animData.assets);this.markers=markerParser(animData.markers||[]);this.trigger('config_ready');this.preloadImages();this.loadSegments();this.updaFrameModifier();this.waitForFontsLoaded();if(this.isPaused){this.audioController.pause();}}catch(error){this.triggerConfigError(error);}};AnimationItem.prototype.waitForFontsLoaded=function(){if(!this.renderer){return;}if(this.renderer.globalData.fontManager.isLoaded){this.checkLoaded();}else{setTimeout(this.waitForFontsLoaded.bind(this),20);}};AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loaded()||this.renderer.rendererType!=='canvas')){this.isLoaded=true;dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);if(expressionsPlugin){expressionsPlugin.initExpressions(this);}this.renderer.initItems();setTimeout(function(){this.trigger('DOMLoaded');}.bind(this),0);this.gotoFrame();if(this.autoplay){this.play();}}};AnimationItem.prototype.resize=function(){this.renderer.updateContainerSize();};AnimationItem.prototype.setSubframe=function(flag){this.isSubframeEnabled=!!flag;};AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame;// eslint-disable-line no-bitwise
if(this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted){this.currentFrame=this.timeCompleted;}this.trigger('enterFrame');this.renderFrame();};AnimationItem.prototype.renderFrame=function(){if(this.isLoaded===false||!this.renderer){return;}try{this.renderer.renderFrame(this.currentFrame+this.firstFrame);}catch(error){this.triggerRenderFrameError(error);}};AnimationItem.prototype.play=function(name){if(name&&this.name!==name){return;}if(this.isPaused===true){this.isPaused=false;this.audioController.resume();if(this._idle){this._idle=false;this.trigger('_active');}}};AnimationItem.prototype.pause=function(name){if(name&&this.name!==name){return;}if(this.isPaused===false){this.isPaused=true;this._idle=true;this.trigger('_idle');this.audioController.pause();}};AnimationItem.prototype.togglePause=function(name){if(name&&this.name!==name){return;}if(this.isPaused===true){this.play();}else{this.pause();}};AnimationItem.prototype.stop=function(name){if(name&&this.name!==name){return;}this.pause();this.playCount=0;this._completedLoop=false;this.setCurrentRawFrameValue(0);};AnimationItem.prototype.getMarkerData=function(markerName){var marker;for(var i=0;i<this.markers.length;i+=1){marker=this.markers[i];if(marker.payload&&marker.payload.name===markerName){return marker;}}return null;};AnimationItem.prototype.goToAndStop=function(value,isFrame,name){if(name&&this.name!==name){return;}var numValue=Number(value);if(isNaN(numValue)){var marker=this.getMarkerData(value);if(marker){this.goToAndStop(marker.time,true);}}else if(isFrame){this.setCurrentRawFrameValue(value);}else{this.setCurrentRawFrameValue(value*this.frameModifier);}this.pause();};AnimationItem.prototype.goToAndPlay=function(value,isFrame,name){if(name&&this.name!==name){return;}var numValue=Number(value);if(isNaN(numValue)){var marker=this.getMarkerData(value);if(marker){if(!marker.duration){this.goToAndStop(marker.time,true);}else{this.playSegments([marker.time,marker.time+marker.duration],true);}}}else{this.goToAndStop(numValue,isFrame,name);}this.play();};AnimationItem.prototype.advanceTime=function(value){if(this.isPaused===true||this.isLoaded===false){return;}var nextValue=this.currentRawFrame+value*this.frameModifier;var _isComplete=false;// Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
// If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.
if(nextValue>=this.totalFrames-1&&this.frameModifier>0){if(!this.loop||this.playCount===this.loop){if(!this.checkSegments(nextValue>this.totalFrames?nextValue%this.totalFrames:0)){_isComplete=true;nextValue=this.totalFrames-1;}}else if(nextValue>=this.totalFrames){this.playCount+=1;if(!this.checkSegments(nextValue%this.totalFrames)){this.setCurrentRawFrameValue(nextValue%this.totalFrames);this._completedLoop=true;this.trigger('loopComplete');}}else{this.setCurrentRawFrameValue(nextValue);}}else if(nextValue<0){if(!this.checkSegments(nextValue%this.totalFrames)){if(this.loop&&!(this.playCount--<=0&&this.loop!==true)){// eslint-disable-line no-plusplus
this.setCurrentRawFrameValue(this.totalFrames+nextValue%this.totalFrames);if(!this._completedLoop){this._completedLoop=true;}else{this.trigger('loopComplete');}}else{_isComplete=true;nextValue=0;}}}else{this.setCurrentRawFrameValue(nextValue);}if(_isComplete){this.setCurrentRawFrameValue(nextValue);this.pause();this.trigger('complete');}};AnimationItem.prototype.adjustSegment=function(arr,offset){this.playCount=0;if(arr[1]<arr[0]){if(this.frameModifier>0){if(this.playSpeed<0){this.setSpeed(-this.playSpeed);}else{this.setDirection(-1);}}this.totalFrames=arr[0]-arr[1];this.timeCompleted=this.totalFrames;this.firstFrame=arr[1];this.setCurrentRawFrameValue(this.totalFrames-0.001-offset);}else if(arr[1]>arr[0]){if(this.frameModifier<0){if(this.playSpeed<0){this.setSpeed(-this.playSpeed);}else{this.setDirection(1);}}this.totalFrames=arr[1]-arr[0];this.timeCompleted=this.totalFrames;this.firstFrame=arr[0];this.setCurrentRawFrameValue(0.001+offset);}this.trigger('segmentStart');};AnimationItem.prototype.setSegment=function(init,end){var pendingFrame=-1;if(this.isPaused){if(this.currentRawFrame+this.firstFrame<init){pendingFrame=init;}else if(this.currentRawFrame+this.firstFrame>end){pendingFrame=end-init;}}this.firstFrame=init;this.totalFrames=end-init;this.timeCompleted=this.totalFrames;if(pendingFrame!==-1){this.goToAndStop(pendingFrame,true);}};AnimationItem.prototype.playSegments=function(arr,forceFlag){if(forceFlag){this.segments.length=0;}if(typeof arr[0]==='object'){var i;var len=arr.length;for(i=0;i<len;i+=1){this.segments.push(arr[i]);}}else{this.segments.push(arr);}if(this.segments.length&&forceFlag){this.adjustSegment(this.segments.shift(),0);}if(this.isPaused){this.play();}};AnimationItem.prototype.resetSegments=function(forceFlag){this.segments.length=0;this.segments.push([this.animationData.ip,this.animationData.op]);// this.segments.push([this.animationData.ip*this.frameRate,Math.floor(this.animationData.op - this.animationData.ip+this.animationData.ip*this.frameRate)]);
if(forceFlag){this.checkSegments(0);}};AnimationItem.prototype.checkSegments=function(offset){if(this.segments.length){this.adjustSegment(this.segments.shift(),offset);return true;}return false;};AnimationItem.prototype.destroy=function(name){if(name&&this.name!==name||!this.renderer){return;}this.renderer.destroy();this.imagePreloader.destroy();this.trigger('destroy');this._cbs=null;this.onEnterFrame=null;this.onLoopComplete=null;this.onComplete=null;this.onSegmentStart=null;this.onDestroy=null;this.renderer=null;this.renderer=null;this.imagePreloader=null;this.projectInterface=null;};AnimationItem.prototype.setCurrentRawFrameValue=function(value){this.currentRawFrame=value;this.gotoFrame();};AnimationItem.prototype.setSpeed=function(val){this.playSpeed=val;this.updaFrameModifier();};AnimationItem.prototype.setDirection=function(val){this.playDirection=val<0?-1:1;this.updaFrameModifier();};AnimationItem.prototype.setVolume=function(val,name){if(name&&this.name!==name){return;}this.audioController.setVolume(val);};AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume();};AnimationItem.prototype.mute=function(name){if(name&&this.name!==name){return;}this.audioController.mute();};AnimationItem.prototype.unmute=function(name){if(name&&this.name!==name){return;}this.audioController.unmute();};AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection;this.audioController.setRate(this.playSpeed*this.playDirection);};AnimationItem.prototype.getPath=function(){return this.path;};AnimationItem.prototype.getAssetsPath=function(assetData){var path='';if(assetData.e){path=assetData.p;}else if(this.assetsPath){var imagePath=assetData.p;if(imagePath.indexOf('images/')!==-1){imagePath=imagePath.split('/')[1];}path=this.assetsPath+imagePath;}else{path=this.path;path+=assetData.u?assetData.u:'';path+=assetData.p;}return path;};AnimationItem.prototype.getAssetData=function(id){var i=0;var len=this.assets.length;while(i<len){if(id===this.assets[i].id){return this.assets[i];}i+=1;}return null;};AnimationItem.prototype.hide=function(){this.renderer.hide();};AnimationItem.prototype.show=function(){this.renderer.show();};AnimationItem.prototype.getDuration=function(isFrame){return isFrame?this.totalFrames:this.totalFrames/this.frameRate;};AnimationItem.prototype.trigger=function(name){if(this._cbs&&this._cbs[name]){switch(name){case'enterFrame':this.triggerEvent(name,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameModifier));break;case'loopComplete':this.triggerEvent(name,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));break;case'complete':this.triggerEvent(name,new BMCompleteEvent(name,this.frameMult));break;case'segmentStart':this.triggerEvent(name,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));break;case'destroy':this.triggerEvent(name,new BMDestroyEvent(name,this));break;default:this.triggerEvent(name);}}if(name==='enterFrame'&&this.onEnterFrame){this.onEnterFrame.call(this,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameMult));}if(name==='loopComplete'&&this.onLoopComplete){this.onLoopComplete.call(this,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));}if(name==='complete'&&this.onComplete){this.onComplete.call(this,new BMCompleteEvent(name,this.frameMult));}if(name==='segmentStart'&&this.onSegmentStart){this.onSegmentStart.call(this,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));}if(name==='destroy'&&this.onDestroy){this.onDestroy.call(this,new BMDestroyEvent(name,this));}};AnimationItem.prototype.triggerRenderFrameError=function(nativeError){var error=new BMRenderFrameErrorEvent(nativeError,this.currentFrame);this.triggerEvent('error',error);if(this.onError){this.onError.call(this,error);}};AnimationItem.prototype.triggerConfigError=function(nativeError){var error=new BMConfigErrorEvent(nativeError,this.currentFrame);this.triggerEvent('error',error);if(this.onError){this.onError.call(this,error);}};/* global CompExpressionInterface, expressionsPlugin: writable */ /* exported expressionsPlugin */var Expressions=function(){var ob={};ob.initExpressions=initExpressions;function initExpressions(animation){var stackCount=0;var registers=[];function pushExpression(){stackCount+=1;}function popExpression(){stackCount-=1;if(stackCount===0){releaseInstances();}}function registerExpressionProperty(expression){if(registers.indexOf(expression)===-1){registers.push(expression);}}function releaseInstances(){var i;var len=registers.length;for(i=0;i<len;i+=1){registers[i].release();}registers.length=0;}animation.renderer.compInterface=CompExpressionInterface(animation.renderer);animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);animation.renderer.globalData.pushExpression=pushExpression;animation.renderer.globalData.popExpression=popExpression;animation.renderer.globalData.registerExpressionProperty=registerExpressionProperty;}return ob;}();expressionsPlugin=Expressions;/* eslint-disable camelcase, no-unused-vars */ /* global BMMath, BezierFactory, createTypedArray, degToRads, shapePool */var ExpressionManager=function(){'use strict';var ob={};var Math=BMMath;var window=null;var document=null;function $bm_isInstanceOfArray(arr){return arr.constructor===Array||arr.constructor===Float32Array;}function isNumerable(tOfV,v){return tOfV==='number'||tOfV==='boolean'||tOfV==='string'||v instanceof Number;}function $bm_neg(a){var tOfA=typeof a;if(tOfA==='number'||tOfA==='boolean'||a instanceof Number){return-a;}if($bm_isInstanceOfArray(a)){var i;var lenA=a.length;var retArr=[];for(i=0;i<lenA;i+=1){retArr[i]=-a[i];}return retArr;}if(a.propType){return a.v;}return-a;}var easeInBez=BezierFactory.getBezierEasing(0.333,0,0.833,0.833,'easeIn').get;var easeOutBez=BezierFactory.getBezierEasing(0.167,0.167,0.667,1,'easeOut').get;var easeInOutBez=BezierFactory.getBezierEasing(0.33,0,0.667,1,'easeInOut').get;function sum(a,b){var tOfA=typeof a;var tOfB=typeof b;if(tOfA==='string'||tOfB==='string'){return a+b;}if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){return a+b;}if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){a=a.slice(0);a[0]+=b;return a;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){b=b.slice(0);b[0]=a+b[0];return b;}if($bm_isInstanceOfArray(a)&&$bm_isInstanceOfArray(b)){var i=0;var lenA=a.length;var lenB=b.length;var retArr=[];while(i<lenA||i<lenB){if((typeof a[i]==='number'||a[i]instanceof Number)&&(typeof b[i]==='number'||b[i]instanceof Number)){retArr[i]=a[i]+b[i];}else{retArr[i]=b[i]===undefined?a[i]:a[i]||b[i];}i+=1;}return retArr;}return 0;}var add=sum;function sub(a,b){var tOfA=typeof a;var tOfB=typeof b;if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){if(tOfA==='string'){a=parseInt(a,10);}if(tOfB==='string'){b=parseInt(b,10);}return a-b;}if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){a=a.slice(0);a[0]-=b;return a;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){b=b.slice(0);b[0]=a-b[0];return b;}if($bm_isInstanceOfArray(a)&&$bm_isInstanceOfArray(b)){var i=0;var lenA=a.length;var lenB=b.length;var retArr=[];while(i<lenA||i<lenB){if((typeof a[i]==='number'||a[i]instanceof Number)&&(typeof b[i]==='number'||b[i]instanceof Number)){retArr[i]=a[i]-b[i];}else{retArr[i]=b[i]===undefined?a[i]:a[i]||b[i];}i+=1;}return retArr;}return 0;}function mul(a,b){var tOfA=typeof a;var tOfB=typeof b;var arr;if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){return a*b;}var i;var len;if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){len=a.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a[i]*b;}return arr;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){len=b.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a*b[i];}return arr;}return 0;}function div(a,b){var tOfA=typeof a;var tOfB=typeof b;var arr;if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){return a/b;}var i;var len;if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){len=a.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a[i]/b;}return arr;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){len=b.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a/b[i];}return arr;}return 0;}function mod(a,b){if(typeof a==='string'){a=parseInt(a,10);}if(typeof b==='string'){b=parseInt(b,10);}return a%b;}var $bm_sum=sum;var $bm_sub=sub;var $bm_mul=mul;var $bm_div=div;var $bm_mod=mod;function clamp(num,min,max){if(min>max){var mm=max;max=min;min=mm;}return Math.min(Math.max(num,min),max);}function radiansToDegrees(val){return val/degToRads;}var radians_to_degrees=radiansToDegrees;function degreesToRadians(val){return val*degToRads;}var degrees_to_radians=radiansToDegrees;var helperLengthArray=[0,0,0,0,0,0];function length(arr1,arr2){if(typeof arr1==='number'||arr1 instanceof Number){arr2=arr2||0;return Math.abs(arr1-arr2);}if(!arr2){arr2=helperLengthArray;}var i;var len=Math.min(arr1.length,arr2.length);var addedLength=0;for(i=0;i<len;i+=1){addedLength+=Math.pow(arr2[i]-arr1[i],2);}return Math.sqrt(addedLength);}function normalize(vec){return div(vec,length(vec));}function rgbToHsl(val){var r=val[0];var g=val[1];var b=val[2];var max=Math.max(r,g,b);var min=Math.min(r,g,b);var h;var s;var l=(max+min)/2;if(max===min){h=0;// achromatic
s=0;// achromatic
}else{var d=max-min;s=l>0.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;default:break;}h/=6;}return[h,s,l,val[3]];}function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*(2/3-t)*6;return p;}function hslToRgb(val){var h=val[0];var s=val[1];var l=val[2];var r;var g;var b;if(s===0){r=l;// achromatic
b=l;// achromatic
g=l;// achromatic
}else{var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}return[r,g,b,val[3]];}function linear(t,tMin,tMax,value1,value2){if(value1===undefined||value2===undefined){value1=tMin;value2=tMax;tMin=0;tMax=1;}if(tMax<tMin){var _tMin=tMax;tMax=tMin;tMin=_tMin;}if(t<=tMin){return value1;}if(t>=tMax){return value2;}var perc=tMax===tMin?0:(t-tMin)/(tMax-tMin);if(!value1.length){return value1+(value2-value1)*perc;}var i;var len=value1.length;var arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=value1[i]+(value2[i]-value1[i])*perc;}return arr;}function random(min,max){if(max===undefined){if(min===undefined){min=0;max=1;}else{max=min;min=undefined;}}if(max.length){var i;var len=max.length;if(!min){min=createTypedArray('float32',len);}var arr=createTypedArray('float32',len);var rnd=BMMath.random();for(i=0;i<len;i+=1){arr[i]=min[i]+rnd*(max[i]-min[i]);}return arr;}if(min===undefined){min=0;}var rndm=BMMath.random();return min+rndm*(max-min);}function createPath(points,inTangents,outTangents,closed){var i;var len=points.length;var path=shapePool.newElement();path.setPathData(!!closed,len);var arrPlaceholder=[0,0];var inVertexPoint;var outVertexPoint;for(i=0;i<len;i+=1){inVertexPoint=inTangents&&inTangents[i]?inTangents[i]:arrPlaceholder;outVertexPoint=outTangents&&outTangents[i]?outTangents[i]:arrPlaceholder;path.setTripleAt(points[i][0],points[i][1],outVertexPoint[0]+points[i][0],outVertexPoint[1]+points[i][1],inVertexPoint[0]+points[i][0],inVertexPoint[1]+points[i][1],i,true);}return path;}function initiateExpression(elem,data,property){var val=data.x;var needsVelocity=/velocity(?![\w\d])/.test(val);var _needsRandom=val.indexOf('random')!==-1;var elemType=elem.data.ty;var transform;var $bm_transform;var content;var effect;var thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime;Object.defineProperty(thisProperty,'value',{get:function get(){return thisProperty.v;}});elem.comp.frameDuration=1/elem.comp.globalData.frameRate;elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate;var outPoint=elem.data.op/elem.comp.globalData.frameRate;var width=elem.data.sw?elem.data.sw:0;var height=elem.data.sh?elem.data.sh:0;var name=elem.data.nm;var loopIn;var loop_in;var loopOut;var loop_out;var smooth;var toWorld;var fromWorld;var fromComp;var toComp;var fromCompToSurface;var position;var rotation;var anchorPoint;var scale;var thisLayer;var thisComp;var mask;var valueAtTime;var velocityAtTime;var scoped_bm_rt;var expression_function=eval('[function _expression_function(){'+val+';scoped_bm_rt=$bm_rt}]')[0];// eslint-disable-line no-eval
var numKeys=property.kf?data.k.length:0;var active=!this.data||this.data.hd!==true;var wiggle=function wiggle(freq,amp){var iWiggle;var j;var lenWiggle=this.pv.length?this.pv.length:1;var addedAmps=createTypedArray('float32',lenWiggle);freq=5;var iterations=Math.floor(time*freq);iWiggle=0;j=0;while(iWiggle<iterations){// var rnd = BMMath.random();
for(j=0;j<lenWiggle;j+=1){addedAmps[j]+=-amp+amp*2*BMMath.random();// addedAmps[j] += -amp + amp*2*rnd;
}iWiggle+=1;}// var rnd2 = BMMath.random();
var periods=time*freq;var perc=periods-Math.floor(periods);var arr=createTypedArray('float32',lenWiggle);if(lenWiggle>1){for(j=0;j<lenWiggle;j+=1){arr[j]=this.pv[j]+addedAmps[j]+(-amp+amp*2*BMMath.random())*perc;// arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
// arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
}return arr;}return this.pv+addedAmps[0]+(-amp+amp*2*BMMath.random())*perc;}.bind(this);if(thisProperty.loopIn){loopIn=thisProperty.loopIn.bind(thisProperty);loop_in=loopIn;}if(thisProperty.loopOut){loopOut=thisProperty.loopOut.bind(thisProperty);loop_out=loopOut;}if(thisProperty.smooth){smooth=thisProperty.smooth.bind(thisProperty);}function loopInDuration(type,duration){return loopIn(type,duration,true);}function loopOutDuration(type,duration){return loopOut(type,duration,true);}if(this.getValueAtTime){valueAtTime=this.getValueAtTime.bind(this);}if(this.getVelocityAtTime){velocityAtTime=this.getVelocityAtTime.bind(this);}var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(elem1,elem2){var fVec=[elem2[0]-elem1[0],elem2[1]-elem1[1],elem2[2]-elem1[2]];var pitch=Math.atan2(fVec[0],Math.sqrt(fVec[1]*fVec[1]+fVec[2]*fVec[2]))/degToRads;var yaw=-Math.atan2(fVec[1],fVec[2])/degToRads;return[yaw,pitch,0];}function easeOut(t,tMin,tMax,val1,val2){return applyEase(easeOutBez,t,tMin,tMax,val1,val2);}function easeIn(t,tMin,tMax,val1,val2){return applyEase(easeInBez,t,tMin,tMax,val1,val2);}function ease(t,tMin,tMax,val1,val2){return applyEase(easeInOutBez,t,tMin,tMax,val1,val2);}function applyEase(fn,t,tMin,tMax,val1,val2){if(val1===undefined){val1=tMin;val2=tMax;}else{t=(t-tMin)/(tMax-tMin);}if(t>1){t=1;}else if(t<0){t=0;}var mult=fn(t);if($bm_isInstanceOfArray(val1)){var iKey;var lenKey=val1.length;var arr=createTypedArray('float32',lenKey);for(iKey=0;iKey<lenKey;iKey+=1){arr[iKey]=(val2[iKey]-val1[iKey])*mult+val1[iKey];}return arr;}return(val2-val1)*mult+val1;}function nearestKey(time){var iKey;var lenKey=data.k.length;var index;var keyTime;if(!data.k.length||typeof data.k[0]==='number'){index=0;keyTime=0;}else{index=-1;time*=elem.comp.globalData.frameRate;if(time<data.k[0].t){index=1;keyTime=data.k[0].t;}else{for(iKey=0;iKey<lenKey-1;iKey+=1){if(time===data.k[iKey].t){index=iKey+1;keyTime=data.k[iKey].t;break;}else if(time>data.k[iKey].t&&time<data.k[iKey+1].t){if(time-data.k[iKey].t>data.k[iKey+1].t-time){index=iKey+2;keyTime=data.k[iKey+1].t;}else{index=iKey+1;keyTime=data.k[iKey].t;}break;}}if(index===-1){index=iKey+1;keyTime=data.k[iKey].t;}}}var obKey={};obKey.index=index;obKey.time=keyTime/elem.comp.globalData.frameRate;return obKey;}function key(ind){var obKey;var iKey;var lenKey;if(!data.k.length||typeof data.k[0]==='number'){throw new Error('The property has no keyframe at index '+ind);}ind-=1;obKey={time:data.k[ind].t/elem.comp.globalData.frameRate,value:[]};var arr=Object.prototype.hasOwnProperty.call(data.k[ind],'s')?data.k[ind].s:data.k[ind-1].e;lenKey=arr.length;for(iKey=0;iKey<lenKey;iKey+=1){obKey[iKey]=arr[iKey];obKey.value[iKey]=arr[iKey];}return obKey;}function framesToTime(frames,fps){if(!fps){fps=elem.comp.globalData.frameRate;}return frames/fps;}function timeToFrames(t,fps){if(!t&&t!==0){t=time;}if(!fps){fps=elem.comp.globalData.frameRate;}return t*fps;}function seedRandom(seed){BMMath.seedrandom(randSeed+seed);}function sourceRectAtTime(){return elem.sourceRectAtTime();}function substring(init,end){if(typeof value==='string'){if(end===undefined){return value.substring(init);}return value.substring(init,end);}return'';}function substr(init,end){if(typeof value==='string'){if(end===undefined){return value.substr(init);}return value.substr(init,end);}return'';}function posterizeTime(framesPerSecond){time=framesPerSecond===0?0:Math.floor(time*framesPerSecond)/framesPerSecond;value=valueAtTime(time);}var time;var velocity;var value;var text;var textIndex;var textTotal;var selectorValue;var index=elem.data.ind;var hasParent=!!(elem.hierarchy&&elem.hierarchy.length);var parent;var randSeed=Math.floor(Math.random()*1000000);var globalData=elem.globalData;function executeExpression(_value){// globalData.pushExpression();
value=_value;if(_needsRandom){seedRandom(randSeed);}if(this.frameExpressionId===elem.globalData.frameId&&this.propType!=='textSelector'){return value;}if(this.propType==='textSelector'){textIndex=this.textIndex;textTotal=this.textTotal;selectorValue=this.selectorValue;}if(!thisLayer){text=elem.layerInterface.text;thisLayer=elem.layerInterface;thisComp=elem.comp.compInterface;toWorld=thisLayer.toWorld.bind(thisLayer);fromWorld=thisLayer.fromWorld.bind(thisLayer);fromComp=thisLayer.fromComp.bind(thisLayer);toComp=thisLayer.toComp.bind(thisLayer);mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null;fromCompToSurface=fromComp;}if(!transform){transform=elem.layerInterface('ADBE Transform Group');$bm_transform=transform;if(transform){anchorPoint=transform.anchorPoint;/* position = transform.position;
                    rotation = transform.rotation;
                    scale = transform.scale; */}}if(elemType===4&&!content){content=thisLayer('ADBE Root Vectors Group');}if(!effect){effect=thisLayer(4);}hasParent=!!(elem.hierarchy&&elem.hierarchy.length);if(hasParent&&!parent){parent=elem.hierarchy[0].layerInterface;}time=this.comp.renderedFrame/this.comp.globalData.frameRate;if(needsVelocity){velocity=velocityAtTime(time);}expression_function();this.frameExpressionId=elem.globalData.frameId;// TODO: Check if it's possible to return on ShapeInterface the .v value
if(scoped_bm_rt.propType==='shape'){scoped_bm_rt=scoped_bm_rt.v;}// globalData.popExpression();
return scoped_bm_rt;}return executeExpression;}ob.initiateExpression=initiateExpression;return ob;}();/* global ExpressionManager, createTypedArray */ /* exported expressionHelpers */var expressionHelpers=function(){function searchExpressions(elem,data,prop){if(data.x){prop.k=true;prop.x=true;prop.initiateExpression=ExpressionManager.initiateExpression;prop.effectsSequence.push(prop.initiateExpression(elem,data,prop).bind(prop));}}function getValueAtTime(frameNum){frameNum*=this.elem.globalData.frameRate;frameNum-=this.offsetTime;if(frameNum!==this._cachingAtTime.lastFrame){this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<frameNum?this._cachingAtTime.lastIndex:0;this._cachingAtTime.value=this.interpolateValue(frameNum,this._cachingAtTime);this._cachingAtTime.lastFrame=frameNum;}return this._cachingAtTime.value;}function getSpeedAtTime(frameNum){var delta=-0.01;var v1=this.getValueAtTime(frameNum);var v2=this.getValueAtTime(frameNum+delta);var speed=0;if(v1.length){var i;for(i=0;i<v1.length;i+=1){speed+=Math.pow(v2[i]-v1[i],2);}speed=Math.sqrt(speed)*100;}else{speed=0;}return speed;}function getVelocityAtTime(frameNum){if(this.vel!==undefined){return this.vel;}var delta=-0.001;// frameNum += this.elem.data.st;
var v1=this.getValueAtTime(frameNum);var v2=this.getValueAtTime(frameNum+delta);var velocity;if(v1.length){velocity=createTypedArray('float32',v1.length);var i;for(i=0;i<v1.length;i+=1){// removing frameRate
// if needed, don't add it here
// velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
velocity[i]=(v2[i]-v1[i])/delta;}}else{velocity=(v2-v1)/delta;}return velocity;}function getStaticValueAtTime(){return this.pv;}function setGroupProperty(propertyGroup){this.propertyGroup=propertyGroup;}return{searchExpressions:searchExpressions,getSpeedAtTime:getSpeedAtTime,getVelocityAtTime:getVelocityAtTime,getValueAtTime:getValueAtTime,getStaticValueAtTime:getStaticValueAtTime,setGroupProperty:setGroupProperty};}();/* global createTypedArray, Matrix, TransformPropertyFactory, expressionHelpers, PropertyFactory, expressionHelpers,
initialDefaultFrame, shapePool, ShapePropertyFactory, bez, extendPrototype, ExpressionManager, createSizedArray */(function addPropertyDecorator(){function loopOut(type,duration,durationFlag){if(!this.k||!this.keyframes){return this.pv;}type=type?type.toLowerCase():'';var currentFrame=this.comp.renderedFrame;var keyframes=this.keyframes;var lastKeyFrame=keyframes[keyframes.length-1].t;if(currentFrame<=lastKeyFrame){return this.pv;}var cycleDuration;var firstKeyFrame;if(!durationFlag){if(!duration||duration>keyframes.length-1){duration=keyframes.length-1;}firstKeyFrame=keyframes[keyframes.length-1-duration].t;cycleDuration=lastKeyFrame-firstKeyFrame;}else{if(!duration){cycleDuration=Math.max(0,lastKeyFrame-this.elem.data.ip);}else{cycleDuration=Math.abs(lastKeyFrame-this.elem.comp.globalData.frameRate*duration);}firstKeyFrame=lastKeyFrame-cycleDuration;}var i;var len;var ret;if(type==='pingpong'){var iterations=Math.floor((currentFrame-firstKeyFrame)/cycleDuration);if(iterations%2!==0){return this.getValueAtTime((cycleDuration-(currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
}}else if(type==='offset'){var initV=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var endV=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var current=this.getValueAtTime(((currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
var repeats=Math.floor((currentFrame-firstKeyFrame)/cycleDuration);if(this.pv.length){ret=new Array(initV.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=(endV[i]-initV[i])*repeats+current[i];}return ret;}return(endV-initV)*repeats+current;}else if(type==='continue'){var lastValue=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var nextLastValue=this.getValueAtTime((lastKeyFrame-0.001)/this.comp.globalData.frameRate,0);if(this.pv.length){ret=new Array(lastValue.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=lastValue[i]+(lastValue[i]-nextLastValue[i])*((currentFrame-lastKeyFrame)/this.comp.globalData.frameRate)/0.0005;// eslint-disable-line
}return ret;}return lastValue+(lastValue-nextLastValue)*((currentFrame-lastKeyFrame)/0.001);}return this.getValueAtTime(((currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
}function loopIn(type,duration,durationFlag){if(!this.k){return this.pv;}type=type?type.toLowerCase():'';var currentFrame=this.comp.renderedFrame;var keyframes=this.keyframes;var firstKeyFrame=keyframes[0].t;if(currentFrame>=firstKeyFrame){return this.pv;}var cycleDuration;var lastKeyFrame;if(!durationFlag){if(!duration||duration>keyframes.length-1){duration=keyframes.length-1;}lastKeyFrame=keyframes[duration].t;cycleDuration=lastKeyFrame-firstKeyFrame;}else{if(!duration){cycleDuration=Math.max(0,this.elem.data.op-firstKeyFrame);}else{cycleDuration=Math.abs(this.elem.comp.globalData.frameRate*duration);}lastKeyFrame=firstKeyFrame+cycleDuration;}var i;var len;var ret;if(type==='pingpong'){var iterations=Math.floor((firstKeyFrame-currentFrame)/cycleDuration);if(iterations%2===0){return this.getValueAtTime(((firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
}}else if(type==='offset'){var initV=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var endV=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var current=this.getValueAtTime((cycleDuration-(firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);var repeats=Math.floor((firstKeyFrame-currentFrame)/cycleDuration)+1;if(this.pv.length){ret=new Array(initV.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=current[i]-(endV[i]-initV[i])*repeats;}return ret;}return current-(endV-initV)*repeats;}else if(type==='continue'){var firstValue=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var nextFirstValue=this.getValueAtTime((firstKeyFrame+0.001)/this.comp.globalData.frameRate,0);if(this.pv.length){ret=new Array(firstValue.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=firstValue[i]+(firstValue[i]-nextFirstValue[i])*(firstKeyFrame-currentFrame)/0.001;}return ret;}return firstValue+(firstValue-nextFirstValue)*(firstKeyFrame-currentFrame)/0.001;}return this.getValueAtTime((cycleDuration-((firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame))/this.comp.globalData.frameRate,0);// eslint-disable-line
}function smooth(width,samples){if(!this.k){return this.pv;}width=(width||0.4)*0.5;samples=Math.floor(samples||5);if(samples<=1){return this.pv;}var currentTime=this.comp.renderedFrame/this.comp.globalData.frameRate;var initFrame=currentTime-width;var endFrame=currentTime+width;var sampleFrequency=samples>1?(endFrame-initFrame)/(samples-1):1;var i=0;var j=0;var value;if(this.pv.length){value=createTypedArray('float32',this.pv.length);}else{value=0;}var sampleValue;while(i<samples){sampleValue=this.getValueAtTime(initFrame+i*sampleFrequency);if(this.pv.length){for(j=0;j<this.pv.length;j+=1){value[j]+=sampleValue[j];}}else{value+=sampleValue;}i+=1;}if(this.pv.length){for(j=0;j<this.pv.length;j+=1){value[j]/=samples;}}else{value/=samples;}return value;}function getTransformValueAtTime(time){if(!this._transformCachingAtTime){this._transformCachingAtTime={v:new Matrix()};}/// /
var matrix=this._transformCachingAtTime.v;matrix.cloneFromProps(this.pre.props);if(this.appliedTransformations<1){var anchor=this.a.getValueAtTime(time);matrix.translate(-anchor[0]*this.a.mult,-anchor[1]*this.a.mult,anchor[2]*this.a.mult);}if(this.appliedTransformations<2){var scale=this.s.getValueAtTime(time);matrix.scale(scale[0]*this.s.mult,scale[1]*this.s.mult,scale[2]*this.s.mult);}if(this.sk&&this.appliedTransformations<3){var skew=this.sk.getValueAtTime(time);var skewAxis=this.sa.getValueAtTime(time);matrix.skewFromAxis(-skew*this.sk.mult,skewAxis*this.sa.mult);}if(this.r&&this.appliedTransformations<4){var rotation=this.r.getValueAtTime(time);matrix.rotate(-rotation*this.r.mult);}else if(!this.r&&this.appliedTransformations<4){var rotationZ=this.rz.getValueAtTime(time);var rotationY=this.ry.getValueAtTime(time);var rotationX=this.rx.getValueAtTime(time);var orientation=this.or.getValueAtTime(time);matrix.rotateZ(-rotationZ*this.rz.mult).rotateY(rotationY*this.ry.mult).rotateX(rotationX*this.rx.mult).rotateZ(-orientation[2]*this.or.mult).rotateY(orientation[1]*this.or.mult).rotateX(orientation[0]*this.or.mult);}if(this.data.p&&this.data.p.s){var positionX=this.px.getValueAtTime(time);var positionY=this.py.getValueAtTime(time);if(this.data.p.z){var positionZ=this.pz.getValueAtTime(time);matrix.translate(positionX*this.px.mult,positionY*this.py.mult,-positionZ*this.pz.mult);}else{matrix.translate(positionX*this.px.mult,positionY*this.py.mult,0);}}else{var position=this.p.getValueAtTime(time);matrix.translate(position[0]*this.p.mult,position[1]*this.p.mult,-position[2]*this.p.mult);}return matrix;/// /
}function getTransformStaticValueAtTime(){return this.v.clone(new Matrix());}var getTransformProperty=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(elem,data,container){var prop=getTransformProperty(elem,data,container);if(prop.dynamicProperties.length){prop.getValueAtTime=getTransformValueAtTime.bind(prop);}else{prop.getValueAtTime=getTransformStaticValueAtTime.bind(prop);}prop.setGroupProperty=expressionHelpers.setGroupProperty;return prop;};var propertyGetProp=PropertyFactory.getProp;PropertyFactory.getProp=function(elem,data,type,mult,container){var prop=propertyGetProp(elem,data,type,mult,container);// prop.getVelocityAtTime = getVelocityAtTime;
// prop.loopOut = loopOut;
// prop.loopIn = loopIn;
if(prop.kf){prop.getValueAtTime=expressionHelpers.getValueAtTime.bind(prop);}else{prop.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(prop);}prop.setGroupProperty=expressionHelpers.setGroupProperty;prop.loopOut=loopOut;prop.loopIn=loopIn;prop.smooth=smooth;prop.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(prop);prop.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(prop);prop.numKeys=data.a===1?data.k.length:0;prop.propertyIndex=data.ix;var value=0;if(type!==0){value=createTypedArray('float32',data.a===1?data.k[0].s.length:data.k.length);}prop._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:value};expressionHelpers.searchExpressions(elem,data,prop);if(prop.k){container.addDynamicProperty(prop);}return prop;};function getShapeValueAtTime(frameNum){// For now this caching object is created only when needed instead of creating it when the shape is initialized.
if(!this._cachingAtTime){this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame};}frameNum*=this.elem.globalData.frameRate;frameNum-=this.offsetTime;if(frameNum!==this._cachingAtTime.lastTime){this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<frameNum?this._caching.lastIndex:0;this._cachingAtTime.lastTime=frameNum;this.interpolateShape(frameNum,this._cachingAtTime.shapeValue,this._cachingAtTime);}return this._cachingAtTime.shapeValue;}var ShapePropertyConstructorFunction=ShapePropertyFactory.getConstructorFunction();var KeyframedShapePropertyConstructorFunction=ShapePropertyFactory.getKeyframedConstructorFunction();function ShapeExpressions(){}ShapeExpressions.prototype={vertices:function vertices(prop,time){if(this.k){this.getValue();}var shapePath=this.v;if(time!==undefined){shapePath=this.getValueAtTime(time,0);}var i;var len=shapePath._length;var vertices=shapePath[prop];var points=shapePath.v;var arr=createSizedArray(len);for(i=0;i<len;i+=1){if(prop==='i'||prop==='o'){arr[i]=[vertices[i][0]-points[i][0],vertices[i][1]-points[i][1]];}else{arr[i]=[vertices[i][0],vertices[i][1]];}}return arr;},points:function points(time){return this.vertices('v',time);},inTangents:function inTangents(time){return this.vertices('i',time);},outTangents:function outTangents(time){return this.vertices('o',time);},isClosed:function isClosed(){return this.v.c;},pointOnPath:function pointOnPath(perc,time){var shapePath=this.v;if(time!==undefined){shapePath=this.getValueAtTime(time,0);}if(!this._segmentsLength){this._segmentsLength=bez.getSegmentsLength(shapePath);}var segmentsLength=this._segmentsLength;var lengths=segmentsLength.lengths;var lengthPos=segmentsLength.totalLength*perc;var i=0;var len=lengths.length;var accumulatedLength=0;var pt;while(i<len){if(accumulatedLength+lengths[i].addedLength>lengthPos){var initIndex=i;var endIndex=shapePath.c&&i===len-1?0:i+1;var segmentPerc=(lengthPos-accumulatedLength)/lengths[i].addedLength;pt=bez.getPointInSegment(shapePath.v[initIndex],shapePath.v[endIndex],shapePath.o[initIndex],shapePath.i[endIndex],segmentPerc,lengths[i]);break;}else{accumulatedLength+=lengths[i].addedLength;}i+=1;}if(!pt){pt=shapePath.c?[shapePath.v[0][0],shapePath.v[0][1]]:[shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1]];}return pt;},vectorOnPath:function vectorOnPath(perc,time,vectorType){// perc doesn't use triple equality because it can be a Number object as well as a primitive.
if(perc==1){// eslint-disable-line eqeqeq
perc=this.v.c;}else if(perc==0){// eslint-disable-line eqeqeq
perc=0.999;}var pt1=this.pointOnPath(perc,time);var pt2=this.pointOnPath(perc+0.001,time);var xLength=pt2[0]-pt1[0];var yLength=pt2[1]-pt1[1];var magnitude=Math.sqrt(Math.pow(xLength,2)+Math.pow(yLength,2));if(magnitude===0){return[0,0];}var unitVector=vectorType==='tangent'?[xLength/magnitude,yLength/magnitude]:[-yLength/magnitude,xLength/magnitude];return unitVector;},tangentOnPath:function tangentOnPath(perc,time){return this.vectorOnPath(perc,time,'tangent');},normalOnPath:function normalOnPath(perc,time){return this.vectorOnPath(perc,time,'normal');},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime};extendPrototype([ShapeExpressions],ShapePropertyConstructorFunction);extendPrototype([ShapeExpressions],KeyframedShapePropertyConstructorFunction);KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime=getShapeValueAtTime;KeyframedShapePropertyConstructorFunction.prototype.initiateExpression=ExpressionManager.initiateExpression;var propertyGetShapeProp=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(elem,data,type,arr,trims){var prop=propertyGetShapeProp(elem,data,type,arr,trims);prop.propertyIndex=data.ix;prop.lock=false;if(type===3){expressionHelpers.searchExpressions(elem,data.pt,prop);}else if(type===4){expressionHelpers.searchExpressions(elem,data.ks,prop);}if(prop.k){elem.addDynamicProperty(prop);}return prop;};})();/* global ExpressionManager, TextProperty */(function addDecorator(){function searchExpressions(){if(this.data.d.x){this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this);this.addEffect(this.getExpressionValue.bind(this));return true;}return null;}TextProperty.prototype.getExpressionValue=function(currentValue,text){var newValue=this.calculateExpression(text);if(currentValue.t!==newValue){var newData={};this.copyData(newData,currentValue);newData.t=newValue.toString();newData.__complete=false;return newData;}return currentValue;};TextProperty.prototype.searchProperty=function(){var isKeyframed=this.searchKeyframes();var hasExpressions=this.searchExpressions();this.kf=isKeyframed||hasExpressions;return this.kf;};TextProperty.prototype.searchExpressions=searchExpressions;})();/* global propertyGroupFactory, PropertyInterface */ /* exported ShapePathInterface */var ShapePathInterface=function(){return function pathInterfaceFactory(shape,view,propertyGroup){var prop=view.sh;function interfaceFunction(val){if(val==='Shape'||val==='shape'||val==='Path'||val==='path'||val==='ADBE Vector Shape'||val===2){return interfaceFunction.path;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);prop.setGroupProperty(PropertyInterface('Path',_propertyGroup));Object.defineProperties(interfaceFunction,{path:{get:function get(){if(prop.k){prop.getValue();}return prop;}},shape:{get:function get(){if(prop.k){prop.getValue();}return prop;}},_name:{value:shape.nm},ix:{value:shape.ix},propertyIndex:{value:shape.ix},mn:{value:shape.mn},propertyGroup:{value:propertyGroup}});return interfaceFunction;};}();/* exported propertyGroupFactory */var propertyGroupFactory=function(){return function(interfaceFunction,parentPropertyGroup){return function(val){val=val===undefined?1:val;if(val<=0){return interfaceFunction;}return parentPropertyGroup(val-1);};};}();/* exported PropertyInterface */var PropertyInterface=function(){return function(propertyName,propertyGroup){var interfaceFunction={_name:propertyName};function _propertyGroup(val){val=val===undefined?1:val;if(val<=0){return interfaceFunction;}return propertyGroup(val-1);}return _propertyGroup;};}();/* global ExpressionPropertyInterface, PropertyInterface, propertyGroupFactory, ShapePathInterface */ /* exported ShapeExpressionInterface */var ShapeExpressionInterface=function(){function iterateElements(shapes,view,propertyGroup){var arr=[];var i;var len=shapes?shapes.length:0;for(i=0;i<len;i+=1){if(shapes[i].ty==='gr'){arr.push(groupInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='fl'){arr.push(fillInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='st'){arr.push(strokeInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='tm'){arr.push(trimInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='tr'){// arr.push(transformInterfaceFactory(shapes[i],view[i],propertyGroup));
}else if(shapes[i].ty==='el'){arr.push(ellipseInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='sr'){arr.push(starInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='sh'){arr.push(ShapePathInterface(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rc'){arr.push(rectInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rd'){arr.push(roundedInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rp'){arr.push(repeaterInterfaceFactory(shapes[i],view[i],propertyGroup));}}return arr;}function contentsInterfaceFactory(shape,view,propertyGroup){var interfaces;var interfaceFunction=function _interfaceFunction(value){var i=0;var len=interfaces.length;while(i<len){if(interfaces[i]._name===value||interfaces[i].mn===value||interfaces[i].propertyIndex===value||interfaces[i].ix===value||interfaces[i].ind===value){return interfaces[i];}i+=1;}if(typeof value==='number'){return interfaces[value-1];}return null;};interfaceFunction.propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaces=iterateElements(shape.it,view.it,interfaceFunction.propertyGroup);interfaceFunction.numProperties=interfaces.length;var transformInterface=transformInterfaceFactory(shape.it[shape.it.length-1],view.it[view.it.length-1],interfaceFunction.propertyGroup);interfaceFunction.transform=transformInterface;interfaceFunction.propertyIndex=shape.cix;interfaceFunction._name=shape.nm;return interfaceFunction;}function groupInterfaceFactory(shape,view,propertyGroup){var interfaceFunction=function _interfaceFunction(value){switch(value){case'ADBE Vectors Group':case'Contents':case 2:return interfaceFunction.content;// Not necessary for now. Keeping them here in case a new case appears
// case 'ADBE Vector Transform Group':
// case 3:
default:return interfaceFunction.transform;}};interfaceFunction.propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var content=contentsInterfaceFactory(shape,view,interfaceFunction.propertyGroup);var transformInterface=transformInterfaceFactory(shape.it[shape.it.length-1],view.it[view.it.length-1],interfaceFunction.propertyGroup);interfaceFunction.content=content;interfaceFunction.transform=transformInterface;Object.defineProperty(interfaceFunction,'_name',{get:function get(){return shape.nm;}});// interfaceFunction.content = interfaceFunction;
interfaceFunction.numProperties=shape.np;interfaceFunction.propertyIndex=shape.ix;interfaceFunction.nm=shape.nm;interfaceFunction.mn=shape.mn;return interfaceFunction;}function fillInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(val){if(val==='Color'||val==='color'){return interfaceFunction.color;}if(val==='Opacity'||val==='opacity'){return interfaceFunction.opacity;}return null;}Object.defineProperties(interfaceFunction,{color:{get:ExpressionPropertyInterface(view.c)},opacity:{get:ExpressionPropertyInterface(view.o)},_name:{value:shape.nm},mn:{value:shape.mn}});view.c.setGroupProperty(PropertyInterface('Color',propertyGroup));view.o.setGroupProperty(PropertyInterface('Opacity',propertyGroup));return interfaceFunction;}function strokeInterfaceFactory(shape,view,propertyGroup){var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var _dashPropertyGroup=propertyGroupFactory(dashOb,_propertyGroup);function addPropertyToDashOb(i){Object.defineProperty(dashOb,shape.d[i].nm,{get:ExpressionPropertyInterface(view.d.dataProps[i].p)});}var i;var len=shape.d?shape.d.length:0;var dashOb={};for(i=0;i<len;i+=1){addPropertyToDashOb(i);view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);}function interfaceFunction(val){if(val==='Color'||val==='color'){return interfaceFunction.color;}if(val==='Opacity'||val==='opacity'){return interfaceFunction.opacity;}if(val==='Stroke Width'||val==='stroke width'){return interfaceFunction.strokeWidth;}return null;}Object.defineProperties(interfaceFunction,{color:{get:ExpressionPropertyInterface(view.c)},opacity:{get:ExpressionPropertyInterface(view.o)},strokeWidth:{get:ExpressionPropertyInterface(view.w)},dash:{get:function get(){return dashOb;}},_name:{value:shape.nm},mn:{value:shape.mn}});view.c.setGroupProperty(PropertyInterface('Color',_propertyGroup));view.o.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));view.w.setGroupProperty(PropertyInterface('Stroke Width',_propertyGroup));return interfaceFunction;}function trimInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(val){if(val===shape.e.ix||val==='End'||val==='end'){return interfaceFunction.end;}if(val===shape.s.ix){return interfaceFunction.start;}if(val===shape.o.ix){return interfaceFunction.offset;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaceFunction.propertyIndex=shape.ix;view.s.setGroupProperty(PropertyInterface('Start',_propertyGroup));view.e.setGroupProperty(PropertyInterface('End',_propertyGroup));view.o.setGroupProperty(PropertyInterface('Offset',_propertyGroup));interfaceFunction.propertyIndex=shape.ix;interfaceFunction.propertyGroup=propertyGroup;Object.defineProperties(interfaceFunction,{start:{get:ExpressionPropertyInterface(view.s)},end:{get:ExpressionPropertyInterface(view.e)},offset:{get:ExpressionPropertyInterface(view.o)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function transformInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.a.ix===value||value==='Anchor Point'){return interfaceFunction.anchorPoint;}if(shape.o.ix===value||value==='Opacity'){return interfaceFunction.opacity;}if(shape.p.ix===value||value==='Position'){return interfaceFunction.position;}if(shape.r.ix===value||value==='Rotation'||value==='ADBE Vector Rotation'){return interfaceFunction.rotation;}if(shape.s.ix===value||value==='Scale'){return interfaceFunction.scale;}if(shape.sk&&shape.sk.ix===value||value==='Skew'){return interfaceFunction.skew;}if(shape.sa&&shape.sa.ix===value||value==='Skew Axis'){return interfaceFunction.skewAxis;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);view.transform.mProps.o.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));view.transform.mProps.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));view.transform.mProps.a.setGroupProperty(PropertyInterface('Anchor Point',_propertyGroup));view.transform.mProps.s.setGroupProperty(PropertyInterface('Scale',_propertyGroup));view.transform.mProps.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));if(view.transform.mProps.sk){view.transform.mProps.sk.setGroupProperty(PropertyInterface('Skew',_propertyGroup));view.transform.mProps.sa.setGroupProperty(PropertyInterface('Skew Angle',_propertyGroup));}view.transform.op.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));Object.defineProperties(interfaceFunction,{opacity:{get:ExpressionPropertyInterface(view.transform.mProps.o)},position:{get:ExpressionPropertyInterface(view.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(view.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(view.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(view.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(view.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(view.transform.mProps.sa)},_name:{value:shape.nm}});interfaceFunction.ty='tr';interfaceFunction.mn=shape.mn;interfaceFunction.propertyGroup=propertyGroup;return interfaceFunction;}function ellipseInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.s.ix===value){return interfaceFunction.size;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaceFunction.propertyIndex=shape.ix;var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;prop.s.setGroupProperty(PropertyInterface('Size',_propertyGroup));prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));Object.defineProperties(interfaceFunction,{size:{get:ExpressionPropertyInterface(prop.s)},position:{get:ExpressionPropertyInterface(prop.p)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function starInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.r.ix===value){return interfaceFunction.rotation;}if(shape.pt.ix===value){return interfaceFunction.points;}if(shape.or.ix===value||value==='ADBE Vector Star Outer Radius'){return interfaceFunction.outerRadius;}if(shape.os.ix===value){return interfaceFunction.outerRoundness;}if(shape.ir&&(shape.ir.ix===value||value==='ADBE Vector Star Inner Radius')){return interfaceFunction.innerRadius;}if(shape.is&&shape.is.ix===value){return interfaceFunction.innerRoundness;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;interfaceFunction.propertyIndex=shape.ix;prop.or.setGroupProperty(PropertyInterface('Outer Radius',_propertyGroup));prop.os.setGroupProperty(PropertyInterface('Outer Roundness',_propertyGroup));prop.pt.setGroupProperty(PropertyInterface('Points',_propertyGroup));prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));prop.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));if(shape.ir){prop.ir.setGroupProperty(PropertyInterface('Inner Radius',_propertyGroup));prop.is.setGroupProperty(PropertyInterface('Inner Roundness',_propertyGroup));}Object.defineProperties(interfaceFunction,{position:{get:ExpressionPropertyInterface(prop.p)},rotation:{get:ExpressionPropertyInterface(prop.r)},points:{get:ExpressionPropertyInterface(prop.pt)},outerRadius:{get:ExpressionPropertyInterface(prop.or)},outerRoundness:{get:ExpressionPropertyInterface(prop.os)},innerRadius:{get:ExpressionPropertyInterface(prop.ir)},innerRoundness:{get:ExpressionPropertyInterface(prop.is)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function rectInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.r.ix===value){return interfaceFunction.roundness;}if(shape.s.ix===value||value==='Size'||value==='ADBE Vector Rect Size'){return interfaceFunction.size;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;interfaceFunction.propertyIndex=shape.ix;prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));prop.s.setGroupProperty(PropertyInterface('Size',_propertyGroup));prop.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));Object.defineProperties(interfaceFunction,{position:{get:ExpressionPropertyInterface(prop.p)},roundness:{get:ExpressionPropertyInterface(prop.r)},size:{get:ExpressionPropertyInterface(prop.s)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function roundedInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.r.ix===value||value==='Round Corners 1'){return interfaceFunction.radius;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view;interfaceFunction.propertyIndex=shape.ix;prop.rd.setGroupProperty(PropertyInterface('Radius',_propertyGroup));Object.defineProperties(interfaceFunction,{radius:{get:ExpressionPropertyInterface(prop.rd)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function repeaterInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.c.ix===value||value==='Copies'){return interfaceFunction.copies;}if(shape.o.ix===value||value==='Offset'){return interfaceFunction.offset;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view;interfaceFunction.propertyIndex=shape.ix;prop.c.setGroupProperty(PropertyInterface('Copies',_propertyGroup));prop.o.setGroupProperty(PropertyInterface('Offset',_propertyGroup));Object.defineProperties(interfaceFunction,{copies:{get:ExpressionPropertyInterface(prop.c)},offset:{get:ExpressionPropertyInterface(prop.o)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}return function(shapes,view,propertyGroup){var interfaces;function _interfaceFunction(value){if(typeof value==='number'){value=value===undefined?1:value;if(value===0){return propertyGroup;}return interfaces[value-1];}var i=0;var len=interfaces.length;while(i<len){if(interfaces[i]._name===value){return interfaces[i];}i+=1;}return null;}function parentGroupWrapper(){return propertyGroup;}_interfaceFunction.propertyGroup=propertyGroupFactory(_interfaceFunction,parentGroupWrapper);interfaces=iterateElements(shapes,view,_interfaceFunction.propertyGroup);_interfaceFunction.numProperties=interfaces.length;_interfaceFunction._name='Contents';return _interfaceFunction;};}();/* exported TextExpressionInterface */var TextExpressionInterface=function(){return function(elem){var _prevValue;var _sourceText;function _thisLayerFunction(name){switch(name){case'ADBE Text Document':return _thisLayerFunction.sourceText;default:return null;}}Object.defineProperty(_thisLayerFunction,'sourceText',{get:function get(){elem.textProperty.getValue();var stringValue=elem.textProperty.currentData.t;if(stringValue!==_prevValue){elem.textProperty.currentData.t=_prevValue;_sourceText=new String(stringValue);// eslint-disable-line no-new-wrappers
// If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive
_sourceText.value=stringValue||new String(stringValue);// eslint-disable-line no-new-wrappers
}return _sourceText;}});return _thisLayerFunction;};}();/* global Matrix, MaskManagerInterface, TransformExpressionInterface, getDescriptor */ /* exported LayerExpressionInterface */var LayerExpressionInterface=function(){function getMatrix(time){var toWorldMat=new Matrix();if(time!==undefined){var propMatrix=this._elem.finalTransform.mProp.getValueAtTime(time);propMatrix.clone(toWorldMat);}else{var transformMat=this._elem.finalTransform.mProp;transformMat.applyToMatrix(toWorldMat);}return toWorldMat;}function toWorldVec(arr,time){var toWorldMat=this.getMatrix(time);toWorldMat.props[12]=0;toWorldMat.props[13]=0;toWorldMat.props[14]=0;return this.applyPoint(toWorldMat,arr);}function toWorld(arr,time){var toWorldMat=this.getMatrix(time);return this.applyPoint(toWorldMat,arr);}function fromWorldVec(arr,time){var toWorldMat=this.getMatrix(time);toWorldMat.props[12]=0;toWorldMat.props[13]=0;toWorldMat.props[14]=0;return this.invertPoint(toWorldMat,arr);}function fromWorld(arr,time){var toWorldMat=this.getMatrix(time);return this.invertPoint(toWorldMat,arr);}function applyPoint(matrix,arr){if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);}}return matrix.applyToPointArray(arr[0],arr[1],arr[2]||0);}function invertPoint(matrix,arr){if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);}}return matrix.inversePoint(arr);}function fromComp(arr){var toWorldMat=new Matrix();toWorldMat.reset();this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);}return toWorldMat.inversePoint(arr);}return toWorldMat.inversePoint(arr);}function sampleImage(){return[1,1,1,1];}return function(elem){var transformInterface;function _registerMaskInterface(maskManager){_thisLayerFunction.mask=new MaskManagerInterface(maskManager,elem);}function _registerEffectsInterface(effects){_thisLayerFunction.effect=effects;}function _thisLayerFunction(name){switch(name){case'ADBE Root Vectors Group':case'Contents':case 2:return _thisLayerFunction.shapeInterface;case 1:case 6:case'Transform':case'transform':case'ADBE Transform Group':return transformInterface;case 4:case'ADBE Effect Parade':case'effects':case'Effects':return _thisLayerFunction.effect;case'ADBE Text Properties':return _thisLayerFunction.textInterface;default:return null;}}_thisLayerFunction.getMatrix=getMatrix;_thisLayerFunction.invertPoint=invertPoint;_thisLayerFunction.applyPoint=applyPoint;_thisLayerFunction.toWorld=toWorld;_thisLayerFunction.toWorldVec=toWorldVec;_thisLayerFunction.fromWorld=fromWorld;_thisLayerFunction.fromWorldVec=fromWorldVec;_thisLayerFunction.toComp=toWorld;_thisLayerFunction.fromComp=fromComp;_thisLayerFunction.sampleImage=sampleImage;_thisLayerFunction.sourceRectAtTime=elem.sourceRectAtTime.bind(elem);_thisLayerFunction._elem=elem;transformInterface=TransformExpressionInterface(elem.finalTransform.mProp);var anchorPointDescriptor=getDescriptor(transformInterface,'anchorPoint');Object.defineProperties(_thisLayerFunction,{hasParent:{get:function get(){return elem.hierarchy.length;}},parent:{get:function get(){return elem.hierarchy[0].layerInterface;}},rotation:getDescriptor(transformInterface,'rotation'),scale:getDescriptor(transformInterface,'scale'),position:getDescriptor(transformInterface,'position'),opacity:getDescriptor(transformInterface,'opacity'),anchorPoint:anchorPointDescriptor,anchor_point:anchorPointDescriptor,transform:{get:function get(){return transformInterface;}},active:{get:function get(){return elem.isInRange;}}});_thisLayerFunction.startTime=elem.data.st;_thisLayerFunction.index=elem.data.ind;_thisLayerFunction.source=elem.data.refId;_thisLayerFunction.height=elem.data.ty===0?elem.data.h:100;_thisLayerFunction.width=elem.data.ty===0?elem.data.w:100;_thisLayerFunction.inPoint=elem.data.ip/elem.comp.globalData.frameRate;_thisLayerFunction.outPoint=elem.data.op/elem.comp.globalData.frameRate;_thisLayerFunction._name=elem.data.nm;_thisLayerFunction.registerMaskInterface=_registerMaskInterface;_thisLayerFunction.registerEffectsInterface=_registerEffectsInterface;return _thisLayerFunction;};}();/* exported CompExpressionInterface */var CompExpressionInterface=function(){return function(comp){function _thisLayerFunction(name){var i=0;var len=comp.layers.length;while(i<len){if(comp.layers[i].nm===name||comp.layers[i].ind===name){return comp.elements[i].layerInterface;}i+=1;}return null;// return {active:false};
}Object.defineProperty(_thisLayerFunction,'_name',{value:comp.data.nm});_thisLayerFunction.layer=_thisLayerFunction;_thisLayerFunction.pixelAspect=1;_thisLayerFunction.height=comp.data.h||comp.globalData.compSize.h;_thisLayerFunction.width=comp.data.w||comp.globalData.compSize.w;_thisLayerFunction.pixelAspect=1;_thisLayerFunction.frameDuration=1/comp.globalData.frameRate;_thisLayerFunction.displayStartTime=0;_thisLayerFunction.numLayers=comp.layers.length;return _thisLayerFunction;};}();/* global ExpressionPropertyInterface */ /* exported TransformExpressionInterface */var TransformExpressionInterface=function(){return function(transform){function _thisFunction(name){switch(name){case'scale':case'Scale':case'ADBE Scale':case 6:return _thisFunction.scale;case'rotation':case'Rotation':case'ADBE Rotation':case'ADBE Rotate Z':case 10:return _thisFunction.rotation;case'ADBE Rotate X':return _thisFunction.xRotation;case'ADBE Rotate Y':return _thisFunction.yRotation;case'position':case'Position':case'ADBE Position':case 2:return _thisFunction.position;case'ADBE Position_0':return _thisFunction.xPosition;case'ADBE Position_1':return _thisFunction.yPosition;case'ADBE Position_2':return _thisFunction.zPosition;case'anchorPoint':case'AnchorPoint':case'Anchor Point':case'ADBE AnchorPoint':case 1:return _thisFunction.anchorPoint;case'opacity':case'Opacity':case 11:return _thisFunction.opacity;default:return null;}}Object.defineProperty(_thisFunction,'rotation',{get:ExpressionPropertyInterface(transform.r||transform.rz)});Object.defineProperty(_thisFunction,'zRotation',{get:ExpressionPropertyInterface(transform.rz||transform.r)});Object.defineProperty(_thisFunction,'xRotation',{get:ExpressionPropertyInterface(transform.rx)});Object.defineProperty(_thisFunction,'yRotation',{get:ExpressionPropertyInterface(transform.ry)});Object.defineProperty(_thisFunction,'scale',{get:ExpressionPropertyInterface(transform.s)});var _px;var _py;var _pz;var _transformFactory;if(transform.p){_transformFactory=ExpressionPropertyInterface(transform.p);}else{_px=ExpressionPropertyInterface(transform.px);_py=ExpressionPropertyInterface(transform.py);if(transform.pz){_pz=ExpressionPropertyInterface(transform.pz);}}Object.defineProperty(_thisFunction,'position',{get:function get(){if(transform.p){return _transformFactory();}return[_px(),_py(),_pz?_pz():0];}});Object.defineProperty(_thisFunction,'xPosition',{get:ExpressionPropertyInterface(transform.px)});Object.defineProperty(_thisFunction,'yPosition',{get:ExpressionPropertyInterface(transform.py)});Object.defineProperty(_thisFunction,'zPosition',{get:ExpressionPropertyInterface(transform.pz)});Object.defineProperty(_thisFunction,'anchorPoint',{get:ExpressionPropertyInterface(transform.a)});Object.defineProperty(_thisFunction,'opacity',{get:ExpressionPropertyInterface(transform.o)});Object.defineProperty(_thisFunction,'skew',{get:ExpressionPropertyInterface(transform.sk)});Object.defineProperty(_thisFunction,'skewAxis',{get:ExpressionPropertyInterface(transform.sa)});Object.defineProperty(_thisFunction,'orientation',{get:ExpressionPropertyInterface(transform.or)});return _thisFunction;};}();/* exported ProjectInterface */var ProjectInterface=function(){function registerComposition(comp){this.compositions.push(comp);}return function(){function _thisProjectFunction(name){var i=0;var len=this.compositions.length;while(i<len){if(this.compositions[i].data&&this.compositions[i].data.nm===name){if(this.compositions[i].prepareFrame&&this.compositions[i].data.xt){this.compositions[i].prepareFrame(this.currentFrame);}return this.compositions[i].compInterface;}i+=1;}return null;}_thisProjectFunction.compositions=[];_thisProjectFunction.currentFrame=0;_thisProjectFunction.registerComposition=registerComposition;return _thisProjectFunction;};}();/* global propertyGroupFactory, ExpressionPropertyInterface, PropertyInterface */ /* exported EffectsExpressionInterface */var EffectsExpressionInterface=function(){var ob={createEffectsInterface:createEffectsInterface};function createEffectsInterface(elem,propertyGroup){if(elem.effectsManager){var effectElements=[];var effectsData=elem.data.ef;var i;var len=elem.effectsManager.effectElements.length;for(i=0;i<len;i+=1){effectElements.push(createGroupInterface(effectsData[i],elem.effectsManager.effectElements[i],propertyGroup,elem));}var effects=elem.data.ef||[];var groupInterface=function groupInterface(name){i=0;len=effects.length;while(i<len){if(name===effects[i].nm||name===effects[i].mn||name===effects[i].ix){return effectElements[i];}i+=1;}return null;};Object.defineProperty(groupInterface,'numProperties',{get:function get(){return effects.length;}});return groupInterface;}return null;}function createGroupInterface(data,elements,propertyGroup,elem){function groupInterface(name){var effects=data.ef;var i=0;var len=effects.length;while(i<len){if(name===effects[i].nm||name===effects[i].mn||name===effects[i].ix){if(effects[i].ty===5){return effectElements[i];}return effectElements[i]();}i+=1;}throw new Error();}var _propertyGroup=propertyGroupFactory(groupInterface,propertyGroup);var effectElements=[];var i;var len=data.ef.length;for(i=0;i<len;i+=1){if(data.ef[i].ty===5){effectElements.push(createGroupInterface(data.ef[i],elements.effectElements[i],elements.effectElements[i].propertyGroup,elem));}else{effectElements.push(createValueInterface(elements.effectElements[i],data.ef[i].ty,elem,_propertyGroup));}}if(data.mn==='ADBE Color Control'){Object.defineProperty(groupInterface,'color',{get:function get(){return effectElements[0]();}});}Object.defineProperties(groupInterface,{numProperties:{get:function get(){return data.np;}},_name:{value:data.nm},propertyGroup:{value:_propertyGroup}});groupInterface.enabled=data.en!==0;groupInterface.active=groupInterface.enabled;return groupInterface;}function createValueInterface(element,type,elem,propertyGroup){var expressionProperty=ExpressionPropertyInterface(element.p);function interfaceFunction(){if(type===10){return elem.comp.compInterface(element.p.v);}return expressionProperty();}if(element.p.setGroupProperty){element.p.setGroupProperty(PropertyInterface('',propertyGroup));}return interfaceFunction;}return ob;}();/* global createSizedArray */ /* exported MaskManagerInterface */var MaskManagerInterface=function(){function MaskInterface(mask,data){this._mask=mask;this._data=data;}Object.defineProperty(MaskInterface.prototype,'maskPath',{get:function get(){if(this._mask.prop.k){this._mask.prop.getValue();}return this._mask.prop;}});Object.defineProperty(MaskInterface.prototype,'maskOpacity',{get:function get(){if(this._mask.op.k){this._mask.op.getValue();}return this._mask.op.v*100;}});var MaskManager=function MaskManager(maskManager){var _masksInterfaces=createSizedArray(maskManager.viewData.length);var i;var len=maskManager.viewData.length;for(i=0;i<len;i+=1){_masksInterfaces[i]=new MaskInterface(maskManager.viewData[i],maskManager.masksProperties[i]);}var maskFunction=function maskFunction(name){i=0;while(i<len){if(maskManager.masksProperties[i].nm===name){return _masksInterfaces[i];}i+=1;}return null;};return maskFunction;};return MaskManager;}();/* global createTypedArray */ /* exported ExpressionPropertyInterface */var ExpressionPropertyInterface=function(){var defaultUnidimensionalValue={pv:0,v:0,mult:1};var defaultMultidimensionalValue={pv:[0,0,0],v:[0,0,0],mult:1};function completeProperty(expressionValue,property,type){Object.defineProperty(expressionValue,'velocity',{get:function get(){return property.getVelocityAtTime(property.comp.currentFrame);}});expressionValue.numKeys=property.keyframes?property.keyframes.length:0;expressionValue.key=function(pos){if(!expressionValue.numKeys){return 0;}var value='';if('s'in property.keyframes[pos-1]){value=property.keyframes[pos-1].s;}else if('e'in property.keyframes[pos-2]){value=property.keyframes[pos-2].e;}else{value=property.keyframes[pos-2].s;}var valueProp=type==='unidimensional'?new Number(value):Object.assign({},value);// eslint-disable-line no-new-wrappers
valueProp.time=property.keyframes[pos-1].t/property.elem.comp.globalData.frameRate;valueProp.value=type==='unidimensional'?value[0]:value;return valueProp;};expressionValue.valueAtTime=property.getValueAtTime;expressionValue.speedAtTime=property.getSpeedAtTime;expressionValue.velocityAtTime=property.getVelocityAtTime;expressionValue.propertyGroup=property.propertyGroup;}function UnidimensionalPropertyInterface(property){if(!property||!('pv'in property)){property=defaultUnidimensionalValue;}var mult=1/property.mult;var val=property.pv*mult;var expressionValue=new Number(val);// eslint-disable-line no-new-wrappers
expressionValue.value=val;completeProperty(expressionValue,property,'unidimensional');return function(){if(property.k){property.getValue();}val=property.v*mult;if(expressionValue.value!==val){expressionValue=new Number(val);// eslint-disable-line no-new-wrappers
expressionValue.value=val;completeProperty(expressionValue,property,'unidimensional');}return expressionValue;};}function MultidimensionalPropertyInterface(property){if(!property||!('pv'in property)){property=defaultMultidimensionalValue;}var mult=1/property.mult;var len=property.data&&property.data.l||property.pv.length;var expressionValue=createTypedArray('float32',len);var arrValue=createTypedArray('float32',len);expressionValue.value=arrValue;completeProperty(expressionValue,property,'multidimensional');return function(){if(property.k){property.getValue();}for(var i=0;i<len;i+=1){arrValue[i]=property.v[i]*mult;expressionValue[i]=arrValue[i];}return expressionValue;};}// TODO: try to avoid using this getter
function defaultGetter(){return defaultUnidimensionalValue;}return function(property){if(!property){return defaultGetter;}if(property.propType==='unidimensional'){return UnidimensionalPropertyInterface(property);}return MultidimensionalPropertyInterface(property);};}();/* global expressionHelpers, TextSelectorProp, ExpressionManager */ /* exported TextExpressionSelectorProp */(function(){var TextExpressionSelectorProp=function(){// eslint-disable-line no-unused-vars
function getValueProxy(index,total){this.textIndex=index+1;this.textTotal=total;this.v=this.getValue()*this.mult;return this.v;}return function TextExpressionSelectorPropFactory(elem,data){this.pv=1;this.comp=elem.comp;this.elem=elem;this.mult=0.01;this.propType='textSelector';this.textTotal=data.totalChars;this.selectorValue=100;this.lastValue=[1,1,1];this.k=true;this.x=true;this.getValue=ExpressionManager.initiateExpression.bind(this)(elem,data,this);this.getMult=getValueProxy;this.getVelocityAtTime=expressionHelpers.getVelocityAtTime;if(this.kf){this.getValueAtTime=expressionHelpers.getValueAtTime.bind(this);}else{this.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(this);}this.setGroupProperty=expressionHelpers.setGroupProperty;};}();var propertyGetTextProp=TextSelectorProp.getTextSelectorProp;TextSelectorProp.getTextSelectorProp=function(elem,data,arr){if(data.t===1){return new TextExpressionSelectorPropFactory(elem,data,arr);// eslint-disable-line no-undef
}return propertyGetTextProp(elem,data,arr);};})();/* global PropertyFactory */ /* exported SliderEffect, AngleEffect, ColorEffect, PointEffect, LayerIndexEffect, MaskIndexEffect, CheckboxEffect, NoValueEffect */function SliderEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function AngleEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function ColorEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,1,0,container);}function PointEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,1,0,container);}function LayerIndexEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function MaskIndexEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function CheckboxEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function NoValueEffect(){this.p={};}/* global extendPrototype, SliderEffect, AngleEffect, ColorEffect, PointEffect, CheckboxEffect, LayerIndexEffect,
MaskIndexEffect, NoValueEffect, DynamicPropertyContainer */function EffectsManager(data,element){var effects=data.ef||[];this.effectElements=[];var i;var len=effects.length;var effectItem;for(i=0;i<len;i+=1){effectItem=new GroupEffect(effects[i],element);this.effectElements.push(effectItem);}}function GroupEffect(data,element){this.init(data,element);}extendPrototype([DynamicPropertyContainer],GroupEffect);GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties;GroupEffect.prototype.init=function(data,element){this.data=data;this.effectElements=[];this.initDynamicPropertyContainer(element);var i;var len=this.data.ef.length;var eff;var effects=this.data.ef;for(i=0;i<len;i+=1){eff=null;switch(effects[i].ty){case 0:eff=new SliderEffect(effects[i],element,this);break;case 1:eff=new AngleEffect(effects[i],element,this);break;case 2:eff=new ColorEffect(effects[i],element,this);break;case 3:eff=new PointEffect(effects[i],element,this);break;case 4:case 7:eff=new CheckboxEffect(effects[i],element,this);break;case 10:eff=new LayerIndexEffect(effects[i],element,this);break;case 11:eff=new MaskIndexEffect(effects[i],element,this);break;case 5:eff=new EffectsManager(effects[i],element,this);break;// case 6:
default:eff=new NoValueEffect(effects[i],element,this);break;}if(eff){this.effectElements.push(eff);}}};var lottie={};function setLocationHref(href){locationHref=href;}function searchAnimations(){if(standalone===true){animationManager.searchAnimations(animationData,standalone,renderer);}else{animationManager.searchAnimations();}}function setSubframeRendering(flag){subframeEnabled=flag;}function loadAnimation(params){if(standalone===true){params.animationData=JSON.parse(animationData);}return animationManager.loadAnimation(params);}function setQuality(value){if(typeof value==='string'){switch(value){case'high':defaultCurveSegments=200;break;default:case'medium':defaultCurveSegments=50;break;case'low':defaultCurveSegments=10;break;}}else if(!isNaN(value)&&value>1){defaultCurveSegments=value;}if(defaultCurveSegments>=50){roundValues(false);}else{roundValues(true);}}function inBrowser(){return typeof navigator!=='undefined';}function installPlugin(type,plugin){if(type==='expressions'){expressionsPlugin=plugin;}}function getFactory(name){switch(name){case'propertyFactory':return PropertyFactory;case'shapePropertyFactory':return ShapePropertyFactory;case'matrix':return Matrix;default:return null;}}lottie.play=animationManager.play;lottie.pause=animationManager.pause;lottie.setLocationHref=setLocationHref;lottie.togglePause=animationManager.togglePause;lottie.setSpeed=animationManager.setSpeed;lottie.setDirection=animationManager.setDirection;lottie.stop=animationManager.stop;lottie.searchAnimations=searchAnimations;lottie.registerAnimation=animationManager.registerAnimation;lottie.loadAnimation=loadAnimation;lottie.setSubframeRendering=setSubframeRendering;lottie.resize=animationManager.resize;// lottie.start = start;
lottie.goToAndStop=animationManager.goToAndStop;lottie.destroy=animationManager.destroy;lottie.setQuality=setQuality;lottie.inBrowser=inBrowser;lottie.installPlugin=installPlugin;lottie.freeze=animationManager.freeze;lottie.unfreeze=animationManager.unfreeze;lottie.setVolume=animationManager.setVolume;lottie.mute=animationManager.mute;lottie.unmute=animationManager.unmute;lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations;lottie.__getFactory=getFactory;lottie.version='5.7.7';function checkReady(){if(document.readyState==='complete'){clearInterval(readyStateCheckInterval);searchAnimations();}}function getQueryVariable(variable){var vars=queryString.split('&');for(var i=0;i<vars.length;i+=1){var pair=vars[i].split('=');if(decodeURIComponent(pair[0])==variable){// eslint-disable-line eqeqeq
return decodeURIComponent(pair[1]);}}return null;}var standalone='__[STANDALONE]__';var animationData='__[ANIMATIONDATA]__';var renderer='';var queryString;if(standalone){var scripts=document.getElementsByTagName('script');var index=scripts.length-1;var myScript=scripts[index]||{src:''};queryString=myScript.src.replace(/^[^\?]+\??/,'');// eslint-disable-line no-useless-escape
renderer=getQueryVariable('renderer');}var readyStateCheckInterval=setInterval(checkReady,100);return lottie;});});var _templateObject$1;var styles=css(_templateObject$1||(_templateObject$1=_taggedTemplateLiteral(["\n* {\n  box-sizing: border-box;\n}\n\n:host {\n  --lottie-player-toolbar-height: 35px;\n  --lottie-player-toolbar-background-color: transparent;\n  --lottie-player-toolbar-icon-color: #999;\n  --lottie-player-toolbar-icon-hover-color: #222;\n  --lottie-player-toolbar-icon-active-color: #555;\n  --lottie-player-seeker-track-color: #CCC;\n  --lottie-player-seeker-thumb-color: rgba(0, 107, 120, 0.8);\n\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n\n.main {\n  box-sizing: border-box;\n  display: inline-grid;\n  grid-auto-columns: auto;\n  grid-template-rows: auto;\n  position: relative;\n  height: inherit;\n  width: inherit;\n}\n\n.main.controls {\n  grid-template-rows: 1fr var(--lottie-player-toolbar-height);\n}\n\n.animation {\n  overflow: hidden;\n  height: calc(1fr - var(--lottie-player-toolbar-height));\n}\n\n.toolbar {\n  display: grid;\n  grid-template-columns: 32px 32px 1fr 32px;\n  align-items: center;\n  justify-items: center;\n  background-color: var(--lottie-player-toolbar-background-color);\n  margin: 0 5px;\n}\n\n.toolbar button {\n  cursor: pointer;\n  fill: var(--lottie-player-toolbar-icon-color);\n  display: flex;\n  background: none;\n  border: 0;\n  padding: 0;\n  outline: none;\n  height: 100%;\n}\n\n.toolbar button:hover {\n  fill: var(--lottie-player-toolbar-icon-hover-color);\n}\n\n.toolbar button.active {\n  fill: var(--lottie-player-toolbar-icon-active-color);\n}\n\n.toolbar button svg {\n}\n\n.toolbar button.disabled svg {\n  display: none;\n}\n\n.seeker {\n  -webkit-appearance: none;\n  width: 95%;\n  outline: none;\n}\n\n.seeker::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 5px;\n  cursor: pointer;\n  background: var(--lottie-player-seeker-track-color);\n  border-radius: 3px;\n}\n.seeker::-webkit-slider-thumb {\n  height: 15px;\n  width: 15px;\n  border-radius: 50%;\n  background: var(--lottie-player-seeker-thumb-color);\n  cursor: pointer;\n  -webkit-appearance: none;\n  margin-top: -5px;\n}\n.seeker:focus::-webkit-slider-runnable-track {\n  background: #999;\n}\n.seeker::-moz-range-track {\n  width: 100%;\n  height: 5px;\n  cursor: pointer;\n  background: var(--lottie-player-seeker-track-color);\n  border-radius: 3px;\n}\n.seeker::-moz-range-thumb {\n  height: 15px;\n  width: 15px;\n  border-radius: 50%;\n  background: var(--lottie-player-seeker-thumb-color);\n  cursor: pointer;\n}\n.seeker::-ms-track {\n  width: 100%;\n  height: 5px;\n  cursor: pointer;\n  background: transparent;\n  border-color: transparent;\n  color: transparent;\n}\n.seeker::-ms-fill-lower {\n  background: var(--lottie-player-seeker-track-color);\n  border-radius: 3px;\n}\n.seeker::-ms-fill-upper {\n  background: var(--lottie-player-seeker-track-color);\n  border-radius: 3px;\n}\n.seeker::-ms-thumb {\n  border: 0;\n  height: 15px;\n  width: 15px;\n  border-radius: 50%;\n  background: var(--lottie-player-seeker-thumb-color);\n  cursor: pointer;\n}\n.seeker:focus::-ms-fill-lower {\n  background: var(--lottie-player-seeker-track-color);\n}\n.seeker:focus::-ms-fill-upper {\n  background: var(--lottie-player-seeker-track-color);\n}\n\n.error {\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  align-items: center;\n}\n"])));var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5;var PlayerState;(function(PlayerState){PlayerState["Loading"]="loading";PlayerState["Playing"]="playing";PlayerState["Paused"]="paused";PlayerState["Stopped"]="stopped";PlayerState["Frozen"]="frozen";PlayerState["Error"]="error";})(PlayerState||(PlayerState={}));// Define play modes
var PlayMode;(function(PlayMode){PlayMode["Normal"]="normal";PlayMode["Bounce"]="bounce";})(PlayMode||(PlayMode={}));// Define player events
var PlayerEvents;(function(PlayerEvents){PlayerEvents["Load"]="load";PlayerEvents["Error"]="error";PlayerEvents["Ready"]="ready";PlayerEvents["Play"]="play";PlayerEvents["Pause"]="pause";PlayerEvents["Stop"]="stop";PlayerEvents["Freeze"]="freeze";PlayerEvents["Loop"]="loop";PlayerEvents["Complete"]="complete";PlayerEvents["Frame"]="frame";})(PlayerEvents||(PlayerEvents={}));/**
 * Parse a resource into a JSON object or a URL string
 */function parseSrc(src){if(typeof src==="object"){return src;}try{return JSON.parse(src);}catch(e){// Try construct an absolute URL from the src URL
var srcUrl=new URL(src,window.location.href);return srcUrl.toString();}}/**
 * LottiePlayer web component class
 *
 * @export
 * @class LottiePlayer
 * @extends {LitElement}
 */var LottiePlayer=class LottiePlayer extends LitElement{constructor(){super(...arguments);/**
     * Play mode.
     */this.mode=PlayMode.Normal;/**
     * Autoplay animation on load.
     */this.autoplay=false;/**
     * Background color.
     */this.background="transparent";/**
     * Show controls.
     */this.controls=false;/**
     * Direction of animation.
     */this.direction=1;/**
     * Whether to play on mouse hover
     */this.hover=false;/**
     * Whether to loop animation.
     */this.loop=false;/**
     * Aspect ratio to pass to lottie-web.
     */this.preserveAspectRatio="xMidYMid meet";/**
     * Renderer to use.
     */this.renderer="svg";/**
     * Animation speed.
     */this.speed=1;/**
     * Player state.
     */this.currentState=PlayerState.Loading;this.intermission=1;this._io=undefined;this._counter=0;}/**
   * Handle visibility change events.
   */_onVisibilityChange(){if(document.hidden===true&&this.currentState===PlayerState.Playing){this.freeze();}else if(this.currentState===PlayerState.Frozen){this.play();}}/**
   * Handles click and drag actions on the progress track.
   */_handleSeekChange(e){if(!this._lottie||isNaN(e.target.value)){return;}var frame=e.target.value/100*this._lottie.totalFrames;this.seek(frame);}/**
   * Configure and initialize lottie-web player instance.
   */load(src){if(!this.shadowRoot){return;}var options={container:this.container,loop:false,autoplay:false,renderer:this.renderer,rendererSettings:{preserveAspectRatio:this.preserveAspectRatio,clearCanvas:false,progressiveLoad:true,hideOnTransparent:true}};// Load the resource information
try{var srcParsed=parseSrc(src);var srcAttrib=typeof srcParsed==="string"?"path":"animationData";// Clear previous animation, if any
if(this._lottie){this._lottie.destroy();}// Initialize lottie player and load animation
this._lottie=lottie.loadAnimation(Object.assign(Object.assign({},options),{[srcAttrib]:srcParsed}));}catch(err){this.currentState=PlayerState.Error;this.dispatchEvent(new CustomEvent(PlayerEvents.Error));return;}if(this._lottie){// Calculate and save the current progress of the animation
this._lottie.addEventListener("enterFrame",()=>{this.seeker=this._lottie.currentFrame/this._lottie.totalFrames*100;this.dispatchEvent(new CustomEvent(PlayerEvents.Frame,{detail:{frame:this._lottie.currentFrame,seeker:this.seeker}}));});// Handle animation play complete
this._lottie.addEventListener("complete",()=>{if(this.currentState!==PlayerState.Playing){this.dispatchEvent(new CustomEvent(PlayerEvents.Complete));return;}if(!this.loop||this.count&&this._counter>=this.count){this.dispatchEvent(new CustomEvent(PlayerEvents.Complete));return;}if(this.mode===PlayMode.Bounce){if(this.count){this._counter+=0.5;}setTimeout(()=>{this.dispatchEvent(new CustomEvent(PlayerEvents.Loop));if(this.currentState===PlayerState.Playing){this._lottie.setDirection(this._lottie.playDirection*-1);this._lottie.play();}},this.intermission);}else{if(this.count){this._counter+=1;}window.setTimeout(()=>{this.dispatchEvent(new CustomEvent(PlayerEvents.Loop));if(this.currentState===PlayerState.Playing){this._lottie.stop();this._lottie.play();}},this.intermission);}});// Handle lottie-web ready event
this._lottie.addEventListener("DOMLoaded",()=>{this.dispatchEvent(new CustomEvent(PlayerEvents.Ready));});// Handle animation data load complete
this._lottie.addEventListener("data_ready",()=>{this.dispatchEvent(new CustomEvent(PlayerEvents.Load));});// Set error state when animation load fail event triggers
this._lottie.addEventListener("data_failed",()=>{this.currentState=PlayerState.Error;this.dispatchEvent(new CustomEvent(PlayerEvents.Error));});// Set handlers to auto play animation on hover if enabled
this.container.addEventListener("mouseenter",()=>{if(this.hover&&this.currentState!==PlayerState.Playing){this.play();}});this.container.addEventListener("mouseleave",()=>{if(this.hover&&this.currentState===PlayerState.Playing){this.stop();}});// Set initial playback speed and direction
this.setSpeed(this.speed);this.setDirection(this.direction);// Start playing if autoplay is enabled
if(this.autoplay){this.play();}}}/**
   * Returns the lottie-web instance used in the component.
   */getLottie(){return this._lottie;}/**
   * Start playing animation.
   */play(){if(!this._lottie){return;}this._lottie.play();this.currentState=PlayerState.Playing;this.dispatchEvent(new CustomEvent(PlayerEvents.Play));}/**
   * Pause animation play.
   */pause(){if(!this._lottie){return;}this._lottie.pause();this.currentState=PlayerState.Paused;this.dispatchEvent(new CustomEvent(PlayerEvents.Pause));}/**
   * Stops animation play.
   */stop(){if(!this._lottie){return;}this._counter=0;this._lottie.stop();this.currentState=PlayerState.Stopped;this.dispatchEvent(new CustomEvent(PlayerEvents.Stop));}/**
   * Seek to a given frame.
   */seek(value){if(!this._lottie){return;}// Extract frame number from either number or percentage value
var matches=value.toString().match(/^([0-9]+)(%?)$/);if(!matches){return;}// Calculate and set the frame number
var frame=matches[2]==="%"?this._lottie.totalFrames*Number(matches[1])/100:Number(matches[1]);// Set seeker to new frame number
this.seeker=frame;// Send lottie player to the new frame
if(this.currentState===PlayerState.Playing){this._lottie.goToAndPlay(frame,true);}else{this._lottie.goToAndStop(frame,true);this._lottie.pause();}}/**
   * Snapshot the current frame as SVG.
   *
   * If 'download' argument is boolean true, then a download is triggered in browser.
   */snapshot(){var download=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;if(!this.shadowRoot)return;// Get SVG element and serialize markup
var svgElement=this.shadowRoot.querySelector(".animation svg");var data=new XMLSerializer().serializeToString(svgElement);// Trigger file download
if(download){var element=document.createElement("a");element.href="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(data);element.download="download_"+this.seeker+".svg";document.body.appendChild(element);element.click();document.body.removeChild(element);}return data;}/**
   * Freeze animation play.
   * This internal state pauses animation and is used to differentiate between
   * user requested pauses and component instigated pauses.
   */freeze(){if(!this._lottie){return;}this._lottie.pause();this.currentState=PlayerState.Frozen;this.dispatchEvent(new CustomEvent(PlayerEvents.Freeze));}/**
   * Sets animation play speed.
   *
   * @param value Playback speed.
   */setSpeed(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;if(!this._lottie){return;}this._lottie.setSpeed(value);}/**
   * Animation play direction.
   *
   * @param value Direction values.
   */setDirection(value){if(!this._lottie){return;}this._lottie.setDirection(value);}/**
   * Sets the looping of the animation.
   *
   * @param value Whether to enable looping. Boolean true enables looping.
   */setLooping(value){if(this._lottie){this.loop=value;this._lottie.loop=value;}}/**
   * Toggle playing state.
   */togglePlay(){return this.currentState===PlayerState.Playing?this.pause():this.play();}/**
   * Toggles animation looping.
   */toggleLooping(){this.setLooping(!this.loop);}/**
   * Resize animation.
   */resize(){if(!this._lottie){return;}this._lottie.resize();}/**
   * Returns the styles for the component.
   */static get styles(){return styles;}/**
   * Initialize everything on component first render.
   */firstUpdated(){// Add intersection observer for detecting component being out-of-view.
if("IntersectionObserver"in window){this._io=new IntersectionObserver(entries=>{if(entries[0].isIntersecting){if(this.currentState===PlayerState.Frozen){this.play();}}else if(this.currentState===PlayerState.Playing){this.freeze();}});this._io.observe(this.container);}// Add listener for Visibility API's change event.
if(typeof document.hidden!=="undefined"){document.addEventListener("visibilitychange",()=>this._onVisibilityChange());}// Setup lottie player
if(this.src){this.load(this.src);}}/**
   * Cleanup on component destroy.
   */disconnectedCallback(){// Remove intersection observer for detecting component being out-of-view.
if(this._io){this._io.disconnect();this._io=undefined;}// Remove resize observer for detecting resize/reflow events affecting element.
// if (this._ro) {
//   this._ro.disconnect();
//   this._ro = undefined;
// }
// Remove the attached Visibility API's change event listener.
document.removeEventListener("visibilitychange",()=>this._onVisibilityChange());}renderControls(){var isPlaying=this.currentState===PlayerState.Playing;var isPaused=this.currentState===PlayerState.Paused;var isStopped=this.currentState===PlayerState.Stopped;return html(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n      <div class=\"toolbar\">\n        <button\n          @click=","\n          class=","\n          style=\"align-items:center;\"\n        >\n          ","\n        </button>\n        <button\n          @click=","\n          class=","\n          style=\"align-items:center;\"\n        >\n          <svg width=\"24\" height=\"24\"><path d=\"M6 6h12v12H6V6z\" /></svg>\n        </button>\n        <input\n          class=\"seeker\"\n          type=\"range\"\n          min=\"0\"\n          step=\"1\"\n          max=\"100\"\n          .value=","\n          @input=","\n          @mousedown=","\n          @mouseup=","\n        />\n        <button\n          @click=","\n          class=","\n          style=\"align-items:center;\"\n        >\n          <svg width=\"24\" height=\"24\">\n            <path\n              d=\"M17.016 17.016v-4.031h1.969v6h-12v3l-3.984-3.984 3.984-3.984v3h10.031zM6.984 6.984v4.031H5.015v-6h12v-3l3.984 3.984-3.984 3.984v-3H6.984z\"\n            />\n          </svg>\n        </button>\n      </div>\n    "])),this.togglePlay,isPlaying||isPaused?"active":"",isPlaying?html(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["<svg width=\"24\" height=\"24\">\n                <path\n                  d=\"M14.016 5.016H18v13.969h-3.984V5.016zM6 18.984V5.015h3.984v13.969H6z\"\n                />\n              </svg>"]))):html(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["<svg width=\"24\" height=\"24\">\n                <path d=\"M8.016 5.016L18.985 12 8.016 18.984V5.015z\" />\n              </svg>"]))),this.stop,isStopped?"active":"",this.seeker,this._handleSeekChange,()=>{this._prevState=this.currentState;this.freeze();},()=>{this._prevState===PlayerState.Playing&&this.play();},this.toggleLooping,this.loop?"active":"");}render(){var className=this.controls?"main controls":"main";return html(_templateObject4||(_templateObject4=_taggedTemplateLiteral([" <div class=",">\n      <div class=\"animation\" style=",">\n        ","\n      </div>\n      ","\n    </div>"])),className,"background:"+this.background,this.currentState===PlayerState.Error?html(_templateObject5||(_templateObject5=_taggedTemplateLiteral(["<div class=\"error\">\u26A0\uFE0F</div>"]))):undefined,this.controls?this.renderControls():undefined);}};__decorate([query(".animation")],LottiePlayer.prototype,"container",void 0);__decorate([property()],LottiePlayer.prototype,"mode",void 0);__decorate([property({type:Boolean})],LottiePlayer.prototype,"autoplay",void 0);__decorate([property({type:String,reflect:true})],LottiePlayer.prototype,"background",void 0);__decorate([property({type:Boolean})],LottiePlayer.prototype,"controls",void 0);__decorate([property({type:Number})],LottiePlayer.prototype,"count",void 0);__decorate([property({type:Number})],LottiePlayer.prototype,"direction",void 0);__decorate([property({type:Boolean})],LottiePlayer.prototype,"hover",void 0);__decorate([property({type:Boolean,reflect:true})],LottiePlayer.prototype,"loop",void 0);__decorate([property({type:String})],LottiePlayer.prototype,"preserveAspectRatio",void 0);__decorate([property({type:String})],LottiePlayer.prototype,"renderer",void 0);__decorate([property({type:Number})],LottiePlayer.prototype,"speed",void 0);__decorate([property({type:String})],LottiePlayer.prototype,"src",void 0);__decorate([property({type:String})],LottiePlayer.prototype,"currentState",void 0);__decorate([property()],LottiePlayer.prototype,"seeker",void 0);__decorate([property()],LottiePlayer.prototype,"intermission",void 0);LottiePlayer=__decorate([customElement("lottie-player")],LottiePlayer);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG8tZmxleC1idWlsZGVyLy4vbm9kZV9tb2R1bGVzL0Bsb3R0aWVmaWxlcy9sb3R0aWUtcGxheWVyL2Rpc3QvbG90dGllLXBsYXllci5lc20uanMiXSwibmFtZXMiOlsiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJfanN4IiwidHlwZSIsInByb3BzIiwia2V5IiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJjaGlsZHJlbkxlbmd0aCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNoaWxkQXJyYXkiLCJBcnJheSIsImkiLCJwcm9wTmFtZSIsIiQkdHlwZW9mIiwidW5kZWZpbmVkIiwicmVmIiwiX293bmVyIiwiX2FzeW5jSXRlcmF0b3IiLCJpdGVyYWJsZSIsIm1ldGhvZCIsImFzeW5jSXRlcmF0b3IiLCJjYWxsIiwiVHlwZUVycm9yIiwiX0F3YWl0VmFsdWUiLCJ2YWx1ZSIsIndyYXBwZWQiLCJfQXN5bmNHZW5lcmF0b3IiLCJnZW4iLCJmcm9udCIsImJhY2siLCJzZW5kIiwiYXJnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0IiwibmV4dCIsInJlc3VtZSIsInJlc3VsdCIsIndyYXBwZWRBd2FpdCIsInRoZW4iLCJzZXR0bGUiLCJkb25lIiwiZXJyIiwiX2ludm9rZSIsInJldHVybiIsInRocm93IiwiX3dyYXBBc3luY0dlbmVyYXRvciIsImZuIiwiYXBwbHkiLCJfYXdhaXRBc3luY0dlbmVyYXRvciIsIl9hc3luY0dlbmVyYXRvckRlbGVnYXRlIiwiaW5uZXIiLCJhd2FpdFdyYXAiLCJpdGVyIiwid2FpdGluZyIsInB1bXAiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfbmV4dCIsIl90aHJvdyIsImluZm8iLCJlcnJvciIsIl9hc3luY1RvR2VuZXJhdG9yIiwic2VsZiIsImFyZ3MiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMiLCJkZXNjcyIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvYmplY3RTeW1ib2xzIiwic3ltIiwiX2RlZmF1bHRzIiwiZGVmYXVsdHMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9leHRlbmRzIiwiYXNzaWduIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJfb2JqZWN0U3ByZWFkIiwib3duS2V5cyIsImNvbmNhdCIsImZpbHRlciIsImZvckVhY2giLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJwdXNoIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9zZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0c0xvb3NlIiwiX2dldFByb3RvdHlwZU9mIiwibyIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJwIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsImUiLCJfY29uc3RydWN0IiwiUGFyZW50IiwiQ2xhc3MiLCJhIiwiRnVuY3Rpb24iLCJiaW5kIiwiX2lzTmF0aXZlRnVuY3Rpb24iLCJ0b1N0cmluZyIsImluZGV4T2YiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2NhY2hlIiwiTWFwIiwiaGFzIiwiZ2V0Iiwic2V0IiwiV3JhcHBlciIsIl9pbnN0YW5jZW9mIiwibGVmdCIsInJpZ2h0IiwiaGFzSW5zdGFuY2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIl9uZXdBcnJvd0NoZWNrIiwiaW5uZXJUaGlzIiwiYm91bmRUaGlzIiwiX29iamVjdERlc3RydWN0dXJpbmdFbXB0eSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJfc3VwZXJQcm9wQmFzZSIsInByb3BlcnR5IiwiX2dldCIsInJlY2VpdmVyIiwiYmFzZSIsIl9zZXQiLCJpc1N0cmljdCIsInMiLCJFcnJvciIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwiLCJzdHJpbmdzIiwicmF3Iiwic2xpY2UiLCJmcmVlemUiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UiLCJfcmVhZE9ubHlFcnJvciIsIm5hbWUiLCJfd3JpdGVPbmx5RXJyb3IiLCJfY2xhc3NOYW1lVERaRXJyb3IiLCJfdGVtcG9yYWxVbmRlZmluZWQiLCJfdGR6IiwiX3RlbXBvcmFsUmVmIiwidmFsIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiX3NsaWNlZFRvQXJyYXlMb29zZSIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdExvb3NlIiwiX3RvQXJyYXkiLCJfaXRlcmFibGVUb0FycmF5IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiaXNBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiX21heWJlQXJyYXlMaWtlIiwibGVuIiwiZnJvbSIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfaSIsIl9zIiwiX2l0ZXJhdG9yIiwiX3N0ZXAiLCJtaW5MZW4iLCJuIiwidGVzdCIsImFycjIiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJGIiwiZiIsIm5vcm1hbENvbXBsZXRpb24iLCJkaWRFcnIiLCJzdGVwIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsIl9za2lwRmlyc3RHZW5lcmF0b3JOZXh0IiwiX3RvUHJpbWl0aXZlIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwicmVzIiwiU3RyaW5nIiwiTnVtYmVyIiwiX3RvUHJvcGVydHlLZXkiLCJfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyIiwiY29udGV4dCIsIl9pbml0aWFsaXplckRlZmluZVByb3BlcnR5IiwiaW5pdGlhbGl6ZXIiLCJfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yIiwiZGVjb3JhdG9ycyIsInJldmVyc2UiLCJyZWR1Y2UiLCJkZWNvcmF0b3IiLCJpZCIsIl9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5IiwiX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlIiwicHJpdmF0ZUtleSIsIl9jbGFzc1ByaXZhdGVGaWVsZEdldCIsInByaXZhdGVNYXAiLCJfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yIiwiX2NsYXNzQXBwbHlEZXNjcmlwdG9yR2V0IiwiX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiX2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0IiwiX2NsYXNzUHJpdmF0ZUZpZWxkRGVzdHJ1Y3R1cmVTZXQiLCJfY2xhc3NBcHBseURlc2NyaXB0b3JEZXN0cnVjdHVyZVNldCIsImFjdGlvbiIsIl9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNHZXQiLCJjbGFzc0NvbnN0cnVjdG9yIiwiX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzIiwiX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljRmllbGREZXNjcmlwdG9yIiwiX2NsYXNzU3RhdGljUHJpdmF0ZUZpZWxkU3BlY1NldCIsIl9jbGFzc1N0YXRpY1ByaXZhdGVNZXRob2RHZXQiLCJfY2xhc3NTdGF0aWNQcml2YXRlTWV0aG9kU2V0IiwiX19kZXN0ck9iaiIsInYiLCJfY2xhc3NTdGF0aWNQcml2YXRlRmllbGREZXN0cnVjdHVyZVNldCIsIl9kZWNvcmF0ZSIsImZhY3RvcnkiLCJtaXhpbnMiLCJhcGkiLCJfZ2V0RGVjb3JhdG9yc0FwaSIsInIiLCJpbml0aWFsaXplIiwiTyIsImluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzIiwiZGVjb3JhdGVkIiwiZWxlbWVudHMiLCJkZWNvcmF0ZUNsYXNzIiwiX2NvYWxlc2NlQ2xhc3NFbGVtZW50cyIsImQiLCJtYXAiLCJfY3JlYXRlRWxlbWVudERlc2NyaXB0b3IiLCJpbml0aWFsaXplQ2xhc3NFbGVtZW50cyIsInJ1bkNsYXNzRmluaXNoZXJzIiwiZmluaXNoZXJzIiwiZWxlbWVudHNEZWZpbml0aW9uT3JkZXIiLCJraW5kIiwiZWxlbWVudCIsInBsYWNlbWVudCIsImRlZmluZUNsYXNzRWxlbWVudCIsInByb3RvIiwibmV3RWxlbWVudHMiLCJwbGFjZW1lbnRzIiwic3RhdGljIiwib3duIiwiYWRkRWxlbWVudFBsYWNlbWVudCIsIl9oYXNEZWNvcmF0b3JzIiwiZWxlbWVudEZpbmlzaGVyc0V4dHJhcyIsImRlY29yYXRlRWxlbWVudCIsImV4dHJhcyIsImRlY29yYXRlQ29uc3RydWN0b3IiLCJzaWxlbnQiLCJzcGxpY2UiLCJlbGVtZW50T2JqZWN0IiwiZnJvbUVsZW1lbnREZXNjcmlwdG9yIiwiZWxlbWVudEZpbmlzaGVyRXh0cmFzIiwidG9FbGVtZW50RmluaXNoZXJFeHRyYXMiLCJmaW5pc2hlciIsIm5ld0V4dHJhcyIsImoiLCJmcm9tQ2xhc3NEZXNjcmlwdG9yIiwiZWxlbWVudHNBbmRGaW5pc2hlciIsInRvQ2xhc3NEZXNjcmlwdG9yIiwiayIsInRvU3RyaW5nVGFnIiwidG9FbGVtZW50RGVzY3JpcHRvcnMiLCJlbGVtZW50T2JqZWN0cyIsInRvRWxlbWVudERlc2NyaXB0b3IiLCJkaXNhbGxvd1Byb3BlcnR5IiwiX29wdGlvbmFsQ2FsbGFibGVQcm9wZXJ0eSIsIm5ld0NvbnN0cnVjdG9yIiwib2JqZWN0VHlwZSIsImRlZiIsIl9jb2FsZXNjZUdldHRlclNldHRlciIsIm90aGVyIiwiaXNTYW1lRWxlbWVudCIsImZpbmQiLCJfaXNEYXRhRGVzY3JpcHRvciIsIl9jbGFzc1ByaXZhdGVNZXRob2RHZXQiLCJwcml2YXRlU2V0IiwiX2NsYXNzUHJpdmF0ZU1ldGhvZFNldCIsIl93cmFwUmVnRXhwIiwicmUiLCJncm91cHMiLCJCYWJlbFJlZ0V4cCIsIl9SZWdFeHAiLCJSZWdFeHAiLCJfc3VwZXIiLCJfZ3JvdXBzIiwiZmxhZ3MiLCJfdGhpcyIsImV4ZWMiLCJzdHIiLCJidWlsZEdyb3VwcyIsInJlcGxhY2UiLCJzdWJzdGl0dXRpb24iLCJfIiwiZyIsIl9leHRlbmRTdGF0aWNzIiwiZXh0ZW5kU3RhdGljcyIsImIiLCJfX2V4dGVuZHMiLCJfXyIsIl9hc3NpZ24iLCJfX2Fzc2lnbiIsInQiLCJfX3Jlc3QiLCJfX2RlY29yYXRlIiwiYyIsImRlY29yYXRlIiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiX19nZW5lcmF0b3IiLCJib2R5IiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInkiLCJ2ZXJiIiwib3AiLCJwb3AiLCJfX2NyZWF0ZUJpbmRpbmciLCJtIiwiazIiLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsImFyIiwiX19zcHJlYWQiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiamwiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsInEiLCJmdWxmaWxsIiwic2hpZnQiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fbWFrZVRlbXBsYXRlT2JqZWN0IiwiY29va2VkIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwibW9kIiwiX19pbXBvcnREZWZhdWx0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJpc0NFUG9seWZpbGwiLCJ3aW5kb3ciLCJjdXN0b21FbGVtZW50cyIsInBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2siLCJyZXBhcmVudE5vZGVzIiwiY29udGFpbmVyIiwic3RhcnQiLCJlbmQiLCJiZWZvcmUiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInJlbW92ZU5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJtYXJrZXIiLCJNYXRoIiwicmFuZG9tIiwibm9kZU1hcmtlciIsIm1hcmtlclJlZ2V4IiwiYm91bmRBdHRyaWJ1dGVTdWZmaXgiLCJUZW1wbGF0ZSIsInBhcnRzIiwibm9kZXNUb1JlbW92ZSIsInN0YWNrIiwid2Fsa2VyIiwiZG9jdW1lbnQiLCJjcmVhdGVUcmVlV2Fsa2VyIiwiY29udGVudCIsImxhc3RQYXJ0SW5kZXgiLCJpbmRleCIsInBhcnRJbmRleCIsInZhbHVlcyIsIm5vZGUiLCJuZXh0Tm9kZSIsImN1cnJlbnROb2RlIiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsIl9sZW5ndGgiLCJjb3VudCIsImVuZHNXaXRoIiwic3RyaW5nRm9yUGFydCIsImxhc3RBdHRyaWJ1dGVOYW1lUmVnZXgiLCJhdHRyaWJ1dGVMb29rdXBOYW1lIiwidG9Mb3dlckNhc2UiLCJhdHRyaWJ1dGVWYWx1ZSIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInN0YXRpY3MiLCJzcGxpdCIsInRhZ05hbWUiLCJkYXRhIiwicGFyZW50IiwicGFyZW50Tm9kZSIsIl9zdHJpbmdzIiwibGFzdEluZGV4IiwiaW5zZXJ0IiwiY3JlYXRlTWFya2VyIiwibWF0Y2giLCJjcmVhdGVUZXh0Tm9kZSIsIl9wYXJlbnQiLCJwcmV2aW91c1NpYmxpbmciLCJfaTIiLCJzdWZmaXgiLCJpc1RlbXBsYXRlUGFydEFjdGl2ZSIsInBhcnQiLCJjcmVhdGVDb21tZW50Iiwid2Fsa2VyTm9kZUZpbHRlciIsInJlbW92ZU5vZGVzRnJvbVRlbXBsYXRlIiwidGVtcGxhdGUiLCJuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMiLCJub2RlSW5kZXgiLCJyZW1vdmVDb3VudCIsIm5vZGVzVG9SZW1vdmVJblRlbXBsYXRlIiwiY3VycmVudFJlbW92aW5nTm9kZSIsImNvdW50Tm9kZXMiLCJzdGFydEluZGV4IiwiaW5zZXJ0Tm9kZUludG9UZW1wbGF0ZSIsInJlZk5vZGUiLCJhcHBlbmRDaGlsZCIsImluc2VydENvdW50Iiwid2Fsa2VySW5kZXgiLCJ3YWxrZXJOb2RlIiwiZGlyZWN0aXZlcyIsImRpcmVjdGl2ZSIsImlzRGlyZWN0aXZlIiwibm9DaGFuZ2UiLCJub3RoaW5nIiwiVGVtcGxhdGVJbnN0YW5jZSIsInByb2Nlc3NvciIsIm9wdGlvbnMiLCJfX3BhcnRzIiwidXBkYXRlIiwic2V0VmFsdWUiLCJfcGFydCIsImNvbW1pdCIsIl9jbG9uZSIsImZyYWdtZW50IiwiY2xvbmVOb2RlIiwiaW1wb3J0Tm9kZSIsIm5vZGVOYW1lIiwiX3BhcnQyIiwiaGFuZGxlVGV4dEV4cHJlc3Npb24iLCJpbnNlcnRBZnRlck5vZGUiLCJoYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyIsImFkb3B0Tm9kZSIsInVwZ3JhZGUiLCJwb2xpY3kiLCJ0cnVzdGVkVHlwZXMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVIVE1MIiwiY29tbWVudE1hcmtlciIsIlRlbXBsYXRlUmVzdWx0IiwiZ2V0SFRNTCIsImwiLCJodG1sIiwiaXNDb21tZW50QmluZGluZyIsImNvbW1lbnRPcGVuIiwibGFzdEluZGV4T2YiLCJhdHRyaWJ1dGVNYXRjaCIsInN1YnN0ciIsImdldFRlbXBsYXRlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJTVkdUZW1wbGF0ZVJlc3VsdCIsInN2Z0VsZW1lbnQiLCJmaXJzdENoaWxkIiwiaXNQcmltaXRpdmUiLCJpc0l0ZXJhYmxlIiwiQXR0cmlidXRlQ29tbWl0dGVyIiwiZGlydHkiLCJfY3JlYXRlUGFydCIsIkF0dHJpYnV0ZVBhcnQiLCJfZ2V0VmFsdWUiLCJ0ZXh0IiwiX3YiLCJzZXRBdHRyaWJ1dGUiLCJjb21taXR0ZXIiLCJOb2RlUGFydCIsIl9fcGVuZGluZ1ZhbHVlIiwiYXBwZW5kSW50byIsInN0YXJ0Tm9kZSIsImVuZE5vZGUiLCJhcHBlbmRJbnRvUGFydCIsIl9faW5zZXJ0IiwiaW5zZXJ0QWZ0ZXJQYXJ0IiwiX19jb21taXRUZXh0IiwiX19jb21taXRUZW1wbGF0ZVJlc3VsdCIsIk5vZGUiLCJfX2NvbW1pdE5vZGUiLCJfX2NvbW1pdEl0ZXJhYmxlIiwiY2xlYXIiLCJ2YWx1ZUFzU3RyaW5nIiwidGVtcGxhdGVGYWN0b3J5IiwiaXRlbVBhcnRzIiwiaXRlbVBhcnQiLCJpdGVtIiwiQm9vbGVhbkF0dHJpYnV0ZVBhcnQiLCJQcm9wZXJ0eUNvbW1pdHRlciIsInNpbmdsZSIsIlByb3BlcnR5UGFydCIsImV2ZW50T3B0aW9uc1N1cHBvcnRlZCIsImNhcHR1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkV2ZW50UGFydCIsImV2ZW50TmFtZSIsImV2ZW50Q29udGV4dCIsIl9fYm91bmRIYW5kbGVFdmVudCIsImhhbmRsZUV2ZW50IiwibmV3TGlzdGVuZXIiLCJvbGRMaXN0ZW5lciIsInNob3VsZFJlbW92ZUxpc3RlbmVyIiwib25jZSIsInBhc3NpdmUiLCJzaG91bGRBZGRMaXN0ZW5lciIsIl9fb3B0aW9ucyIsImdldE9wdGlvbnMiLCJldmVudCIsInRlbXBsYXRlQ2FjaGUiLCJ0ZW1wbGF0ZUNhY2hlcyIsInN0cmluZ3NBcnJheSIsImtleVN0cmluZyIsImpvaW4iLCJyZW5kZXIkMSIsIkRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciIsInByZWZpeCIsIl9jb21taXR0ZXIiLCJkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IiLCJfbGVuIiwiX2tleSIsInN2ZyIsIl9sZW4yIiwiX2tleTIiLCJnZXRUZW1wbGF0ZUNhY2hlS2V5Iiwic2NvcGVOYW1lIiwiY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiIsIlNoYWR5Q1NTIiwicHJlcGFyZVRlbXBsYXRlRG9tIiwiY29uc29sZSIsIndhcm4iLCJzaGFkeVRlbXBsYXRlRmFjdG9yeSIsImNhY2hlS2V5IiwiVEVNUExBVEVfVFlQRVMiLCJyZW1vdmVTdHlsZXNGcm9tTGl0VGVtcGxhdGVzIiwidGVtcGxhdGVzIiwic3R5bGVzIiwiU2V0IiwicXVlcnlTZWxlY3RvckFsbCIsImFkZCIsInNoYWR5UmVuZGVyU2V0IiwicHJlcGFyZVRlbXBsYXRlU3R5bGVzIiwicmVuZGVyZWRET00iLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJjb25kZW5zZWRTdHlsZSIsIl9zdHlsZSIsInRleHRDb250ZW50Iiwic3R5bGUiLCJxdWVyeVNlbGVjdG9yIiwibmF0aXZlU2hhZG93IiwicmVtb3ZlcyIsInJlbmRlciIsImhhc1JlbmRlcmVkIiwibmVlZHNTY29waW5nIiwiaG9zdCIsImZpcnN0U2NvcGVSZW5kZXIiLCJyZW5kZXJDb250YWluZXIiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZGVsZXRlIiwic3R5bGVFbGVtZW50IiwiX2EiLCJKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5IiwicHJvcCIsIl9vYmoiLCJkZWZhdWx0Q29udmVydGVyIiwidG9BdHRyaWJ1dGUiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbUF0dHJpYnV0ZSIsInBhcnNlIiwibm90RXF1YWwiLCJvbGQiLCJkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbiIsImF0dHJpYnV0ZSIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwiU1RBVEVfSEFTX1VQREFURUQiLCJTVEFURV9VUERBVEVfUkVRVUVTVEVEIiwiU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEUiLCJTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZIiwiZmluYWxpemVkIiwiVXBkYXRpbmdFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJmaW5hbGl6ZSIsIl9jbGFzc1Byb3BlcnRpZXMiLCJhdHRyIiwiX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eSIsIl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwIiwiX2Vuc3VyZUNsYXNzUHJvcGVydGllcyIsInN1cGVyUHJvcGVydGllcyIsImNyZWF0ZVByb3BlcnR5Iiwibm9BY2Nlc3NvciIsImdldFByb3BlcnR5RGVzY3JpcHRvciIsIm9sZFZhbHVlIiwicmVxdWVzdFVwZGF0ZUludGVybmFsIiwiZ2V0UHJvcGVydHlPcHRpb25zIiwic3VwZXJDdG9yIiwicHJvcGVydGllcyIsInByb3BLZXlzIiwiX3ZhbHVlSGFzQ2hhbmdlZCIsIl9wcm9wZXJ0eVZhbHVlRnJvbUF0dHJpYnV0ZSIsIl9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUiLCJfdXBkYXRlU3RhdGUiLCJfdXBkYXRlUHJvbWlzZSIsIl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyIiwiX2NoYW5nZWRQcm9wZXJ0aWVzIiwiX3NhdmVJbnN0YW5jZVByb3BlcnRpZXMiLCJfaW5zdGFuY2VQcm9wZXJ0aWVzIiwiX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJlbmFibGVVcGRhdGluZyIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiX2F0dHJpYnV0ZVRvUHJvcGVydHkiLCJfcHJvcGVydHlUb0F0dHJpYnV0ZSIsImN0b3IiLCJhdHRyVmFsdWUiLCJzaG91bGRSZXF1ZXN0VXBkYXRlIiwiX3JlZmxlY3RpbmdQcm9wZXJ0aWVzIiwiX2hhc1JlcXVlc3RlZFVwZGF0ZSIsIl9lbnF1ZXVlVXBkYXRlIiwicmVxdWVzdFVwZGF0ZSIsInVwZGF0ZUNvbXBsZXRlIiwicGVyZm9ybVVwZGF0ZSIsImhhc1VwZGF0ZWQiLCJzaG91bGRVcGRhdGUiLCJjaGFuZ2VkUHJvcGVydGllcyIsIl9tYXJrVXBkYXRlZCIsImZpcnN0VXBkYXRlZCIsInVwZGF0ZWQiLCJfZ2V0VXBkYXRlQ29tcGxldGUiLCJzaXplIiwibGVnYWN5Q3VzdG9tRWxlbWVudCIsImNsYXp6IiwiZGVmaW5lIiwic3RhbmRhcmRDdXN0b21FbGVtZW50IiwiY3VzdG9tRWxlbWVudCIsImNsYXNzT3JEZXNjcmlwdG9yIiwic3RhbmRhcmRQcm9wZXJ0eSIsImxlZ2FjeVByb3BlcnR5IiwicHJvdG9PckRlc2NyaXB0b3IiLCJpbnRlcm5hbFByb3BlcnR5IiwicXVlcnkiLCJzZWxlY3RvciIsInJlbmRlclJvb3QiLCJsZWdhY3lRdWVyeSIsInN0YW5kYXJkUXVlcnkiLCJxdWVyeUFzeW5jIiwicXVlcnlBbGwiLCJzdGFuZGFyZEV2ZW50T3B0aW9ucyIsImxlZ2FjeUV2ZW50T3B0aW9ucyIsImV2ZW50T3B0aW9ucyIsIkVsZW1lbnRQcm90byIsIkVsZW1lbnQiLCJsZWdhY3lNYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJxdWVyeUFzc2lnbmVkTm9kZXMiLCJzbG90TmFtZSIsImZsYXR0ZW4iLCJzbG90U2VsZWN0b3IiLCJzbG90Iiwibm9kZXMiLCJhc3NpZ25lZE5vZGVzIiwiRUxFTUVOVF9OT0RFIiwibWF0Y2hlcyIsInN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyIsIlNoYWRvd1Jvb3QiLCJEb2N1bWVudCIsIkNTU1N0eWxlU2hlZXQiLCJjb25zdHJ1Y3Rpb25Ub2tlbiIsIkNTU1Jlc3VsdCIsImNzc1RleHQiLCJzYWZlVG9rZW4iLCJzdHlsZVNoZWV0IiwiX3N0eWxlU2hlZXQiLCJyZXBsYWNlU3luYyIsInVuc2FmZUNTUyIsInRleHRGcm9tQ1NTUmVzdWx0IiwiY3NzIiwiYWNjIiwiaWR4IiwicmVuZGVyTm90SW1wbGVtZW50ZWQiLCJMaXRFbGVtZW50IiwiZ2V0U3R5bGVzIiwiX2dldFVuaXF1ZVN0eWxlcyIsInVzZXJTdHlsZXMiLCJhZGRTdHlsZXMiLCJyZWR1Y2VSaWdodCIsInVuc2hpZnQiLCJfc3R5bGVzIiwiY3NzUnVsZXMiLCJydWxlIiwiY3JlYXRlUmVuZGVyUm9vdCIsImFkb3B0U3R5bGVzIiwiYXR0YWNoU2hhZG93IiwibW9kZSIsIlNjb3BpbmdTaGltIiwicHJlcGFyZUFkb3B0ZWRDc3NUZXh0IiwibG9jYWxOYW1lIiwiYWRvcHRlZFN0eWxlU2hlZXRzIiwiX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cyIsInRlbXBsYXRlUmVzdWx0IiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJiYXNlZGlyIiwibW9kdWxlIiwicGF0aCIsImV4cG9ydHMiLCJyZXF1aXJlIiwiY29tbW9uanNSZXF1aXJlIiwiZ2V0Q2pzRXhwb3J0RnJvbU5hbWVzcGFjZSIsImxvdHRpZSIsIm5hdmlnYXRvciIsInJvb3QiLCJib2R5bW92aW4iLCJzdmdOUyIsImxvY2F0aW9uSHJlZiIsImluaXRpYWxEZWZhdWx0RnJhbWUiLCJzdWJmcmFtZUVuYWJsZWQiLCJleHByZXNzaW9uc1BsdWdpbiIsImlzU2FmYXJpIiwidXNlckFnZW50IiwiY2FjaGVkQ29sb3JzIiwiYm1SbmQiLCJibVBvdyIsInBvdyIsImJtU3FydCIsInNxcnQiLCJibUZsb29yIiwiZmxvb3IiLCJibU1heCIsIm1heCIsImJtTWluIiwibWluIiwiQk1NYXRoIiwicHJvcGVydHlOYW1lcyIsIlByb2plY3RJbnRlcmZhY2UiLCJhYnMiLCJ0T2ZWYWwiLCJhYnNBcnIiLCJjcmVhdGVTaXplZEFycmF5IiwiZGVmYXVsdEN1cnZlU2VnbWVudHMiLCJkZWdUb1JhZHMiLCJQSSIsInJvdW5kQ29ybmVyIiwicm91bmRWYWx1ZXMiLCJmbGFnIiwicm91bmQiLCJzdHlsZURpdiIsInBvc2l0aW9uIiwidG9wIiwiZGlzcGxheSIsInRyYW5zZm9ybU9yaWdpbiIsIndlYmtpdFRyYW5zZm9ybU9yaWdpbiIsImJhY2tmYWNlVmlzaWJpbGl0eSIsIndlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSIsInRyYW5zZm9ybVN0eWxlIiwid2Via2l0VHJhbnNmb3JtU3R5bGUiLCJtb3pUcmFuc2Zvcm1TdHlsZSIsIkJNRW50ZXJGcmFtZUV2ZW50IiwiY3VycmVudFRpbWUiLCJ0b3RhbFRpbWUiLCJmcmFtZU11bHRpcGxpZXIiLCJkaXJlY3Rpb24iLCJCTUNvbXBsZXRlRXZlbnQiLCJCTUNvbXBsZXRlTG9vcEV2ZW50IiwidG90YWxMb29wcyIsImN1cnJlbnRMb29wIiwiQk1TZWdtZW50U3RhcnRFdmVudCIsImZpcnN0RnJhbWUiLCJ0b3RhbEZyYW1lcyIsIkJNRGVzdHJveUV2ZW50IiwiQk1SZW5kZXJGcmFtZUVycm9yRXZlbnQiLCJuYXRpdmVFcnJvciIsIkJNQ29uZmlnRXJyb3JFdmVudCIsIkJNQW5pbWF0aW9uQ29uZmlnRXJyb3JFdmVudCIsImNyZWF0ZUVsZW1lbnRJRCIsIl9jb3VudCIsImNyZWF0ZUlEIiwiSFNWdG9SR0IiLCJoIiwiUkdCdG9IU1YiLCJhZGRTYXR1cmF0aW9uVG9SR0IiLCJjb2xvciIsIm9mZnNldCIsImhzdiIsImFkZEJyaWdodG5lc3NUb1JHQiIsImFkZEh1ZVRvUkdCIiwicmdiVG9IZXgiLCJjb2xvck1hcCIsImhleCIsIkJhc2VFdmVudCIsInRyaWdnZXJFdmVudCIsIl9jYnMiLCJjYWxsYmFjayIsImNyZWF0ZVR5cGVkQXJyYXkiLCJjcmVhdGVSZWd1bGFyQXJyYXkiLCJjcmVhdGVUeXBlZEFycmF5RmFjdG9yeSIsIkZsb2F0MzJBcnJheSIsIkludDE2QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsImNyZWF0ZU5TIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGFnIiwiRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyIiwiYWRkRHluYW1pY1Byb3BlcnR5IiwiZHluYW1pY1Byb3BlcnRpZXMiLCJfaXNBbmltYXRlZCIsIml0ZXJhdGVEeW5hbWljUHJvcGVydGllcyIsIl9tZGYiLCJnZXRWYWx1ZSIsImluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIiLCJnZXRCbGVuZE1vZGUiLCJibGVuZE1vZGVFbnVtcyIsIk1hdHJpeCIsIl9jb3MiLCJjb3MiLCJfc2luIiwic2luIiwiX3RhbiIsInRhbiIsIl9ybmQiLCJyZXNldCIsInJvdGF0ZSIsImFuZ2xlIiwibUNvcyIsIm1TaW4iLCJfdCIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNoZWFyIiwic3giLCJzeSIsInNrZXciLCJheCIsImF5Iiwic2tld0Zyb21BeGlzIiwic2NhbGUiLCJzeiIsInNldFRyYW5zZm9ybSIsInRyYW5zbGF0ZSIsInR4IiwidHkiLCJ0eiIsInRyYW5zZm9ybSIsImEyIiwiYjIiLCJjMiIsImQyIiwiZTIiLCJmMiIsImcyIiwiaDIiLCJpMiIsImoyIiwibDIiLCJtMiIsIm4yIiwibzIiLCJwMiIsIl9wIiwiX2lkZW50aXR5Q2FsY3VsYXRlZCIsImExIiwiYjEiLCJjMSIsImQxIiwiZTEiLCJmMSIsImcxIiwiaDEiLCJpMSIsImoxIiwiazEiLCJsMSIsIm0xIiwibjEiLCJvMSIsInAxIiwiaXNJZGVudGl0eSIsIl9pZGVudGl0eSIsImVxdWFscyIsIm1hdHIiLCJjbG9uZSIsImNsb25lRnJvbVByb3BzIiwiYXBwbHlUb1BvaW50IiwieCIsInoiLCJhcHBseVRvWCIsImFwcGx5VG9ZIiwiYXBwbHlUb1oiLCJnZXRJbnZlcnNlTWF0cml4IiwiZGV0ZXJtaW5hbnQiLCJpbnZlcnNlTWF0cml4IiwiaW52ZXJzZVBvaW50IiwicHQiLCJhcHBseVRvUG9pbnRBcnJheSIsImludmVyc2VQb2ludHMiLCJwdHMiLCJyZXRQdHMiLCJhcHBseVRvVHJpcGxlUG9pbnRzIiwicHQxIiwicHQyIiwicHQzIiwicDAiLCJwNCIsInA1IiwicDEyIiwicDEzIiwiYXBwbHlUb1BvaW50U3RyaW5naWZpZWQiLCJ0b0NTUyIsImNzc1ZhbHVlIiwicm91bmRNYXRyaXhQcm9wZXJ0eSIsInRvMmRDU1MiLCJfYiIsIl9jIiwiX2YiLCJwb29sIiwibWF0aCIsIndpZHRoIiwiY2h1bmtzIiwiZGlnaXRzIiwicm5nbmFtZSIsInN0YXJ0ZGVub20iLCJzaWduaWZpY2FuY2UiLCJvdmVyZmxvdyIsIm1hc2siLCJub2RlY3J5cHRvIiwic2VlZHJhbmRvbSIsInNlZWQiLCJlbnRyb3B5Iiwic2hvcnRzZWVkIiwibWl4a2V5IiwidG9zdHJpbmciLCJhdXRvc2VlZCIsImFyYzQiLCJBUkM0IiwicHJuZyIsImludDMyIiwicXVpY2siLCJkb3VibGUiLCJTIiwicGFzcyIsImlzX21hdGhfY2FsbCIsInN0YXRlIiwiY29weSIsImtleWxlbiIsIm1lIiwiZGVwdGgiLCJ0eXAiLCJzdHJpbmdzZWVkIiwic21lYXIiLCJjaGFyQ29kZUF0IiwicmFuZG9tQnl0ZXMiLCJvdXQiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJicm93c2VyIiwicGx1Z2lucyIsIkRhdGUiLCJzY3JlZW4iLCJmcm9tQ2hhckNvZGUiLCJCZXppZXJGYWN0b3J5Iiwib2IiLCJnZXRCZXppZXJFYXNpbmciLCJiZXppZXJzIiwibm0iLCJiZXpFYXNpbmciLCJCZXppZXJFYXNpbmciLCJORVdUT05fSVRFUkFUSU9OUyIsIk5FV1RPTl9NSU5fU0xPUEUiLCJTVUJESVZJU0lPTl9QUkVDSVNJT04iLCJTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyIsImtTcGxpbmVUYWJsZVNpemUiLCJrU2FtcGxlU3RlcFNpemUiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsImJpbmFyeVN1YmRpdmlkZSIsImFYIiwiYUEiLCJhQiIsIm1YMSIsIm1YMiIsImN1cnJlbnRYIiwiY3VycmVudFQiLCJuZXd0b25SYXBoc29uSXRlcmF0ZSIsImFHdWVzc1QiLCJjdXJyZW50U2xvcGUiLCJwb2ludHMiLCJfbVNhbXBsZVZhbHVlcyIsIl9wcmVjb21wdXRlZCIsIm1ZMSIsIm1ZMiIsIl9wcmVjb21wdXRlIiwiX2dldFRGb3JYIiwiX2NhbGNTYW1wbGVWYWx1ZXMiLCJtU2FtcGxlVmFsdWVzIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJsYXN0U2FtcGxlIiwiZGlzdCIsImd1ZXNzRm9yVCIsImluaXRpYWxTbG9wZSIsImxhc3RUaW1lIiwidmVuZG9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY3VyclRpbWUiLCJnZXRUaW1lIiwidGltZVRvQ2FsbCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJleHRlbmRQcm90b3R5cGUiLCJzb3VyY2VzIiwiZGVzdGluYXRpb24iLCJzb3VyY2VQcm90b3R5cGUiLCJnZXREZXNjcmlwdG9yIiwiY3JlYXRlUHJveHlGdW5jdGlvbiIsIlByb3h5RnVuY3Rpb24iLCJiZXpGdW5jdGlvbiIsInBvaW50T25MaW5lMkQiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIngzIiwieTMiLCJkZXQxIiwicG9pbnRPbkxpbmUzRCIsInoxIiwiejIiLCJ6MyIsImRpc3QxIiwiZGlzdDIiLCJkaXN0MyIsImRpZmZEaXN0IiwiZ2V0QmV6aWVyTGVuZ3RoIiwicHQ0IiwiY3VydmVTZWdtZW50cyIsInB0Q29vcmQiLCJwZXJjIiwiYWRkZWRMZW5ndGgiLCJwdERpc3RhbmNlIiwicG9pbnQiLCJsYXN0UG9pbnQiLCJsZW5ndGhEYXRhIiwiYmV6aWVyTGVuZ3RoUG9vbCIsIm5ld0VsZW1lbnQiLCJwZXJjZW50cyIsImxlbmd0aHMiLCJnZXRTZWdtZW50c0xlbmd0aCIsInNoYXBlRGF0YSIsInNlZ21lbnRzTGVuZ3RoIiwic2VnbWVudHNMZW5ndGhQb29sIiwiY2xvc2VkIiwicGF0aFYiLCJwYXRoTyIsInBhdGhJIiwidG90YWxMZW5ndGgiLCJCZXppZXJEYXRhIiwic2VnbWVudExlbmd0aCIsIlBvaW50RGF0YSIsInBhcnRpYWwiLCJwYXJ0aWFsTGVuZ3RoIiwiYnVpbGRCZXppZXJEYXRhIiwic3RvcmVkRGF0YSIsImJlemllck5hbWUiLCJiZXppZXJEYXRhIiwiZ2V0RGlzdGFuY2VQZXJjIiwiaW5pdFBvcyIsImxlbmd0aFBvcyIsImxQZXJjIiwiZGlyIiwiZ2V0UG9pbnRJblNlZ21lbnQiLCJwZXJjZW50IiwidDEiLCJ1MSIsInB0WCIsInB0WSIsImJlemllclNlZ21lbnRQb2ludHMiLCJnZXROZXdTZWdtZW50Iiwic3RhcnRQZXJjIiwiZW5kUGVyYyIsInQwIiwidTAiLCJ1MHUwdTAiLCJ0MHUwdTBfMyIsInQwdDB1MF8zIiwidDB0MHQwIiwidTB1MHUxIiwidDB1MHUxXzMiLCJ0MHQwdTFfMyIsInQwdDB0MSIsInUwdTF1MSIsInQwdTF1MV8zIiwidDB0MXUxXzMiLCJ0MHQxdDEiLCJ1MXUxdTEiLCJ0MXUxdTFfMyIsInQxdDF1MV8zIiwidDF0MXQxIiwiYmV6IiwiZGF0YUZ1bmN0aW9uTWFuYWdlciIsImNvbXBsZXRlTGF5ZXJzIiwibGF5ZXJzIiwiY29tcHMiLCJmb250TWFuYWdlciIsImxheWVyRGF0YSIsImpMZW4iLCJrTGVuIiwiY29tcGxldGVkIiwidHQiLCJ0ZCIsImhhc01hc2siLCJtYXNrUHJvcHMiLCJtYXNrc1Byb3BlcnRpZXMiLCJjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzIiwiZmluZENvbXBMYXllcnMiLCJyZWZJZCIsImNvbXBsZXRlU2hhcGVzIiwic2hhcGVzIiwiY29tcGxldGVUZXh0IiwiX191c2VkIiwia3MiLCJjaGVja1ZlcnNpb24iLCJtaW5pbXVtIiwiYW5pbVZlcnNpb25TdHJpbmciLCJhbmltVmVyc2lvbiIsImNoZWNrVGV4dCIsIm1pbmltdW1WZXJzaW9uIiwidXBkYXRlVGV4dExheWVyIiwidGV4dExheWVyIiwiZG9jdW1lbnREYXRhIiwiaXRlcmF0ZUxheWVycyIsImFuaW1hdGlvbkRhdGEiLCJhc3NldHMiLCJjaGVja0NoYXJzIiwiY2hhcnMiLCJwYXRoRGF0YSIsInBhdGhzIiwiX19jb252ZXJ0ZWQiLCJjaGVja0NvbG9ycyIsIml0ZXJhdGVTaGFwZXMiLCJjaGVja1NoYXBlcyIsImNvbXBsZXRlQ2xvc2luZ1NoYXBlcyIsImNsIiwiY29tcGxldGVEYXRhIiwiX19jb21wbGV0ZSIsInNpbmdsZVNoYXBlIiwibW9kdWxlT2IiLCJkYXRhTWFuYWdlciIsImdldEZvbnRQcm9wZXJ0aWVzIiwiZm9udERhdGEiLCJmU3R5bGUiLCJmV2VpZ2h0Iiwic3R5bGVOYW1lIiwid2VpZ2h0IiwiRm9udE1hbmFnZXIiLCJtYXhXYWl0aW5nVGltZSIsImVtcHR5Q2hhciIsInciLCJjb21iaW5lZENoYXJhY3RlcnMiLCJ0cmltRm9udE9wdGlvbnMiLCJmb250IiwiZmFtaWx5QXJyYXkiLCJlbmFibGVkRmFtaWxpZXMiLCJzZXRVcE5vZGUiLCJmYW1pbHkiLCJmb250RmFtaWx5IiwiaW5uZXJUZXh0IiwiZm9udFNpemUiLCJmb250VmFyaWFudCIsImZvbnRTdHlsZSIsImZvbnRXZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwib2Zmc2V0V2lkdGgiLCJjaGVja0xvYWRlZEZvbnRzIiwiZm9udHMiLCJsb2FkZWRDb3VudCIsImxvYWRlZCIsImZPcmlnaW4iLCJvcmlnaW4iLCJtb25vQ2FzZSIsInNhbnNDYXNlIiwibm93IiwiaW5pdFRpbWUiLCJjaGVja0xvYWRlZEZvbnRzQmluZGVkIiwic2V0SXNMb2FkZWRCaW5kZWQiLCJjcmVhdGVIZWxwZXIiLCJ0SGVscGVyIiwiZm9udFByb3BzIiwiZkZhbWlseSIsImZDbGFzcyIsInRDYW52YXNIZWxwZXIiLCJnZXRDb250ZXh0IiwiYWRkRm9udHMiLCJkZWZzIiwiaXNMb2FkZWQiLCJsaXN0IiwiZm9udEFyciIsIl9wZW5kaW5nRm9udHMiLCJzaG91bGRMb2FkRm9udCIsImxvYWRlZFNlbGVjdG9yIiwiZlBhdGgiLCJocmVmIiwicmVsIiwic3JjIiwic2MiLCJoZWxwZXIiLCJhZGRDaGFycyIsImZvdW5kIiwiY2giLCJnZXRDaGFyRGF0YSIsImNoYXIiLCJfd2FybmVkIiwibWVhc3VyZVRleHQiLCJmb250TmFtZSIsImdldEZvbnRCeU5hbWUiLCJkb3VibGVTaXplIiwiZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoIiwic2luZ2xlU2l6ZSIsImZOYW1lIiwiZ2V0Q29tYmluZWRDaGFyYWN0ZXJDb2RlcyIsInNldElzTG9hZGVkIiwiRm9udCIsInR5cGVraXRMb2FkZWQiLCJmb250UHJvdG90eXBlIiwiUHJvcGVydHlGYWN0b3J5IiwiaW5pdEZyYW1lIiwibWF0aEFicyIsImludGVycG9sYXRlVmFsdWUiLCJmcmFtZU51bSIsImNhY2hpbmciLCJvZmZzZXRUaW1lIiwibmV3VmFsdWUiLCJwcm9wVHlwZSIsInB2IiwiaXRlcmF0aW9uSW5kZXgiLCJrZXlmcmFtZXMiLCJrZXlEYXRhIiwibmV4dEtleURhdGEiLCJmbmMiLCJuZXh0S2V5VGltZSIsImtleVRpbWUiLCJlbmRWYWx1ZSIsInRvIiwidGkiLCJpbmQiLCJfX2ZuY3QiLCJkaXN0YW5jZUluTGluZSIsInNlZ21lbnRQZXJjIiwibGFzdEZyYW1lIiwiX2xhc3RLZXlmcmFtZUluZGV4IiwiX2xhc3RBZGRlZExlbmd0aCIsIl9sYXN0UG9pbnQiLCJvdXRYIiwib3V0WSIsImluWCIsImluWSIsImtleVZhbHVlIiwic2giLCJxdWF0U3RhcnQiLCJjcmVhdGVRdWF0ZXJuaW9uIiwicXVhdEVuZCIsInRpbWUiLCJxdWF0ZXJuaW9uVG9FdWxlciIsInNsZXJwIiwiYXoiLCJhdyIsImJ4IiwiYnkiLCJieiIsImJ3Iiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwiYWNvcyIsInF1YXQiLCJxeCIsInF5IiwicXoiLCJxdyIsImhlYWRpbmciLCJhdGFuMiIsImF0dGl0dWRlIiwiYXNpbiIsImJhbmsiLCJjMyIsInMxIiwiczIiLCJzMyIsImdldFZhbHVlQXRDdXJyZW50VGltZSIsImNvbXAiLCJyZW5kZXJlZEZyYW1lIiwiZW5kVGltZSIsIl9jYWNoaW5nIiwicmVuZGVyUmVzdWx0Iiwic2V0VlZhbHVlIiwibXVsdGlwbGllZFZhbHVlIiwibXVsdCIsInByb2Nlc3NFZmZlY3RzU2VxdWVuY2UiLCJlbGVtIiwiZ2xvYmFsRGF0YSIsImZyYW1lSWQiLCJlZmZlY3RzU2VxdWVuY2UiLCJsb2NrIiwiX2lzRmlyc3RGcmFtZSIsImZpbmFsVmFsdWUiLCJrZiIsImFkZEVmZmVjdCIsImVmZmVjdEZ1bmN0aW9uIiwiVmFsdWVQcm9wZXJ0eSIsInZlbCIsIk11bHRpRGltZW5zaW9uYWxQcm9wZXJ0eSIsIktleWZyYW1lZFZhbHVlUHJvcGVydHkiLCJzdCIsIktleWZyYW1lZE11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eSIsImFyckxlbiIsImdldFByb3AiLCJUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkiLCJkZWZhdWx0VmVjdG9yIiwiYXBwbHlUb01hdHJpeCIsIm1hdCIsInNrIiwic2EiLCJyeiIsInJ5IiwicngiLCJvciIsInB4IiwicHkiLCJweiIsInByb2Nlc3NLZXlzIiwiZm9yY2VSZW5kZXIiLCJfaXNEaXJ0eSIsInByZWNhbGN1bGF0ZU1hdHJpeCIsImZyYW1lUmF0ZSIsInByZSIsImFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMiLCJhdXRvT3JpZW50ZWQiLCJ2MSIsInYyIiwiZ2V0VmFsdWVBdFRpbWUiLCJhdXRvT3JpZW50IiwiX2FkZER5bmFtaWNQcm9wZXJ0eSIsIlRyYW5zZm9ybVByb3BlcnR5IiwiZ2V0VHJhbnNmb3JtUHJvcGVydHkiLCJTaGFwZVBhdGgiLCJfbWF4TGVuZ3RoIiwic2V0UGF0aERhdGEiLCJzZXRMZW5ndGgiLCJwb2ludFBvb2wiLCJkb3VibGVBcnJheUxlbmd0aCIsInNldFhZQXQiLCJwb3MiLCJzZXRUcmlwbGVBdCIsInZYIiwidlkiLCJvWCIsIm9ZIiwiaVgiLCJpWSIsIm5ld1BhdGgiLCJ2ZXJ0aWNlcyIsIm91dFBvaW50cyIsImluUG9pbnRzIiwiaW5pdCIsImNudCIsIlNoYXBlUHJvcGVydHlGYWN0b3J5IiwiaW50ZXJwb2xhdGVTaGFwZSIsInByZXZpb3VzVmFsdWUiLCJrZXlQcm9wUyIsImtleVByb3BFIiwiaXNIb2xkIiwidmVydGV4VmFsdWUiLCJpbnRlcnBvbGF0ZVNoYXBlQ3VycmVudFRpbWUiLCJyZXNldFNoYXBlIiwibG9jYWxTaGFwZUNvbGxlY3Rpb24iLCJzaGFwZXNFcXVhbCIsInNoYXBlMSIsInNoYXBlMiIsInNoYXBlUG9vbCIsInJlbGVhc2VTaGFwZXMiLCJhZGRTaGFwZSIsIlNoYXBlUHJvcGVydHkiLCJzaGFwZUNvbGxlY3Rpb25Qb29sIiwibmV3U2hhcGVDb2xsZWN0aW9uIiwiS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eSIsIkVsbFNoYXBlUHJvcGVydHkiLCJjUG9pbnQiLCJFbGxTaGFwZVByb3BlcnR5RmFjdG9yeSIsImNvbnZlcnRFbGxUb1BhdGgiLCJzMCIsIl9jdyIsIlN0YXJTaGFwZVByb3BlcnR5IiwiU3RhclNoYXBlUHJvcGVydHlGYWN0b3J5IiwiaXIiLCJpcyIsImNvbnZlcnRUb1BhdGgiLCJjb252ZXJ0U3RhclRvUGF0aCIsImNvbnZlcnRQb2x5Z29uVG9QYXRoIiwib3MiLCJudW1QdHMiLCJsb25nRmxhZyIsImxvbmdSYWQiLCJzaG9ydFJhZCIsImxvbmdSb3VuZCIsInNob3J0Um91bmQiLCJsb25nUGVyaW1TZWdtZW50Iiwic2hvcnRQZXJpbVNlZ21lbnQiLCJyYWQiLCJyb3VuZG5lc3MiLCJwZXJpbVNlZ21lbnQiLCJjdXJyZW50QW5nIiwib3giLCJveSIsIlJlY3RTaGFwZVByb3BlcnR5IiwiUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5IiwiY29udmVydFJlY3RUb1BhdGgiLCJ2MCIsImdldFNoYXBlUHJvcCIsImRhdGFQcm9wIiwiZ2V0Q29uc3RydWN0b3JGdW5jdGlvbiIsImdldEtleWZyYW1lZENvbnN0cnVjdG9yRnVuY3Rpb24iLCJTaGFwZU1vZGlmaWVycyIsIm1vZGlmaWVycyIsInJlZ2lzdGVyTW9kaWZpZXIiLCJnZXRNb2RpZmllciIsIlNoYXBlTW9kaWZpZXIiLCJpbml0TW9kaWZpZXJQcm9wZXJ0aWVzIiwiYWRkU2hhcGVUb01vZGlmaWVyIiwic2hhcGUiLCJzZXRBc0FuaW1hdGVkIiwiVHJpbU1vZGlmaWVyIiwic1ZhbHVlIiwiZVZhbHVlIiwicGF0aHNEYXRhIiwiY2FsY3VsYXRlU2hhcGVFZGdlcyIsInNoYXBlTGVuZ3RoIiwidG90YWxNb2RpZmllckxlbmd0aCIsInNlZ21lbnRzIiwic2hhcGVTZWdtZW50cyIsInNlZ21lbnRPYiIsInNoYXBlUyIsInNoYXBlRSIsInJlbGVhc2VQYXRoc0RhdGEiLCJyZWxlYXNlIiwicHJvY2Vzc1NoYXBlcyIsInNoYXBlUGF0aHMiLCJ0b3RhbFNoYXBlTGVuZ3RoIiwiZWRnZXMiLCJuZXdTaGFwZXNEYXRhIiwiYWRkU2hhcGVzIiwibGFzdFNoYXBlSW5Db2xsZWN0aW9uIiwibGFzdFNoYXBlIiwiYWRkUGF0aHMiLCJuZXdQYXRocyIsImFkZFNlZ21lbnQiLCJzaGFwZVBhdGgiLCJuZXdTaGFwZSIsImFkZFNlZ21lbnRGcm9tQXJyYXkiLCJzaGFwZVNlZ21lbnQiLCJjdXJyZW50TGVuZ3RoRGF0YSIsInNlZ21lbnRDb3VudCIsInNlZ21lbnQiLCJSb3VuZENvcm5lcnNNb2RpZmllciIsInJkIiwicHJvY2Vzc1BhdGgiLCJjbG9uZWRQYXRoIiwiY3VycmVudFYiLCJjdXJyZW50SSIsImN1cnJlbnRPIiwiY2xvc2VyViIsImRpc3RhbmNlIiwibmV3UG9zUGVyYyIsIlB1Y2tlckFuZEJsb2F0TW9kaWZpZXIiLCJhbW91bnQiLCJjZW50ZXJQb2ludCIsInBhdGhMZW5ndGgiLCJSZXBlYXRlck1vZGlmaWVyIiwidHIiLCJzbyIsImVvIiwicE1hdHJpeCIsInJNYXRyaXgiLCJzTWF0cml4IiwidE1hdHJpeCIsIm1hdHJpeCIsImFwcGx5VHJhbnNmb3JtcyIsImludiIsInNjYWxlWCIsInNjYWxlWSIsImVsZW1zRGF0YSIsIl9jdXJyZW50Q29waWVzIiwiX2VsZW1lbnRzIiwicmVzZXRFbGVtZW50cyIsIl9wcm9jZXNzZWQiLCJjbG9uZUVsZW1lbnRzIiwiY2hhbmdlR3JvdXBSZW5kZXIiLCJyZW5kZXJGbGFnIiwiX3JlbmRlciIsIml0ZW1zIiwiaXRlbXNUcmFuc2Zvcm0iLCJjb250IiwiaGFzUmVsb2FkZWQiLCJjb3BpZXMiLCJjZWlsIiwiZ3JvdXAiLCJpeCIsInJlbG9hZFNoYXBlcyIsImVsZW1zIiwidHJhbnNmb3JtRGF0YSIsIm9mZnNldE1vZHVsbyIsInJvdW5kT2Zmc2V0IiwicFByb3BzIiwiclByb3BzIiwic1Byb3BzIiwiaXRlcmF0aW9uIiwibVByb3BzIiwiU2hhcGVDb2xsZWN0aW9uIiwiRGFzaFByb3BlcnR5IiwicmVuZGVyZXIiLCJkYXRhUHJvcHMiLCJkYXNoU3RyIiwiZGFzaEFycmF5IiwiZGFzaG9mZnNldCIsIkdyYWRpZW50UHJvcGVydHkiLCJjTGVuZ3RoIiwiX2NtZGYiLCJfb21kZiIsIl9jb2xsYXBzYWJsZSIsImNoZWNrQ29sbGFwc2FibGUiLCJfaGFzT3BhY2l0eSIsImNvbXBhcmVQb2ludHMiLCJkaWZmIiwiYnVpbGRTaGFwZVN0cmluZyIsInBhdGhOb2RlcyIsIl9vIiwic2hhcGVTdHJpbmciLCJhdWRpb0NvbnRyb2xsZXJGYWN0b3J5IiwiQXVkaW9Db250cm9sbGVyIiwiYXVkaW9GYWN0b3J5IiwiYXVkaW9zIiwiX3ZvbHVtZSIsIl9pc011dGVkIiwiYWRkQXVkaW8iLCJhdWRpbyIsInBhdXNlIiwic2V0UmF0ZSIsInJhdGVWYWx1ZSIsImNyZWF0ZUF1ZGlvIiwiYXNzZXRQYXRoIiwiSG93bCIsImlzUGxheWluZyIsInBsYXkiLCJzZWVrIiwicGxheWluZyIsInJhdGUiLCJzZXRWb2x1bWUiLCJzZXRBdWRpb0ZhY3RvcnkiLCJfdXBkYXRlVm9sdW1lIiwibXV0ZSIsInVubXV0ZSIsImdldFZvbHVtZSIsInZvbHVtZSIsIkltYWdlUHJlbG9hZGVyIiwicHJveHlJbWFnZSIsImNhbnZhcyIsImhlaWdodCIsImN0eCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiaW1hZ2VMb2FkZWQiLCJsb2FkZWRBc3NldHMiLCJ0b3RhbEltYWdlcyIsImltYWdlc0xvYWRlZENiIiwiZ2V0QXNzZXRzUGF0aCIsImFzc2V0RGF0YSIsImFzc2V0c1BhdGgiLCJvcmlnaW5hbFBhdGgiLCJpbWFnZVBhdGgiLCJ1IiwidGVzdEltYWdlTG9hZGVkIiwiaW1nIiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiYm94IiwiZ2V0QkJveCIsIl9pbWFnZUxvYWRlZCIsImNsZWFySW50ZXJ2YWwiLCJjcmVhdGVJbWFnZURhdGEiLCJzZXRBdHRyaWJ1dGVOUyIsIl9lbGVtZW50SGVscGVyIiwiYXBwZW5kIiwiY3JlYXRlSW1nRGF0YSIsImNyb3NzT3JpZ2luIiwibG9hZEFzc2V0cyIsImNiIiwiaW1hZ2VzIiwiX2NyZWF0ZUltYWdlRGF0YSIsInNldFBhdGgiLCJzZXRBc3NldHNQYXRoIiwiZ2V0SW1hZ2UiLCJkZXN0cm95Iiwic2V0Q2FjaGVUeXBlIiwiZWxlbWVudEhlbHBlciIsIkltYWdlUHJlbG9hZGVyRmFjdG9yeSIsImZlYXR1cmVTdXBwb3J0IiwibWFza1R5cGUiLCJmaWx0ZXJzRmFjdG9yeSIsImNyZWF0ZUZpbHRlciIsImNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXIiLCJmaWxJZCIsInNraXBDb29yZGluYXRlcyIsImZpbCIsImZlQ29sb3JNYXRyaXgiLCJhc3NldExvYWRlciIsImZvcm1hdFJlc3BvbnNlIiwieGhyIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJsb2FkQXNzZXQiLCJlcnJvckNhbGxiYWNrIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZVR5cGUiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwib3BlbiIsImxvYWQiLCJUZXh0QW5pbWF0b3JQcm9wZXJ0eSIsInRleHREYXRhIiwicmVuZGVyVHlwZSIsIl9oYXNNYXNrZWRQYXRoIiwiX2ZyYW1lSWQiLCJfdGV4dERhdGEiLCJfcmVuZGVyVHlwZSIsIl9lbGVtIiwiX2FuaW1hdG9yc0RhdGEiLCJfcGF0aERhdGEiLCJfbW9yZU9wdGlvbnMiLCJhbGlnbm1lbnQiLCJyZW5kZXJlZExldHRlcnMiLCJsZXR0ZXJzQ2hhbmdlZEZsYWciLCJzZWFyY2hQcm9wZXJ0aWVzIiwiYW5pbWF0b3JQcm9wcyIsIlRleHRBbmltYXRvckRhdGFQcm9wZXJ0eSIsIm1hc2tNYW5hZ2VyIiwiZ2V0TWFza1Byb3BlcnR5IiwiZ2V0TWVhc3VyZXMiLCJhbmltYXRvcnMiLCJtYXRyaXhIZWxwZXIiLCJtSGVscGVyIiwicmVuZGVyZWRMZXR0ZXJzQ291bnQiLCJ4UG9zIiwieVBvcyIsImxldHRlcnMiLCJwYXRoSW5mbyIsImN1cnJlbnRMZW5ndGgiLCJjdXJyZW50UG9pbnQiLCJwb2ludEluZCIsInNlZ21lbnRJbmQiLCJwcmV2UG9pbnQiLCJ0YW5BbmdsZSIsInRMZW5ndGgiLCJwaSIsInlPZmYiLCJmaW5hbFNpemUiLCJmaXJzdExpbmUiLCJhbmltYXRvclNlbGVjdG9yIiwibGV0dGVyVmFsdWUiLCJvZmZmIiwieFBhdGhQb3MiLCJ5UGF0aFBvcyIsImluaXRQYXRoUG9zIiwiaW5pdFNlZ21lbnRJbmQiLCJpbml0UG9pbnRJbmQiLCJjdXJyZW50TGluZSIsImVsZW1PcGFjaXR5Iiwic3ciLCJmYyIsImxldHRlclN3IiwibGV0dGVyU2MiLCJsZXR0ZXJGYyIsImxldHRlck0iLCJsZXR0ZXJQIiwiZGVmYXVsdFByb3BzQXJyYXkiLCJsZXR0ZXJPIiwiYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0IiwiYW5pbWF0b3JGaXJzdENoYXJPZmZzZXQiLCJqdXN0aWZ5T2Zmc2V0TXVsdCIsImlzTmV3TGluZSIsImdldE11bHQiLCJhbkluZGV4ZXMiLCJ0b3RhbENoYXJzIiwieU9mZnNldCIsImxpbmUiLCJsaW5lV2lkdGhzIiwiZXh0cmEiLCJhbiIsImFuaW1hdG9yT2Zmc2V0Iiwic3Ryb2tlV2lkdGhBbmltIiwic3Ryb2tlQ29sb3JBbmltIiwiZmlsbENvbG9yQW5pbSIsImZoIiwiZnMiLCJmYiIsImxzIiwicm90IiwiYXRhbiIsInBzIiwiYXNjZW50IiwianVzdGlmeU9mZnNldCIsImJveFdpZHRoIiwiTGV0dGVyUHJvcHMiLCJkZWZhdWx0RGF0YSIsInRleHRBbmltYXRvckFuaW1hdGFibGVzIiwiVGV4dFNlbGVjdG9yUHJvcCIsImdldFRleHRTZWxlY3RvclByb3AiLCJUZXh0UHJvcGVydHkiLCJrZXlzSW5kZXgiLCJjYW5SZXNpemUiLCJtaW5pbXVtRm9udFNpemUiLCJjdXJyZW50RGF0YSIsImRlZmF1bHRCb3hXaWR0aCIsImxoIiwib2YiLCJmaW5hbFRleHQiLCJmaW5hbExpbmVIZWlnaHQiLCJjb3B5RGF0YSIsInNlYXJjaFByb3BlcnR5IiwiY29tcGxldGVUZXh0RGF0YSIsInNldEN1cnJlbnREYXRhIiwic2VhcmNoS2V5ZnJhbWVzIiwiZ2V0S2V5ZnJhbWVWYWx1ZSIsIl9maW5hbFZhbHVlIiwiY3VycmVudFZhbHVlIiwiY3VycmVudEluZGV4IiwidGV4dEtleXMiLCJidWlsZEZpbmFsVGV4dCIsImNoYXJhY3RlcnNBcnJheSIsImNoYXJDb2RlIiwiY2hhckF0IiwibmV3TGluZUZsYWciLCJhbmNob3JHcm91cGluZyIsImN1cnJlbnRTaXplIiwiY3VycmVudFBvcyIsImxpbmVXaWR0aCIsIm1heExpbmVXaWR0aCIsImNoYXJEYXRhIiwidHJhY2tpbmdPZmZzZXQiLCJib3hIZWlnaHQiLCJjdXJyZW50SGVpZ2h0IiwibGFzdFNwYWNlSW5kZXgiLCJ1bmNvbGxhcHNlZFNwYWNlcyIsImN1cnJlbnRDaGFyIiwiYW5pbWF0b3JEYXRhIiwibGV0dGVyRGF0YSIsImJhc2VkIiwiaW5kZXhlcyIsInJuIiwiY3VycmVudEluZCIsIm5ld0luZCIsInVwZGF0ZURvY3VtZW50RGF0YSIsIm5ld0RhdGEiLCJkRGF0YSIsInJlY2FsY3VsYXRlIiwiY2FuUmVzaXplRm9udCIsIl9jYW5SZXNpemUiLCJzZXRNaW5pbXVtRm9udFNpemUiLCJfZm9udFZhbHVlIiwiVGV4dFNlbGVjdG9yUHJvcEZhY3RvcnkiLCJfY3VycmVudFRleHRMZW5ndGgiLCJmaW5hbFMiLCJmaW5hbEUiLCJ4ZSIsIm5lIiwidGV4dFByb3BlcnR5IiwiZWFzZXIiLCJ0b3QiLCJuZXdDaGFyc0ZsYWciLCJkaXZpc29yIiwicG9vbEZhY3RvcnkiLCJpbml0aWFsTGVuZ3RoIiwiX2NyZWF0ZSIsIl9yZWxlYXNlIiwicG9vbGluZyIsImNsb25lZCIsInNoYXBlQ29sbGVjdGlvbiIsIm1hcmtlclBhcnNlciIsInBhcnNlUGF5bG9hZExpbmVzIiwicGF5bG9hZCIsImxpbmVzIiwia2V5c0NvdW50IiwidHJpbSIsIl9tYXJrZXJzIiwibWFya2VycyIsIl9tYXJrZXIiLCJtYXJrZXJEYXRhIiwidG0iLCJkdXJhdGlvbiIsImRyIiwiY20iLCJCYXNlUmVuZGVyZXIiLCJjaGVja0xheWVycyIsIm51bSIsImlwIiwiYnVpbGRJdGVtIiwiY2hlY2tQZW5kaW5nRWxlbWVudHMiLCJjcmVhdGVJdGVtIiwibGF5ZXIiLCJjcmVhdGVJbWFnZSIsImNyZWF0ZUNvbXAiLCJjcmVhdGVTb2xpZCIsImNyZWF0ZU51bGwiLCJjcmVhdGVTaGFwZSIsImNyZWF0ZVRleHQiLCJjcmVhdGVDYW1lcmEiLCJBdWRpb0VsZW1lbnQiLCJidWlsZEFsbEl0ZW1zIiwiaW5jbHVkZUxheWVycyIsIm5ld0xheWVycyIsInNldFByb2plY3RJbnRlcmZhY2UiLCJwSW50ZXJmYWNlIiwicHJvamVjdEludGVyZmFjZSIsImluaXRJdGVtcyIsInByb2dyZXNzaXZlTG9hZCIsImJ1aWxkRWxlbWVudFBhcmVudGluZyIsInBhcmVudE5hbWUiLCJoaWVyYXJjaHkiLCJhZGRQZW5kaW5nRWxlbWVudCIsInNldEFzUGFyZW50Iiwic2V0SGllcmFyY2h5IiwicGVuZGluZ0VsZW1lbnRzIiwic2VhcmNoRXh0cmFDb21wb3NpdGlvbnMiLCJ4dCIsImluaXRFeHByZXNzaW9ucyIsInJlZ2lzdGVyQ29tcG9zaXRpb24iLCJzZXR1cEdsb2JhbERhdGEiLCJhbmltRGF0YSIsImZvbnRzQ29udGFpbmVyIiwiZ2V0QXNzZXREYXRhIiwiYW5pbWF0aW9uSXRlbSIsImltYWdlTG9hZGVyIiwiaW1hZ2VQcmVsb2FkZXIiLCJhdWRpb0NvbnRyb2xsZXIiLCJmciIsImNvbXBTaXplIiwiU1ZHUmVuZGVyZXIiLCJjb25maWciLCJhcmlhTGFiZWwiLCJ0aXRsZSIsInRpdGxlRWxlbWVudCIsInRpdGxlSWQiLCJkZXNjcmlwdGlvbiIsImRlc2NFbGVtZW50IiwiZGVzY0lkIiwibWFza0VsZW1lbnQiLCJsYXllckVsZW1lbnQiLCJyZW5kZXJDb25maWciLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwiaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIiwiaGlkZU9uVHJhbnNwYXJlbnQiLCJ2aWV3Qm94T25seSIsInZpZXdCb3hTaXplIiwiY2xhc3NOYW1lIiwiZm9jdXNhYmxlIiwiZmlsdGVyU2l6ZSIsImRlc3Ryb3llZCIsInJlbmRlcmVyVHlwZSIsIk51bGxFbGVtZW50IiwiU1ZHU2hhcGVFbGVtZW50IiwiU1ZHVGV4dExvdHRpZUVsZW1lbnQiLCJJSW1hZ2VFbGVtZW50IiwiU1ZHQ29tcEVsZW1lbnQiLCJJU29saWRFbGVtZW50IiwiY29uZmlnQW5pbWF0aW9uIiwid3JhcHBlciIsInJlY3QiLCJtYXNrSWQiLCJ1cGRhdGVDb250YWluZXJTaXplIiwiYXBwZW5kRWxlbWVudEluUG9zIiwic2V0TWF0dGUiLCJsYXllcklkIiwiY2hlY2tQYXJlbnRpbmciLCJyZW5kZXJGcmFtZSIsImN1cnJlbnRGcmFtZSIsInByZXBhcmVGcmFtZSIsImdldEJhc2VFbGVtZW50IiwibmV4dEVsZW1lbnQiLCJoaWRlIiwic2hvdyIsIkNhbnZhc1JlbmRlcmVyIiwiY2xlYXJDYW52YXMiLCJkcHIiLCJkZXZpY2VQaXhlbFJhdGlvIiwiY3VycmVudEdsb2JhbEFscGhhIiwiY29udGV4dERhdGEiLCJDVkNvbnRleHREYXRhIiwidHJhbnNmb3JtTWF0IiwiQ1ZTaGFwZUVsZW1lbnQiLCJDVlRleHRFbGVtZW50IiwiQ1ZJbWFnZUVsZW1lbnQiLCJDVkNvbXBFbGVtZW50IiwiQ1ZTb2xpZEVsZW1lbnQiLCJjdHhUcmFuc2Zvcm0iLCJjYW52YXNDb250ZXh0IiwiY1Byb3BzIiwiY1RyIiwidHJQcm9wcyIsImN0eE9wYWNpdHkiLCJnbG9iYWxBbHBoYSIsImNPIiwicmVzdG9yZSIsInNhdmUiLCJhY3Rpb25GbGFnIiwiY0FyclBvcyIsImR1cGxpY2F0ZSIsInNhdmVkIiwic2F2ZWRPcCIsImJsZW5kTW9kZSIsInBvcHBlZCIsImNvbnRhaW5lclN0eWxlIiwibW96VHJhbnNmb3JtT3JpZ2luIiwidHJhbnNmb3JtQ2FudmFzIiwiaXNEYXNoZWQiLCJlbGVtZW50V2lkdGgiLCJlbGVtZW50SGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiZWxlbWVudFJlbCIsImFuaW1hdGlvblJlbCIsInBhciIsImZpbGxUeXBlIiwiYmVnaW5QYXRoIiwiY2xvc2VQYXRoIiwiY2xpcCIsImNsZWFyUmVjdCIsIkh5YnJpZFJlbmRlcmVyIiwidGhyZWVERWxlbWVudHMiLCJjYW1lcmEiLCJzdXBwb3J0czNkIiwibmV3RE9NRWxlbWVudCIsImRkZCIsImFkZFRvM2RDb250YWluZXIiLCJuZXh0RE9NRWxlbWVudCIsIm5leHRMYXllciIsInRtcERPTUVsZW1lbnQiLCJnZXRUaHJlZURDb250YWluZXJCeVBvcyIsIkhTaGFwZUVsZW1lbnQiLCJIVGV4dEVsZW1lbnQiLCJIQ2FtZXJhRWxlbWVudCIsIkhJbWFnZUVsZW1lbnQiLCJIQ29tcEVsZW1lbnQiLCJIU29saWRFbGVtZW50Iiwic3RhcnRQb3MiLCJlbmRQb3MiLCJwZXJzcGVjdGl2ZUVsZW0iLCJjcmVhdGVUaHJlZURDb250YWluZXIiLCJjZW50ZXIiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJ0aHJlZURDb250YWluZXJEYXRhIiwiYnVpbGQzZENvbnRhaW5lcnMiLCJsYXN0VGhyZWVEQ29udGFpbmVyRGF0YSIsImN1cnJlbnRDb250YWluZXIiLCJyZXNpemVyRWxlbSIsInNldHVwIiwiY1dpZHRoIiwiY0hlaWdodCIsIndlYmtpdFBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmUiLCJmbG9hdGluZ0NvbnRhaW5lciIsIk1hc2tFbGVtZW50Iiwidmlld0RhdGEiLCJzb2xpZFBhdGgiLCJjdXJyZW50TWFza3MiLCJleHBhbnNvciIsImZlTW9ycGgiLCJtYXNrUmVmIiwibGFzdFBhdGgiLCJmaWx0ZXJJRCIsImV4cGFuIiwibGFzdE9wZXJhdG9yIiwiZmlsdGVySWQiLCJsYXN0UmFkaXVzIiwiY3JlYXRlTGF5ZXJTb2xpZFBhdGgiLCJpbnZSZWN0IiwiZHJhd1BhdGgiLCJtYXNrZWRFbGVtZW50IiwiYWRkUmVuZGVyYWJsZUNvbXBvbmVudCIsImlzRmlyc3RGcmFtZSIsImZpbmFsTWF0IiwiZmluYWxUcmFuc2Zvcm0iLCJtUHJvcCIsImdldE1hc2tlbGVtZW50IiwicGF0aFN0cmluZyIsInBhdGhTaGFwZVZhbHVlIiwiSGllcmFyY2h5RWxlbWVudCIsImluaXRIaWVyYXJjaHkiLCJfaXNQYXJlbnQiLCJGcmFtZUVsZW1lbnQiLCJwcmVwYXJlUHJvcGVydGllcyIsImlzVmlzaWJsZSIsIlRyYW5zZm9ybUVsZW1lbnQiLCJpbml0VHJhbnNmb3JtIiwiX21hdE1kZiIsIl9vcE1kZiIsImFvIiwicmVuZGVyVHJhbnNmb3JtIiwiZ2xvYmFsVG9Mb2NhbCIsInRyYW5zZm9ybXMiLCJwdE5ldyIsIlJlbmRlcmFibGVFbGVtZW50IiwiaW5pdFJlbmRlcmFibGUiLCJpc0luUmFuZ2UiLCJoaWRkZW4iLCJpc1RyYW5zcGFyZW50IiwicmVuZGVyYWJsZUNvbXBvbmVudHMiLCJjb21wb25lbnQiLCJyZW1vdmVSZW5kZXJhYmxlQ29tcG9uZW50IiwicHJlcGFyZVJlbmRlcmFibGVGcmFtZSIsImNoZWNrTGF5ZXJMaW1pdHMiLCJjaGVja1RyYW5zcGFyZW5jeSIsInJlbmRlclJlbmRlcmFibGUiLCJzb3VyY2VSZWN0QXRUaW1lIiwiZ2V0TGF5ZXJTaXplIiwiUmVuZGVyYWJsZURPTUVsZW1lbnQiLCJfcHJvdG90eXBlIiwiaW5pdEVsZW1lbnQiLCJpbml0QmFzZURhdGEiLCJpbml0UmVuZGVyZXJFbGVtZW50IiwiY3JlYXRlQ29udGFpbmVyRWxlbWVudHMiLCJjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cyIsImNyZWF0ZUNvbnRlbnQiLCJiYXNlRWxlbWVudCIsImhkIiwicmVuZGVyRWxlbWVudCIsInJlbmRlcklubmVyQ29udGVudCIsImlubmVyRWxlbSIsImRlc3Ryb3lCYXNlRWxlbWVudCIsIlByb2Nlc3NlZEVsZW1lbnQiLCJTVkdTdHlsZURhdGEiLCJsZXZlbCIsImx2bCIsInBFbGVtIiwibXNFbGVtIiwiU1ZHU2hhcGVEYXRhIiwidHJhbnNmb3JtZXJzIiwiY2FjaGVzIiwibFN0ciIsIlNWR1RyYW5zZm9ybURhdGEiLCJTVkdTdHJva2VTdHlsZURhdGEiLCJzdHlsZU9iIiwiU1ZHRmlsbFN0eWxlRGF0YSIsIlNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YSIsImluaXRHcmFkaWVudERhdGEiLCJzdG9wcyIsInNldEdyYWRpZW50RGF0YSIsInNldEdyYWRpZW50T3BhY2l0eSIsInBhdGhFbGVtZW50IiwiZ3JhZGllbnRJZCIsImdmaWxsIiwic3RvcCIsImdmIiwiY3N0Iiwib3BhY2l0eUlkIiwib3BGaWxsIiwibXMiLCJvc3QiLCJTVkdHcmFkaWVudFN0cm9rZVN0eWxlRGF0YSIsIlNoYXBlR3JvdXBEYXRhIiwicHJldlZpZXdEYXRhIiwiZ3IiLCJTVkdFbGVtZW50c1JlbmRlcmVyIiwiX2lkZW50aXR5TWF0cml4IiwiX21hdHJpeEhlbHBlciIsImNyZWF0ZVJlbmRlckZ1bmN0aW9uIiwicmVuZGVyRmlsbCIsInJlbmRlckdyYWRpZW50IiwicmVuZGVyR3JhZGllbnRTdHJva2UiLCJyZW5kZXJTdHJva2UiLCJyZW5kZXJQYXRoIiwicmVuZGVyQ29udGVudFRyYW5zZm9ybSIsInN0eWxlRGF0YSIsIml0ZW1EYXRhIiwicGF0aFN0cmluZ1RyYW5zZm9ybWVkIiwicmVkcmF3IiwibExlbiIsIml0ZXJhdGlvbnMiLCJzdHlsZUVsZW0iLCJoYXNPcGFjaXR5IiwiYXR0cjEiLCJhdHRyMiIsImNWYWx1ZXMiLCJvVmFsdWVzIiwiYW5nIiwiU2hhcGVUcmFuc2Zvcm1NYW5hZ2VyIiwic2VxdWVuY2VzIiwic2VxdWVuY2VMaXN0IiwidHJhbnNmb3JtX2tleV9jb3VudCIsImFkZFRyYW5zZm9ybVNlcXVlbmNlIiwic2VxdWVuY2UiLCJwcm9jZXNzU2VxdWVuY2UiLCJwcm9jZXNzU2VxdWVuY2VzIiwiZ2V0TmV3S2V5IiwiQ1ZTaGFwZURhdGEiLCJ0cmFuc2Zvcm1zTWFuYWdlciIsInN0eWxlZFNoYXBlcyIsInN0eWxlZFNoYXBlIiwidHJOb2RlcyIsIkJhc2VFbGVtZW50IiwiY2hlY2tNYXNrcyIsImxheWVySW50ZXJmYWNlIiwiTGF5ZXJFeHByZXNzaW9uSW50ZXJmYWNlIiwicmVnaXN0ZXJNYXNrSW50ZXJmYWNlIiwiZWZmZWN0c0ludGVyZmFjZSIsIkVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlIiwiY3JlYXRlRWZmZWN0c0ludGVyZmFjZSIsInJlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZSIsImNvbXBJbnRlcmZhY2UiLCJDb21wRXhwcmVzc2lvbkludGVyZmFjZSIsInNoYXBlSW50ZXJmYWNlIiwiU2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlIiwic2hhcGVzRGF0YSIsIml0ZW1zRGF0YSIsInRleHRJbnRlcmZhY2UiLCJUZXh0RXhwcmVzc2lvbkludGVyZmFjZSIsInNldEJsZW5kTW9kZSIsImJsZW5kTW9kZVZhbHVlIiwiYm0iLCJzciIsImVmZmVjdHNNYW5hZ2VyIiwiRWZmZWN0c01hbmFnZXIiLCJnZXRUeXBlIiwiU1ZHQmFzZUVsZW1lbnQiLCJtYXR0ZUVsZW1lbnQiLCJ0cmFuc2Zvcm1lZEVsZW1lbnQiLCJfc2l6ZUNoYW5nZWQiLCJsYXllckVsZW1lbnRQYXJlbnQiLCJnZyIsIm1hc2tlciIsIm1hc2tHcm91cCIsIm1hc2tHcm91cGVyIiwiZmVDVHIiLCJmZUZ1bmMiLCJhbHBoYVJlY3QiLCJsbiIsImNwIiwiY2xpcElkIiwiY3BHcm91cCIsInJlbmRlcmFibGVFZmZlY3RzTWFuYWdlciIsIlNWR0VmZmVjdHMiLCJJU2hhcGVFbGVtZW50IiwiYWRkU2hhcGVUb01vZGlmaWVycyIsInNoYXBlTW9kaWZpZXJzIiwiaXNTaGFwZUluQW5pbWF0ZWRNb2RpZmllcnMiLCJpc0FuaW1hdGVkV2l0aFNoYXBlIiwicmVuZGVyTW9kaWZpZXJzIiwic2hvdWxkQnJlYWtQcm9jZXNzIiwibGNFbnVtIiwibGpFbnVtIiwic2VhcmNoUHJvY2Vzc2VkRWxlbWVudCIsInByb2Nlc3NlZEVsZW1lbnRzIiwiYWRkUHJvY2Vzc2VkRWxlbWVudCIsIklUZXh0RWxlbWVudCIsInRleHRBbmltYXRvciIsImJ1aWxkTmV3VGV4dCIsImNyZWF0ZVBhdGhTaGFwZSIsInNoYXBlU3RyIiwiX2ZvbnRTaXplIiwiYXBwbHlUZXh0UHJvcGVydGllc1RvTWF0cml4IiwibGluZU51bWJlciIsImJ1aWxkQ29sb3IiLCJjb2xvckRhdGEiLCJlbXB0eVByb3AiLCJJQ29tcEVsZW1lbnQiLCJfcGxhY2Vob2xkZXIiLCJ0aW1lUmVtYXBwZWQiLCJzZXRFbGVtZW50cyIsImdldEVsZW1lbnRzIiwiZGVzdHJveUVsZW1lbnRzIiwic291cmNlUmVjdCIsInByIiwiX2lzUGxheWluZyIsIl9jYW5QbGF5IiwiX2N1cnJlbnRUaW1lIiwidm9sdW1lVmFsdWUiLCJ0ZXh0U3BhbnMiLCJ0ZXh0Q29udGFpbmVyIiwiYnVpbGRUZXh0Q29udGVudHMiLCJ0ZXh0QXJyYXkiLCJ0ZXh0Q29udGVudHMiLCJjdXJyZW50VGV4dENvbnRlbnQiLCJ1c2VzR2x5cGhzIiwidFNwYW4iLCJ0RWxlbWVudCIsImp1c3RpZnkiLCJjYWNoZWRTcGFuc0xlbmd0aCIsInRleHRCb3giLCJiYm94IiwicmVuZGVyZWRMZXR0ZXIiLCJ0ZXh0U3BhbiIsInN0eWxlc0xpc3QiLCJhbmltYXRlZENvbnRlbnRzIiwiaW5pdFNlY29uZGFyeUVsZW1lbnQiLCJpZGVudGl0eU1hdHJpeCIsImJ1aWxkRXhwcmVzc2lvbkludGVyZmFjZSIsInNlYXJjaFNoYXBlcyIsImZpbHRlclVuaXF1ZVNoYXBlcyIsInRlbXBTaGFwZXMiLCJhcmVBbmltYXRlZCIsInNldFNoYXBlc0FzQW5pbWF0ZWQiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJlbGVtZW50RGF0YSIsIkdyYWRpZW50Q29uc3RydWN0b3IiLCJsYyIsImxqIiwibWwiLCJhZGRUb0FuaW1hdGVkQ29udGVudHMiLCJjcmVhdGVHcm91cEVsZW1lbnQiLCJjcmVhdGVUcmFuc2Zvcm1FbGVtZW50IiwidHJhbnNmb3JtUHJvcGVydHkiLCJjcmVhdGVTaGFwZUVsZW1lbnQiLCJvd25UcmFuc2Zvcm1lcnMiLCJzaGFwZVByb3BlcnR5Iiwic2V0RWxlbWVudFN0eWxlcyIsIm93blN0eWxlcyIsIm93bk1vZGlmaWVycyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJtb2RpZmllciIsInByb2Nlc3NlZFBvcyIsInJlbmRlclNoYXBlIiwiYW5pbWF0ZWRDb250ZW50IiwiU1ZHVGludEZpbHRlciIsImZpbHRlck1hbmFnZXIiLCJtYXRyaXhGaWx0ZXIiLCJlZmZlY3RFbGVtZW50cyIsImZlTWVyZ2UiLCJmZU1lcmdlTm9kZSIsImNvbG9yQmxhY2siLCJjb2xvcldoaXRlIiwib3BhY2l0eSIsIlNWR0ZpbGxGaWx0ZXIiLCJTVkdHYXVzc2lhbkJsdXJFZmZlY3QiLCJmZUdhdXNzaWFuQmx1ciIsImtCbHVycmluZXNzVG9TaWdtYSIsInNpZ21hIiwiZGltZW5zaW9ucyIsInNpZ21hWCIsInNpZ21hWSIsImVkZ2VNb2RlIiwiU1ZHU3Ryb2tlRWZmZWN0IiwiaW5pdGlhbGl6ZWQiLCJlbGVtQ2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwiZ3JvdXBQYXRoIiwicGF0aE1hc2tlciIsImRhc2hhcnJheVZhbHVlIiwiZ2V0VG90YWxMZW5ndGgiLCJsaW5lTGVuZ3RoIiwidW5pdHMiLCJTVkdUcml0b25lRmlsdGVyIiwiZmVDb21wb25lbnRUcmFuc2ZlciIsImZlRnVuY1IiLCJmZUZ1bmNHIiwiZmVGdW5jQiIsImNvbG9yMSIsImNvbG9yMiIsImNvbG9yMyIsInRhYmxlUiIsInRhYmxlRyIsInRhYmxlQiIsIlNWR1Byb0xldmVsc0ZpbHRlciIsImNyZWF0ZUZlRnVuYyIsImZlRnVuY0EiLCJmZUZ1bmNSQ29tcG9zZWQiLCJmZUZ1bmNHQ29tcG9zZWQiLCJmZUZ1bmNCQ29tcG9zZWQiLCJnZXRUYWJsZVZhbHVlIiwiaW5wdXRCbGFjayIsImlucHV0V2hpdGUiLCJnYW1tYSIsIm91dHB1dEJsYWNrIiwib3V0cHV0V2hpdGUiLCJ0YWJsZSIsImNvbG9yVmFsdWUiLCJvdXRwdXREZWx0YSIsImlucHV0RGVsdGEiLCJTVkdEcm9wU2hhZG93RWZmZWN0IiwiZmVPZmZzZXQiLCJmZUZsb29kIiwiZmVDb21wb3NpdGUiLCJvcmlnaW5hbE5vZGVBZGRlZCIsImNvbCIsIl9zdmdNYXR0ZVN5bWJvbHMiLCJTVkdNYXR0ZTNFZmZlY3QiLCJmaWx0ZXJFbGVtIiwiZmluZFN5bWJvbCIsInJlcGxhY2VJblBhcmVudCIsInN5bWJvbElkIiwibmV4dENoaWxkIiwidXNlRWxlbSIsInNldEVsZW1lbnRBc01hc2siLCJzeW1ib2wiLCJlZiIsImZpbHRlcnMiLCJuZXdMZW5ndGgiLCJjdXJyZW50U2F2ZWRPcCIsIkNWQmFzZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50cyIsIkNWRWZmZWN0cyIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsIkNWTWFza0VsZW1lbnQiLCJoaWRlRWxlbWVudCIsInNob3dFbGVtZW50IiwiZm9yY2VSZWFsU3RhY2siLCJoYXNNYXNrcyIsImltZ1ciLCJpbWdIIiwiaW1nUmVsIiwiY2FudmFzUmVsIiwid2lkdGhDcm9wIiwiaGVpZ2h0Q3JvcCIsImRyYXdJbWFnZSIsIm1vdmVUbyIsImxpbmVUbyIsImJlemllckN1cnZlVG8iLCJ0cmFuc2Zvcm1IZWxwZXIiLCJkYXNoUmVzZXR0ZXIiLCJwcmVUcmFuc2Zvcm1zIiwiY28iLCJ3aSIsImRhIiwiZG8iLCJhZGRUcmFuc2Zvcm1Ub1N0eWxlTGlzdCIsInJlbW92ZVRyYW5zZm9ybUZyb21TdHlsZUxpc3QiLCJjbG9zZVN0eWxlcyIsInNob3VsZFJlbmRlciIsIm93blRyYW5zZm9ybXMiLCJfc2hvdWxkUmVuZGVyIiwicmVuZGVyU2hhcGVUcmFuc2Zvcm0iLCJwYXJlbnRUcmFuc2Zvcm0iLCJncm91cFRyYW5zZm9ybSIsImRyYXdMYXllciIsImN1cnJlbnRTdHlsZSIsImNvT3AiLCJzdHJva2VTdHlsZSIsImdyZCIsImxpbmVDYXAiLCJsaW5lSm9pbiIsIm1pdGVyTGltaXQiLCJzZXRMaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0Iiwic3Ryb2tlIiwiZmlsbCIsImlzTWFpbiIsInJlbmRlckdyYWRpZW50RmlsbCIsInJlbmRlclN0eWxlZFNoYXBlIiwic2hhcGVOb2RlcyIsImdyb3VwVHJhbnNmb3JtTWF0IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsImN1cnJlbnRSZW5kZXIiLCJzV2lkdGgiLCJmVmFsdWUiLCJoYXNGaWxsIiwiaGFzU3Ryb2tlIiwiY29tbWFuZHMiLCJwYXRoQXJyIiwibGFzdEZpbGwiLCJsYXN0U3Ryb2tlIiwibGFzdFN0cm9rZVciLCJIQmFzZUVsZW1lbnQiLCJjaGVja0JsZW5kTW9kZSIsInRnIiwidHJhbnNmb3JtZWRFbGVtZW50U3R5bGUiLCJtYXRyaXhWYWx1ZSIsImFkZEVmZmVjdHMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJfY3JlYXRlQmFzZUNvbnRhaW5lckVsZW1lbnRzIiwic2hhcGVzQ29udGFpbmVyIiwiY3VycmVudEJCb3giLCJfcmVuZGVyU2hhcGVGcmFtZSIsInNoYXBlQ29udCIsImdldFRyYW5zZm9ybWVkUG9pbnQiLCJjYWxjdWxhdGVTaGFwZUJvdW5kaW5nQm94IiwiYm91bmRpbmdCb3giLCJ2UG9pbnQiLCJvUG9pbnQiLCJuZXh0SVBvaW50IiwibmV4dFZQb2ludCIsImNoZWNrQm91bmRzIiwiZ2V0Qm91bmRzT2ZDdXJ2ZSIsImJvdW5kcyIsInNoYXBlQm91bmRpbmdCb3giLCJ4TWF4IiwieU1heCIsImJvdHRvbSIsInRlbXBCb3VuZGluZ0JveCIsInAzIiwiYjJhYyIsInQyIiwiY2FsY3VsYXRlRiIsImNhbGN1bGF0ZUJvdW5kaW5nQm94IiwiY3VycmVudEJveENvbnRhaW5zIiwiY2hhbmdlZCIsInNoYXBlU3R5bGUiLCJzaGFwZVRyYW5zZm9ybSIsInRleHRQYXRocyIsImlzTWFza2VkIiwiY29tcFciLCJjb21wSCIsImlubmVyRWxlbVN0eWxlIiwidGV4dENvbG9yIiwic3Ryb2tlV2lkdGgiLCJsaW5lSGVpZ2h0IiwidFBhcmVudCIsInRDb250IiwidENvbnRTdHlsZSIsInRDb250VHJhbnNsYXRpb24iLCJ0U3R5bGUiLCJ0U3BhblRyYW5zbGF0aW9uIiwic3ZnU3R5bGUiLCJ0cmFuc2xhdGlvbiIsInRleHRQYXRoIiwibWFyZ2luIiwic3ZnVHJhbnNmb3JtIiwiSW1hZ2UiLCJpbWFnZUVsZW0iLCJwZSIsIl9wcmV2TWF0IiwicGVyc3BlY3RpdmVTdHlsZSIsIm1UcmFuc2YiLCJkaWZmVmVjdG9yIiwibWFnIiwibG9va0RpciIsImxvb2tMZW5ndGhPblhaIiwibVJvdGF0aW9uWCIsIm1Sb3RhdGlvblkiLCJoYXNNYXRyaXhDaGFuZ2VkIiwibWF0VmFsdWUiLCJIRWZmZWN0cyIsImFuaW1hdGlvbk1hbmFnZXIiLCJyZWdpc3RlcmVkQW5pbWF0aW9ucyIsInBsYXlpbmdBbmltYXRpb25zTnVtIiwiX3N0b3BwZWQiLCJfaXNGcm96ZW4iLCJyZW1vdmVFbGVtZW50IiwiZXYiLCJhbmltSXRlbSIsImFuaW1hdGlvbiIsImlzUGF1c2VkIiwic3VidHJhY3RQbGF5aW5nQ291bnQiLCJyZWdpc3RlckFuaW1hdGlvbiIsIkFuaW1hdGlvbkl0ZW0iLCJzZXR1cEFuaW1hdGlvbiIsInNldERhdGEiLCJnZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyIsImxlbkFuaW1zIiwiYW5pbWF0aW9ucyIsImFkZFBsYXlpbmdDb3VudCIsImFjdGl2YXRlIiwibG9hZEFuaW1hdGlvbiIsInBhcmFtcyIsInNldFBhcmFtcyIsInNldFNwZWVkIiwic2V0RGlyZWN0aW9uIiwibm93VGltZSIsImVsYXBzZWRUaW1lIiwiYWR2YW5jZVRpbWUiLCJmaXJzdCIsImdvVG9BbmRTdG9wIiwiaXNGcmFtZSIsInRvZ2dsZVBhdXNlIiwic2VhcmNoQW5pbWF0aW9ucyIsInN0YW5kYWxvbmUiLCJhbmltRWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJkaXYiLCJyZXNpemUiLCJ1bmZyZWV6ZSIsImN1cnJlbnRSYXdGcmFtZSIsImZyYW1lTXVsdCIsInBsYXlTcGVlZCIsInBsYXlEaXJlY3Rpb24iLCJwbGF5Q291bnQiLCJhdXRvcGxheSIsImxvb3AiLCJhbmltYXRpb25JRCIsInRpbWVDb21wbGV0ZWQiLCJzZWdtZW50UG9zIiwiaXNTdWJmcmFtZUVuYWJsZWQiLCJfaWRsZSIsIl9jb21wbGV0ZWRMb29wIiwiYW5pbVR5cGUiLCJyZW5kZXJlclNldHRpbmdzIiwicGFyc2VJbnQiLCJhdXRvbG9hZFNlZ21lbnRzIiwiaW5pdGlhbFNlZ21lbnQiLCJmaWxlTmFtZSIsInRyaWdnZXIiLCJ3cmFwcGVyQXR0cmlidXRlcyIsImdldE5hbWVkSXRlbSIsInByZXJlbmRlciIsImxvYWROZXh0U2VnbWVudCIsInNlZ21lbnRQYXRoIiwibG9hZFNlZ21lbnRzIiwiaW1hZ2VzTG9hZGVkIiwiY2hlY2tMb2FkZWQiLCJwcmVsb2FkSW1hZ2VzIiwidXBkYUZyYW1lTW9kaWZpZXIiLCJ3YWl0Rm9yRm9udHNMb2FkZWQiLCJ0cmlnZ2VyQ29uZmlnRXJyb3IiLCJnb3RvRnJhbWUiLCJzZXRTdWJmcmFtZSIsInRyaWdnZXJSZW5kZXJGcmFtZUVycm9yIiwic2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUiLCJnZXRNYXJrZXJEYXRhIiwibWFya2VyTmFtZSIsIm51bVZhbHVlIiwiaXNOYU4iLCJmcmFtZU1vZGlmaWVyIiwiZ29Ub0FuZFBsYXkiLCJwbGF5U2VnbWVudHMiLCJuZXh0VmFsdWUiLCJfaXNDb21wbGV0ZSIsImNoZWNrU2VnbWVudHMiLCJhZGp1c3RTZWdtZW50Iiwic2V0U2VnbWVudCIsInBlbmRpbmdGcmFtZSIsImZvcmNlRmxhZyIsInJlc2V0U2VnbWVudHMiLCJvbkVudGVyRnJhbWUiLCJvbkxvb3BDb21wbGV0ZSIsIm9uQ29tcGxldGUiLCJvblNlZ21lbnRTdGFydCIsIm9uRGVzdHJveSIsImdldFBhdGgiLCJnZXREdXJhdGlvbiIsIm9uRXJyb3IiLCJFeHByZXNzaW9ucyIsInN0YWNrQ291bnQiLCJyZWdpc3RlcnMiLCJwdXNoRXhwcmVzc2lvbiIsInBvcEV4cHJlc3Npb24iLCJyZWxlYXNlSW5zdGFuY2VzIiwicmVnaXN0ZXJFeHByZXNzaW9uUHJvcGVydHkiLCJleHByZXNzaW9uIiwiRXhwcmVzc2lvbk1hbmFnZXIiLCIkYm1faXNJbnN0YW5jZU9mQXJyYXkiLCJpc051bWVyYWJsZSIsInRPZlYiLCIkYm1fbmVnIiwidE9mQSIsImxlbkEiLCJyZXRBcnIiLCJlYXNlSW5CZXoiLCJlYXNlT3V0QmV6IiwiZWFzZUluT3V0QmV6Iiwic3VtIiwidE9mQiIsImxlbkIiLCJzdWIiLCJtdWwiLCIkYm1fc3VtIiwiJGJtX3N1YiIsIiRibV9tdWwiLCIkYm1fZGl2IiwiJGJtX21vZCIsImNsYW1wIiwibW0iLCJyYWRpYW5zVG9EZWdyZWVzIiwicmFkaWFuc190b19kZWdyZWVzIiwiZGVncmVlc1RvUmFkaWFucyIsImRlZ3JlZXNfdG9fcmFkaWFucyIsImhlbHBlckxlbmd0aEFycmF5IiwiYXJyMSIsIm5vcm1hbGl6ZSIsInZlYyIsInJnYlRvSHNsIiwiaHVlMnJnYiIsImhzbFRvUmdiIiwibGluZWFyIiwidE1pbiIsInRNYXgiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJfdE1pbiIsInJuZCIsInJuZG0iLCJjcmVhdGVQYXRoIiwiaW5UYW5nZW50cyIsIm91dFRhbmdlbnRzIiwiYXJyUGxhY2Vob2xkZXIiLCJpblZlcnRleFBvaW50Iiwib3V0VmVydGV4UG9pbnQiLCJpbml0aWF0ZUV4cHJlc3Npb24iLCJuZWVkc1ZlbG9jaXR5IiwiX25lZWRzUmFuZG9tIiwiZWxlbVR5cGUiLCIkYm1fdHJhbnNmb3JtIiwiZWZmZWN0IiwidGhpc1Byb3BlcnR5IiwidmFsdWVBdFRpbWUiLCJmcmFtZUR1cmF0aW9uIiwiZGlzcGxheVN0YXJ0VGltZSIsImluUG9pbnQiLCJvdXRQb2ludCIsImxvb3BJbiIsImxvb3BfaW4iLCJsb29wT3V0IiwibG9vcF9vdXQiLCJzbW9vdGgiLCJ0b1dvcmxkIiwiZnJvbVdvcmxkIiwiZnJvbUNvbXAiLCJ0b0NvbXAiLCJmcm9tQ29tcFRvU3VyZmFjZSIsInJvdGF0aW9uIiwiYW5jaG9yUG9pbnQiLCJ0aGlzTGF5ZXIiLCJ0aGlzQ29tcCIsInZlbG9jaXR5QXRUaW1lIiwic2NvcGVkX2JtX3J0IiwiZXhwcmVzc2lvbl9mdW5jdGlvbiIsImV2YWwiLCJudW1LZXlzIiwiYWN0aXZlIiwid2lnZ2xlIiwiZnJlcSIsImFtcCIsImlXaWdnbGUiLCJsZW5XaWdnbGUiLCJhZGRlZEFtcHMiLCJwZXJpb2RzIiwibG9vcEluRHVyYXRpb24iLCJsb29wT3V0RHVyYXRpb24iLCJnZXRWZWxvY2l0eUF0VGltZSIsImxvb2tBdCIsImVsZW0xIiwiZWxlbTIiLCJmVmVjIiwicGl0Y2giLCJ5YXciLCJlYXNlT3V0IiwidmFsMSIsInZhbDIiLCJhcHBseUVhc2UiLCJlYXNlSW4iLCJlYXNlIiwiaUtleSIsImxlbktleSIsIm5lYXJlc3RLZXkiLCJvYktleSIsImZyYW1lc1RvVGltZSIsImZyYW1lcyIsImZwcyIsInRpbWVUb0ZyYW1lcyIsInNlZWRSYW5kb20iLCJyYW5kU2VlZCIsInN1YnN0cmluZyIsInBvc3Rlcml6ZVRpbWUiLCJmcmFtZXNQZXJTZWNvbmQiLCJ2ZWxvY2l0eSIsInRleHRJbmRleCIsInRleHRUb3RhbCIsInNlbGVjdG9yVmFsdWUiLCJoYXNQYXJlbnQiLCJleGVjdXRlRXhwcmVzc2lvbiIsIl92YWx1ZSIsImZyYW1lRXhwcmVzc2lvbklkIiwiZXhwcmVzc2lvbkhlbHBlcnMiLCJzZWFyY2hFeHByZXNzaW9ucyIsIl9jYWNoaW5nQXRUaW1lIiwiZ2V0U3BlZWRBdFRpbWUiLCJkZWx0YSIsInNwZWVkIiwiZ2V0U3RhdGljVmFsdWVBdFRpbWUiLCJzZXRHcm91cFByb3BlcnR5IiwicHJvcGVydHlHcm91cCIsImFkZFByb3BlcnR5RGVjb3JhdG9yIiwiZHVyYXRpb25GbGFnIiwibGFzdEtleUZyYW1lIiwiY3ljbGVEdXJhdGlvbiIsImZpcnN0S2V5RnJhbWUiLCJyZXQiLCJpbml0ViIsImVuZFYiLCJjdXJyZW50IiwicmVwZWF0cyIsImxhc3RWYWx1ZSIsIm5leHRMYXN0VmFsdWUiLCJmaXJzdFZhbHVlIiwibmV4dEZpcnN0VmFsdWUiLCJzYW1wbGVzIiwiZW5kRnJhbWUiLCJzYW1wbGVGcmVxdWVuY3kiLCJzYW1wbGVWYWx1ZSIsImdldFRyYW5zZm9ybVZhbHVlQXRUaW1lIiwiX3RyYW5zZm9ybUNhY2hpbmdBdFRpbWUiLCJhbmNob3IiLCJza2V3QXhpcyIsInJvdGF0aW9uWiIsInJvdGF0aW9uWSIsInJvdGF0aW9uWCIsIm9yaWVudGF0aW9uIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwicG9zaXRpb25aIiwiZ2V0VHJhbnNmb3JtU3RhdGljVmFsdWVBdFRpbWUiLCJwcm9wZXJ0eUdldFByb3AiLCJwcm9wZXJ0eUluZGV4IiwiZ2V0U2hhcGVWYWx1ZUF0VGltZSIsInNoYXBlVmFsdWUiLCJTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbiIsIktleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiU2hhcGVFeHByZXNzaW9ucyIsImlzQ2xvc2VkIiwicG9pbnRPblBhdGgiLCJfc2VnbWVudHNMZW5ndGgiLCJhY2N1bXVsYXRlZExlbmd0aCIsImluaXRJbmRleCIsImVuZEluZGV4IiwidmVjdG9yT25QYXRoIiwidmVjdG9yVHlwZSIsInhMZW5ndGgiLCJ5TGVuZ3RoIiwibWFnbml0dWRlIiwidW5pdFZlY3RvciIsInRhbmdlbnRPblBhdGgiLCJub3JtYWxPblBhdGgiLCJwcm9wZXJ0eUdldFNoYXBlUHJvcCIsInRyaW1zIiwiYWRkRGVjb3JhdG9yIiwiY2FsY3VsYXRlRXhwcmVzc2lvbiIsImdldEV4cHJlc3Npb25WYWx1ZSIsImlzS2V5ZnJhbWVkIiwiaGFzRXhwcmVzc2lvbnMiLCJTaGFwZVBhdGhJbnRlcmZhY2UiLCJwYXRoSW50ZXJmYWNlRmFjdG9yeSIsInZpZXciLCJpbnRlcmZhY2VGdW5jdGlvbiIsIl9wcm9wZXJ0eUdyb3VwIiwicHJvcGVydHlHcm91cEZhY3RvcnkiLCJQcm9wZXJ0eUludGVyZmFjZSIsIl9uYW1lIiwibW4iLCJwYXJlbnRQcm9wZXJ0eUdyb3VwIiwicHJvcGVydHlOYW1lIiwiaXRlcmF0ZUVsZW1lbnRzIiwiZ3JvdXBJbnRlcmZhY2VGYWN0b3J5IiwiZmlsbEludGVyZmFjZUZhY3RvcnkiLCJzdHJva2VJbnRlcmZhY2VGYWN0b3J5IiwidHJpbUludGVyZmFjZUZhY3RvcnkiLCJlbGxpcHNlSW50ZXJmYWNlRmFjdG9yeSIsInN0YXJJbnRlcmZhY2VGYWN0b3J5IiwicmVjdEludGVyZmFjZUZhY3RvcnkiLCJyb3VuZGVkSW50ZXJmYWNlRmFjdG9yeSIsInJlcGVhdGVySW50ZXJmYWNlRmFjdG9yeSIsImNvbnRlbnRzSW50ZXJmYWNlRmFjdG9yeSIsImludGVyZmFjZXMiLCJfaW50ZXJmYWNlRnVuY3Rpb24iLCJudW1Qcm9wZXJ0aWVzIiwidHJhbnNmb3JtSW50ZXJmYWNlIiwidHJhbnNmb3JtSW50ZXJmYWNlRmFjdG9yeSIsImNpeCIsIm5wIiwiRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlIiwiX2Rhc2hQcm9wZXJ0eUdyb3VwIiwiZGFzaE9iIiwiYWRkUHJvcGVydHlUb0Rhc2hPYiIsImRhc2giLCJvdXRlclJhZGl1cyIsIm91dGVyUm91bmRuZXNzIiwiaW5uZXJSYWRpdXMiLCJpbm5lclJvdW5kbmVzcyIsInJhZGl1cyIsInBhcmVudEdyb3VwV3JhcHBlciIsIl9wcmV2VmFsdWUiLCJfc291cmNlVGV4dCIsIl90aGlzTGF5ZXJGdW5jdGlvbiIsInNvdXJjZVRleHQiLCJzdHJpbmdWYWx1ZSIsImdldE1hdHJpeCIsInRvV29ybGRNYXQiLCJwcm9wTWF0cml4IiwidG9Xb3JsZFZlYyIsImFwcGx5UG9pbnQiLCJmcm9tV29ybGRWZWMiLCJpbnZlcnRQb2ludCIsInNhbXBsZUltYWdlIiwiX3JlZ2lzdGVyTWFza0ludGVyZmFjZSIsIk1hc2tNYW5hZ2VySW50ZXJmYWNlIiwiX3JlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZSIsImVmZmVjdHMiLCJUcmFuc2Zvcm1FeHByZXNzaW9uSW50ZXJmYWNlIiwiYW5jaG9yUG9pbnREZXNjcmlwdG9yIiwiYW5jaG9yX3BvaW50Iiwic3RhcnRUaW1lIiwicGl4ZWxBc3BlY3QiLCJudW1MYXllcnMiLCJfdGhpc0Z1bmN0aW9uIiwieFJvdGF0aW9uIiwieVJvdGF0aW9uIiwieFBvc2l0aW9uIiwieVBvc2l0aW9uIiwielBvc2l0aW9uIiwiX3B4IiwiX3B5IiwiX3B6IiwiX3RyYW5zZm9ybUZhY3RvcnkiLCJjb21wb3NpdGlvbnMiLCJfdGhpc1Byb2plY3RGdW5jdGlvbiIsImVmZmVjdHNEYXRhIiwiY3JlYXRlR3JvdXBJbnRlcmZhY2UiLCJncm91cEludGVyZmFjZSIsImNyZWF0ZVZhbHVlSW50ZXJmYWNlIiwiZW5hYmxlZCIsImVuIiwiZXhwcmVzc2lvblByb3BlcnR5IiwiTWFza0ludGVyZmFjZSIsIl9tYXNrIiwiX2RhdGEiLCJNYXNrTWFuYWdlciIsIl9tYXNrc0ludGVyZmFjZXMiLCJtYXNrRnVuY3Rpb24iLCJkZWZhdWx0VW5pZGltZW5zaW9uYWxWYWx1ZSIsImRlZmF1bHRNdWx0aWRpbWVuc2lvbmFsVmFsdWUiLCJjb21wbGV0ZVByb3BlcnR5IiwiZXhwcmVzc2lvblZhbHVlIiwidmFsdWVQcm9wIiwic3BlZWRBdFRpbWUiLCJVbmlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlIiwiTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlIiwiYXJyVmFsdWUiLCJkZWZhdWx0R2V0dGVyIiwiVGV4dEV4cHJlc3Npb25TZWxlY3RvclByb3AiLCJnZXRWYWx1ZVByb3h5IiwidG90YWwiLCJUZXh0RXhwcmVzc2lvblNlbGVjdG9yUHJvcEZhY3RvcnkiLCJwcm9wZXJ0eUdldFRleHRQcm9wIiwiU2xpZGVyRWZmZWN0IiwiQW5nbGVFZmZlY3QiLCJDb2xvckVmZmVjdCIsIlBvaW50RWZmZWN0IiwiTGF5ZXJJbmRleEVmZmVjdCIsIk1hc2tJbmRleEVmZmVjdCIsIkNoZWNrYm94RWZmZWN0IiwiTm9WYWx1ZUVmZmVjdCIsImVmZmVjdEl0ZW0iLCJHcm91cEVmZmVjdCIsImVmZiIsInNldExvY2F0aW9uSHJlZiIsInNldFN1YmZyYW1lUmVuZGVyaW5nIiwic2V0UXVhbGl0eSIsImluQnJvd3NlciIsImluc3RhbGxQbHVnaW4iLCJwbHVnaW4iLCJnZXRGYWN0b3J5IiwiX19nZXRGYWN0b3J5IiwidmVyc2lvbiIsImNoZWNrUmVhZHkiLCJyZWFkeVN0YXRlQ2hlY2tJbnRlcnZhbCIsImdldFF1ZXJ5VmFyaWFibGUiLCJ2YXJpYWJsZSIsInZhcnMiLCJxdWVyeVN0cmluZyIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzY3JpcHRzIiwibXlTY3JpcHQiLCJfdGVtcGxhdGVPYmplY3QkMSIsIl90ZW1wbGF0ZU9iamVjdCIsIl90ZW1wbGF0ZU9iamVjdDIiLCJfdGVtcGxhdGVPYmplY3QzIiwiX3RlbXBsYXRlT2JqZWN0NCIsIl90ZW1wbGF0ZU9iamVjdDUiLCJQbGF5ZXJTdGF0ZSIsIlBsYXlNb2RlIiwiUGxheWVyRXZlbnRzIiwicGFyc2VTcmMiLCJzcmNVcmwiLCJVUkwiLCJsb2NhdGlvbiIsIkxvdHRpZVBsYXllciIsIk5vcm1hbCIsImJhY2tncm91bmQiLCJjb250cm9scyIsImhvdmVyIiwiY3VycmVudFN0YXRlIiwiTG9hZGluZyIsImludGVybWlzc2lvbiIsIl9pbyIsIl9jb3VudGVyIiwiX29uVmlzaWJpbGl0eUNoYW5nZSIsIlBsYXlpbmciLCJGcm96ZW4iLCJfaGFuZGxlU2Vla0NoYW5nZSIsIl9sb3R0aWUiLCJmcmFtZSIsInNoYWRvd1Jvb3QiLCJzcmNQYXJzZWQiLCJzcmNBdHRyaWIiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJzZWVrZXIiLCJGcmFtZSIsImRldGFpbCIsIkNvbXBsZXRlIiwiQm91bmNlIiwiTG9vcCIsIlJlYWR5IiwiTG9hZCIsImdldExvdHRpZSIsIlBsYXkiLCJQYXVzZWQiLCJQYXVzZSIsIlN0b3BwZWQiLCJTdG9wIiwic25hcHNob3QiLCJkb3dubG9hZCIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudCIsImNsaWNrIiwiRnJlZXplIiwic2V0TG9vcGluZyIsInRvZ2dsZVBsYXkiLCJ0b2dnbGVMb29waW5nIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiaXNJbnRlcnNlY3RpbmciLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsInJlbmRlckNvbnRyb2xzIiwiaXNTdG9wcGVkIiwiX3ByZXZTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFFBQVNBLFFBQVQsQ0FBaUJDLEdBQWpCLENBQXNCLENBQ3BCLDBCQUVBLEdBQUksTUFBT0MsT0FBUCxHQUFrQixVQUFsQixFQUFnQyxNQUFPQSxPQUFNLENBQUNDLFFBQWQsR0FBMkIsUUFB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ay5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFO1xuXG5mdW5jdGlvbiBfanN4KHR5cGUsIHByb3BzLCBrZXksIGNoaWxkcmVuKSB7XG4gIGlmICghUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbFtcImZvclwiXSAmJiBTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpIHx8IDB4ZWFjNztcbiAgfVxuXG4gIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzO1xuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMztcblxuICBpZiAoIXByb3BzICYmIGNoaWxkcmVuTGVuZ3RoICE9PSAwKSB7XG4gICAgcHJvcHMgPSB7XG4gICAgICBjaGlsZHJlbjogdm9pZCAwXG4gICAgfTtcbiAgfVxuXG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBuZXcgQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAzXTtcbiAgICB9XG5cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICBpZiAocHJvcHMgJiYgZGVmYXVsdFByb3BzKSB7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB2b2lkIDApIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIXByb3BzKSB7XG4gICAgcHJvcHMgPSBkZWZhdWx0UHJvcHMgfHwge307XG4gIH1cblxuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6ICcnICsga2V5LFxuICAgIHJlZjogbnVsbCxcbiAgICBwcm9wczogcHJvcHMsXG4gICAgX293bmVyOiBudWxsXG4gIH07XG59XG5cbmZ1bmN0aW9uIF9hc3luY0l0ZXJhdG9yKGl0ZXJhYmxlKSB7XG4gIHZhciBtZXRob2Q7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpZiAoU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgICAgIG1ldGhvZCA9IGl0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcbiAgICAgIGlmIChtZXRob2QgIT0gbnVsbCkgcmV0dXJuIG1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICB9XG5cbiAgICBpZiAoU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICBtZXRob2QgPSBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgaWYgKG1ldGhvZCAhPSBudWxsKSByZXR1cm4gbWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgaXMgbm90IGFzeW5jIGl0ZXJhYmxlXCIpO1xufVxuXG5mdW5jdGlvbiBfQXdhaXRWYWx1ZSh2YWx1ZSkge1xuICB0aGlzLndyYXBwZWQgPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gX0FzeW5jR2VuZXJhdG9yKGdlbikge1xuICB2YXIgZnJvbnQsIGJhY2s7XG5cbiAgZnVuY3Rpb24gc2VuZChrZXksIGFyZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIGFyZzogYXJnLFxuICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICByZWplY3Q6IHJlamVjdCxcbiAgICAgICAgbmV4dDogbnVsbFxuICAgICAgfTtcblxuICAgICAgaWYgKGJhY2spIHtcbiAgICAgICAgYmFjayA9IGJhY2submV4dCA9IHJlcXVlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcm9udCA9IGJhY2sgPSByZXF1ZXN0O1xuICAgICAgICByZXN1bWUoa2V5LCBhcmcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzdW1lKGtleSwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXN1bHQgPSBnZW5ba2V5XShhcmcpO1xuICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgdmFyIHdyYXBwZWRBd2FpdCA9IHZhbHVlIGluc3RhbmNlb2YgX0F3YWl0VmFsdWU7XG4gICAgICBQcm9taXNlLnJlc29sdmUod3JhcHBlZEF3YWl0ID8gdmFsdWUud3JhcHBlZCA6IHZhbHVlKS50aGVuKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgaWYgKHdyYXBwZWRBd2FpdCkge1xuICAgICAgICAgIHJlc3VtZShrZXkgPT09IFwicmV0dXJuXCIgPyBcInJldHVyblwiIDogXCJuZXh0XCIsIGFyZyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0dGxlKHJlc3VsdC5kb25lID8gXCJyZXR1cm5cIiA6IFwibm9ybWFsXCIsIGFyZyk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJlc3VtZShcInRocm93XCIsIGVycik7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHNldHRsZShcInRocm93XCIsIGVycik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0dGxlKHR5cGUsIHZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwicmV0dXJuXCI6XG4gICAgICAgIGZyb250LnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInRocm93XCI6XG4gICAgICAgIGZyb250LnJlamVjdCh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBmcm9udC5yZXNvbHZlKHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGZyb250ID0gZnJvbnQubmV4dDtcblxuICAgIGlmIChmcm9udCkge1xuICAgICAgcmVzdW1lKGZyb250LmtleSwgZnJvbnQuYXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFjayA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5faW52b2tlID0gc2VuZDtcblxuICBpZiAodHlwZW9mIGdlbi5yZXR1cm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRoaXMucmV0dXJuID0gdW5kZWZpbmVkO1xuICB9XG59XG5cbmlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgX0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59XG5cbl9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIHRoaXMuX2ludm9rZShcIm5leHRcIiwgYXJnKTtcbn07XG5cbl9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUudGhyb3cgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiB0aGlzLl9pbnZva2UoXCJ0aHJvd1wiLCBhcmcpO1xufTtcblxuX0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiB0aGlzLl9pbnZva2UoXCJyZXR1cm5cIiwgYXJnKTtcbn07XG5cbmZ1bmN0aW9uIF93cmFwQXN5bmNHZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IF9Bc3luY0dlbmVyYXRvcihmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2F3YWl0QXN5bmNHZW5lcmF0b3IodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBfQXdhaXRWYWx1ZSh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIF9hc3luY0dlbmVyYXRvckRlbGVnYXRlKGlubmVyLCBhd2FpdFdyYXApIHtcbiAgdmFyIGl0ZXIgPSB7fSxcbiAgICAgIHdhaXRpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBwdW1wKGtleSwgdmFsdWUpIHtcbiAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICB2YWx1ZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlKGlubmVyW2tleV0odmFsdWUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogYXdhaXRXcmFwKHZhbHVlKVxuICAgIH07XG4gIH1cblxuICA7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICB9XG5cbiAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHVtcChcIm5leHRcIiwgdmFsdWUpO1xuICB9O1xuXG4gIGlmICh0eXBlb2YgaW5uZXIudGhyb3cgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGl0ZXIudGhyb3cgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh3YWl0aW5nKSB7XG4gICAgICAgIHdhaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhyb3cgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwdW1wKFwidGhyb3dcIiwgdmFsdWUpO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIGlubmVyLnJldHVybiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgaXRlci5yZXR1cm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh3YWl0aW5nKSB7XG4gICAgICAgIHdhaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHVtcChcInJldHVyblwiLCB2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpdGVyO1xufVxuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMob2JqLCBkZXNjcykge1xuICBmb3IgKHZhciBrZXkgaW4gZGVzY3MpIHtcbiAgICB2YXIgZGVzYyA9IGRlc2NzW2tleV07XG4gICAgZGVzYy5jb25maWd1cmFibGUgPSBkZXNjLmVudW1lcmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzYykgZGVzYy53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCBkZXNjKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIG9iamVjdFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGRlc2NzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0U3ltYm9scy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHN5bSA9IG9iamVjdFN5bWJvbHNbaV07XG4gICAgICB2YXIgZGVzYyA9IGRlc2NzW3N5bV07XG4gICAgICBkZXNjLmNvbmZpZ3VyYWJsZSA9IGRlc2MuZW51bWVyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIGRlc2Mud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgc3ltLCBkZXNjKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlZmF1bHRzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlZmF1bHRzLCBrZXkpO1xuXG4gICAgaWYgKHZhbHVlICYmIHZhbHVlLmNvbmZpZ3VyYWJsZSAmJiBvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBPYmplY3QoYXJndW1lbnRzW2ldKSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG5cbiAgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfaW5zdGFuY2VvZihsZWZ0LCByaWdodCkge1xuICBpZiAocmlnaHQgIT0gbnVsbCAmJiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIHJpZ2h0W1N5bWJvbC5oYXNJbnN0YW5jZV0pIHtcbiAgICByZXR1cm4gISFyaWdodFtTeW1ib2wuaGFzSW5zdGFuY2VdKGxlZnQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsZWZ0IGluc3RhbmNlb2YgcmlnaHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBkZWZhdWx0OiBvYmpcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7XG4gIHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWNoZTtcbiAgfTtcblxuICByZXR1cm4gY2FjaGU7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xuICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpO1xuXG4gIGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBjYWNoZS5nZXQob2JqKTtcbiAgfVxuXG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7XG5cbiAgICAgIGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG5cbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG5cbmZ1bmN0aW9uIF9uZXdBcnJvd0NoZWNrKGlubmVyVGhpcywgYm91bmRUaGlzKSB7XG4gIGlmIChpbm5lclRoaXMgIT09IGJvdW5kVGhpcykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgaW5zdGFudGlhdGUgYW4gYXJyb3cgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29iamVjdERlc3RydWN0dXJpbmdFbXB0eShvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGRlc3RydWN0dXJlIHVuZGVmaW5lZFwiKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHtcbiAgICB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksXG4gICAgICAgIHJlc3VsdDtcblxuICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7XG4gICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuXG4gICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7XG4gIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuICAgIF9nZXQgPSBSZWZsZWN0LmdldDtcbiAgfSBlbHNlIHtcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgICAgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTtcblxuICAgICAgaWYgKCFiYXNlKSByZXR1cm47XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTtcbn1cblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcikge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5zZXQpIHtcbiAgICBzZXQgPSBSZWZsZWN0LnNldDtcbiAgfSBlbHNlIHtcbiAgICBzZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuXG4gICAgICB2YXIgZGVzYztcblxuICAgICAgaWYgKGJhc2UpIHtcbiAgICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgICAgIGRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICghZGVzYy53cml0YWJsZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZWNlaXZlciwgcHJvcGVydHkpO1xuXG4gICAgICBpZiAoZGVzYykge1xuICAgICAgICBpZiAoIWRlc2Mud3JpdGFibGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBkZXNjLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwgcHJvcGVydHksIGRlc2MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xufVxuXG5mdW5jdGlvbiBfc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlciwgaXNTdHJpY3QpIHtcbiAgdmFyIHMgPSBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyIHx8IHRhcmdldCk7XG5cbiAgaWYgKCFzICYmIGlzU3RyaWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gc2V0IHByb3BlcnR5Jyk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7XG4gIGlmICghcmF3KSB7XG4gICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHtcbiAgICByYXc6IHtcbiAgICAgIHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdylcbiAgICB9XG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICBzdHJpbmdzLnJhdyA9IHJhdztcbiAgcmV0dXJuIHN0cmluZ3M7XG59XG5cbmZ1bmN0aW9uIF9yZWFkT25seUVycm9yKG5hbWUpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCIgaXMgcmVhZC1vbmx5XCIpO1xufVxuXG5mdW5jdGlvbiBfd3JpdGVPbmx5RXJyb3IobmFtZSkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyB3cml0ZS1vbmx5XCIpO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NOYW1lVERaRXJyb3IobmFtZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJDbGFzcyBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGNhbm5vdCBiZSByZWZlcmVuY2VkIGluIGNvbXB1dGVkIHByb3BlcnR5IGtleXMuXCIpO1xufVxuXG5mdW5jdGlvbiBfdGVtcG9yYWxVbmRlZmluZWQoKSB7fVxuXG5mdW5jdGlvbiBfdGR6KG5hbWUpIHtcbiAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG5hbWUgKyBcIiBpcyBub3QgZGVmaW5lZCAtIHRlbXBvcmFsIGRlYWQgem9uZVwiKTtcbn1cblxuZnVuY3Rpb24gX3RlbXBvcmFsUmVmKHZhbCwgbmFtZSkge1xuICByZXR1cm4gdmFsID09PSBfdGVtcG9yYWxVbmRlZmluZWQgPyBfdGR6KG5hbWUpIDogdmFsO1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXlMb29zZShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdExvb3NlKGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfdG9BcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfbWF5YmVBcnJheUxpa2UobmV4dCwgYXJyLCBpKSB7XG4gIGlmIChhcnIgJiYgIUFycmF5LmlzQXJyYXkoYXJyKSAmJiB0eXBlb2YgYXJyLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGkgIT09IHZvaWQgMCAmJiBpIDwgbGVuID8gaSA6IGxlbik7XG4gIH1cblxuICByZXR1cm4gbmV4dChhcnIsIGkpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2UoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICBfYXJyLnB1c2goX3N0ZXAudmFsdWUpO1xuXG4gICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQ7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgczogRixcbiAgICAgICAgbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IG9baSsrXVxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSxcbiAgICAgICAgZjogRlxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cblxuICB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsXG4gICAgICBkaWRFcnIgPSBmYWxzZSxcbiAgICAgIGVycjtcbiAgcmV0dXJuIHtcbiAgICBzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIH0sXG4gICAgbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7XG4gICAgICBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lO1xuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfSxcbiAgICBlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgZGlkRXJyID0gdHJ1ZTtcbiAgICAgIGVyciA9IGU7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGRpZEVycikgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQ7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4ge1xuICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgfVxuXG4gIGl0ID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIHJldHVybiBpdC5uZXh0LmJpbmQoaXQpO1xufVxuXG5mdW5jdGlvbiBfc2tpcEZpcnN0R2VuZXJhdG9yTmV4dChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpdCA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaXQubmV4dCgpO1xuICAgIHJldHVybiBpdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdO1xuXG4gIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cblxuICByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTtcbn1cblxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7XG4gIHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTtcblxuICByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpO1xufVxuXG5mdW5jdGlvbiBfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTtcbn1cblxuZnVuY3Rpb24gX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkge1xuICBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHtcbiAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsXG4gICAgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSxcbiAgICB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSxcbiAgICB2YWx1ZTogZGVzY3JpcHRvci5pbml0aWFsaXplciA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMFxuICB9KTtcbn1cblxuZnVuY3Rpb24gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7XG4gIHZhciBkZXNjID0ge307XG4gIE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGRlc2Nba2V5XSA9IGRlc2NyaXB0b3Jba2V5XTtcbiAgfSk7XG4gIGRlc2MuZW51bWVyYWJsZSA9ICEhZGVzYy5lbnVtZXJhYmxlO1xuICBkZXNjLmNvbmZpZ3VyYWJsZSA9ICEhZGVzYy5jb25maWd1cmFibGU7XG5cbiAgaWYgKCd2YWx1ZScgaW4gZGVzYyB8fCBkZXNjLmluaXRpYWxpemVyKSB7XG4gICAgZGVzYy53cml0YWJsZSA9IHRydWU7XG4gIH1cblxuICBkZXNjID0gZGVjb3JhdG9ycy5zbGljZSgpLnJldmVyc2UoKS5yZWR1Y2UoZnVuY3Rpb24gKGRlc2MsIGRlY29yYXRvcikge1xuICAgIHJldHVybiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYykgfHwgZGVzYztcbiAgfSwgZGVzYyk7XG5cbiAgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7XG4gICAgZGVzYy52YWx1ZSA9IGRlc2MuaW5pdGlhbGl6ZXIgPyBkZXNjLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDA7XG4gICAgZGVzYy5pbml0aWFsaXplciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYyk7XG4gICAgZGVzYyA9IG51bGw7XG4gIH1cblxuICByZXR1cm4gZGVzYztcbn1cblxudmFyIGlkID0gMDtcblxuZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkobmFtZSkge1xuICByZXR1cm4gXCJfX3ByaXZhdGVfXCIgKyBpZCsrICsgXCJfXCIgKyBuYW1lO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UocmVjZWl2ZXIsIHByaXZhdGVLZXkpIHtcbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVjZWl2ZXIsIHByaXZhdGVLZXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byB1c2UgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG4gIH1cblxuICByZXR1cm4gcmVjZWl2ZXI7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xuICB2YXIgZGVzY3JpcHRvciA9IF9jbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIFwiZ2V0XCIpO1xuXG4gIHJldHVybiBfY2xhc3NBcHBseURlc2NyaXB0b3JHZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IpO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvcihyZWNlaXZlciwgcHJpdmF0ZU1hcCwgXCJzZXRcIik7XG5cbiAgX2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yLCB2YWx1ZSk7XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGREZXN0cnVjdHVyZVNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xuICB2YXIgZGVzY3JpcHRvciA9IF9jbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIFwic2V0XCIpO1xuXG4gIHJldHVybiBfY2xhc3NBcHBseURlc2NyaXB0b3JEZXN0cnVjdHVyZVNldChyZWNlaXZlciwgZGVzY3JpcHRvcik7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIGFjdGlvbikge1xuICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gXCIgKyBhY3Rpb24gKyBcIiBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcbiAgfVxuXG4gIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNHZXQocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IsIGRlc2NyaXB0b3IpIHtcbiAgX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzKHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yKTtcblxuICBfY2xhc3NDaGVja1ByaXZhdGVTdGF0aWNGaWVsZERlc2NyaXB0b3IoZGVzY3JpcHRvciwgXCJnZXRcIik7XG5cbiAgcmV0dXJuIF9jbGFzc0FwcGx5RGVzY3JpcHRvckdldChyZWNlaXZlciwgZGVzY3JpcHRvcik7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNTZXQocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IsIGRlc2NyaXB0b3IsIHZhbHVlKSB7XG4gIF9jbGFzc0NoZWNrUHJpdmF0ZVN0YXRpY0FjY2VzcyhyZWNlaXZlciwgY2xhc3NDb25zdHJ1Y3Rvcik7XG5cbiAgX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljRmllbGREZXNjcmlwdG9yKGRlc2NyaXB0b3IsIFwic2V0XCIpO1xuXG4gIF9jbGFzc0FwcGx5RGVzY3JpcHRvclNldChyZWNlaXZlciwgZGVzY3JpcHRvciwgdmFsdWUpO1xuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzU3RhdGljUHJpdmF0ZU1ldGhvZEdldChyZWNlaXZlciwgY2xhc3NDb25zdHJ1Y3RvciwgbWV0aG9kKSB7XG4gIF9jbGFzc0NoZWNrUHJpdmF0ZVN0YXRpY0FjY2VzcyhyZWNlaXZlciwgY2xhc3NDb25zdHJ1Y3Rvcik7XG5cbiAgcmV0dXJuIG1ldGhvZDtcbn1cblxuZnVuY3Rpb24gX2NsYXNzU3RhdGljUHJpdmF0ZU1ldGhvZFNldCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHN0YXRpYyBwcml2YXRlIGZpZWxkXCIpO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NBcHBseURlc2NyaXB0b3JHZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGRlc2NyaXB0b3IuZ2V0KSB7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICB9XG5cbiAgcmV0dXJuIGRlc2NyaXB0b3IudmFsdWU7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0FwcGx5RGVzY3JpcHRvclNldChyZWNlaXZlciwgZGVzY3JpcHRvciwgdmFsdWUpIHtcbiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgZGVzY3JpcHRvci5zZXQuY2FsbChyZWNlaXZlciwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGlmICghZGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGRcIik7XG4gICAgfVxuXG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0FwcGx5RGVzY3JpcHRvckRlc3RydWN0dXJlU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKSB7XG4gIGlmIChkZXNjcmlwdG9yLnNldCkge1xuICAgIGlmICghKFwiX19kZXN0ck9ialwiIGluIGRlc2NyaXB0b3IpKSB7XG4gICAgICBkZXNjcmlwdG9yLl9fZGVzdHJPYmogPSB7XG4gICAgICAgIHNldCB2YWx1ZSh2KSB7XG4gICAgICAgICAgZGVzY3JpcHRvci5zZXQuY2FsbChyZWNlaXZlciwgdik7XG4gICAgICAgIH1cblxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvci5fX2Rlc3RyT2JqO1xuICB9IGVsc2Uge1xuICAgIGlmICghZGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NsYXNzU3RhdGljUHJpdmF0ZUZpZWxkRGVzdHJ1Y3R1cmVTZXQocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IsIGRlc2NyaXB0b3IpIHtcbiAgX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzKHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yKTtcblxuICBfY2xhc3NDaGVja1ByaXZhdGVTdGF0aWNGaWVsZERlc2NyaXB0b3IoZGVzY3JpcHRvciwgXCJzZXRcIik7XG5cbiAgcmV0dXJuIF9jbGFzc0FwcGx5RGVzY3JpcHRvckRlc3RydWN0dXJlU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzKHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yKSB7XG4gIGlmIChyZWNlaXZlciAhPT0gY2xhc3NDb25zdHJ1Y3Rvcikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIHN0YXRpYyBhY2Nlc3Mgb2Ygd3JvbmcgcHJvdmVuYW5jZVwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY2xhc3NDaGVja1ByaXZhdGVTdGF0aWNGaWVsZERlc2NyaXB0b3IoZGVzY3JpcHRvciwgYWN0aW9uKSB7XG4gIGlmIChkZXNjcmlwdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIFwiICsgYWN0aW9uICsgXCIgcHJpdmF0ZSBzdGF0aWMgZmllbGQgYmVmb3JlIGl0cyBkZWNsYXJhdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVjb3JhdGUoZGVjb3JhdG9ycywgZmFjdG9yeSwgc3VwZXJDbGFzcywgbWl4aW5zKSB7XG4gIHZhciBhcGkgPSBfZ2V0RGVjb3JhdG9yc0FwaSgpO1xuXG4gIGlmIChtaXhpbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgYXBpID0gbWl4aW5zW2ldKGFwaSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHIgPSBmYWN0b3J5KGZ1bmN0aW9uIGluaXRpYWxpemUoTykge1xuICAgIGFwaS5pbml0aWFsaXplSW5zdGFuY2VFbGVtZW50cyhPLCBkZWNvcmF0ZWQuZWxlbWVudHMpO1xuICB9LCBzdXBlckNsYXNzKTtcbiAgdmFyIGRlY29yYXRlZCA9IGFwaS5kZWNvcmF0ZUNsYXNzKF9jb2FsZXNjZUNsYXNzRWxlbWVudHMoci5kLm1hcChfY3JlYXRlRWxlbWVudERlc2NyaXB0b3IpKSwgZGVjb3JhdG9ycyk7XG4gIGFwaS5pbml0aWFsaXplQ2xhc3NFbGVtZW50cyhyLkYsIGRlY29yYXRlZC5lbGVtZW50cyk7XG4gIHJldHVybiBhcGkucnVuQ2xhc3NGaW5pc2hlcnMoci5GLCBkZWNvcmF0ZWQuZmluaXNoZXJzKTtcbn1cblxuZnVuY3Rpb24gX2dldERlY29yYXRvcnNBcGkoKSB7XG4gIF9nZXREZWNvcmF0b3JzQXBpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcGk7XG4gIH07XG5cbiAgdmFyIGFwaSA9IHtcbiAgICBlbGVtZW50c0RlZmluaXRpb25PcmRlcjogW1tcIm1ldGhvZFwiXSwgW1wiZmllbGRcIl1dLFxuICAgIGluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzOiBmdW5jdGlvbiAoTywgZWxlbWVudHMpIHtcbiAgICAgIFtcIm1ldGhvZFwiLCBcImZpZWxkXCJdLmZvckVhY2goZnVuY3Rpb24gKGtpbmQpIHtcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgIGlmIChlbGVtZW50LmtpbmQgPT09IGtpbmQgJiYgZWxlbWVudC5wbGFjZW1lbnQgPT09IFwib3duXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lQ2xhc3NFbGVtZW50KE8sIGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9LFxuICAgIGluaXRpYWxpemVDbGFzc0VsZW1lbnRzOiBmdW5jdGlvbiAoRiwgZWxlbWVudHMpIHtcbiAgICAgIHZhciBwcm90byA9IEYucHJvdG90eXBlO1xuICAgICAgW1wibWV0aG9kXCIsIFwiZmllbGRcIl0uZm9yRWFjaChmdW5jdGlvbiAoa2luZCkge1xuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIHBsYWNlbWVudCA9IGVsZW1lbnQucGxhY2VtZW50O1xuXG4gICAgICAgICAgaWYgKGVsZW1lbnQua2luZCA9PT0ga2luZCAmJiAocGxhY2VtZW50ID09PSBcInN0YXRpY1wiIHx8IHBsYWNlbWVudCA9PT0gXCJwcm90b3R5cGVcIikpIHtcbiAgICAgICAgICAgIHZhciByZWNlaXZlciA9IHBsYWNlbWVudCA9PT0gXCJzdGF0aWNcIiA/IEYgOiBwcm90bztcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lQ2xhc3NFbGVtZW50KHJlY2VpdmVyLCBlbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSxcbiAgICBkZWZpbmVDbGFzc0VsZW1lbnQ6IGZ1bmN0aW9uIChyZWNlaXZlciwgZWxlbWVudCkge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBlbGVtZW50LmRlc2NyaXB0b3I7XG5cbiAgICAgIGlmIChlbGVtZW50LmtpbmQgPT09IFwiZmllbGRcIikge1xuICAgICAgICB2YXIgaW5pdGlhbGl6ZXIgPSBlbGVtZW50LmluaXRpYWxpemVyO1xuICAgICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSxcbiAgICAgICAgICB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLFxuICAgICAgICAgIHZhbHVlOiBpbml0aWFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbGl6ZXIuY2FsbChyZWNlaXZlcilcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBlbGVtZW50LmtleSwgZGVzY3JpcHRvcik7XG4gICAgfSxcbiAgICBkZWNvcmF0ZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudHMsIGRlY29yYXRvcnMpIHtcbiAgICAgIHZhciBuZXdFbGVtZW50cyA9IFtdO1xuICAgICAgdmFyIGZpbmlzaGVycyA9IFtdO1xuICAgICAgdmFyIHBsYWNlbWVudHMgPSB7XG4gICAgICAgIHN0YXRpYzogW10sXG4gICAgICAgIHByb3RvdHlwZTogW10sXG4gICAgICAgIG93bjogW11cbiAgICAgIH07XG4gICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuYWRkRWxlbWVudFBsYWNlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoIV9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpKSByZXR1cm4gbmV3RWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgdmFyIGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMgPSB0aGlzLmRlY29yYXRlRWxlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTtcbiAgICAgICAgbmV3RWxlbWVudHMucHVzaChlbGVtZW50RmluaXNoZXJzRXh0cmFzLmVsZW1lbnQpO1xuICAgICAgICBuZXdFbGVtZW50cy5wdXNoLmFwcGx5KG5ld0VsZW1lbnRzLCBlbGVtZW50RmluaXNoZXJzRXh0cmFzLmV4dHJhcyk7XG4gICAgICAgIGZpbmlzaGVycy5wdXNoLmFwcGx5KGZpbmlzaGVycywgZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5maW5pc2hlcnMpO1xuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIGlmICghZGVjb3JhdG9ycykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVsZW1lbnRzOiBuZXdFbGVtZW50cyxcbiAgICAgICAgICBmaW5pc2hlcnM6IGZpbmlzaGVyc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5kZWNvcmF0ZUNvbnN0cnVjdG9yKG5ld0VsZW1lbnRzLCBkZWNvcmF0b3JzKTtcbiAgICAgIGZpbmlzaGVycy5wdXNoLmFwcGx5KGZpbmlzaGVycywgcmVzdWx0LmZpbmlzaGVycyk7XG4gICAgICByZXN1bHQuZmluaXNoZXJzID0gZmluaXNoZXJzO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGFkZEVsZW1lbnRQbGFjZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBwbGFjZW1lbnRzLCBzaWxlbnQpIHtcbiAgICAgIHZhciBrZXlzID0gcGxhY2VtZW50c1tlbGVtZW50LnBsYWNlbWVudF07XG5cbiAgICAgIGlmICghc2lsZW50ICYmIGtleXMuaW5kZXhPZihlbGVtZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEdXBsaWNhdGVkIGVsZW1lbnQgKFwiICsgZWxlbWVudC5rZXkgKyBcIilcIik7XG4gICAgICB9XG5cbiAgICAgIGtleXMucHVzaChlbGVtZW50LmtleSk7XG4gICAgfSxcbiAgICBkZWNvcmF0ZUVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBwbGFjZW1lbnRzKSB7XG4gICAgICB2YXIgZXh0cmFzID0gW107XG4gICAgICB2YXIgZmluaXNoZXJzID0gW107XG5cbiAgICAgIGZvciAodmFyIGRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnMsIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBrZXlzID0gcGxhY2VtZW50c1tlbGVtZW50LnBsYWNlbWVudF07XG4gICAgICAgIGtleXMuc3BsaWNlKGtleXMuaW5kZXhPZihlbGVtZW50LmtleSksIDEpO1xuICAgICAgICB2YXIgZWxlbWVudE9iamVjdCA9IHRoaXMuZnJvbUVsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnQpO1xuICAgICAgICB2YXIgZWxlbWVudEZpbmlzaGVyRXh0cmFzID0gdGhpcy50b0VsZW1lbnRGaW5pc2hlckV4dHJhcygoMCwgZGVjb3JhdG9yc1tpXSkoZWxlbWVudE9iamVjdCkgfHwgZWxlbWVudE9iamVjdCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50RmluaXNoZXJFeHRyYXMuZWxlbWVudDtcbiAgICAgICAgdGhpcy5hZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpO1xuXG4gICAgICAgIGlmIChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpIHtcbiAgICAgICAgICBmaW5pc2hlcnMucHVzaChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5ld0V4dHJhcyA9IGVsZW1lbnRGaW5pc2hlckV4dHJhcy5leHRyYXM7XG5cbiAgICAgICAgaWYgKG5ld0V4dHJhcykge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmV3RXh0cmFzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQobmV3RXh0cmFzW2pdLCBwbGFjZW1lbnRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBleHRyYXMucHVzaC5hcHBseShleHRyYXMsIG5ld0V4dHJhcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgZmluaXNoZXJzOiBmaW5pc2hlcnMsXG4gICAgICAgIGV4dHJhczogZXh0cmFzXG4gICAgICB9O1xuICAgIH0sXG4gICAgZGVjb3JhdGVDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKGVsZW1lbnRzLCBkZWNvcmF0b3JzKSB7XG4gICAgICB2YXIgZmluaXNoZXJzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBvYmogPSB0aGlzLmZyb21DbGFzc0Rlc2NyaXB0b3IoZWxlbWVudHMpO1xuICAgICAgICB2YXIgZWxlbWVudHNBbmRGaW5pc2hlciA9IHRoaXMudG9DbGFzc0Rlc2NyaXB0b3IoKDAsIGRlY29yYXRvcnNbaV0pKG9iaikgfHwgb2JqKTtcblxuICAgICAgICBpZiAoZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZmluaXNoZXJzLnB1c2goZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWxlbWVudHNBbmRGaW5pc2hlci5lbGVtZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZWxlbWVudHMgPSBlbGVtZW50c0FuZEZpbmlzaGVyLmVsZW1lbnRzO1xuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBlbGVtZW50cy5sZW5ndGggLSAxOyBqKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSBqICsgMTsgayA8IGVsZW1lbnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50c1tqXS5rZXkgPT09IGVsZW1lbnRzW2tdLmtleSAmJiBlbGVtZW50c1tqXS5wbGFjZW1lbnQgPT09IGVsZW1lbnRzW2tdLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEdXBsaWNhdGVkIGVsZW1lbnQgKFwiICsgZWxlbWVudHNbal0ua2V5ICsgXCIpXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnRzOiBlbGVtZW50cyxcbiAgICAgICAgZmluaXNoZXJzOiBmaW5pc2hlcnNcbiAgICAgIH07XG4gICAgfSxcbiAgICBmcm9tRWxlbWVudERlc2NyaXB0b3I6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICB2YXIgb2JqID0ge1xuICAgICAgICBraW5kOiBlbGVtZW50LmtpbmQsXG4gICAgICAgIGtleTogZWxlbWVudC5rZXksXG4gICAgICAgIHBsYWNlbWVudDogZWxlbWVudC5wbGFjZW1lbnQsXG4gICAgICAgIGRlc2NyaXB0b3I6IGVsZW1lbnQuZGVzY3JpcHRvclxuICAgICAgfTtcbiAgICAgIHZhciBkZXNjID0ge1xuICAgICAgICB2YWx1ZTogXCJEZXNjcmlwdG9yXCIsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFN5bWJvbC50b1N0cmluZ1RhZywgZGVzYyk7XG4gICAgICBpZiAoZWxlbWVudC5raW5kID09PSBcImZpZWxkXCIpIG9iai5pbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgdG9FbGVtZW50RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIChlbGVtZW50T2JqZWN0cykge1xuICAgICAgaWYgKGVsZW1lbnRPYmplY3RzID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHJldHVybiBfdG9BcnJheShlbGVtZW50T2JqZWN0cykubWFwKGZ1bmN0aW9uIChlbGVtZW50T2JqZWN0KSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpO1xuICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJmaW5pc2hlclwiLCBcIkFuIGVsZW1lbnQgZGVzY3JpcHRvclwiKTtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZXh0cmFzXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpO1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG4gICAgdG9FbGVtZW50RGVzY3JpcHRvcjogZnVuY3Rpb24gKGVsZW1lbnRPYmplY3QpIHtcbiAgICAgIHZhciBraW5kID0gU3RyaW5nKGVsZW1lbnRPYmplY3Qua2luZCk7XG5cbiAgICAgIGlmIChraW5kICE9PSBcIm1ldGhvZFwiICYmIGtpbmQgIT09IFwiZmllbGRcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbiBlbGVtZW50IGRlc2NyaXB0b3JcXCdzIC5raW5kIHByb3BlcnR5IG11c3QgYmUgZWl0aGVyIFwibWV0aG9kXCIgb3InICsgJyBcImZpZWxkXCIsIGJ1dCBhIGRlY29yYXRvciBjcmVhdGVkIGFuIGVsZW1lbnQgZGVzY3JpcHRvciB3aXRoJyArICcgLmtpbmQgXCInICsga2luZCArICdcIicpO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5ID0gX3RvUHJvcGVydHlLZXkoZWxlbWVudE9iamVjdC5rZXkpO1xuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gU3RyaW5nKGVsZW1lbnRPYmplY3QucGxhY2VtZW50KTtcblxuICAgICAgaWYgKHBsYWNlbWVudCAhPT0gXCJzdGF0aWNcIiAmJiBwbGFjZW1lbnQgIT09IFwicHJvdG90eXBlXCIgJiYgcGxhY2VtZW50ICE9PSBcIm93blwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FuIGVsZW1lbnQgZGVzY3JpcHRvclxcJ3MgLnBsYWNlbWVudCBwcm9wZXJ0eSBtdXN0IGJlIG9uZSBvZiBcInN0YXRpY1wiLCcgKyAnIFwicHJvdG90eXBlXCIgb3IgXCJvd25cIiwgYnV0IGEgZGVjb3JhdG9yIGNyZWF0ZWQgYW4gZWxlbWVudCBkZXNjcmlwdG9yJyArICcgd2l0aCAucGxhY2VtZW50IFwiJyArIHBsYWNlbWVudCArICdcIicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVzY3JpcHRvciA9IGVsZW1lbnRPYmplY3QuZGVzY3JpcHRvcjtcbiAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImVsZW1lbnRzXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpO1xuICAgICAgdmFyIGVsZW1lbnQgPSB7XG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgZGVzY3JpcHRvcjogT2JqZWN0LmFzc2lnbih7fSwgZGVzY3JpcHRvcilcbiAgICAgIH07XG5cbiAgICAgIGlmIChraW5kICE9PSBcImZpZWxkXCIpIHtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiaW5pdGlhbGl6ZXJcIiwgXCJBIG1ldGhvZCBkZXNjcmlwdG9yXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGRlc2NyaXB0b3IsIFwiZ2V0XCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpO1xuICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoZGVzY3JpcHRvciwgXCJzZXRcIiwgXCJUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3JcIik7XG4gICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShkZXNjcmlwdG9yLCBcInZhbHVlXCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpO1xuICAgICAgICBlbGVtZW50LmluaXRpYWxpemVyID0gZWxlbWVudE9iamVjdC5pbml0aWFsaXplcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfSxcbiAgICB0b0VsZW1lbnRGaW5pc2hlckV4dHJhczogZnVuY3Rpb24gKGVsZW1lbnRPYmplY3QpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpO1xuXG4gICAgICB2YXIgZmluaXNoZXIgPSBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZmluaXNoZXJcIik7XG5cbiAgICAgIHZhciBleHRyYXMgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3JzKGVsZW1lbnRPYmplY3QuZXh0cmFzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGZpbmlzaGVyOiBmaW5pc2hlcixcbiAgICAgICAgZXh0cmFzOiBleHRyYXNcbiAgICAgIH07XG4gICAgfSxcbiAgICBmcm9tQ2xhc3NEZXNjcmlwdG9yOiBmdW5jdGlvbiAoZWxlbWVudHMpIHtcbiAgICAgIHZhciBvYmogPSB7XG4gICAgICAgIGtpbmQ6IFwiY2xhc3NcIixcbiAgICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLm1hcCh0aGlzLmZyb21FbGVtZW50RGVzY3JpcHRvciwgdGhpcylcbiAgICAgIH07XG4gICAgICB2YXIgZGVzYyA9IHtcbiAgICAgICAgdmFsdWU6IFwiRGVzY3JpcHRvclwiLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH07XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBTeW1ib2wudG9TdHJpbmdUYWcsIGRlc2MpO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIHRvQ2xhc3NEZXNjcmlwdG9yOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICB2YXIga2luZCA9IFN0cmluZyhvYmoua2luZCk7XG5cbiAgICAgIGlmIChraW5kICE9PSBcImNsYXNzXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBjbGFzcyBkZXNjcmlwdG9yXFwncyAua2luZCBwcm9wZXJ0eSBtdXN0IGJlIFwiY2xhc3NcIiwgYnV0IGEgZGVjb3JhdG9yJyArICcgY3JlYXRlZCBhIGNsYXNzIGRlc2NyaXB0b3Igd2l0aCAua2luZCBcIicgKyBraW5kICsgJ1wiJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwia2V5XCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpO1xuICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJwbGFjZW1lbnRcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7XG4gICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcImRlc2NyaXB0b3JcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7XG4gICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcImluaXRpYWxpemVyXCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpO1xuICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJleHRyYXNcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7XG5cbiAgICAgIHZhciBmaW5pc2hlciA9IF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkob2JqLCBcImZpbmlzaGVyXCIpO1xuXG4gICAgICB2YXIgZWxlbWVudHMgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3JzKG9iai5lbGVtZW50cyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50czogZWxlbWVudHMsXG4gICAgICAgIGZpbmlzaGVyOiBmaW5pc2hlclxuICAgICAgfTtcbiAgICB9LFxuICAgIHJ1bkNsYXNzRmluaXNoZXJzOiBmdW5jdGlvbiAoY29uc3RydWN0b3IsIGZpbmlzaGVycykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaW5pc2hlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NvbnN0cnVjdG9yID0gKDAsIGZpbmlzaGVyc1tpXSkoY29uc3RydWN0b3IpO1xuXG4gICAgICAgIGlmIChuZXdDb25zdHJ1Y3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuZXdDb25zdHJ1Y3RvciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmluaXNoZXJzIG11c3QgcmV0dXJuIGEgY29uc3RydWN0b3IuXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0cnVjdG9yID0gbmV3Q29uc3RydWN0b3I7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xuICAgIH0sXG4gICAgZGlzYWxsb3dQcm9wZXJ0eTogZnVuY3Rpb24gKG9iaiwgbmFtZSwgb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKG9ialtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Iob2JqZWN0VHlwZSArIFwiIGNhbid0IGhhdmUgYSAuXCIgKyBuYW1lICsgXCIgcHJvcGVydHkuXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGFwaTtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKGRlZikge1xuICB2YXIga2V5ID0gX3RvUHJvcGVydHlLZXkoZGVmLmtleSk7XG5cbiAgdmFyIGRlc2NyaXB0b3I7XG5cbiAgaWYgKGRlZi5raW5kID09PSBcIm1ldGhvZFwiKSB7XG4gICAgZGVzY3JpcHRvciA9IHtcbiAgICAgIHZhbHVlOiBkZWYudmFsdWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfTtcbiAgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gXCJnZXRcIikge1xuICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICBnZXQ6IGRlZi52YWx1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfTtcbiAgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gXCJzZXRcIikge1xuICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICBzZXQ6IGRlZi52YWx1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfTtcbiAgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gXCJmaWVsZFwiKSB7XG4gICAgZGVzY3JpcHRvciA9IHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH07XG4gIH1cblxuICB2YXIgZWxlbWVudCA9IHtcbiAgICBraW5kOiBkZWYua2luZCA9PT0gXCJmaWVsZFwiID8gXCJmaWVsZFwiIDogXCJtZXRob2RcIixcbiAgICBrZXk6IGtleSxcbiAgICBwbGFjZW1lbnQ6IGRlZi5zdGF0aWMgPyBcInN0YXRpY1wiIDogZGVmLmtpbmQgPT09IFwiZmllbGRcIiA/IFwib3duXCIgOiBcInByb3RvdHlwZVwiLFxuICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3JcbiAgfTtcbiAgaWYgKGRlZi5kZWNvcmF0b3JzKSBlbGVtZW50LmRlY29yYXRvcnMgPSBkZWYuZGVjb3JhdG9ycztcbiAgaWYgKGRlZi5raW5kID09PSBcImZpZWxkXCIpIGVsZW1lbnQuaW5pdGlhbGl6ZXIgPSBkZWYudmFsdWU7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiBfY29hbGVzY2VHZXR0ZXJTZXR0ZXIoZWxlbWVudCwgb3RoZXIpIHtcbiAgaWYgKGVsZW1lbnQuZGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkge1xuICAgIG90aGVyLmRlc2NyaXB0b3IuZ2V0ID0gZWxlbWVudC5kZXNjcmlwdG9yLmdldDtcbiAgfSBlbHNlIHtcbiAgICBvdGhlci5kZXNjcmlwdG9yLnNldCA9IGVsZW1lbnQuZGVzY3JpcHRvci5zZXQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvYWxlc2NlQ2xhc3NFbGVtZW50cyhlbGVtZW50cykge1xuICB2YXIgbmV3RWxlbWVudHMgPSBbXTtcblxuICB2YXIgaXNTYW1lRWxlbWVudCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHJldHVybiBvdGhlci5raW5kID09PSBcIm1ldGhvZFwiICYmIG90aGVyLmtleSA9PT0gZWxlbWVudC5rZXkgJiYgb3RoZXIucGxhY2VtZW50ID09PSBlbGVtZW50LnBsYWNlbWVudDtcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICB2YXIgb3RoZXI7XG5cbiAgICBpZiAoZWxlbWVudC5raW5kID09PSBcIm1ldGhvZFwiICYmIChvdGhlciA9IG5ld0VsZW1lbnRzLmZpbmQoaXNTYW1lRWxlbWVudCkpKSB7XG4gICAgICBpZiAoX2lzRGF0YURlc2NyaXB0b3IoZWxlbWVudC5kZXNjcmlwdG9yKSB8fCBfaXNEYXRhRGVzY3JpcHRvcihvdGhlci5kZXNjcmlwdG9yKSkge1xuICAgICAgICBpZiAoX2hhc0RlY29yYXRvcnMoZWxlbWVudCkgfHwgX2hhc0RlY29yYXRvcnMob3RoZXIpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRHVwbGljYXRlZCBtZXRob2RzIChcIiArIGVsZW1lbnQua2V5ICsgXCIpIGNhbid0IGJlIGRlY29yYXRlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlci5kZXNjcmlwdG9yID0gZWxlbWVudC5kZXNjcmlwdG9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgaWYgKF9oYXNEZWNvcmF0b3JzKG90aGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRGVjb3JhdG9ycyBjYW4ndCBiZSBwbGFjZWQgb24gZGlmZmVyZW50IGFjY2Vzc29ycyB3aXRoIGZvciBcIiArIFwidGhlIHNhbWUgcHJvcGVydHkgKFwiICsgZWxlbWVudC5rZXkgKyBcIikuXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG90aGVyLmRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnM7XG4gICAgICAgIH1cblxuICAgICAgICBfY29hbGVzY2VHZXR0ZXJTZXR0ZXIoZWxlbWVudCwgb3RoZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdFbGVtZW50cztcbn1cblxuZnVuY3Rpb24gX2hhc0RlY29yYXRvcnMoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5kZWNvcmF0b3JzICYmIGVsZW1lbnQuZGVjb3JhdG9ycy5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIF9pc0RhdGFEZXNjcmlwdG9yKGRlc2MpIHtcbiAgcmV0dXJuIGRlc2MgIT09IHVuZGVmaW5lZCAmJiAhKGRlc2MudmFsdWUgPT09IHVuZGVmaW5lZCAmJiBkZXNjLndyaXRhYmxlID09PSB1bmRlZmluZWQpO1xufVxuXG5mdW5jdGlvbiBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KG9iaiwgbmFtZSkge1xuICB2YXIgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgJ1wiICsgbmFtZSArIFwiJyB0byBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kR2V0KHJlY2VpdmVyLCBwcml2YXRlU2V0LCBmbikge1xuICBpZiAoIXByaXZhdGVTZXQuaGFzKHJlY2VpdmVyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xuICB9XG5cbiAgcmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kU2V0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHJlYXNzaWduIHByaXZhdGUgbWV0aG9kXCIpO1xufVxuXG5mdW5jdGlvbiBfd3JhcFJlZ0V4cChyZSwgZ3JvdXBzKSB7XG4gIF93cmFwUmVnRXhwID0gZnVuY3Rpb24gKHJlLCBncm91cHMpIHtcbiAgICByZXR1cm4gbmV3IEJhYmVsUmVnRXhwKHJlLCB1bmRlZmluZWQsIGdyb3Vwcyk7XG4gIH07XG5cbiAgdmFyIF9SZWdFeHAgPSBfd3JhcE5hdGl2ZVN1cGVyKFJlZ0V4cCk7XG5cbiAgdmFyIF9zdXBlciA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbiAgdmFyIF9ncm91cHMgPSBuZXcgV2Vha01hcCgpO1xuXG4gIGZ1bmN0aW9uIEJhYmVsUmVnRXhwKHJlLCBmbGFncywgZ3JvdXBzKSB7XG4gICAgdmFyIF90aGlzID0gX1JlZ0V4cC5jYWxsKHRoaXMsIHJlLCBmbGFncyk7XG5cbiAgICBfZ3JvdXBzLnNldChfdGhpcywgZ3JvdXBzIHx8IF9ncm91cHMuZ2V0KHJlKSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfaW5oZXJpdHMoQmFiZWxSZWdFeHAsIF9SZWdFeHApO1xuXG4gIEJhYmVsUmVnRXhwLnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciByZXN1bHQgPSBfc3VwZXIuZXhlYy5jYWxsKHRoaXMsIHN0cik7XG5cbiAgICBpZiAocmVzdWx0KSByZXN1bHQuZ3JvdXBzID0gYnVpbGRHcm91cHMocmVzdWx0LCB0aGlzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIEJhYmVsUmVnRXhwLnByb3RvdHlwZVtTeW1ib2wucmVwbGFjZV0gPSBmdW5jdGlvbiAoc3RyLCBzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdmFyIGdyb3VwcyA9IF9ncm91cHMuZ2V0KHRoaXMpO1xuXG4gICAgICByZXR1cm4gX3N1cGVyW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsIHN0ciwgc3Vic3RpdHV0aW9uLnJlcGxhY2UoL1xcJDwoW14+XSspPi9nLCBmdW5jdGlvbiAoXywgbmFtZSkge1xuICAgICAgICByZXR1cm4gXCIkXCIgKyBncm91cHNbbmFtZV07XG4gICAgICB9KSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3Vic3RpdHV0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGFyZ3MucHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgYXJncy5wdXNoKGJ1aWxkR3JvdXBzKGFyZ3MsIF90aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBzdWJzdGl0dXRpb24pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBidWlsZEdyb3VwcyhyZXN1bHQsIHJlKSB7XG4gICAgdmFyIGcgPSBfZ3JvdXBzLmdldChyZSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZykucmVkdWNlKGZ1bmN0aW9uIChncm91cHMsIG5hbWUpIHtcbiAgICAgIGdyb3Vwc1tuYW1lXSA9IHJlc3VsdFtnW25hbWVdXTtcbiAgICAgIHJldHVybiBncm91cHM7XG4gICAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIH1cblxuICByZXR1cm4gX3dyYXBSZWdFeHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cbnZhciBfZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIGV4dGVuZFN0YXRpY3MoZCwgYikge1xuICBfZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB7XG4gICAgX19wcm90b19fOiBbXVxuICB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBkLl9fcHJvdG9fXyA9IGI7XG4gIH0gfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBfZXh0ZW5kU3RhdGljcyhkLCBiKTtcblxuICBmdW5jdGlvbiBfXygpIHtcbiAgICB0aGlzLmNvbnN0cnVjdG9yID0gZDtcbiAgfVxuXG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxudmFyIF9hc3NpZ24gPSBmdW5jdGlvbiBfX2Fzc2lnbigpIHtcbiAgX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIgcCBpbiBzKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIHJldHVybiBfYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsXG4gICAgICBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO2Vsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICB9XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5mdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cbmZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkge1xuICAgICAgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgfVxuXG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7XG4gICAgbGFiZWw6IDAsXG4gICAgc2VudDogZnVuY3Rpb24gc2VudCgpIHtcbiAgICAgIGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTtcbiAgICAgIHJldHVybiB0WzFdO1xuICAgIH0sXG4gICAgdHJ5czogW10sXG4gICAgb3BzOiBbXVxuICB9LFxuICAgICAgZixcbiAgICAgIHksXG4gICAgICB0LFxuICAgICAgZztcbiAgcmV0dXJuIGcgPSB7XG4gICAgbmV4dDogdmVyYigwKSxcbiAgICBcInRocm93XCI6IHZlcmIoMSksXG4gICAgXCJyZXR1cm5cIjogdmVyYigyKVxuICB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGc7XG5cbiAgZnVuY3Rpb24gdmVyYihuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gc3RlcChbbiwgdl0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuXG4gICAgd2hpbGUgKF8pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuXG4gICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdCA9IG9wO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBfLmxhYmVsKys7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICB2YWx1ZTogb3BbMV0sXG4gICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgXy5sYWJlbCsrO1xuICAgICAgICAgICAgeSA9IG9wWzFdO1xuICAgICAgICAgICAgb3AgPSBbMF07XG4gICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIG9wID0gXy5vcHMucG9wKCk7XG5cbiAgICAgICAgICAgIF8udHJ5cy5wb3AoKTtcblxuICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHtcbiAgICAgICAgICAgICAgXyA9IDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSB7XG4gICAgICAgICAgICAgIF8ubGFiZWwgPSBvcFsxXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkge1xuICAgICAgICAgICAgICBfLmxhYmVsID0gdFsxXTtcbiAgICAgICAgICAgICAgdCA9IG9wO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHtcbiAgICAgICAgICAgICAgXy5sYWJlbCA9IHRbMl07XG5cbiAgICAgICAgICAgICAgXy5vcHMucHVzaChvcCk7XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcblxuICAgICAgICAgICAgXy50cnlzLnBvcCgpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBvcCA9IFs2LCBlXTtcbiAgICAgICAgeSA9IDA7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBmID0gdCA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLFxuICAgICAgZG9uZTogdHJ1ZVxuICAgIH07XG4gIH1cbn1cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gZnVuY3Rpb24gKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbVtrXTtcbiAgICB9XG4gIH0pO1xufSA6IGZ1bmN0aW9uIChvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59O1xuZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcbiAgZm9yICh2YXIgcCBpbiBtKSB7XG4gICAgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbiAgfVxufVxuZnVuY3Rpb24gX192YWx1ZXMobykge1xuICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsXG4gICAgICBtID0gcyAmJiBvW3NdLFxuICAgICAgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogbyAmJiBvW2krK10sXG4gICAgICAgIGRvbmU6ICFvXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSxcbiAgICAgIHIsXG4gICAgICBhciA9IFtdLFxuICAgICAgZTtcblxuICB0cnkge1xuICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSB7XG4gICAgICBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0ge1xuICAgICAgZXJyb3I6IGVycm9yXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlKSB0aHJvdyBlLmVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcjtcbn1cbmZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgfVxuXG4gIHJldHVybiBhcjtcbn1cbmZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIH1cblxuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspIHtcbiAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKykge1xuICAgICAgcltrXSA9IGFbal07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHI7XG59XG47XG5mdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5mdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSxcbiAgICAgIGksXG4gICAgICBxID0gW107XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LCBpO1xuXG4gIGZ1bmN0aW9uIHZlcmIobikge1xuICAgIGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7XG4gICAgdHJ5IHtcbiAgICAgIHN0ZXAoZ1tuXSh2KSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2V0dGxlKHFbMF1bM10sIGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0ZXAocikge1xuICAgIHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkge1xuICAgIHJlc3VtZShcIm5leHRcIiwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7XG4gICAgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHtcbiAgICBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pO1xuICB9XG59XG5mdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICB0aHJvdyBlO1xuICB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LCBpO1xuXG4gIGZ1bmN0aW9uIHZlcmIobiwgZikge1xuICAgIGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiAocCA9ICFwKSA/IHtcbiAgICAgICAgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksXG4gICAgICAgIGRvbmU6IG4gPT09IFwicmV0dXJuXCJcbiAgICAgIH0gOiBmID8gZih2KSA6IHY7XG4gICAgfSA6IGY7XG4gIH1cbn1cbmZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLFxuICAgICAgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSwgaSk7XG5cbiAgZnVuY3Rpb24gdmVyYihuKSB7XG4gICAgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHtcbiAgICBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbiAodikge1xuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiB2LFxuICAgICAgICBkb25lOiBkXG4gICAgICB9KTtcbiAgICB9LCByZWplY3QpO1xuICB9XG59XG5mdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwge1xuICAgICAgdmFsdWU6IHJhd1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvb2tlZC5yYXcgPSByYXc7XG4gIH1cblxuICByZXR1cm4gY29va2VkO1xufVxuO1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IGZ1bmN0aW9uIChvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZcbiAgfSk7XG59IDogZnVuY3Rpb24gKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxuZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIHtcbiAgICBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gIH1cblxuICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7XG4gICAgZGVmYXVsdDogbW9kXG4gIH07XG59XG5mdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XG4gIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG4gIH1cblxuICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xufVxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcbiAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcbiAgfVxuXG4gIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIFRydWUgaWYgdGhlIGN1c3RvbSBlbGVtZW50cyBwb2x5ZmlsbCBpcyBpbiB1c2UuXG4gKi9cbnZhciBpc0NFUG9seWZpbGwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3VzdG9tRWxlbWVudHMgIT0gbnVsbCAmJiB3aW5kb3cuY3VzdG9tRWxlbWVudHMucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayAhPT0gdW5kZWZpbmVkO1xuLyoqXG4gKiBSZXBhcmVudHMgbm9kZXMsIHN0YXJ0aW5nIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSxcbiAqIGludG8gYW5vdGhlciBjb250YWluZXIgKGNvdWxkIGJlIHRoZSBzYW1lIGNvbnRhaW5lciksIGJlZm9yZSBgYmVmb3JlYC4gSWZcbiAqIGBiZWZvcmVgIGlzIG51bGwsIGl0IGFwcGVuZHMgdGhlIG5vZGVzIHRvIHRoZSBjb250YWluZXIuXG4gKi9cblxudmFyIHJlcGFyZW50Tm9kZXMgPSBmdW5jdGlvbiByZXBhcmVudE5vZGVzKGNvbnRhaW5lciwgc3RhcnQpIHtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgdmFyIGJlZm9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgIHZhciBuID0gc3RhcnQubmV4dFNpYmxpbmc7XG4gICAgY29udGFpbmVyLmluc2VydEJlZm9yZShzdGFydCwgYmVmb3JlKTtcbiAgICBzdGFydCA9IG47XG4gIH1cbn07XG4vKipcbiAqIFJlbW92ZXMgbm9kZXMsIHN0YXJ0aW5nIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSwgZnJvbVxuICogYGNvbnRhaW5lcmAuXG4gKi9cblxudmFyIHJlbW92ZU5vZGVzID0gZnVuY3Rpb24gcmVtb3ZlTm9kZXMoY29udGFpbmVyLCBzdGFydCkge1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuXG4gIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XG4gICAgdmFyIG4gPSBzdGFydC5uZXh0U2libGluZztcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoc3RhcnQpO1xuICAgIHN0YXJ0ID0gbjtcbiAgfVxufTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHdpdGggZW1iZWRkZWQgdW5pcXVlIGtleSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aFxuICogcG9zc2libGUgdGV4dCBpbiB0ZW1wbGF0ZXMuXG4gKi9cbnZhciBtYXJrZXIgPSBcInt7bGl0LVwiLmNvbmNhdChTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMiksIFwifX1cIik7XG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHVzZWQgdGV4dC1wb3NpdGlvbnMsIG11bHRpLWJpbmRpbmcgYXR0cmlidXRlcywgYW5kXG4gKiBhdHRyaWJ1dGVzIHdpdGggbWFya3VwLWxpa2UgdGV4dCB2YWx1ZXMuXG4gKi9cblxudmFyIG5vZGVNYXJrZXIgPSBcIjwhLS1cIi5jb25jYXQobWFya2VyLCBcIi0tPlwiKTtcbnZhciBtYXJrZXJSZWdleCA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQobWFya2VyLCBcInxcIikuY29uY2F0KG5vZGVNYXJrZXIpKTtcbi8qKlxuICogU3VmZml4IGFwcGVuZGVkIHRvIGFsbCBib3VuZCBhdHRyaWJ1dGUgbmFtZXMuXG4gKi9cblxudmFyIGJvdW5kQXR0cmlidXRlU3VmZml4ID0gJyRsaXQkJztcbi8qKlxuICogQW4gdXBkYXRhYmxlIFRlbXBsYXRlIHRoYXQgdHJhY2tzIHRoZSBsb2NhdGlvbiBvZiBkeW5hbWljIHBhcnRzLlxuICovXG5cbmNsYXNzIFRlbXBsYXRlIHtcbiAgY29uc3RydWN0b3IocmVzdWx0LCBlbGVtZW50KSB7XG4gICAgdGhpcy5wYXJ0cyA9IFtdO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdmFyIG5vZGVzVG9SZW1vdmUgPSBbXTtcbiAgICB2YXIgc3RhY2sgPSBbXTsgLy8gRWRnZSBuZWVkcyBhbGwgNCBwYXJhbWV0ZXJzIHByZXNlbnQ7IElFMTEgbmVlZHMgM3JkIHBhcmFtZXRlciB0byBiZSBudWxsXG5cbiAgICB2YXIgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbGVtZW50LmNvbnRlbnQsIDEzM1xuICAgIC8qIE5vZGVGaWx0ZXIuU0hPV197RUxFTUVOVHxDT01NRU5UfFRFWFR9ICovXG4gICAgLCBudWxsLCBmYWxzZSk7IC8vIEtlZXBzIHRyYWNrIG9mIHRoZSBsYXN0IGluZGV4IGFzc29jaWF0ZWQgd2l0aCBhIHBhcnQuIFdlIHRyeSB0byBkZWxldGVcbiAgICAvLyB1bm5lY2Vzc2FyeSBub2RlcywgYnV0IHdlIG5ldmVyIHdhbnQgdG8gYXNzb2NpYXRlIHR3byBkaWZmZXJlbnQgcGFydHNcbiAgICAvLyB0byB0aGUgc2FtZSBpbmRleC4gVGhleSBtdXN0IGhhdmUgYSBjb25zdGFudCBub2RlIGJldHdlZW4uXG5cbiAgICB2YXIgbGFzdFBhcnRJbmRleCA9IDA7XG4gICAgdmFyIGluZGV4ID0gLTE7XG4gICAgdmFyIHBhcnRJbmRleCA9IDA7XG4gICAgdmFyIHtcbiAgICAgIHN0cmluZ3MsXG4gICAgICB2YWx1ZXM6IHtcbiAgICAgICAgbGVuZ3RoXG4gICAgICB9XG4gICAgfSA9IHJlc3VsdDtcblxuICAgIHdoaWxlIChwYXJ0SW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG5cbiAgICAgIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgLy8gQmVjYXVzZSB3ZSBzdGlsbCBoYXZlIHBhcnRzICh0aGUgb3V0ZXIgZm9yLWxvb3ApLCB3ZSBrbm93OlxuICAgICAgICAvLyAtIFRoZXJlIGlzIGEgdGVtcGxhdGUgaW4gdGhlIHN0YWNrXG4gICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxXG4gICAgICAvKiBOb2RlLkVMRU1FTlRfTk9ERSAqL1xuICAgICAgKSB7XG4gICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlcztcbiAgICAgICAgICAgIHZhciB7XG4gICAgICAgICAgICAgIGxlbmd0aDogX2xlbmd0aFxuICAgICAgICAgICAgfSA9IGF0dHJpYnV0ZXM7IC8vIFBlclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hbWVkTm9kZU1hcCxcbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZXMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlIHJldHVybmVkIGluIGRvY3VtZW50IG9yZGVyLlxuICAgICAgICAgICAgLy8gSW4gcGFydGljdWxhciwgRWRnZS9JRSBjYW4gcmV0dXJuIHRoZW0gb3V0IG9mIG9yZGVyLCBzbyB3ZSBjYW5ub3RcbiAgICAgICAgICAgIC8vIGFzc3VtZSBhIGNvcnJlc3BvbmRlbmNlIGJldHdlZW4gcGFydCBpbmRleCBhbmQgYXR0cmlidXRlIGluZGV4LlxuXG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoZW5kc1dpdGgoYXR0cmlidXRlc1tpXS5uYW1lLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRlbXBsYXRlIGxpdGVyYWwgc2VjdGlvbiBsZWFkaW5nIHVwIHRvIHRoZSBmaXJzdFxuICAgICAgICAgICAgICAvLyBleHByZXNzaW9uIGluIHRoaXMgYXR0cmlidXRlXG4gICAgICAgICAgICAgIHZhciBzdHJpbmdGb3JQYXJ0ID0gc3RyaW5nc1twYXJ0SW5kZXhdOyAvLyBGaW5kIHRoZSBhdHRyaWJ1dGUgbmFtZVxuXG4gICAgICAgICAgICAgIHZhciBuYW1lID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHN0cmluZ0ZvclBhcnQpWzJdOyAvLyBGaW5kIHRoZSBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAvLyBBbGwgYm91bmQgYXR0cmlidXRlcyBoYXZlIGhhZCBhIHN1ZmZpeCBhZGRlZCBpblxuICAgICAgICAgICAgICAvLyBUZW1wbGF0ZVJlc3VsdCNnZXRIVE1MIHRvIG9wdCBvdXQgb2Ygc3BlY2lhbCBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgLy8gaGFuZGxpbmcuIFRvIGxvb2sgdXAgdGhlIGF0dHJpYnV0ZSB2YWx1ZSB3ZSBhbHNvIG5lZWQgdG8gYWRkXG4gICAgICAgICAgICAgIC8vIHRoZSBzdWZmaXguXG5cbiAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZUxvb2t1cE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkgKyBib3VuZEF0dHJpYnV0ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZUxvb2t1cE5hbWUpO1xuICAgICAgICAgICAgICB2YXIgc3RhdGljcyA9IGF0dHJpYnV0ZVZhbHVlLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXR0cmlidXRlJyxcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHN0cmluZ3M6IHN0YXRpY3NcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHBhcnRJbmRleCArPSBzdGF0aWNzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ1RFTVBMQVRFJykge1xuICAgICAgICAgICAgc3RhY2sucHVzaChub2RlKTtcbiAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gM1xuICAgICAgLyogTm9kZS5URVhUX05PREUgKi9cbiAgICAgICkge1xuICAgICAgICAgIHZhciBkYXRhID0gbm9kZS5kYXRhO1xuXG4gICAgICAgICAgaWYgKGRhdGEuaW5kZXhPZihtYXJrZXIpID49IDApIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgIHZhciBfc3RyaW5ncyA9IGRhdGEuc3BsaXQobWFya2VyUmVnZXgpO1xuXG4gICAgICAgICAgICB2YXIgbGFzdEluZGV4ID0gX3N0cmluZ3MubGVuZ3RoIC0gMTsgLy8gR2VuZXJhdGUgYSBuZXcgdGV4dCBub2RlIGZvciBlYWNoIGxpdGVyYWwgc2VjdGlvblxuICAgICAgICAgICAgLy8gVGhlc2Ugbm9kZXMgYXJlIGFsc28gdXNlZCBhcyB0aGUgbWFya2VycyBmb3Igbm9kZSBwYXJ0c1xuXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdEluZGV4OyBfaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIHZhciBzID0gX3N0cmluZ3NbX2ldO1xuXG4gICAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICAgIGluc2VydCA9IGNyZWF0ZU1hcmtlcigpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTtcblxuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCAmJiBlbmRzV2l0aChtYXRjaFsyXSwgYm91bmRBdHRyaWJ1dGVTdWZmaXgpKSB7XG4gICAgICAgICAgICAgICAgICBzID0gcy5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyBtYXRjaFsxXSArIG1hdGNoWzJdLnNsaWNlKDAsIC1ib3VuZEF0dHJpYnV0ZVN1ZmZpeC5sZW5ndGgpICsgbWF0Y2hbM107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5zZXJ0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGluc2VydCwgbm9kZSk7XG4gICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25vZGUnLFxuICAgICAgICAgICAgICAgIGluZGV4OiArK2luZGV4XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSAvLyBJZiB0aGVyZSdzIG5vIHRleHQsIHdlIG11c3QgaW5zZXJ0IGEgY29tbWVudCB0byBtYXJrIG91ciBwbGFjZS5cbiAgICAgICAgICAgIC8vIEVsc2UsIHdlIGNhbiB0cnVzdCBpdCB3aWxsIHN0aWNrIGFyb3VuZCBhZnRlciBjbG9uaW5nLlxuXG5cbiAgICAgICAgICAgIGlmIChfc3RyaW5nc1tsYXN0SW5kZXhdID09PSAnJykge1xuICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCBub2RlKTtcbiAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9kZS5kYXRhID0gX3N0cmluZ3NbbGFzdEluZGV4XTtcbiAgICAgICAgICAgIH0gLy8gV2UgaGF2ZSBhIHBhcnQgZm9yIGVhY2ggbWF0Y2ggZm91bmRcblxuXG4gICAgICAgICAgICBwYXJ0SW5kZXggKz0gbGFzdEluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSA4XG4gICAgICAvKiBOb2RlLkNPTU1FTlRfTk9ERSAqL1xuICAgICAgKSB7XG4gICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudCA9IG5vZGUucGFyZW50Tm9kZTsgLy8gQWRkIGEgbmV3IG1hcmtlciBub2RlIHRvIGJlIHRoZSBzdGFydE5vZGUgb2YgdGhlIFBhcnQgaWYgYW55IG9mXG4gICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGFyZSB0cnVlOlxuICAgICAgICAgICAgLy8gICogV2UgZG9uJ3QgaGF2ZSBhIHByZXZpb3VzU2libGluZ1xuICAgICAgICAgICAgLy8gICogVGhlIHByZXZpb3VzU2libGluZyBpcyBhbHJlYWR5IHRoZSBzdGFydCBvZiBhIHByZXZpb3VzIHBhcnRcblxuICAgICAgICAgICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBudWxsIHx8IGluZGV4ID09PSBsYXN0UGFydEluZGV4KSB7XG4gICAgICAgICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgICAgICAgX3BhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYXN0UGFydEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiAnbm9kZScsXG4gICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTsgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG5leHRTaWJsaW5nLCBrZWVwIHRoaXMgbm9kZSBzbyB3ZSBoYXZlIGFuIGVuZC5cbiAgICAgICAgICAgIC8vIEVsc2UsIHdlIGNhbiByZW1vdmUgaXQgdG8gc2F2ZSBmdXR1cmUgY29zdHMuXG5cbiAgICAgICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIG5vZGUuZGF0YSA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICBpbmRleC0tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9pMiA9IC0xO1xuXG4gICAgICAgICAgICB3aGlsZSAoKF9pMiA9IG5vZGUuZGF0YS5pbmRleE9mKG1hcmtlciwgX2kyICsgMSkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAvLyBDb21tZW50IG5vZGUgaGFzIGEgYmluZGluZyBtYXJrZXIgaW5zaWRlLCBtYWtlIGFuIGluYWN0aXZlIHBhcnRcbiAgICAgICAgICAgICAgLy8gVGhlIGJpbmRpbmcgd29uJ3Qgd29yaywgYnV0IHN1YnNlcXVlbnQgYmluZGluZ3Mgd2lsbFxuICAgICAgICAgICAgICAvLyBUT0RPIChqdXN0aW5mYWduYW5pKTogY29uc2lkZXIgd2hldGhlciBpdCdzIGV2ZW4gd29ydGggaXQgdG9cbiAgICAgICAgICAgICAgLy8gbWFrZSBiaW5kaW5ncyBpbiBjb21tZW50cyB3b3JrXG4gICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25vZGUnLFxuICAgICAgICAgICAgICAgIGluZGV4OiAtMVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSAvLyBSZW1vdmUgdGV4dCBiaW5kaW5nIG5vZGVzIGFmdGVyIHRoZSB3YWxrIHRvIG5vdCBkaXN0dXJiIHRoZSBUcmVlV2Fsa2VyXG5cblxuICAgIGZvciAodmFyIG4gb2Ygbm9kZXNUb1JlbW92ZSkge1xuICAgICAgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pO1xuICAgIH1cbiAgfVxuXG59XG5cbnZhciBlbmRzV2l0aCA9IChzdHIsIHN1ZmZpeCkgPT4ge1xuICB2YXIgaW5kZXggPSBzdHIubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aDtcbiAgcmV0dXJuIGluZGV4ID49IDAgJiYgc3RyLnNsaWNlKGluZGV4KSA9PT0gc3VmZml4O1xufTtcblxudmFyIGlzVGVtcGxhdGVQYXJ0QWN0aXZlID0gcGFydCA9PiBwYXJ0LmluZGV4ICE9PSAtMTsgLy8gQWxsb3dzIGBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcnKWAgdG8gYmUgcmVuYW1lZCBmb3IgYVxuLy8gc21hbGwgbWFudWFsIHNpemUtc2F2aW5ncy5cblxudmFyIGNyZWF0ZU1hcmtlciA9ICgpID0+IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuLyoqXG4gKiBUaGlzIHJlZ2V4IGV4dHJhY3RzIHRoZSBhdHRyaWJ1dGUgbmFtZSBwcmVjZWRpbmcgYW4gYXR0cmlidXRlLXBvc2l0aW9uXG4gKiBleHByZXNzaW9uLiBJdCBkb2VzIHRoaXMgYnkgbWF0Y2hpbmcgdGhlIHN5bnRheCBhbGxvd2VkIGZvciBhdHRyaWJ1dGVzXG4gKiBhZ2FpbnN0IHRoZSBzdHJpbmcgbGl0ZXJhbCBkaXJlY3RseSBwcmVjZWRpbmcgdGhlIGV4cHJlc3Npb24sIGFzc3VtaW5nIHRoYXRcbiAqIHRoZSBleHByZXNzaW9uIGlzIGluIGFuIGF0dHJpYnV0ZS12YWx1ZSBwb3NpdGlvbi5cbiAqXG4gKiBTZWUgYXR0cmlidXRlcyBpbiB0aGUgSFRNTCBzcGVjOlxuICogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2VsZW1lbnRzLWF0dHJpYnV0ZXNcbiAqXG4gKiBcIiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzcGFjZS1jaGFyYWN0ZXJzXG4gKlxuICogXCJcXDAtXFx4MUZcXHg3Ri1cXHg5RlwiIGFyZSBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVycywgd2hpY2ggaW5jbHVkZXMgZXZlcnlcbiAqIHNwYWNlIGNoYXJhY3RlciBleGNlcHQgXCIgXCIuXG4gKlxuICogU28gYW4gYXR0cmlidXRlIGlzOlxuICogICogVGhlIG5hbWU6IGFueSBjaGFyYWN0ZXIgZXhjZXB0IGEgY29udHJvbCBjaGFyYWN0ZXIsIHNwYWNlIGNoYXJhY3RlciwgKCcpLFxuICogICAgKFwiKSwgXCI+XCIsIFwiPVwiLCBvciBcIi9cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5IFwiPVwiXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnk6XG4gKiAgICAqIEFueSBjaGFyYWN0ZXIgZXhjZXB0IHNwYWNlLCAoJyksIChcIiksIFwiPFwiLCBcIj5cIiwgXCI9XCIsIChgKSwgb3JcbiAqICAgICogKFwiKSB0aGVuIGFueSBub24tKFwiKSwgb3JcbiAqICAgICogKCcpIHRoZW4gYW55IG5vbi0oJylcbiAqL1xuXG52YXIgbGFzdEF0dHJpYnV0ZU5hbWVSZWdleCA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4vKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKShbXlxcMC1cXHgxRlxceDdGLVxceDlGIFwiJz49L10rKShbIFxceDA5XFx4MGFcXHgwY1xceDBkXSo9WyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qKD86W14gXFx4MDlcXHgwYVxceDBjXFx4MGRcIidgPD49XSp8XCJbXlwiXSp8J1teJ10qKSkkLztcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xudmFyIHdhbGtlck5vZGVGaWx0ZXIgPSAxMzNcbi8qIE5vZGVGaWx0ZXIuU0hPV197RUxFTUVOVHxDT01NRU5UfFRFWFR9ICovXG47XG4vKipcbiAqIFJlbW92ZXMgdGhlIGxpc3Qgb2Ygbm9kZXMgZnJvbSBhIFRlbXBsYXRlIHNhZmVseS4gSW4gYWRkaXRpb24gdG8gcmVtb3ZpbmdcbiAqIG5vZGVzIGZyb20gdGhlIFRlbXBsYXRlLCB0aGUgVGVtcGxhdGUgcGFydCBpbmRpY2VzIGFyZSB1cGRhdGVkIHRvIG1hdGNoXG4gKiB0aGUgbXV0YXRlZCBUZW1wbGF0ZSBET00uXG4gKlxuICogQXMgdGhlIHRlbXBsYXRlIGlzIHdhbGtlZCB0aGUgcmVtb3ZhbCBzdGF0ZSBpcyB0cmFja2VkIGFuZFxuICogcGFydCBpbmRpY2VzIGFyZSBhZGp1c3RlZCBhcyBuZWVkZWQuXG4gKlxuICogZGl2XG4gKiAgIGRpdiMxIChyZW1vdmUpIDwtLSBzdGFydCByZW1vdmluZyAocmVtb3Zpbmcgbm9kZSBpcyBkaXYjMSlcbiAqICAgICBkaXZcbiAqICAgICAgIGRpdiMyIChyZW1vdmUpICA8LS0gY29udGludWUgcmVtb3ZpbmcgKHJlbW92aW5nIG5vZGUgaXMgc3RpbGwgZGl2IzEpXG4gKiAgICAgICAgIGRpdlxuICogZGl2IDwtLSBzdG9wIHJlbW92aW5nIHNpbmNlIHByZXZpb3VzIHNpYmxpbmcgaXMgdGhlIHJlbW92aW5nIG5vZGUgKGRpdiMxLFxuICogcmVtb3ZlZCA0IG5vZGVzKVxuICovXG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCBub2Rlc1RvUmVtb3ZlKSB7XG4gIHZhciB7XG4gICAgZWxlbWVudDoge1xuICAgICAgY29udGVudFxuICAgIH0sXG4gICAgcGFydHNcbiAgfSA9IHRlbXBsYXRlO1xuICB2YXIgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihjb250ZW50LCB3YWxrZXJOb2RlRmlsdGVyLCBudWxsLCBmYWxzZSk7XG4gIHZhciBwYXJ0SW5kZXggPSBuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMocGFydHMpO1xuICB2YXIgcGFydCA9IHBhcnRzW3BhcnRJbmRleF07XG4gIHZhciBub2RlSW5kZXggPSAtMTtcbiAgdmFyIHJlbW92ZUNvdW50ID0gMDtcbiAgdmFyIG5vZGVzVG9SZW1vdmVJblRlbXBsYXRlID0gW107XG4gIHZhciBjdXJyZW50UmVtb3ZpbmdOb2RlID0gbnVsbDtcblxuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICBub2RlSW5kZXgrKztcbiAgICB2YXIgbm9kZSA9IHdhbGtlci5jdXJyZW50Tm9kZTsgLy8gRW5kIHJlbW92YWwgaWYgc3RlcHBlZCBwYXN0IHRoZSByZW1vdmluZyBub2RlXG5cbiAgICBpZiAobm9kZS5wcmV2aW91c1NpYmxpbmcgPT09IGN1cnJlbnRSZW1vdmluZ05vZGUpIHtcbiAgICAgIGN1cnJlbnRSZW1vdmluZ05vZGUgPSBudWxsO1xuICAgIH0gLy8gQSBub2RlIHRvIHJlbW92ZSB3YXMgZm91bmQgaW4gdGhlIHRlbXBsYXRlXG5cblxuICAgIGlmIChub2Rlc1RvUmVtb3ZlLmhhcyhub2RlKSkge1xuICAgICAgbm9kZXNUb1JlbW92ZUluVGVtcGxhdGUucHVzaChub2RlKTsgLy8gVHJhY2sgbm9kZSB3ZSdyZSByZW1vdmluZ1xuXG4gICAgICBpZiAoY3VycmVudFJlbW92aW5nTm9kZSA9PT0gbnVsbCkge1xuICAgICAgICBjdXJyZW50UmVtb3ZpbmdOb2RlID0gbm9kZTtcbiAgICAgIH1cbiAgICB9IC8vIFdoZW4gcmVtb3ZpbmcsIGluY3JlbWVudCBjb3VudCBieSB3aGljaCB0byBhZGp1c3Qgc3Vic2VxdWVudCBwYXJ0IGluZGljZXNcblxuXG4gICAgaWYgKGN1cnJlbnRSZW1vdmluZ05vZGUgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZUNvdW50Kys7XG4gICAgfVxuXG4gICAgd2hpbGUgKHBhcnQgIT09IHVuZGVmaW5lZCAmJiBwYXJ0LmluZGV4ID09PSBub2RlSW5kZXgpIHtcbiAgICAgIC8vIElmIHBhcnQgaXMgaW4gYSByZW1vdmVkIG5vZGUgZGVhY3RpdmF0ZSBpdCBieSBzZXR0aW5nIGluZGV4IHRvIC0xIG9yXG4gICAgICAvLyBhZGp1c3QgdGhlIGluZGV4IGFzIG5lZWRlZC5cbiAgICAgIHBhcnQuaW5kZXggPSBjdXJyZW50UmVtb3ZpbmdOb2RlICE9PSBudWxsID8gLTEgOiBwYXJ0LmluZGV4IC0gcmVtb3ZlQ291bnQ7IC8vIGdvIHRvIHRoZSBuZXh0IGFjdGl2ZSBwYXJ0LlxuXG4gICAgICBwYXJ0SW5kZXggPSBuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMocGFydHMsIHBhcnRJbmRleCk7XG4gICAgICBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICB9XG4gIH1cblxuICBub2Rlc1RvUmVtb3ZlSW5UZW1wbGF0ZS5mb3JFYWNoKG4gPT4gbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pKTtcbn1cblxudmFyIGNvdW50Tm9kZXMgPSBub2RlID0+IHtcbiAgdmFyIGNvdW50ID0gbm9kZS5ub2RlVHlwZSA9PT0gMTFcbiAgLyogTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICovXG4gID8gMCA6IDE7XG4gIHZhciB3YWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKG5vZGUsIHdhbGtlck5vZGVGaWx0ZXIsIG51bGwsIGZhbHNlKTtcblxuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICBjb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvdW50O1xufTtcblxudmFyIG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyA9IGZ1bmN0aW9uIG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cykge1xuICB2YXIgc3RhcnRJbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogLTE7XG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXggKyAxOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgaWYgKGlzVGVtcGxhdGVQYXJ0QWN0aXZlKHBhcnQpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuLyoqXG4gKiBJbnNlcnRzIHRoZSBnaXZlbiBub2RlIGludG8gdGhlIFRlbXBsYXRlLCBvcHRpb25hbGx5IGJlZm9yZSB0aGUgZ2l2ZW5cbiAqIHJlZk5vZGUuIEluIGFkZGl0aW9uIHRvIGluc2VydGluZyB0aGUgbm9kZSBpbnRvIHRoZSBUZW1wbGF0ZSwgdGhlIFRlbXBsYXRlXG4gKiBwYXJ0IGluZGljZXMgYXJlIHVwZGF0ZWQgdG8gbWF0Y2ggdGhlIG11dGF0ZWQgVGVtcGxhdGUgRE9NLlxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0Tm9kZUludG9UZW1wbGF0ZSh0ZW1wbGF0ZSwgbm9kZSkge1xuICB2YXIgcmVmTm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgdmFyIHtcbiAgICBlbGVtZW50OiB7XG4gICAgICBjb250ZW50XG4gICAgfSxcbiAgICBwYXJ0c1xuICB9ID0gdGVtcGxhdGU7IC8vIElmIHRoZXJlJ3Mgbm8gcmVmTm9kZSwgdGhlbiBwdXQgbm9kZSBhdCBlbmQgb2YgdGVtcGxhdGUuXG4gIC8vIE5vIHBhcnQgaW5kaWNlcyBuZWVkIHRvIGJlIHNoaWZ0ZWQgaW4gdGhpcyBjYXNlLlxuXG4gIGlmIChyZWZOb2RlID09PSBudWxsIHx8IHJlZk5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoY29udGVudCwgd2Fsa2VyTm9kZUZpbHRlciwgbnVsbCwgZmFsc2UpO1xuICB2YXIgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzKTtcbiAgdmFyIGluc2VydENvdW50ID0gMDtcbiAgdmFyIHdhbGtlckluZGV4ID0gLTE7XG5cbiAgd2hpbGUgKHdhbGtlci5uZXh0Tm9kZSgpKSB7XG4gICAgd2Fsa2VySW5kZXgrKztcbiAgICB2YXIgd2Fsa2VyTm9kZSA9IHdhbGtlci5jdXJyZW50Tm9kZTtcblxuICAgIGlmICh3YWxrZXJOb2RlID09PSByZWZOb2RlKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGNvdW50Tm9kZXMobm9kZSk7XG4gICAgICByZWZOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZk5vZGUpO1xuICAgIH1cblxuICAgIHdoaWxlIChwYXJ0SW5kZXggIT09IC0xICYmIHBhcnRzW3BhcnRJbmRleF0uaW5kZXggPT09IHdhbGtlckluZGV4KSB7XG4gICAgICAvLyBJZiB3ZSd2ZSBpbnNlcnRlZCB0aGUgbm9kZSwgc2ltcGx5IGFkanVzdCBhbGwgc3Vic2VxdWVudCBwYXJ0c1xuICAgICAgaWYgKGluc2VydENvdW50ID4gMCkge1xuICAgICAgICB3aGlsZSAocGFydEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHBhcnRzW3BhcnRJbmRleF0uaW5kZXggKz0gaW5zZXJ0Q291bnQ7XG4gICAgICAgICAgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzLCBwYXJ0SW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwYXJ0SW5kZXggPSBuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMocGFydHMsIHBhcnRJbmRleCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbnZhciBkaXJlY3RpdmVzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogQnJhbmRzIGEgZnVuY3Rpb24gYXMgYSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBzbyB0aGF0IGxpdC1odG1sIHdpbGwgY2FsbFxuICogdGhlIGZ1bmN0aW9uIGR1cmluZyB0ZW1wbGF0ZSByZW5kZXJpbmcsIHJhdGhlciB0aGFuIHBhc3NpbmcgYXMgYSB2YWx1ZS5cbiAqXG4gKiBBIF9kaXJlY3RpdmVfIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIFBhcnQgYXMgYW4gYXJndW1lbnQuIEl0IGhhcyB0aGVcbiAqIHNpZ25hdHVyZTogYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC5cbiAqXG4gKiBBIGRpcmVjdGl2ZSBfZmFjdG9yeV8gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGFyZ3VtZW50cyBmb3IgZGF0YSBhbmRcbiAqIGNvbmZpZ3VyYXRpb24gYW5kIHJldHVybnMgYSBkaXJlY3RpdmUuIFVzZXJzIG9mIGRpcmVjdGl2ZSB1c3VhbGx5IHJlZmVyIHRvXG4gKiB0aGUgZGlyZWN0aXZlIGZhY3RvcnkgYXMgdGhlIGRpcmVjdGl2ZS4gRm9yIGV4YW1wbGUsIFwiVGhlIHJlcGVhdCBkaXJlY3RpdmVcIi5cbiAqXG4gKiBVc3VhbGx5IGEgdGVtcGxhdGUgYXV0aG9yIHdpbGwgaW52b2tlIGEgZGlyZWN0aXZlIGZhY3RvcnkgaW4gdGhlaXIgdGVtcGxhdGVcbiAqIHdpdGggcmVsZXZhbnQgYXJndW1lbnRzLCB3aGljaCB3aWxsIHRoZW4gcmV0dXJuIGEgZGlyZWN0aXZlIGZ1bmN0aW9uLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIHVzaW5nIHRoZSBgcmVwZWF0KClgIGRpcmVjdGl2ZSBmYWN0b3J5IHRoYXQgdGFrZXMgYW5cbiAqIGFycmF5IGFuZCBhIGZ1bmN0aW9uIHRvIHJlbmRlciBhbiBpdGVtOlxuICpcbiAqIGBgYGpzXG4gKiBodG1sYDx1bD48JHtyZXBlYXQoaXRlbXMsIChpdGVtKSA9PiBodG1sYDxsaT4ke2l0ZW19PC9saT5gKX08L3VsPmBcbiAqIGBgYFxuICpcbiAqIFdoZW4gYHJlcGVhdGAgaXMgaW52b2tlZCwgaXQgcmV0dXJucyBhIGRpcmVjdGl2ZSBmdW5jdGlvbiB0aGF0IGNsb3NlcyBvdmVyXG4gKiBgaXRlbXNgIGFuZCB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uIFdoZW4gdGhlIG91dGVyIHRlbXBsYXRlIGlzIHJlbmRlcmVkLCB0aGVcbiAqIHJldHVybiBkaXJlY3RpdmUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIFBhcnQgZm9yIHRoZSBleHByZXNzaW9uLlxuICogYHJlcGVhdGAgdGhlbiBwZXJmb3JtcyBpdCdzIGN1c3RvbSBsb2dpYyB0byByZW5kZXIgbXVsdGlwbGUgaXRlbXMuXG4gKlxuICogQHBhcmFtIGYgVGhlIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uLiBNdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFcbiAqIGZ1bmN0aW9uIG9mIHRoZSBzaWduYXR1cmUgYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC4gVGhlIHJldHVybmVkIGZ1bmN0aW9uIHdpbGxcbiAqIGJlIGNhbGxlZCB3aXRoIHRoZSBwYXJ0IG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCB7ZGlyZWN0aXZlLCBodG1sfSBmcm9tICdsaXQtaHRtbCc7XG4gKlxuICogY29uc3QgaW1tdXRhYmxlID0gZGlyZWN0aXZlKCh2KSA9PiAocGFydCkgPT4ge1xuICogICBpZiAocGFydC52YWx1ZSAhPT0gdikge1xuICogICAgIHBhcnQuc2V0VmFsdWUodilcbiAqICAgfVxuICogfSk7XG4gKi9cblxudmFyIGRpcmVjdGl2ZSA9IGYgPT4gZnVuY3Rpb24gKCkge1xuICB2YXIgZCA9IGYoLi4uYXJndW1lbnRzKTtcbiAgZGlyZWN0aXZlcy5zZXQoZCwgdHJ1ZSk7XG4gIHJldHVybiBkO1xufTtcbnZhciBpc0RpcmVjdGl2ZSA9IG8gPT4ge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdmdW5jdGlvbicgJiYgZGlyZWN0aXZlcy5oYXMobyk7XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgdGhhdCBhIHZhbHVlIHdhcyBoYW5kbGVkIGJ5IGEgZGlyZWN0aXZlIGFuZFxuICogc2hvdWxkIG5vdCBiZSB3cml0dGVuIHRvIHRoZSBET00uXG4gKi9cbnZhciBub0NoYW5nZSA9IHt9O1xuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyBhIE5vZGVQYXJ0IHRvIGZ1bGx5IGNsZWFyIGl0cyBjb250ZW50LlxuICovXG5cbnZhciBub3RoaW5nID0ge307XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgYSBgVGVtcGxhdGVgIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIHRoZSBET00gYW5kIHVwZGF0ZWRcbiAqIHdpdGggbmV3IHZhbHVlcy5cbiAqL1xuXG5jbGFzcyBUZW1wbGF0ZUluc3RhbmNlIHtcbiAgY29uc3RydWN0b3IodGVtcGxhdGUsIHByb2Nlc3Nvciwgb3B0aW9ucykge1xuICAgIHRoaXMuX19wYXJ0cyA9IFtdO1xuICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgdXBkYXRlKHZhbHVlcykge1xuICAgIHZhciBpID0gMDtcblxuICAgIGZvciAodmFyIHBhcnQgb2YgdGhpcy5fX3BhcnRzKSB7XG4gICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcnQuc2V0VmFsdWUodmFsdWVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgaSsrO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9wYXJ0IG9mIHRoaXMuX19wYXJ0cykge1xuICAgICAgaWYgKF9wYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgX3BhcnQuY29tbWl0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2Nsb25lKCkge1xuICAgIC8vIFRoZXJlIGFyZSBhIG51bWJlciBvZiBzdGVwcyBpbiB0aGUgbGlmZWN5Y2xlIG9mIGEgdGVtcGxhdGUgaW5zdGFuY2Unc1xuICAgIC8vIERPTSBmcmFnbWVudDpcbiAgICAvLyAgMS4gQ2xvbmUgLSBjcmVhdGUgdGhlIGluc3RhbmNlIGZyYWdtZW50XG4gICAgLy8gIDIuIEFkb3B0IC0gYWRvcHQgaW50byB0aGUgbWFpbiBkb2N1bWVudFxuICAgIC8vICAzLiBQcm9jZXNzIC0gZmluZCBwYXJ0IG1hcmtlcnMgYW5kIGNyZWF0ZSBwYXJ0c1xuICAgIC8vICA0LiBVcGdyYWRlIC0gdXBncmFkZSBjdXN0b20gZWxlbWVudHNcbiAgICAvLyAgNS4gVXBkYXRlIC0gc2V0IG5vZGUsIGF0dHJpYnV0ZSwgcHJvcGVydHksIGV0Yy4sIHZhbHVlc1xuICAgIC8vICA2LiBDb25uZWN0IC0gY29ubmVjdCB0byB0aGUgZG9jdW1lbnQuIE9wdGlvbmFsIGFuZCBvdXRzaWRlIG9mIHRoaXNcbiAgICAvLyAgICAgbWV0aG9kLlxuICAgIC8vXG4gICAgLy8gV2UgaGF2ZSBhIGZldyBjb25zdHJhaW50cyBvbiB0aGUgb3JkZXJpbmcgb2YgdGhlc2Ugc3RlcHM6XG4gICAgLy8gICogV2UgbmVlZCB0byB1cGdyYWRlIGJlZm9yZSB1cGRhdGluZywgc28gdGhhdCBwcm9wZXJ0eSB2YWx1ZXMgd2lsbCBwYXNzXG4gICAgLy8gICAgdGhyb3VnaCBhbnkgcHJvcGVydHkgc2V0dGVycy5cbiAgICAvLyAgKiBXZSB3b3VsZCBsaWtlIHRvIHByb2Nlc3MgYmVmb3JlIHVwZ3JhZGluZyBzbyB0aGF0IHdlJ3JlIHN1cmUgdGhhdCB0aGVcbiAgICAvLyAgICBjbG9uZWQgZnJhZ21lbnQgaXMgaW5lcnQgYW5kIG5vdCBkaXN0dXJiZWQgYnkgc2VsZi1tb2RpZnlpbmcgRE9NLlxuICAgIC8vICAqIFdlIHdhbnQgY3VzdG9tIGVsZW1lbnRzIHRvIHVwZ3JhZGUgZXZlbiBpbiBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLlxuICAgIC8vXG4gICAgLy8gR2l2ZW4gdGhlc2UgY29uc3RyYWludHMsIHdpdGggZnVsbCBjdXN0b20gZWxlbWVudHMgc3VwcG9ydCB3ZSB3b3VsZFxuICAgIC8vIHByZWZlciB0aGUgb3JkZXI6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLCBDb25uZWN0XG4gICAgLy9cbiAgICAvLyBCdXQgU2FmYXJpIGRvZXMgbm90IGltcGxlbWVudCBDdXN0b21FbGVtZW50UmVnaXN0cnkjdXBncmFkZSwgc28gd2VcbiAgICAvLyBjYW4gbm90IGltcGxlbWVudCB0aGF0IG9yZGVyIGFuZCBzdGlsbCBoYXZlIHVwZ3JhZGUtYmVmb3JlLXVwZGF0ZSBhbmRcbiAgICAvLyB1cGdyYWRlIGRpc2Nvbm5lY3RlZCBmcmFnbWVudHMuIFNvIHdlIGluc3RlYWQgc2FjcmlmaWNlIHRoZVxuICAgIC8vIHByb2Nlc3MtYmVmb3JlLXVwZ3JhZGUgY29uc3RyYWludCwgc2luY2UgaW4gQ3VzdG9tIEVsZW1lbnRzIHYxIGVsZW1lbnRzXG4gICAgLy8gbXVzdCBub3QgbW9kaWZ5IHRoZWlyIGxpZ2h0IERPTSBpbiB0aGUgY29uc3RydWN0b3IuIFdlIHN0aWxsIGhhdmUgaXNzdWVzXG4gICAgLy8gd2hlbiBjby1leGlzdGluZyB3aXRoIENFdjAgZWxlbWVudHMgbGlrZSBQb2x5bWVyIDEsIGFuZCB3aXRoIHBvbHlmaWxsc1xuICAgIC8vIHRoYXQgZG9uJ3Qgc3RyaWN0bHkgYWRoZXJlIHRvIHRoZSBuby1tb2RpZmljYXRpb24gcnVsZSBiZWNhdXNlIHNoYWRvd1xuICAgIC8vIERPTSwgd2hpY2ggbWF5IGJlIGNyZWF0ZWQgaW4gdGhlIGNvbnN0cnVjdG9yLCBpcyBlbXVsYXRlZCBieSBiZWluZyBwbGFjZWRcbiAgICAvLyBpbiB0aGUgbGlnaHQgRE9NLlxuICAgIC8vXG4gICAgLy8gVGhlIHJlc3VsdGluZyBvcmRlciBpcyBvbiBuYXRpdmUgaXM6IENsb25lLCBBZG9wdCwgVXBncmFkZSwgUHJvY2VzcyxcbiAgICAvLyBVcGRhdGUsIENvbm5lY3QuIGRvY3VtZW50LmltcG9ydE5vZGUoKSBwZXJmb3JtcyBDbG9uZSwgQWRvcHQsIGFuZCBVcGdyYWRlXG4gICAgLy8gaW4gb25lIHN0ZXAuXG4gICAgLy9cbiAgICAvLyBUaGUgQ3VzdG9tIEVsZW1lbnRzIHYxIHBvbHlmaWxsIHN1cHBvcnRzIHVwZ3JhZGUoKSwgc28gdGhlIG9yZGVyIHdoZW5cbiAgICAvLyBwb2x5ZmlsbGVkIGlzIHRoZSBtb3JlIGlkZWFsOiBDbG9uZSwgUHJvY2VzcywgQWRvcHQsIFVwZ3JhZGUsIFVwZGF0ZSxcbiAgICAvLyBDb25uZWN0LlxuICAgIHZhciBmcmFnbWVudCA9IGlzQ0VQb2x5ZmlsbCA/IHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSA6IGRvY3VtZW50LmltcG9ydE5vZGUodGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNvbnRlbnQsIHRydWUpO1xuICAgIHZhciBzdGFjayA9IFtdO1xuICAgIHZhciBwYXJ0cyA9IHRoaXMudGVtcGxhdGUucGFydHM7IC8vIEVkZ2UgbmVlZHMgYWxsIDQgcGFyYW1ldGVycyBwcmVzZW50OyBJRTExIG5lZWRzIDNyZCBwYXJhbWV0ZXIgdG8gYmUgbnVsbFxuXG4gICAgdmFyIHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZnJhZ21lbnQsIDEzM1xuICAgIC8qIE5vZGVGaWx0ZXIuU0hPV197RUxFTUVOVHxDT01NRU5UfFRFWFR9ICovXG4gICAgLCBudWxsLCBmYWxzZSk7XG4gICAgdmFyIHBhcnRJbmRleCA9IDA7XG4gICAgdmFyIG5vZGVJbmRleCA9IDA7XG4gICAgdmFyIHBhcnQ7XG4gICAgdmFyIG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTsgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgbm9kZXMgYW5kIHBhcnRzIG9mIGEgdGVtcGxhdGVcblxuICAgIHdoaWxlIChwYXJ0SW5kZXggPCBwYXJ0cy5sZW5ndGgpIHtcbiAgICAgIHBhcnQgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuXG4gICAgICBpZiAoIWlzVGVtcGxhdGVQYXJ0QWN0aXZlKHBhcnQpKSB7XG4gICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBQcm9ncmVzcyB0aGUgdHJlZSB3YWxrZXIgdW50aWwgd2UgZmluZCBvdXIgbmV4dCBwYXJ0J3Mgbm9kZS5cbiAgICAgIC8vIE5vdGUgdGhhdCBtdWx0aXBsZSBwYXJ0cyBtYXkgc2hhcmUgdGhlIHNhbWUgbm9kZSAoYXR0cmlidXRlIHBhcnRzXG4gICAgICAvLyBvbiBhIHNpbmdsZSBlbGVtZW50KSwgc28gdGhpcyBsb29wIG1heSBub3QgcnVuIGF0IGFsbC5cblxuXG4gICAgICB3aGlsZSAobm9kZUluZGV4IDwgcGFydC5pbmRleCkge1xuICAgICAgICBub2RlSW5kZXgrKztcblxuICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gJ1RFTVBMQVRFJykge1xuICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gbm9kZS5jb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChub2RlID0gd2Fsa2VyLm5leHROb2RlKCkpID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gV2UndmUgZXhoYXVzdGVkIHRoZSBjb250ZW50IGluc2lkZSBhIG5lc3RlZCB0ZW1wbGF0ZSBlbGVtZW50LlxuICAgICAgICAgIC8vIEJlY2F1c2Ugd2Ugc3RpbGwgaGF2ZSBwYXJ0cyAodGhlIG91dGVyIGZvci1sb29wKSwgd2Uga25vdzpcbiAgICAgICAgICAvLyAtIFRoZXJlIGlzIGEgdGVtcGxhdGUgaW4gdGhlIHN0YWNrXG4gICAgICAgICAgLy8gLSBUaGUgd2Fsa2VyIHdpbGwgZmluZCBhIG5leHROb2RlIG91dHNpZGUgdGhlIHRlbXBsYXRlXG4gICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICB9XG4gICAgICB9IC8vIFdlJ3ZlIGFycml2ZWQgYXQgb3VyIHBhcnQncyBub2RlLlxuXG5cbiAgICAgIGlmIChwYXJ0LnR5cGUgPT09ICdub2RlJykge1xuICAgICAgICB2YXIgX3BhcnQyID0gdGhpcy5wcm9jZXNzb3IuaGFuZGxlVGV4dEV4cHJlc3Npb24odGhpcy5vcHRpb25zKTtcblxuICAgICAgICBfcGFydDIuaW5zZXJ0QWZ0ZXJOb2RlKG5vZGUucHJldmlvdXNTaWJsaW5nKTtcblxuICAgICAgICB0aGlzLl9fcGFydHMucHVzaChfcGFydDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2goLi4udGhpcy5wcm9jZXNzb3IuaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMobm9kZSwgcGFydC5uYW1lLCBwYXJ0LnN0cmluZ3MsIHRoaXMub3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICBwYXJ0SW5kZXgrKztcbiAgICB9XG5cbiAgICBpZiAoaXNDRVBvbHlmaWxsKSB7XG4gICAgICBkb2N1bWVudC5hZG9wdE5vZGUoZnJhZ21lbnQpO1xuICAgICAgY3VzdG9tRWxlbWVudHMudXBncmFkZShmcmFnbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9XG5cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBPdXIgVHJ1c3RlZFR5cGVQb2xpY3kgZm9yIEhUTUwgd2hpY2ggaXMgZGVjbGFyZWQgdXNpbmcgdGhlIGh0bWwgdGVtcGxhdGVcbiAqIHRhZyBmdW5jdGlvbi5cbiAqXG4gKiBUaGF0IEhUTUwgaXMgYSBkZXZlbG9wZXItYXV0aG9yZWQgY29uc3RhbnQsIGFuZCBpcyBwYXJzZWQgd2l0aCBpbm5lckhUTUxcbiAqIGJlZm9yZSBhbnkgdW50cnVzdGVkIGV4cHJlc3Npb25zIGhhdmUgYmVlbiBtaXhlZCBpbi4gVGhlcmVmb3IgaXQgaXNcbiAqIGNvbnNpZGVyZWQgc2FmZSBieSBjb25zdHJ1Y3Rpb24uXG4gKi9cblxudmFyIHBvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMgJiYgdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgnbGl0LWh0bWwnLCB7XG4gIGNyZWF0ZUhUTUw6IHMgPT4gc1xufSk7XG52YXIgY29tbWVudE1hcmtlciA9IFwiIFwiLmNvbmNhdChtYXJrZXIsIFwiIFwiKTtcbi8qKlxuICogVGhlIHJldHVybiB0eXBlIG9mIGBodG1sYCwgd2hpY2ggaG9sZHMgYSBUZW1wbGF0ZSBhbmQgdGhlIHZhbHVlcyBmcm9tXG4gKiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbnMuXG4gKi9cblxuY2xhc3MgVGVtcGxhdGVSZXN1bHQge1xuICBjb25zdHJ1Y3RvcihzdHJpbmdzLCB2YWx1ZXMsIHR5cGUsIHByb2Nlc3Nvcikge1xuICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyBvZiBIVE1MIHVzZWQgdG8gY3JlYXRlIGEgYDx0ZW1wbGF0ZT5gIGVsZW1lbnQuXG4gICAqL1xuXG5cbiAgZ2V0SFRNTCgpIHtcbiAgICB2YXIgbCA9IHRoaXMuc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgIHZhciBodG1sID0gJyc7XG4gICAgdmFyIGlzQ29tbWVudEJpbmRpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgcyA9IHRoaXMuc3RyaW5nc1tpXTsgLy8gRm9yIGVhY2ggYmluZGluZyB3ZSB3YW50IHRvIGRldGVybWluZSB0aGUga2luZCBvZiBtYXJrZXIgdG8gaW5zZXJ0XG4gICAgICAvLyBpbnRvIHRoZSB0ZW1wbGF0ZSBzb3VyY2UgYmVmb3JlIGl0J3MgcGFyc2VkIGJ5IHRoZSBicm93c2VyJ3MgSFRNTFxuICAgICAgLy8gcGFyc2VyLiBUaGUgbWFya2VyIHR5cGUgaXMgYmFzZWQgb24gd2hldGhlciB0aGUgZXhwcmVzc2lvbiBpcyBpbiBhblxuICAgICAgLy8gYXR0cmlidXRlLCB0ZXh0LCBvciBjb21tZW50IHBvc2l0aW9uLlxuICAgICAgLy8gICAqIEZvciBub2RlLXBvc2l0aW9uIGJpbmRpbmdzIHdlIGluc2VydCBhIGNvbW1lbnQgd2l0aCB0aGUgbWFya2VyXG4gICAgICAvLyAgICAgc2VudGluZWwgYXMgaXRzIHRleHQgY29udGVudCwgbGlrZSA8IS0te3tsaXQtZ3VpZH19LS0+LlxuICAgICAgLy8gICAqIEZvciBhdHRyaWJ1dGUgYmluZGluZ3Mgd2UgaW5zZXJ0IGp1c3QgdGhlIG1hcmtlciBzZW50aW5lbCBmb3IgdGhlXG4gICAgICAvLyAgICAgZmlyc3QgYmluZGluZywgc28gdGhhdCB3ZSBzdXBwb3J0IHVucXVvdGVkIGF0dHJpYnV0ZSBiaW5kaW5ncy5cbiAgICAgIC8vICAgICBTdWJzZXF1ZW50IGJpbmRpbmdzIGNhbiB1c2UgYSBjb21tZW50IG1hcmtlciBiZWNhdXNlIG11bHRpLWJpbmRpbmdcbiAgICAgIC8vICAgICBhdHRyaWJ1dGVzIG11c3QgYmUgcXVvdGVkLlxuICAgICAgLy8gICAqIEZvciBjb21tZW50IGJpbmRpbmdzIHdlIGluc2VydCBqdXN0IHRoZSBtYXJrZXIgc2VudGluZWwgc28gd2UgZG9uJ3RcbiAgICAgIC8vICAgICBjbG9zZSB0aGUgY29tbWVudC5cbiAgICAgIC8vXG4gICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgc2NhbnMgdGhlIHRlbXBsYXRlIHNvdXJjZSwgYnV0IGlzICpub3QqIGFuIEhUTUxcbiAgICAgIC8vIHBhcnNlci4gV2UgZG9uJ3QgbmVlZCB0byB0cmFjayB0aGUgdHJlZSBzdHJ1Y3R1cmUgb2YgdGhlIEhUTUwsIG9ubHlcbiAgICAgIC8vIHdoZXRoZXIgYSBiaW5kaW5nIGlzIGluc2lkZSBhIGNvbW1lbnQsIGFuZCBpZiBub3QsIGlmIGl0IGFwcGVhcnMgdG8gYmVcbiAgICAgIC8vIHRoZSBmaXJzdCBiaW5kaW5nIGluIGFuIGF0dHJpYnV0ZS5cblxuICAgICAgdmFyIGNvbW1lbnRPcGVuID0gcy5sYXN0SW5kZXhPZignPCEtLScpOyAvLyBXZSdyZSBpbiBjb21tZW50IHBvc2l0aW9uIGlmIHdlIGhhdmUgYSBjb21tZW50IG9wZW4gd2l0aCBubyBmb2xsb3dpbmdcbiAgICAgIC8vIGNvbW1lbnQgY2xvc2UuIEJlY2F1c2UgPC0tIGNhbiBhcHBlYXIgaW4gYW4gYXR0cmlidXRlIHZhbHVlIHRoZXJlIGNhblxuICAgICAgLy8gYmUgZmFsc2UgcG9zaXRpdmVzLlxuXG4gICAgICBpc0NvbW1lbnRCaW5kaW5nID0gKGNvbW1lbnRPcGVuID4gLTEgfHwgaXNDb21tZW50QmluZGluZykgJiYgcy5pbmRleE9mKCctLT4nLCBjb21tZW50T3BlbiArIDEpID09PSAtMTsgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYW4gYXR0cmlidXRlLWxpa2Ugc2VxdWVuY2UgcHJlY2VkaW5nIHRoZVxuICAgICAgLy8gZXhwcmVzc2lvbi4gVGhpcyBjYW4gbWF0Y2ggXCJuYW1lPXZhbHVlXCIgbGlrZSBzdHJ1Y3R1cmVzIGluIHRleHQsXG4gICAgICAvLyBjb21tZW50cywgYW5kIGF0dHJpYnV0ZSB2YWx1ZXMsIHNvIHRoZXJlIGNhbiBiZSBmYWxzZS1wb3NpdGl2ZXMuXG5cbiAgICAgIHZhciBhdHRyaWJ1dGVNYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTtcblxuICAgICAgaWYgKGF0dHJpYnV0ZU1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIC8vIFdlJ3JlIG9ubHkgaW4gdGhpcyBicmFuY2ggaWYgd2UgZG9uJ3QgaGF2ZSBhIGF0dHJpYnV0ZS1saWtlXG4gICAgICAgIC8vIHByZWNlZGluZyBzZXF1ZW5jZS4gRm9yIGNvbW1lbnRzLCB0aGlzIGd1YXJkcyBhZ2FpbnN0IHVudXN1YWxcbiAgICAgICAgLy8gYXR0cmlidXRlIHZhbHVlcyBsaWtlIDxkaXYgZm9vPVwiPCEtLSR7J2Jhcid9XCI+LiBDYXNlcyBsaWtlXG4gICAgICAgIC8vIDwhLS0gZm9vPSR7J2Jhcid9LS0+IGFyZSBoYW5kbGVkIGNvcnJlY3RseSBpbiB0aGUgYXR0cmlidXRlIGJyYW5jaFxuICAgICAgICAvLyBiZWxvdy5cbiAgICAgICAgaHRtbCArPSBzICsgKGlzQ29tbWVudEJpbmRpbmcgPyBjb21tZW50TWFya2VyIDogbm9kZU1hcmtlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3IgYXR0cmlidXRlcyB3ZSB1c2UganVzdCBhIG1hcmtlciBzZW50aW5lbCwgYW5kIGFsc28gYXBwZW5kIGFcbiAgICAgICAgLy8gJGxpdCQgc3VmZml4IHRvIHRoZSBuYW1lIHRvIG9wdC1vdXQgb2YgYXR0cmlidXRlLXNwZWNpZmljIHBhcnNpbmdcbiAgICAgICAgLy8gdGhhdCBJRSBhbmQgRWRnZSBkbyBmb3Igc3R5bGUgYW5kIGNlcnRhaW4gU1ZHIGF0dHJpYnV0ZXMuXG4gICAgICAgIGh0bWwgKz0gcy5zdWJzdHIoMCwgYXR0cmlidXRlTWF0Y2guaW5kZXgpICsgYXR0cmlidXRlTWF0Y2hbMV0gKyBhdHRyaWJ1dGVNYXRjaFsyXSArIGJvdW5kQXR0cmlidXRlU3VmZml4ICsgYXR0cmlidXRlTWF0Y2hbM10gKyBtYXJrZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaHRtbCArPSB0aGlzLnN0cmluZ3NbbF07XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cblxuICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldEhUTUwoKTtcblxuICAgIGlmIChwb2xpY3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gdGhpcyBpcyBzZWN1cmUgYmVjYXVzZSBgdGhpcy5zdHJpbmdzYCBpcyBhIFRlbXBsYXRlU3RyaW5nc0FycmF5LlxuICAgICAgLy8gVE9ETzogdmFsaWRhdGUgdGhpcyB3aGVuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1pcy10ZW1wbGF0ZS1vYmplY3QgaXNcbiAgICAgIC8vIGltcGxlbWVudGVkLlxuICAgICAgdmFsdWUgPSBwb2xpY3kuY3JlYXRlSFRNTCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG5cbn1cbi8qKlxuICogQSBUZW1wbGF0ZVJlc3VsdCBmb3IgU1ZHIGZyYWdtZW50cy5cbiAqXG4gKiBUaGlzIGNsYXNzIHdyYXBzIEhUTUwgaW4gYW4gYDxzdmc+YCB0YWcgaW4gb3JkZXIgdG8gcGFyc2UgaXRzIGNvbnRlbnRzIGluIHRoZVxuICogU1ZHIG5hbWVzcGFjZSwgdGhlbiBtb2RpZmllcyB0aGUgdGVtcGxhdGUgdG8gcmVtb3ZlIHRoZSBgPHN2Zz5gIHRhZyBzbyB0aGF0XG4gKiBjbG9uZXMgb25seSBjb250YWluZXIgdGhlIG9yaWdpbmFsIGZyYWdtZW50LlxuICovXG5cbmNsYXNzIFNWR1RlbXBsYXRlUmVzdWx0IGV4dGVuZHMgVGVtcGxhdGVSZXN1bHQge1xuICBnZXRIVE1MKCkge1xuICAgIHJldHVybiBcIjxzdmc+XCIuY29uY2F0KHN1cGVyLmdldEhUTUwoKSwgXCI8L3N2Zz5cIik7XG4gIH1cblxuICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gc3VwZXIuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgdmFyIGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50O1xuICAgIHZhciBzdmdFbGVtZW50ID0gY29udGVudC5maXJzdENoaWxkO1xuICAgIGNvbnRlbnQucmVtb3ZlQ2hpbGQoc3ZnRWxlbWVudCk7XG4gICAgcmVwYXJlbnROb2Rlcyhjb250ZW50LCBzdmdFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbnZhciBpc1ByaW1pdGl2ZSA9IHZhbHVlID0+IHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8ICEodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpO1xufTtcbnZhciBpc0l0ZXJhYmxlID0gdmFsdWUgPT4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgISEodmFsdWUgJiYgdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSk7XG59O1xuLyoqXG4gKiBXcml0ZXMgYXR0cmlidXRlIHZhbHVlcyB0byB0aGUgRE9NIGZvciBhIGdyb3VwIG9mIEF0dHJpYnV0ZVBhcnRzIGJvdW5kIHRvIGFcbiAqIHNpbmdsZSBhdHRyaWJ1dGUuIFRoZSB2YWx1ZSBpcyBvbmx5IHNldCBvbmNlIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzXG4gKiBmb3IgYW4gYXR0cmlidXRlLlxuICovXG5cbmNsYXNzIEF0dHJpYnV0ZUNvbW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB0aGlzLnBhcnRzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZ3MubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICB0aGlzLnBhcnRzW2ldID0gdGhpcy5fY3JlYXRlUGFydCgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIHNpbmdsZSBwYXJ0LiBPdmVycmlkZSB0aGlzIHRvIGNyZWF0ZSBhIGRpZmZlcm50IHR5cGUgb2YgcGFydC5cbiAgICovXG5cblxuICBfY3JlYXRlUGFydCgpIHtcbiAgICByZXR1cm4gbmV3IEF0dHJpYnV0ZVBhcnQodGhpcyk7XG4gIH1cblxuICBfZ2V0VmFsdWUoKSB7XG4gICAgdmFyIHN0cmluZ3MgPSB0aGlzLnN0cmluZ3M7XG4gICAgdmFyIGwgPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgdmFyIHBhcnRzID0gdGhpcy5wYXJ0czsgLy8gSWYgd2UncmUgYXNzaWduaW5nIGFuIGF0dHJpYnV0ZSB2aWEgc3ludGF4IGxpa2U6XG4gICAgLy8gICAgYXR0cj1cIiR7Zm9vfVwiICBvciAgYXR0cj0ke2Zvb31cbiAgICAvLyBidXQgbm90XG4gICAgLy8gICAgYXR0cj1cIiR7Zm9vfSAke2Jhcn1cIiBvciBhdHRyPVwiJHtmb299IGJhelwiXG4gICAgLy8gdGhlbiB3ZSBkb24ndCB3YW50IHRvIGNvZXJjZSB0aGUgYXR0cmlidXRlIHZhbHVlIGludG8gb25lIGxvbmdcbiAgICAvLyBzdHJpbmcuIEluc3RlYWQgd2Ugd2FudCB0byBqdXN0IHJldHVybiB0aGUgdmFsdWUgaXRzZWxmIGRpcmVjdGx5LFxuICAgIC8vIHNvIHRoYXQgc2FuaXRpemVET01WYWx1ZSBjYW4gZ2V0IHRoZSBhY3R1YWwgdmFsdWUgcmF0aGVyIHRoYW5cbiAgICAvLyBTdHJpbmcodmFsdWUpXG4gICAgLy8gVGhlIGV4Y2VwdGlvbiBpcyBpZiB2IGlzIGFuIGFycmF5LCBpbiB3aGljaCBjYXNlIHdlIGRvIHdhbnQgdG8gc21hc2hcbiAgICAvLyBpdCB0b2dldGhlciBpbnRvIGEgc3RyaW5nIHdpdGhvdXQgY2FsbGluZyBTdHJpbmcoKSBvbiB0aGUgYXJyYXkuXG4gICAgLy9cbiAgICAvLyBUaGlzIGFsc28gYWxsb3dzIHRydXN0ZWQgdmFsdWVzICh3aGVuIHVzaW5nIFRydXN0ZWRUeXBlcykgYmVpbmdcbiAgICAvLyBhc3NpZ25lZCB0byBET00gc2lua3Mgd2l0aG91dCBiZWluZyBzdHJpbmdpZmllZCBpbiB0aGUgcHJvY2Vzcy5cblxuICAgIGlmIChsID09PSAxICYmIHN0cmluZ3NbMF0gPT09ICcnICYmIHN0cmluZ3NbMV0gPT09ICcnKSB7XG4gICAgICB2YXIgdiA9IHBhcnRzWzBdLnZhbHVlO1xuXG4gICAgICBpZiAodHlwZW9mIHYgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycgfHwgIWlzSXRlcmFibGUodikpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRleHQgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0ZXh0ICs9IHN0cmluZ3NbaV07XG4gICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBfdiA9IHBhcnQudmFsdWU7XG5cbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlKF92KSB8fCAhaXNJdGVyYWJsZShfdikpIHtcbiAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiBfdiA9PT0gJ3N0cmluZycgPyBfdiA6IFN0cmluZyhfdik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yICh2YXIgdCBvZiBfdikge1xuICAgICAgICAgICAgdGV4dCArPSB0eXBlb2YgdCA9PT0gJ3N0cmluZycgPyB0IDogU3RyaW5nKHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRleHQgKz0gc3RyaW5nc1tsXTtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIGNvbW1pdCgpIHtcbiAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsIHRoaXMuX2dldFZhbHVlKCkpO1xuICAgIH1cbiAgfVxuXG59XG4vKipcbiAqIEEgUGFydCB0aGF0IGNvbnRyb2xzIGFsbCBvciBwYXJ0IG9mIGFuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqL1xuXG5jbGFzcyBBdHRyaWJ1dGVQYXJ0IHtcbiAgY29uc3RydWN0b3IoY29tbWl0dGVyKSB7XG4gICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbW1pdHRlciA9IGNvbW1pdHRlcjtcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSBub0NoYW5nZSAmJiAoIWlzUHJpbWl0aXZlKHZhbHVlKSB8fCB2YWx1ZSAhPT0gdGhpcy52YWx1ZSkpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTsgLy8gSWYgdGhlIHZhbHVlIGlzIGEgbm90IGEgZGlyZWN0aXZlLCBkaXJ0eSB0aGUgY29tbWl0dGVyIHNvIHRoYXQgaXQnbGxcbiAgICAgIC8vIGNhbGwgc2V0QXR0cmlidXRlLiBJZiB0aGUgdmFsdWUgaXMgYSBkaXJlY3RpdmUsIGl0J2xsIGRpcnR5IHRoZVxuICAgICAgLy8gY29tbWl0dGVyIGlmIGl0IGNhbGxzIHNldFZhbHVlKCkuXG5cbiAgICAgIGlmICghaXNEaXJlY3RpdmUodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuY29tbWl0dGVyLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb21taXQoKSB7XG4gICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgZGlyZWN0aXZlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSBub0NoYW5nZTtcbiAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNvbW1pdHRlci5jb21taXQoKTtcbiAgfVxuXG59XG4vKipcbiAqIEEgUGFydCB0aGF0IGNvbnRyb2xzIGEgbG9jYXRpb24gd2l0aGluIGEgTm9kZSB0cmVlLiBMaWtlIGEgUmFuZ2UsIE5vZGVQYXJ0XG4gKiBoYXMgc3RhcnQgYW5kIGVuZCBsb2NhdGlvbnMgYW5kIGNhbiBzZXQgYW5kIHVwZGF0ZSB0aGUgTm9kZXMgYmV0d2VlbiB0aG9zZVxuICogbG9jYXRpb25zLlxuICpcbiAqIE5vZGVQYXJ0cyBzdXBwb3J0IHNldmVyYWwgdmFsdWUgdHlwZXM6IHByaW1pdGl2ZXMsIE5vZGVzLCBUZW1wbGF0ZVJlc3VsdHMsXG4gKiBhcyB3ZWxsIGFzIGFycmF5cyBhbmQgaXRlcmFibGVzIG9mIHRob3NlIHR5cGVzLlxuICovXG5cbmNsYXNzIE5vZGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoaXMgcGFydCBpbnRvIGEgY29udGFpbmVyLlxuICAgKlxuICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICovXG5cblxuICBhcHBlbmRJbnRvKGNvbnRhaW5lcikge1xuICAgIHRoaXMuc3RhcnROb2RlID0gY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZU1hcmtlcigpKTtcbiAgICB0aGlzLmVuZE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIHRoaXMgcGFydCBhZnRlciB0aGUgYHJlZmAgbm9kZSAoYmV0d2VlbiBgcmVmYCBhbmQgYHJlZmAncyBuZXh0XG4gICAqIHNpYmxpbmcpLiBCb3RoIGByZWZgIGFuZCBpdHMgbmV4dCBzaWJsaW5nIG11c3QgYmUgc3RhdGljLCB1bmNoYW5naW5nIG5vZGVzXG4gICAqIHN1Y2ggYXMgdGhvc2UgdGhhdCBhcHBlYXIgaW4gYSBsaXRlcmFsIHNlY3Rpb24gb2YgYSB0ZW1wbGF0ZS5cbiAgICpcbiAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAqL1xuXG5cbiAgaW5zZXJ0QWZ0ZXJOb2RlKHJlZikge1xuICAgIHRoaXMuc3RhcnROb2RlID0gcmVmO1xuICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5uZXh0U2libGluZztcbiAgfVxuICAvKipcbiAgICogQXBwZW5kcyB0aGlzIHBhcnQgaW50byBhIHBhcmVudCBwYXJ0LlxuICAgKlxuICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICovXG5cblxuICBhcHBlbmRJbnRvUGFydChwYXJ0KSB7XG4gICAgcGFydC5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcblxuICAgIHBhcnQuX19pbnNlcnQodGhpcy5lbmROb2RlID0gY3JlYXRlTWFya2VyKCkpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIHRoaXMgcGFydCBhZnRlciB0aGUgYHJlZmAgcGFydC5cbiAgICpcbiAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAqL1xuXG5cbiAgaW5zZXJ0QWZ0ZXJQYXJ0KHJlZikge1xuICAgIHJlZi5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcblxuICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5lbmROb2RlO1xuICAgIHJlZi5lbmROb2RlID0gdGhpcy5zdGFydE5vZGU7XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGNvbW1pdCgpIHtcbiAgICBpZiAodGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgdmFyIGRpcmVjdGl2ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcblxuICAgIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG4gICAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlc3VsdCkge1xuICAgICAgdGhpcy5fX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgdGhpcy5fX2NvbW1pdE5vZGUodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuX19jb21taXRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbm90aGluZykge1xuICAgICAgdGhpcy52YWx1ZSA9IG5vdGhpbmc7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZhbGxiYWNrLCB3aWxsIHJlbmRlciB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uXG4gICAgICB0aGlzLl9fY29tbWl0VGV4dCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgX19pbnNlcnQobm9kZSkge1xuICAgIHRoaXMuZW5kTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCB0aGlzLmVuZE5vZGUpO1xuICB9XG5cbiAgX19jb21taXROb2RlKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgdGhpcy5fX2luc2VydCh2YWx1ZSk7XG5cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBfX2NvbW1pdFRleHQodmFsdWUpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlLm5leHRTaWJsaW5nO1xuICAgIHZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7IC8vIElmIGB2YWx1ZWAgaXNuJ3QgYWxyZWFkeSBhIHN0cmluZywgd2UgZXhwbGljaXRseSBjb252ZXJ0IGl0IGhlcmUgaW4gY2FzZVxuICAgIC8vIGl0IGNhbid0IGJlIGltcGxpY2l0bHkgY29udmVydGVkIC0gaS5lLiBpdCdzIGEgc3ltYm9sLlxuXG4gICAgdmFyIHZhbHVlQXNTdHJpbmcgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpO1xuXG4gICAgaWYgKG5vZGUgPT09IHRoaXMuZW5kTm9kZS5wcmV2aW91c1NpYmxpbmcgJiYgbm9kZS5ub2RlVHlwZSA9PT0gM1xuICAgIC8qIE5vZGUuVEVYVF9OT0RFICovXG4gICAgKSB7XG4gICAgICAgIC8vIElmIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSB0ZXh0IG5vZGUgYmV0d2VlbiB0aGUgbWFya2Vycywgd2UgY2FuIGp1c3RcbiAgICAgICAgLy8gc2V0IGl0cyB2YWx1ZSwgcmF0aGVyIHRoYW4gcmVwbGFjaW5nIGl0LlxuICAgICAgICAvLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiBDYW4gd2UganVzdCBjaGVjayBpZiB0aGlzLnZhbHVlIGlzIHByaW1pdGl2ZT9cbiAgICAgICAgbm9kZS5kYXRhID0gdmFsdWVBc1N0cmluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fY29tbWl0Tm9kZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZUFzU3RyaW5nKSk7XG4gICAgfVxuXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSkge1xuICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZUZhY3RvcnkodmFsdWUpO1xuXG4gICAgaWYgKHRoaXMudmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZUluc3RhbmNlICYmIHRoaXMudmFsdWUudGVtcGxhdGUgPT09IHRlbXBsYXRlKSB7XG4gICAgICB0aGlzLnZhbHVlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNYWtlIHN1cmUgd2UgcHJvcGFnYXRlIHRoZSB0ZW1wbGF0ZSBwcm9jZXNzb3IgZnJvbSB0aGUgVGVtcGxhdGVSZXN1bHRcbiAgICAgIC8vIHNvIHRoYXQgd2UgdXNlIGl0cyBzeW50YXggZXh0ZW5zaW9uLCBldGMuIFRoZSB0ZW1wbGF0ZSBmYWN0b3J5IGNvbWVzXG4gICAgICAvLyBmcm9tIHRoZSByZW5kZXIgZnVuY3Rpb24gb3B0aW9ucyBzbyB0aGF0IGl0IGNhbiBjb250cm9sIHRlbXBsYXRlXG4gICAgICAvLyBjYWNoaW5nIGFuZCBwcmVwcm9jZXNzaW5nLlxuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFRlbXBsYXRlSW5zdGFuY2UodGVtcGxhdGUsIHZhbHVlLnByb2Nlc3NvciwgdGhpcy5vcHRpb25zKTtcblxuICAgICAgdmFyIGZyYWdtZW50ID0gaW5zdGFuY2UuX2Nsb25lKCk7XG5cbiAgICAgIGluc3RhbmNlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuXG4gICAgICB0aGlzLl9fY29tbWl0Tm9kZShmcmFnbWVudCk7XG5cbiAgICAgIHRoaXMudmFsdWUgPSBpbnN0YW5jZTtcbiAgICB9XG4gIH1cblxuICBfX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgLy8gRm9yIGFuIEl0ZXJhYmxlLCB3ZSBjcmVhdGUgYSBuZXcgSW5zdGFuY2VQYXJ0IHBlciBpdGVtLCB0aGVuIHNldCBpdHNcbiAgICAvLyB2YWx1ZSB0byB0aGUgaXRlbS4gVGhpcyBpcyBhIGxpdHRsZSBiaXQgb2Ygb3ZlcmhlYWQgZm9yIGV2ZXJ5IGl0ZW0gaW5cbiAgICAvLyBhbiBJdGVyYWJsZSwgYnV0IGl0IGxldHMgdXMgcmVjdXJzZSBlYXNpbHkgYW5kIGVmZmljaWVudGx5IHVwZGF0ZSBBcnJheXNcbiAgICAvLyBvZiBUZW1wbGF0ZVJlc3VsdHMgdGhhdCB3aWxsIGJlIGNvbW1vbmx5IHJldHVybmVkIGZyb20gZXhwcmVzc2lvbnMgbGlrZTpcbiAgICAvLyBhcnJheS5tYXAoKGkpID0+IGh0bWxgJHtpfWApLCBieSByZXVzaW5nIGV4aXN0aW5nIFRlbXBsYXRlSW5zdGFuY2VzLlxuICAgIC8vIElmIF92YWx1ZSBpcyBhbiBhcnJheSwgdGhlbiB0aGUgcHJldmlvdXMgcmVuZGVyIHdhcyBvZiBhblxuICAgIC8vIGl0ZXJhYmxlIGFuZCBfdmFsdWUgd2lsbCBjb250YWluIHRoZSBOb2RlUGFydHMgZnJvbSB0aGUgcHJldmlvdXNcbiAgICAvLyByZW5kZXIuIElmIF92YWx1ZSBpcyBub3QgYW4gYXJyYXksIGNsZWFyIHRoaXMgcGFydCBhbmQgbWFrZSBhIG5ld1xuICAgIC8vIGFycmF5IGZvciBOb2RlUGFydHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB0aGlzLnZhbHVlID0gW107XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfSAvLyBMZXRzIHVzIGtlZXAgdHJhY2sgb2YgaG93IG1hbnkgaXRlbXMgd2Ugc3RhbXBlZCBzbyB3ZSBjYW4gY2xlYXIgbGVmdG92ZXJcbiAgICAvLyBpdGVtcyBmcm9tIGEgcHJldmlvdXMgcmVuZGVyXG5cblxuICAgIHZhciBpdGVtUGFydHMgPSB0aGlzLnZhbHVlO1xuICAgIHZhciBwYXJ0SW5kZXggPSAwO1xuICAgIHZhciBpdGVtUGFydDtcblxuICAgIGZvciAodmFyIGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgIC8vIFRyeSB0byByZXVzZSBhbiBleGlzdGluZyBwYXJ0XG4gICAgICBpdGVtUGFydCA9IGl0ZW1QYXJ0c1twYXJ0SW5kZXhdOyAvLyBJZiBubyBleGlzdGluZyBwYXJ0LCBjcmVhdGUgYSBuZXcgb25lXG5cbiAgICAgIGlmIChpdGVtUGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGl0ZW1QYXJ0ID0gbmV3IE5vZGVQYXJ0KHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGl0ZW1QYXJ0cy5wdXNoKGl0ZW1QYXJ0KTtcblxuICAgICAgICBpZiAocGFydEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgaXRlbVBhcnQuYXBwZW5kSW50b1BhcnQodGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVBhcnQuaW5zZXJ0QWZ0ZXJQYXJ0KGl0ZW1QYXJ0c1twYXJ0SW5kZXggLSAxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaXRlbVBhcnQuc2V0VmFsdWUoaXRlbSk7XG4gICAgICBpdGVtUGFydC5jb21taXQoKTtcbiAgICAgIHBhcnRJbmRleCsrO1xuICAgIH1cblxuICAgIGlmIChwYXJ0SW5kZXggPCBpdGVtUGFydHMubGVuZ3RoKSB7XG4gICAgICAvLyBUcnVuY2F0ZSB0aGUgcGFydHMgYXJyYXkgc28gX3ZhbHVlIHJlZmxlY3RzIHRoZSBjdXJyZW50IHN0YXRlXG4gICAgICBpdGVtUGFydHMubGVuZ3RoID0gcGFydEluZGV4O1xuICAgICAgdGhpcy5jbGVhcihpdGVtUGFydCAmJiBpdGVtUGFydC5lbmROb2RlKTtcbiAgICB9XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB2YXIgc3RhcnROb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLnN0YXJ0Tm9kZTtcbiAgICByZW1vdmVOb2Rlcyh0aGlzLnN0YXJ0Tm9kZS5wYXJlbnROb2RlLCBzdGFydE5vZGUubmV4dFNpYmxpbmcsIHRoaXMuZW5kTm9kZSk7XG4gIH1cblxufVxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgYm9vbGVhbiBhdHRyaWJ1dGUsIHJvdWdobHkgYXMgZGVmaW5lZCBpbiB0aGUgSFRNTFxuICogc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBJZiB0aGUgdmFsdWUgaXMgdHJ1dGh5LCB0aGVuIHRoZSBhdHRyaWJ1dGUgaXMgcHJlc2VudCB3aXRoIGEgdmFsdWUgb2ZcbiAqICcnLiBJZiB0aGUgdmFsdWUgaXMgZmFsc2V5LCB0aGUgYXR0cmlidXRlIGlzIHJlbW92ZWQuXG4gKi9cblxuY2xhc3MgQm9vbGVhbkF0dHJpYnV0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHN0cmluZ3MubGVuZ3RoICE9PSAyIHx8IHN0cmluZ3NbMF0gIT09ICcnIHx8IHN0cmluZ3NbMV0gIT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb2xlYW4gYXR0cmlidXRlcyBjYW4gb25seSBjb250YWluIGEgc2luZ2xlIGV4cHJlc3Npb24nKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgY29tbWl0KCkge1xuICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgdmFyIGRpcmVjdGl2ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX19wZW5kaW5nVmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gISF0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuXG4gICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgfVxuXG59XG4vKipcbiAqIFNldHMgYXR0cmlidXRlIHZhbHVlcyBmb3IgUHJvcGVydHlQYXJ0cywgc28gdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgb25jZVxuICogZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHMgZm9yIGEgcHJvcGVydHkuXG4gKlxuICogSWYgYW4gZXhwcmVzc2lvbiBjb250cm9scyB0aGUgd2hvbGUgcHJvcGVydHkgdmFsdWUsIHRoZW4gdGhlIHZhbHVlIGlzIHNpbXBseVxuICogYXNzaWduZWQgdG8gdGhlIHByb3BlcnR5IHVuZGVyIGNvbnRyb2wuIElmIHRoZXJlIGFyZSBzdHJpbmcgbGl0ZXJhbHMgb3JcbiAqIG11bHRpcGxlIGV4cHJlc3Npb25zLCB0aGVuIHRoZSBzdHJpbmdzIGFyZSBleHByZXNzaW9ucyBhcmUgaW50ZXJwb2xhdGVkIGludG9cbiAqIGEgc3RyaW5nIGZpcnN0LlxuICovXG5cbmNsYXNzIFByb3BlcnR5Q29tbWl0dGVyIGV4dGVuZHMgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgbmFtZSwgc3RyaW5ncykge1xuICAgIHN1cGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgIHRoaXMuc2luZ2xlID0gc3RyaW5ncy5sZW5ndGggPT09IDIgJiYgc3RyaW5nc1swXSA9PT0gJycgJiYgc3RyaW5nc1sxXSA9PT0gJyc7XG4gIH1cblxuICBfY3JlYXRlUGFydCgpIHtcbiAgICByZXR1cm4gbmV3IFByb3BlcnR5UGFydCh0aGlzKTtcbiAgfVxuXG4gIF9nZXRWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy5zaW5nbGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnRzWzBdLnZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5fZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIGNvbW1pdCgpIHtcbiAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuXG4gICAgICB0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXSA9IHRoaXMuX2dldFZhbHVlKCk7XG4gICAgfVxuICB9XG5cbn1cbmNsYXNzIFByb3BlcnR5UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQge30gLy8gRGV0ZWN0IGV2ZW50IGxpc3RlbmVyIG9wdGlvbnMgc3VwcG9ydC4gSWYgdGhlIGBjYXB0dXJlYCBwcm9wZXJ0eSBpcyByZWFkXG4vLyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCwgdGhlbiBvcHRpb25zIGFyZSBzdXBwb3J0ZWQuIElmIG5vdCwgdGhlbiB0aGUgdGhpcmRcbi8vIGFyZ3VtZW50IHRvIGFkZC9yZW1vdmVFdmVudExpc3RlbmVyIGlzIGludGVycHJldGVkIGFzIHRoZSBib29sZWFuIGNhcHR1cmVcbi8vIHZhbHVlIHNvIHdlIHNob3VsZCBvbmx5IHBhc3MgdGhlIGBjYXB0dXJlYCBwcm9wZXJ0eS5cblxudmFyIGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA9IGZhbHNlOyAvLyBXcmFwIGludG8gYW4gSUlGRSBiZWNhdXNlIE1TIEVkZ2UgPD0gdjQxIGRvZXMgbm90IHN1cHBvcnQgaGF2aW5nIHRyeS9jYXRjaFxuLy8gYmxvY2tzIHJpZ2h0IGludG8gdGhlIGJvZHkgb2YgYSBtb2R1bGVcblxuKCgpID0+IHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGdldCBjYXB0dXJlKCkge1xuICAgICAgICBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCBvcHRpb25zKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKF9lKSB7Ly8gZXZlbnQgb3B0aW9ucyBub3Qgc3VwcG9ydGVkXG4gIH1cbn0pKCk7XG5cbmNsYXNzIEV2ZW50UGFydCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGV2ZW50TmFtZSwgZXZlbnRDb250ZXh0KSB7XG4gICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWU7XG4gICAgdGhpcy5ldmVudENvbnRleHQgPSBldmVudENvbnRleHQ7XG5cbiAgICB0aGlzLl9fYm91bmRIYW5kbGVFdmVudCA9IGUgPT4gdGhpcy5oYW5kbGVFdmVudChlKTtcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgY29tbWl0KCkge1xuICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgdmFyIGRpcmVjdGl2ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX19wZW5kaW5nVmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5ld0xpc3RlbmVyID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICB2YXIgb2xkTGlzdGVuZXIgPSB0aGlzLnZhbHVlO1xuICAgIHZhciBzaG91bGRSZW1vdmVMaXN0ZW5lciA9IG5ld0xpc3RlbmVyID09IG51bGwgfHwgb2xkTGlzdGVuZXIgIT0gbnVsbCAmJiAobmV3TGlzdGVuZXIuY2FwdHVyZSAhPT0gb2xkTGlzdGVuZXIuY2FwdHVyZSB8fCBuZXdMaXN0ZW5lci5vbmNlICE9PSBvbGRMaXN0ZW5lci5vbmNlIHx8IG5ld0xpc3RlbmVyLnBhc3NpdmUgIT09IG9sZExpc3RlbmVyLnBhc3NpdmUpO1xuICAgIHZhciBzaG91bGRBZGRMaXN0ZW5lciA9IG5ld0xpc3RlbmVyICE9IG51bGwgJiYgKG9sZExpc3RlbmVyID09IG51bGwgfHwgc2hvdWxkUmVtb3ZlTGlzdGVuZXIpO1xuXG4gICAgaWYgKHNob3VsZFJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuX19vcHRpb25zID0gZ2V0T3B0aW9ucyhuZXdMaXN0ZW5lcik7XG4gICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICB9XG5cbiAgICB0aGlzLnZhbHVlID0gbmV3TGlzdGVuZXI7XG4gICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMudmFsdWUuY2FsbCh0aGlzLmV2ZW50Q29udGV4dCB8fCB0aGlzLmVsZW1lbnQsIGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZS5oYW5kbGVFdmVudChldmVudCk7XG4gICAgfVxuICB9XG5cbn0gLy8gV2UgY29weSBvcHRpb25zIGJlY2F1c2Ugb2YgdGhlIGluY29uc2lzdGVudCBiZWhhdmlvciBvZiBicm93c2VycyB3aGVuIHJlYWRpbmdcbi8vIHRoZSB0aGlyZCBhcmd1bWVudCBvZiBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lci4gSUUxMSBkb2Vzbid0IHN1cHBvcnQgb3B0aW9uc1xuLy8gYXQgYWxsLiBDaHJvbWUgNDEgb25seSByZWFkcyBgY2FwdHVyZWAgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIG9iamVjdC5cblxudmFyIGdldE9wdGlvbnMgPSBvID0+IG8gJiYgKGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA/IHtcbiAgY2FwdHVyZTogby5jYXB0dXJlLFxuICBwYXNzaXZlOiBvLnBhc3NpdmUsXG4gIG9uY2U6IG8ub25jZVxufSA6IG8uY2FwdHVyZSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogVGhlIGRlZmF1bHQgVGVtcGxhdGVGYWN0b3J5IHdoaWNoIGNhY2hlcyBUZW1wbGF0ZXMga2V5ZWQgb25cbiAqIHJlc3VsdC50eXBlIGFuZCByZXN1bHQuc3RyaW5ncy5cbiAqL1xuXG5mdW5jdGlvbiB0ZW1wbGF0ZUZhY3RvcnkocmVzdWx0KSB7XG4gIHZhciB0ZW1wbGF0ZUNhY2hlID0gdGVtcGxhdGVDYWNoZXMuZ2V0KHJlc3VsdC50eXBlKTtcblxuICBpZiAodGVtcGxhdGVDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGVtcGxhdGVDYWNoZSA9IHtcbiAgICAgIHN0cmluZ3NBcnJheTogbmV3IFdlYWtNYXAoKSxcbiAgICAgIGtleVN0cmluZzogbmV3IE1hcCgpXG4gICAgfTtcbiAgICB0ZW1wbGF0ZUNhY2hlcy5zZXQocmVzdWx0LnR5cGUsIHRlbXBsYXRlQ2FjaGUpO1xuICB9XG5cbiAgdmFyIHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcblxuICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfSAvLyBJZiB0aGUgVGVtcGxhdGVTdHJpbmdzQXJyYXkgaXMgbmV3LCBnZW5lcmF0ZSBhIGtleSBmcm9tIHRoZSBzdHJpbmdzXG4gIC8vIFRoaXMga2V5IGlzIHNoYXJlZCBiZXR3ZWVuIGFsbCB0ZW1wbGF0ZXMgd2l0aCBpZGVudGljYWwgY29udGVudFxuXG5cbiAgdmFyIGtleSA9IHJlc3VsdC5zdHJpbmdzLmpvaW4obWFya2VyKTsgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGEgVGVtcGxhdGUgZm9yIHRoaXMga2V5XG5cbiAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcblxuICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90IHNlZW4gdGhpcyBrZXkgYmVmb3JlLCBjcmVhdGUgYSBuZXcgVGVtcGxhdGVcbiAgICB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQsIHJlc3VsdC5nZXRUZW1wbGF0ZUVsZW1lbnQoKSk7IC8vIENhY2hlIHRoZSBUZW1wbGF0ZSBmb3IgdGhpcyBrZXlcblxuICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTtcbiAgfSAvLyBDYWNoZSBhbGwgZnV0dXJlIHF1ZXJpZXMgZm9yIHRoaXMgVGVtcGxhdGVTdHJpbmdzQXJyYXlcblxuXG4gIHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LnNldChyZXN1bHQuc3RyaW5ncywgdGVtcGxhdGUpO1xuICByZXR1cm4gdGVtcGxhdGU7XG59XG52YXIgdGVtcGxhdGVDYWNoZXMgPSBuZXcgTWFwKCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbnZhciBwYXJ0cyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIFJlbmRlcnMgYSB0ZW1wbGF0ZSByZXN1bHQgb3Igb3RoZXIgdmFsdWUgdG8gYSBjb250YWluZXIuXG4gKlxuICogVG8gdXBkYXRlIGEgY29udGFpbmVyIHdpdGggbmV3IHZhbHVlcywgcmVldmFsdWF0ZSB0aGUgdGVtcGxhdGUgbGl0ZXJhbCBhbmRcbiAqIGNhbGwgYHJlbmRlcmAgd2l0aCB0aGUgbmV3IHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gcmVzdWx0IEFueSB2YWx1ZSByZW5kZXJhYmxlIGJ5IE5vZGVQYXJ0IC0gdHlwaWNhbGx5IGEgVGVtcGxhdGVSZXN1bHRcbiAqICAgICBjcmVhdGVkIGJ5IGV2YWx1YXRpbmcgYSB0ZW1wbGF0ZSB0YWcgbGlrZSBgaHRtbGAgb3IgYHN2Z2AuXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgRE9NIHBhcmVudCB0byByZW5kZXIgdG8uIFRoZSBlbnRpcmUgY29udGVudHMgYXJlIGVpdGhlclxuICogICAgIHJlcGxhY2VkLCBvciBlZmZpY2llbnRseSB1cGRhdGVkIGlmIHRoZSBzYW1lIHJlc3VsdCB0eXBlIHdhcyBwcmV2aW91c1xuICogICAgIHJlbmRlcmVkIHRoZXJlLlxuICogQHBhcmFtIG9wdGlvbnMgUmVuZGVyT3B0aW9ucyBmb3IgdGhlIGVudGlyZSByZW5kZXIgdHJlZSByZW5kZXJlZCB0byB0aGlzXG4gKiAgICAgY29udGFpbmVyLiBSZW5kZXIgb3B0aW9ucyBtdXN0ICpub3QqIGNoYW5nZSBiZXR3ZWVuIHJlbmRlcnMgdG8gdGhlIHNhbWVcbiAqICAgICBjb250YWluZXIsIGFzIHRob3NlIGNoYW5nZXMgd2lsbCBub3QgZWZmZWN0IHByZXZpb3VzbHkgcmVuZGVyZWQgRE9NLlxuICovXG5cbnZhciByZW5kZXIkMSA9IChyZXN1bHQsIGNvbnRhaW5lciwgb3B0aW9ucykgPT4ge1xuICB2YXIgcGFydCA9IHBhcnRzLmdldChjb250YWluZXIpO1xuXG4gIGlmIChwYXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZW1vdmVOb2Rlcyhjb250YWluZXIsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICBwYXJ0cy5zZXQoY29udGFpbmVyLCBwYXJ0ID0gbmV3IE5vZGVQYXJ0KE9iamVjdC5hc3NpZ24oe1xuICAgICAgdGVtcGxhdGVGYWN0b3J5XG4gICAgfSwgb3B0aW9ucykpKTtcbiAgICBwYXJ0LmFwcGVuZEludG8oY29udGFpbmVyKTtcbiAgfVxuXG4gIHBhcnQuc2V0VmFsdWUocmVzdWx0KTtcbiAgcGFydC5jb21taXQoKTtcbn07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQ3JlYXRlcyBQYXJ0cyB3aGVuIGEgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLlxuICovXG5cbmNsYXNzIERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgcGFydHMgZm9yIGFuIGF0dHJpYnV0ZS1wb3NpdGlvbiBiaW5kaW5nLCBnaXZlbiB0aGUgZXZlbnQsIGF0dHJpYnV0ZVxuICAgKiBuYW1lLCBhbmQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBiaW5kaW5nXG4gICAqIEBwYXJhbSBuYW1lICBUaGUgYXR0cmlidXRlIG5hbWVcbiAgICogQHBhcmFtIHN0cmluZ3MgVGhlIHN0cmluZyBsaXRlcmFscy4gVGhlcmUgYXJlIGFsd2F5cyBhdCBsZWFzdCB0d28gc3RyaW5ncyxcbiAgICogICBldmVudCBmb3IgZnVsbHktY29udHJvbGxlZCBiaW5kaW5ncyB3aXRoIGEgc2luZ2xlIGV4cHJlc3Npb24uXG4gICAqL1xuICBoYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyhlbGVtZW50LCBuYW1lLCBzdHJpbmdzLCBvcHRpb25zKSB7XG4gICAgdmFyIHByZWZpeCA9IG5hbWVbMF07XG5cbiAgICBpZiAocHJlZml4ID09PSAnLicpIHtcbiAgICAgIHZhciBfY29tbWl0dGVyID0gbmV3IFByb3BlcnR5Q29tbWl0dGVyKGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpO1xuXG4gICAgICByZXR1cm4gX2NvbW1pdHRlci5wYXJ0cztcbiAgICB9XG5cbiAgICBpZiAocHJlZml4ID09PSAnQCcpIHtcbiAgICAgIHJldHVybiBbbmV3IEV2ZW50UGFydChlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBvcHRpb25zLmV2ZW50Q29udGV4dCldO1xuICAgIH1cblxuICAgIGlmIChwcmVmaXggPT09ICc/Jykge1xuICAgICAgcmV0dXJuIFtuZXcgQm9vbGVhbkF0dHJpYnV0ZVBhcnQoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgc3RyaW5ncyldO1xuICAgIH1cblxuICAgIHZhciBjb21taXR0ZXIgPSBuZXcgQXR0cmlidXRlQ29tbWl0dGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgIHJldHVybiBjb21taXR0ZXIucGFydHM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBwYXJ0cyBmb3IgYSB0ZXh0LXBvc2l0aW9uIGJpbmRpbmcuXG4gICAqIEBwYXJhbSB0ZW1wbGF0ZUZhY3RvcnlcbiAgICovXG5cblxuICBoYW5kbGVUZXh0RXhwcmVzc2lvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlUGFydChvcHRpb25zKTtcbiAgfVxuXG59XG52YXIgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yID0gbmV3IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvcigpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vLyBUaGlzIGxpbmUgd2lsbCBiZSB1c2VkIGluIHJlZ2V4ZXMgdG8gc2VhcmNoIGZvciBsaXQtaHRtbCB1c2FnZS5cbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IGluamVjdCB2ZXJzaW9uIG51bWJlciBhdCBidWlsZCB0aW1lXG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSB8fCAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSA9IFtdKSkucHVzaCgnMS4zLjAnKTtcbn1cbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gSFRNTCB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cblxuXG52YXIgaHRtbCA9IGZ1bmN0aW9uIGh0bWwoc3RyaW5ncykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICB2YWx1ZXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUZW1wbGF0ZVJlc3VsdChzdHJpbmdzLCB2YWx1ZXMsICdodG1sJywgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yKTtcbn07XG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIGFuIFNWRyB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cblxudmFyIHN2ZyA9IGZ1bmN0aW9uIHN2ZyhzdHJpbmdzKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICB2YWx1ZXNbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gbmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ3N2ZycsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbnZhciBnZXRUZW1wbGF0ZUNhY2hlS2V5ID0gKHR5cGUsIHNjb3BlTmFtZSkgPT4gXCJcIi5jb25jYXQodHlwZSwgXCItLVwiKS5jb25jYXQoc2NvcGVOYW1lKTtcblxudmFyIGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSB0cnVlO1xuXG5pZiAodHlwZW9mIHdpbmRvdy5TaGFkeUNTUyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiA9IGZhbHNlO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29uc29sZS53YXJuKFwiSW5jb21wYXRpYmxlIFNoYWR5Q1NTIHZlcnNpb24gZGV0ZWN0ZWQuIFwiICsgXCJQbGVhc2UgdXBkYXRlIHRvIGF0IGxlYXN0IEB3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqc0AyLjAuMiBhbmQgXCIgKyBcIkB3ZWJjb21wb25lbnRzL3NoYWR5Y3NzQDEuMy4xLlwiKTtcbiAgY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiA9IGZhbHNlO1xufVxuLyoqXG4gKiBUZW1wbGF0ZSBmYWN0b3J5IHdoaWNoIHNjb3BlcyB0ZW1wbGF0ZSBET00gdXNpbmcgU2hhZHlDU1MuXG4gKiBAcGFyYW0gc2NvcGVOYW1lIHtzdHJpbmd9XG4gKi9cblxuXG52YXIgc2hhZHlUZW1wbGF0ZUZhY3RvcnkgPSBzY29wZU5hbWUgPT4gcmVzdWx0ID0+IHtcbiAgdmFyIGNhY2hlS2V5ID0gZ2V0VGVtcGxhdGVDYWNoZUtleShyZXN1bHQudHlwZSwgc2NvcGVOYW1lKTtcbiAgdmFyIHRlbXBsYXRlQ2FjaGUgPSB0ZW1wbGF0ZUNhY2hlcy5nZXQoY2FjaGVLZXkpO1xuXG4gIGlmICh0ZW1wbGF0ZUNhY2hlID09PSB1bmRlZmluZWQpIHtcbiAgICB0ZW1wbGF0ZUNhY2hlID0ge1xuICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcCgpLFxuICAgICAga2V5U3RyaW5nOiBuZXcgTWFwKClcbiAgICB9O1xuICAgIHRlbXBsYXRlQ2FjaGVzLnNldChjYWNoZUtleSwgdGVtcGxhdGVDYWNoZSk7XG4gIH1cblxuICB2YXIgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5nZXQocmVzdWx0LnN0cmluZ3MpO1xuXG4gIGlmICh0ZW1wbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG5cbiAgdmFyIGtleSA9IHJlc3VsdC5zdHJpbmdzLmpvaW4obWFya2VyKTtcbiAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcblxuICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBlbGVtZW50ID0gcmVzdWx0LmdldFRlbXBsYXRlRWxlbWVudCgpO1xuXG4gICAgaWYgKGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24pIHtcbiAgICAgIHdpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVEb20oZWxlbWVudCwgc2NvcGVOYW1lKTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQsIGVsZW1lbnQpO1xuICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTtcbiAgfVxuXG4gIHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LnNldChyZXN1bHQuc3RyaW5ncywgdGVtcGxhdGUpO1xuICByZXR1cm4gdGVtcGxhdGU7XG59O1xudmFyIFRFTVBMQVRFX1RZUEVTID0gWydodG1sJywgJ3N2ZyddO1xuLyoqXG4gKiBSZW1vdmVzIGFsbCBzdHlsZSBlbGVtZW50cyBmcm9tIFRlbXBsYXRlcyBmb3IgdGhlIGdpdmVuIHNjb3BlTmFtZS5cbiAqL1xuXG52YXIgcmVtb3ZlU3R5bGVzRnJvbUxpdFRlbXBsYXRlcyA9IHNjb3BlTmFtZSA9PiB7XG4gIFRFTVBMQVRFX1RZUEVTLmZvckVhY2godHlwZSA9PiB7XG4gICAgdmFyIHRlbXBsYXRlcyA9IHRlbXBsYXRlQ2FjaGVzLmdldChnZXRUZW1wbGF0ZUNhY2hlS2V5KHR5cGUsIHNjb3BlTmFtZSkpO1xuXG4gICAgaWYgKHRlbXBsYXRlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0ZW1wbGF0ZXMua2V5U3RyaW5nLmZvckVhY2godGVtcGxhdGUgPT4ge1xuICAgICAgICB2YXIge1xuICAgICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgICB9XG4gICAgICAgIH0gPSB0ZW1wbGF0ZTsgLy8gSUUgMTEgZG9lc24ndCBzdXBwb3J0IHRoZSBpdGVyYWJsZSBwYXJhbSBTZXQgY29uc3RydWN0b3JcblxuICAgICAgICB2YXIgc3R5bGVzID0gbmV3IFNldCgpO1xuICAgICAgICBBcnJheS5mcm9tKGNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKSkuZm9yRWFjaChzID0+IHtcbiAgICAgICAgICBzdHlsZXMuYWRkKHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVtb3ZlTm9kZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsIHN0eWxlcyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIHNoYWR5UmVuZGVyU2V0ID0gbmV3IFNldCgpO1xuLyoqXG4gKiBGb3IgdGhlIGdpdmVuIHNjb3BlIG5hbWUsIGVuc3VyZXMgdGhhdCBTaGFkeUNTUyBzdHlsZSBzY29waW5nIGlzIHBlcmZvcm1lZC5cbiAqIFRoaXMgaXMgZG9uZSBqdXN0IG9uY2UgcGVyIHNjb3BlIG5hbWUgc28gdGhlIGZyYWdtZW50IGFuZCB0ZW1wbGF0ZSBjYW5ub3RcbiAqIGJlIG1vZGlmaWVkLlxuICogKDEpIGV4dHJhY3RzIHN0eWxlcyBmcm9tIHRoZSByZW5kZXJlZCBmcmFnbWVudCBhbmQgaGFuZHMgdGhlbSB0byBTaGFkeUNTU1xuICogdG8gYmUgc2NvcGVkIGFuZCBhcHBlbmRlZCB0byB0aGUgZG9jdW1lbnRcbiAqICgyKSByZW1vdmVzIHN0eWxlIGVsZW1lbnRzIGZyb20gYWxsIGxpdC1odG1sIFRlbXBsYXRlcyBmb3IgdGhpcyBzY29wZSBuYW1lLlxuICpcbiAqIE5vdGUsIDxzdHlsZT4gZWxlbWVudHMgY2FuIG9ubHkgYmUgcGxhY2VkIGludG8gdGVtcGxhdGVzIGZvciB0aGVcbiAqIGluaXRpYWwgcmVuZGVyaW5nIG9mIHRoZSBzY29wZS4gSWYgPHN0eWxlPiBlbGVtZW50cyBhcmUgaW5jbHVkZWQgaW4gdGVtcGxhdGVzXG4gKiBkeW5hbWljYWxseSByZW5kZXJlZCB0byB0aGUgc2NvcGUgKGFmdGVyIHRoZSBmaXJzdCBzY29wZSByZW5kZXIpLCB0aGV5IHdpbGxcbiAqIG5vdCBiZSBzY29wZWQgYW5kIHRoZSA8c3R5bGU+IHdpbGwgYmUgbGVmdCBpbiB0aGUgdGVtcGxhdGUgYW5kIHJlbmRlcmVkXG4gKiBvdXRwdXQuXG4gKi9cblxudmFyIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyA9IChzY29wZU5hbWUsIHJlbmRlcmVkRE9NLCB0ZW1wbGF0ZSkgPT4ge1xuICBzaGFkeVJlbmRlclNldC5hZGQoc2NvcGVOYW1lKTsgLy8gSWYgYHJlbmRlcmVkRE9NYCBpcyBzdGFtcGVkIGZyb20gYSBUZW1wbGF0ZSwgdGhlbiB3ZSBuZWVkIHRvIGVkaXQgdGhhdFxuICAvLyBUZW1wbGF0ZSdzIHVuZGVybHlpbmcgdGVtcGxhdGUgZWxlbWVudC4gT3RoZXJ3aXNlLCB3ZSBjcmVhdGUgb25lIGhlcmVcbiAgLy8gdG8gZ2l2ZSB0byBTaGFkeUNTUywgd2hpY2ggc3RpbGwgcmVxdWlyZXMgb25lIHdoaWxlIHNjb3BpbmcuXG5cbiAgdmFyIHRlbXBsYXRlRWxlbWVudCA9ICEhdGVtcGxhdGUgPyB0ZW1wbGF0ZS5lbGVtZW50IDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTsgLy8gTW92ZSBzdHlsZXMgb3V0IG9mIHJlbmRlcmVkIERPTSBhbmQgc3RvcmUuXG5cbiAgdmFyIHN0eWxlcyA9IHJlbmRlcmVkRE9NLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJyk7XG4gIHZhciB7XG4gICAgbGVuZ3RoXG4gIH0gPSBzdHlsZXM7IC8vIElmIHRoZXJlIGFyZSBubyBzdHlsZXMsIHNraXAgdW5uZWNlc3Nhcnkgd29ya1xuXG4gIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAvLyBFbnN1cmUgcHJlcGFyZVRlbXBsYXRlU3R5bGVzIGlzIGNhbGxlZCB0byBzdXBwb3J0IGFkZGluZ1xuICAgIC8vIHN0eWxlcyB2aWEgYHByZXBhcmVBZG9wdGVkQ3NzVGV4dGAgc2luY2UgdGhhdCByZXF1aXJlcyB0aGF0XG4gICAgLy8gYHByZXBhcmVUZW1wbGF0ZVN0eWxlc2AgaXMgY2FsbGVkLlxuICAgIC8vXG4gICAgLy8gU2hhZHlDU1Mgd2lsbCBvbmx5IHVwZGF0ZSBzdHlsZXMgY29udGFpbmluZyBAYXBwbHkgaW4gdGhlIHRlbXBsYXRlXG4gICAgLy8gZ2l2ZW4gdG8gYHByZXBhcmVUZW1wbGF0ZVN0eWxlc2AuIElmIG5vIGxpdCBUZW1wbGF0ZSB3YXMgZ2l2ZW4sXG4gICAgLy8gU2hhZHlDU1Mgd2lsbCBub3QgYmUgYWJsZSB0byB1cGRhdGUgdXNlcyBvZiBAYXBwbHkgaW4gYW55IHJlbGV2YW50XG4gICAgLy8gdGVtcGxhdGUuIEhvd2V2ZXIsIHRoaXMgaXMgbm90IGEgcHJvYmxlbSBiZWNhdXNlIHdlIG9ubHkgY3JlYXRlIHRoZVxuICAgIC8vIHRlbXBsYXRlIGZvciB0aGUgcHVycG9zZSBvZiBzdXBwb3J0aW5nIGBwcmVwYXJlQWRvcHRlZENzc1RleHRgLFxuICAgIC8vIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydCBAYXBwbHkgYXQgYWxsLlxuICAgIHdpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGVFbGVtZW50LCBzY29wZU5hbWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjb25kZW5zZWRTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7IC8vIENvbGxlY3Qgc3R5bGVzIGludG8gYSBzaW5nbGUgc3R5bGUuIFRoaXMgaGVscHMgdXMgbWFrZSBzdXJlIFNoYWR5Q1NTXG4gIC8vIG1hbmlwdWxhdGlvbnMgd2lsbCBub3QgcHJldmVudCB1cyBmcm9tIGJlaW5nIGFibGUgdG8gZml4IHVwIHRlbXBsYXRlXG4gIC8vIHBhcnQgaW5kaWNlcy5cbiAgLy8gTk9URTogY29sbGVjdGluZyBzdHlsZXMgaXMgaW5lZmZpY2llbnQgZm9yIGJyb3dzZXJzIGJ1dCBTaGFkeUNTU1xuICAvLyBjdXJyZW50bHkgZG9lcyB0aGlzIGFueXdheS4gV2hlbiBpdCBkb2VzIG5vdCwgdGhpcyBzaG91bGQgYmUgY2hhbmdlZC5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9zdHlsZSA9IHN0eWxlc1tpXTtcblxuICAgIF9zdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF9zdHlsZSk7XG5cbiAgICBjb25kZW5zZWRTdHlsZS50ZXh0Q29udGVudCArPSBfc3R5bGUudGV4dENvbnRlbnQ7XG4gIH0gLy8gUmVtb3ZlIHN0eWxlcyBmcm9tIG5lc3RlZCB0ZW1wbGF0ZXMgaW4gdGhpcyBzY29wZS5cblxuXG4gIHJlbW92ZVN0eWxlc0Zyb21MaXRUZW1wbGF0ZXMoc2NvcGVOYW1lKTsgLy8gQW5kIHRoZW4gcHV0IHRoZSBjb25kZW5zZWQgc3R5bGUgaW50byB0aGUgXCJyb290XCIgdGVtcGxhdGUgcGFzc2VkIGluIGFzXG4gIC8vIGB0ZW1wbGF0ZWAuXG5cbiAgdmFyIGNvbnRlbnQgPSB0ZW1wbGF0ZUVsZW1lbnQuY29udGVudDtcblxuICBpZiAoISF0ZW1wbGF0ZSkge1xuICAgIGluc2VydE5vZGVJbnRvVGVtcGxhdGUodGVtcGxhdGUsIGNvbmRlbnNlZFN0eWxlLCBjb250ZW50LmZpcnN0Q2hpbGQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnRlbnQuaW5zZXJ0QmVmb3JlKGNvbmRlbnNlZFN0eWxlLCBjb250ZW50LmZpcnN0Q2hpbGQpO1xuICB9IC8vIE5vdGUsIGl0J3MgaW1wb3J0YW50IHRoYXQgU2hhZHlDU1MgZ2V0cyB0aGUgdGVtcGxhdGUgdGhhdCBgbGl0LWh0bWxgXG4gIC8vIHdpbGwgYWN0dWFsbHkgcmVuZGVyIHNvIHRoYXQgaXQgY2FuIHVwZGF0ZSB0aGUgc3R5bGUgaW5zaWRlIHdoZW5cbiAgLy8gbmVlZGVkIChlLmcuIEBhcHBseSBuYXRpdmUgU2hhZG93IERPTSBjYXNlKS5cblxuXG4gIHdpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGVFbGVtZW50LCBzY29wZU5hbWUpO1xuICB2YXIgc3R5bGUgPSBjb250ZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJyk7XG5cbiAgaWYgKHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3cgJiYgc3R5bGUgIT09IG51bGwpIHtcbiAgICAvLyBXaGVuIGluIG5hdGl2ZSBTaGFkb3cgRE9NLCBlbnN1cmUgdGhlIHN0eWxlIGNyZWF0ZWQgYnkgU2hhZHlDU1MgaXNcbiAgICAvLyBpbmNsdWRlZCBpbiBpbml0aWFsbHkgcmVuZGVyZWQgb3V0cHV0IChgcmVuZGVyZWRET01gKS5cbiAgICByZW5kZXJlZERPTS5pbnNlcnRCZWZvcmUoc3R5bGUuY2xvbmVOb2RlKHRydWUpLCByZW5kZXJlZERPTS5maXJzdENoaWxkKTtcbiAgfSBlbHNlIGlmICghIXRlbXBsYXRlKSB7XG4gICAgLy8gV2hlbiBubyBzdHlsZSBpcyBsZWZ0IGluIHRoZSB0ZW1wbGF0ZSwgcGFydHMgd2lsbCBiZSBicm9rZW4gYXMgYVxuICAgIC8vIHJlc3VsdC4gVG8gZml4IHRoaXMsIHdlIHB1dCBiYWNrIHRoZSBzdHlsZSBub2RlIFNoYWR5Q1NTIHJlbW92ZWRcbiAgICAvLyBhbmQgdGhlbiB0ZWxsIGxpdCB0byByZW1vdmUgdGhhdCBub2RlIGZyb20gdGhlIHRlbXBsYXRlLlxuICAgIC8vIFRoZXJlIGNhbiBiZSBubyBzdHlsZSBpbiB0aGUgdGVtcGxhdGUgaW4gMiBjYXNlcyAoMSkgd2hlbiBTaGFkeSBET01cbiAgICAvLyBpcyBpbiB1c2UsIFNoYWR5Q1NTIHJlbW92ZXMgYWxsIHN0eWxlcywgKDIpIHdoZW4gbmF0aXZlIFNoYWRvdyBET01cbiAgICAvLyBpcyBpbiB1c2UgU2hhZHlDU1MgcmVtb3ZlcyB0aGUgc3R5bGUgaWYgaXQgY29udGFpbnMgbm8gY29udGVudC5cbiAgICAvLyBOT1RFLCBTaGFkeUNTUyBjcmVhdGVzIGl0cyBvd24gc3R5bGUgc28gd2UgY2FuIHNhZmVseSBhZGQvcmVtb3ZlXG4gICAgLy8gYGNvbmRlbnNlZFN0eWxlYCBoZXJlLlxuICAgIGNvbnRlbnQuaW5zZXJ0QmVmb3JlKGNvbmRlbnNlZFN0eWxlLCBjb250ZW50LmZpcnN0Q2hpbGQpO1xuICAgIHZhciByZW1vdmVzID0gbmV3IFNldCgpO1xuICAgIHJlbW92ZXMuYWRkKGNvbmRlbnNlZFN0eWxlKTtcbiAgICByZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgcmVtb3Zlcyk7XG4gIH1cbn07XG4vKipcbiAqIEV4dGVuc2lvbiB0byB0aGUgc3RhbmRhcmQgYHJlbmRlcmAgbWV0aG9kIHdoaWNoIHN1cHBvcnRzIHJlbmRlcmluZ1xuICogdG8gU2hhZG93Um9vdHMgd2hlbiB0aGUgU2hhZHlET00gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3NoYWR5ZG9tKVxuICogYW5kIFNoYWR5Q1NTIChodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9zaGFkeWNzcykgcG9seWZpbGxzIGFyZSB1c2VkXG4gKiBvciB3aGVuIHRoZSB3ZWJjb21wb25lbnRzanNcbiAqIChodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMpIHBvbHlmaWxsIGlzIHVzZWQuXG4gKlxuICogQWRkcyBhIGBzY29wZU5hbWVgIG9wdGlvbiB3aGljaCBpcyB1c2VkIHRvIHNjb3BlIGVsZW1lbnQgRE9NIGFuZCBzdHlsZXNoZWV0c1xuICogd2hlbiBuYXRpdmUgU2hhZG93RE9NIGlzIHVuYXZhaWxhYmxlLiBUaGUgYHNjb3BlTmFtZWAgd2lsbCBiZSBhZGRlZCB0b1xuICogdGhlIGNsYXNzIGF0dHJpYnV0ZSBvZiBhbGwgcmVuZGVyZWQgRE9NLiBJbiBhZGRpdGlvbiwgYW55IHN0eWxlIGVsZW1lbnRzIHdpbGxcbiAqIGJlIGF1dG9tYXRpY2FsbHkgcmUtd3JpdHRlbiB3aXRoIHRoaXMgYHNjb3BlTmFtZWAgc2VsZWN0b3IgYW5kIG1vdmVkIG91dFxuICogb2YgdGhlIHJlbmRlcmVkIERPTSBhbmQgaW50byB0aGUgZG9jdW1lbnQgYDxoZWFkPmAuXG4gKlxuICogSXQgaXMgY29tbW9uIHRvIHVzZSB0aGlzIHJlbmRlciBtZXRob2QgaW4gY29uanVuY3Rpb24gd2l0aCBhIGN1c3RvbSBlbGVtZW50XG4gKiB3aGljaCByZW5kZXJzIGEgc2hhZG93Um9vdC4gV2hlbiB0aGlzIGlzIGRvbmUsIHR5cGljYWxseSB0aGUgZWxlbWVudCdzXG4gKiBgbG9jYWxOYW1lYCBzaG91bGQgYmUgdXNlZCBhcyB0aGUgYHNjb3BlTmFtZWAuXG4gKlxuICogSW4gYWRkaXRpb24gdG8gRE9NIHNjb3BpbmcsIFNoYWR5Q1NTIGFsc28gc3VwcG9ydHMgYSBiYXNpYyBzaGltIGZvciBjc3NcbiAqIGN1c3RvbSBwcm9wZXJ0aWVzIChuZWVkZWQgb25seSBvbiBvbGRlciBicm93c2VycyBsaWtlIElFMTEpIGFuZCBhIHNoaW0gZm9yXG4gKiBhIGRlcHJlY2F0ZWQgZmVhdHVyZSBjYWxsZWQgYEBhcHBseWAgdGhhdCBzdXBwb3J0cyBhcHBseWluZyBhIHNldCBvZiBjc3NcbiAqIGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGEgZ2l2ZW4gbG9jYXRpb24uXG4gKlxuICogVXNhZ2UgY29uc2lkZXJhdGlvbnM6XG4gKlxuICogKiBQYXJ0IHZhbHVlcyBpbiBgPHN0eWxlPmAgZWxlbWVudHMgYXJlIG9ubHkgYXBwbGllZCB0aGUgZmlyc3QgdGltZSBhIGdpdmVuXG4gKiBgc2NvcGVOYW1lYCByZW5kZXJzLiBTdWJzZXF1ZW50IGNoYW5nZXMgdG8gcGFydHMgaW4gc3R5bGUgZWxlbWVudHMgd2lsbCBoYXZlXG4gKiBubyBlZmZlY3QuIEJlY2F1c2Ugb2YgdGhpcywgcGFydHMgaW4gc3R5bGUgZWxlbWVudHMgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3JcbiAqIHZhbHVlcyB0aGF0IHdpbGwgbmV2ZXIgY2hhbmdlLCBmb3IgZXhhbXBsZSBwYXJ0cyB0aGF0IHNldCBzY29wZS13aWRlIHRoZW1lXG4gKiB2YWx1ZXMgb3IgcGFydHMgd2hpY2ggcmVuZGVyIHNoYXJlZCBzdHlsZSBlbGVtZW50cy5cbiAqXG4gKiAqIE5vdGUsIGR1ZSB0byBhIGxpbWl0YXRpb24gb2YgdGhlIFNoYWR5RE9NIHBvbHlmaWxsLCByZW5kZXJpbmcgaW4gYVxuICogY3VzdG9tIGVsZW1lbnQncyBgY29uc3RydWN0b3JgIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQgcmVuZGVyaW5nIHNob3VsZFxuICogZWl0aGVyIGRvbmUgYXN5bmNocm9ub3VzbHksIGZvciBleGFtcGxlIGF0IG1pY3JvdGFzayB0aW1pbmcgKGZvciBleGFtcGxlXG4gKiBgUHJvbWlzZS5yZXNvbHZlKClgKSwgb3IgYmUgZGVmZXJyZWQgdW50aWwgdGhlIGZpcnN0IHRpbWUgdGhlIGVsZW1lbnQnc1xuICogYGNvbm5lY3RlZENhbGxiYWNrYCBydW5zLlxuICpcbiAqIFVzYWdlIGNvbnNpZGVyYXRpb25zIHdoZW4gdXNpbmcgc2hpbW1lZCBjdXN0b20gcHJvcGVydGllcyBvciBgQGFwcGx5YDpcbiAqXG4gKiAqIFdoZW5ldmVyIGFueSBkeW5hbWljIGNoYW5nZXMgYXJlIG1hZGUgd2hpY2ggYWZmZWN0XG4gKiBjc3MgY3VzdG9tIHByb3BlcnRpZXMsIGBTaGFkeUNTUy5zdHlsZUVsZW1lbnQoZWxlbWVudClgIG11c3QgYmUgY2FsbGVkXG4gKiB0byB1cGRhdGUgdGhlIGVsZW1lbnQuIFRoZXJlIGFyZSB0d28gY2FzZXMgd2hlbiB0aGlzIGlzIG5lZWRlZDpcbiAqICgxKSB0aGUgZWxlbWVudCBpcyBjb25uZWN0ZWQgdG8gYSBuZXcgcGFyZW50LCAoMikgYSBjbGFzcyBpcyBhZGRlZCB0byB0aGVcbiAqIGVsZW1lbnQgdGhhdCBjYXVzZXMgaXQgdG8gbWF0Y2ggZGlmZmVyZW50IGN1c3RvbSBwcm9wZXJ0aWVzLlxuICogVG8gYWRkcmVzcyB0aGUgZmlyc3QgY2FzZSB3aGVuIHJlbmRlcmluZyBhIGN1c3RvbSBlbGVtZW50LCBgc3R5bGVFbGVtZW50YFxuICogc2hvdWxkIGJlIGNhbGxlZCBpbiB0aGUgZWxlbWVudCdzIGBjb25uZWN0ZWRDYWxsYmFja2AuXG4gKlxuICogKiBTaGltbWVkIGN1c3RvbSBwcm9wZXJ0aWVzIG1heSBvbmx5IGJlIGRlZmluZWQgZWl0aGVyIGZvciBhbiBlbnRpcmVcbiAqIHNoYWRvd1Jvb3QgKGZvciBleGFtcGxlLCBpbiBhIGA6aG9zdGAgcnVsZSkgb3IgdmlhIGEgcnVsZSB0aGF0IGRpcmVjdGx5XG4gKiBtYXRjaGVzIGFuIGVsZW1lbnQgd2l0aCBhIHNoYWRvd1Jvb3QuIEluIG90aGVyIHdvcmRzLCBpbnN0ZWFkIG9mIGZsb3dpbmcgZnJvbVxuICogcGFyZW50IHRvIGNoaWxkIGFzIGRvIG5hdGl2ZSBjc3MgY3VzdG9tIHByb3BlcnRpZXMsIHNoaW1tZWQgY3VzdG9tIHByb3BlcnRpZXNcbiAqIGZsb3cgb25seSBmcm9tIHNoYWRvd1Jvb3RzIHRvIG5lc3RlZCBzaGFkb3dSb290cy5cbiAqXG4gKiAqIFdoZW4gdXNpbmcgYEBhcHBseWAgbWl4aW5nIGNzcyBzaG9ydGhhbmQgcHJvcGVydHkgbmFtZXMgd2l0aFxuICogbm9uLXNob3J0aGFuZCBuYW1lcyAoZm9yIGV4YW1wbGUgYGJvcmRlcmAgYW5kIGBib3JkZXItd2lkdGhgKSBpcyBub3RcbiAqIHN1cHBvcnRlZC5cbiAqL1xuXG5cbnZhciByZW5kZXIgPSAocmVzdWx0LCBjb250YWluZXIsIG9wdGlvbnMpID0+IHtcbiAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCAhb3B0aW9ucy5zY29wZU5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgc2NvcGVOYW1lYCBvcHRpb24gaXMgcmVxdWlyZWQuJyk7XG4gIH1cblxuICB2YXIgc2NvcGVOYW1lID0gb3B0aW9ucy5zY29wZU5hbWU7XG4gIHZhciBoYXNSZW5kZXJlZCA9IHBhcnRzLmhhcyhjb250YWluZXIpO1xuICB2YXIgbmVlZHNTY29waW5nID0gY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiAmJiBjb250YWluZXIubm9kZVR5cGUgPT09IDExXG4gIC8qIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSAqL1xuICAmJiAhIWNvbnRhaW5lci5ob3N0OyAvLyBIYW5kbGUgZmlyc3QgcmVuZGVyIHRvIGEgc2NvcGUgc3BlY2lhbGx5Li4uXG5cbiAgdmFyIGZpcnN0U2NvcGVSZW5kZXIgPSBuZWVkc1Njb3BpbmcgJiYgIXNoYWR5UmVuZGVyU2V0LmhhcyhzY29wZU5hbWUpOyAvLyBPbiBmaXJzdCBzY29wZSByZW5kZXIsIHJlbmRlciBpbnRvIGEgZnJhZ21lbnQ7IHRoaXMgY2Fubm90IGJlIGEgc2luZ2xlXG4gIC8vIGZyYWdtZW50IHRoYXQgaXMgcmV1c2VkIHNpbmNlIG5lc3RlZCByZW5kZXJzIGNhbiBvY2N1ciBzeW5jaHJvbm91c2x5LlxuXG4gIHZhciByZW5kZXJDb250YWluZXIgPSBmaXJzdFNjb3BlUmVuZGVyID8gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpIDogY29udGFpbmVyO1xuICByZW5kZXIkMShyZXN1bHQsIHJlbmRlckNvbnRhaW5lciwgT2JqZWN0LmFzc2lnbih7XG4gICAgdGVtcGxhdGVGYWN0b3J5OiBzaGFkeVRlbXBsYXRlRmFjdG9yeShzY29wZU5hbWUpXG4gIH0sIG9wdGlvbnMpKTsgLy8gV2hlbiBwZXJmb3JtaW5nIGZpcnN0IHNjb3BlIHJlbmRlcixcbiAgLy8gKDEpIFdlJ3ZlIHJlbmRlcmVkIGludG8gYSBmcmFnbWVudCBzbyB0aGF0IHRoZXJlJ3MgYSBjaGFuY2UgdG9cbiAgLy8gYHByZXBhcmVUZW1wbGF0ZVN0eWxlc2AgYmVmb3JlIHN1Yi1lbGVtZW50cyBoaXQgdGhlIERPTVxuICAvLyAod2hpY2ggbWlnaHQgY2F1c2UgdGhlbSB0byByZW5kZXIgYmFzZWQgb24gYSBjb21tb24gcGF0dGVybiBvZlxuICAvLyByZW5kZXJpbmcgaW4gYSBjdXN0b20gZWxlbWVudCdzIGBjb25uZWN0ZWRDYWxsYmFja2ApO1xuICAvLyAoMikgU2NvcGUgdGhlIHRlbXBsYXRlIHdpdGggU2hhZHlDU1Mgb25lIHRpbWUgb25seSBmb3IgdGhpcyBzY29wZS5cbiAgLy8gKDMpIFJlbmRlciB0aGUgZnJhZ21lbnQgaW50byB0aGUgY29udGFpbmVyIGFuZCBtYWtlIHN1cmUgdGhlXG4gIC8vIGNvbnRhaW5lciBrbm93cyBpdHMgYHBhcnRgIGlzIHRoZSBvbmUgd2UganVzdCByZW5kZXJlZC4gVGhpcyBlbnN1cmVzXG4gIC8vIERPTSB3aWxsIGJlIHJlLXVzZWQgb24gc3Vic2VxdWVudCByZW5kZXJzLlxuXG4gIGlmIChmaXJzdFNjb3BlUmVuZGVyKSB7XG4gICAgdmFyIHBhcnQgPSBwYXJ0cy5nZXQocmVuZGVyQ29udGFpbmVyKTtcbiAgICBwYXJ0cy5kZWxldGUocmVuZGVyQ29udGFpbmVyKTsgLy8gU2hhZHlDU1MgbWlnaHQgaGF2ZSBzdHlsZSBzaGVldHMgKGUuZy4gZnJvbSBgcHJlcGFyZUFkb3B0ZWRDc3NUZXh0YClcbiAgICAvLyB0aGF0IHNob3VsZCBhcHBseSB0byBgcmVuZGVyQ29udGFpbmVyYCBldmVuIGlmIHRoZSByZW5kZXJlZCB2YWx1ZSBpc1xuICAgIC8vIG5vdCBhIFRlbXBsYXRlSW5zdGFuY2UuIEhvd2V2ZXIsIGl0IHdpbGwgb25seSBpbnNlcnQgc2NvcGVkIHN0eWxlc1xuICAgIC8vIGludG8gdGhlIGRvY3VtZW50IGlmIGBwcmVwYXJlVGVtcGxhdGVTdHlsZXNgIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkXG4gICAgLy8gZm9yIHRoZSBnaXZlbiBzY29wZSBuYW1lLlxuXG4gICAgdmFyIHRlbXBsYXRlID0gcGFydC52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlSW5zdGFuY2UgPyBwYXJ0LnZhbHVlLnRlbXBsYXRlIDogdW5kZWZpbmVkO1xuICAgIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyhzY29wZU5hbWUsIHJlbmRlckNvbnRhaW5lciwgdGVtcGxhdGUpO1xuICAgIHJlbW92ZU5vZGVzKGNvbnRhaW5lciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJDb250YWluZXIpO1xuICAgIHBhcnRzLnNldChjb250YWluZXIsIHBhcnQpO1xuICB9IC8vIEFmdGVyIGVsZW1lbnRzIGhhdmUgaGl0IHRoZSBET00sIHVwZGF0ZSBzdHlsaW5nIGlmIHRoaXMgaXMgdGhlXG4gIC8vIGluaXRpYWwgcmVuZGVyIHRvIHRoaXMgY29udGFpbmVyLlxuICAvLyBUaGlzIGlzIG5lZWRlZCB3aGVuZXZlciBkeW5hbWljIGNoYW5nZXMgYXJlIG1hZGUgc28gaXQgd291bGQgYmVcbiAgLy8gc2FmZXN0IHRvIGRvIGV2ZXJ5IHJlbmRlcjsgaG93ZXZlciwgdGhpcyB3b3VsZCByZWdyZXNzIHBlcmZvcm1hbmNlXG4gIC8vIHNvIHdlIGxlYXZlIGl0IHVwIHRvIHRoZSB1c2VyIHRvIGNhbGwgYFNoYWR5Q1NTLnN0eWxlRWxlbWVudGBcbiAgLy8gZm9yIGR5bmFtaWMgY2hhbmdlcy5cblxuXG4gIGlmICghaGFzUmVuZGVyZWQgJiYgbmVlZHNTY29waW5nKSB7XG4gICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudChjb250YWluZXIuaG9zdCk7XG4gIH1cbn07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbnZhciBfYTtcbi8qKlxuICogVXNlIHRoaXMgbW9kdWxlIGlmIHlvdSB3YW50IHRvIGNyZWF0ZSB5b3VyIG93biBiYXNlIGNsYXNzIGV4dGVuZGluZ1xuICogW1tVcGRhdGluZ0VsZW1lbnRdXS5cbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbi8qXG4gKiBXaGVuIHVzaW5nIENsb3N1cmUgQ29tcGlsZXIsIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkocHJvcGVydHksIG9iamVjdCkgaXNcbiAqIHJlcGxhY2VkIGF0IGNvbXBpbGUgdGltZSBieSB0aGUgbXVuZ2VkIG5hbWUgZm9yIG9iamVjdFtwcm9wZXJ0eV0uIFdlIGNhbm5vdFxuICogYWxpYXMgdGhpcyBmdW5jdGlvbiwgc28gd2UgaGF2ZSB0byB1c2UgYSBzbWFsbCBzaGltIHRoYXQgaGFzIHRoZSBzYW1lXG4gKiBiZWhhdmlvciB3aGVuIG5vdCBjb21waWxpbmcuXG4gKi9cblxuXG53aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSA9IChwcm9wLCBfb2JqKSA9PiBwcm9wO1xuXG52YXIgZGVmYXVsdENvbnZlcnRlciA9IHtcbiAgdG9BdHRyaWJ1dGUodmFsdWUsIHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gJycgOiBudWxsO1xuXG4gICAgICBjYXNlIE9iamVjdDpcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgcGFzcyB0aGlzIHRocm91Z2hcbiAgICAgICAgLy8gdG8gYWxsb3cgcmVtb3Zpbmcvbm8gY2hhbmdlIGJlaGF2aW9yLlxuICAgICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBmcm9tQXR0cmlidXRlKHZhbHVlLCB0eXBlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbDtcblxuICAgICAgY2FzZSBOdW1iZXI6XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IG51bGwgOiBOdW1iZXIodmFsdWUpO1xuXG4gICAgICBjYXNlIE9iamVjdDpcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxufTtcbi8qKlxuICogQ2hhbmdlIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgZGlmZmVyZW50IGZyb20gYG9sZFZhbHVlYC5cbiAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgYXMgdGhlIGRlZmF1bHQgZm9yIGEgcHJvcGVydHkncyBgaGFzQ2hhbmdlZGAgZnVuY3Rpb24uXG4gKi9cblxudmFyIG5vdEVxdWFsID0gKHZhbHVlLCBvbGQpID0+IHtcbiAgLy8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2VcbiAgcmV0dXJuIG9sZCAhPT0gdmFsdWUgJiYgKG9sZCA9PT0gb2xkIHx8IHZhbHVlID09PSB2YWx1ZSk7XG59O1xudmFyIGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uID0ge1xuICBhdHRyaWJ1dGU6IHRydWUsXG4gIHR5cGU6IFN0cmluZyxcbiAgY29udmVydGVyOiBkZWZhdWx0Q29udmVydGVyLFxuICByZWZsZWN0OiBmYWxzZSxcbiAgaGFzQ2hhbmdlZDogbm90RXF1YWxcbn07XG52YXIgU1RBVEVfSEFTX1VQREFURUQgPSAxO1xudmFyIFNUQVRFX1VQREFURV9SRVFVRVNURUQgPSAxIDw8IDI7XG52YXIgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEUgPSAxIDw8IDM7XG52YXIgU1RBVEVfSVNfUkVGTEVDVElOR19UT19QUk9QRVJUWSA9IDEgPDwgNDtcbi8qKlxuICogVGhlIENsb3N1cmUgSlMgQ29tcGlsZXIgZG9lc24ndCBjdXJyZW50bHkgaGF2ZSBnb29kIHN1cHBvcnQgZm9yIHN0YXRpY1xuICogcHJvcGVydHkgc2VtYW50aWNzIHdoZXJlIFwidGhpc1wiIGlzIGR5bmFtaWMgKGUuZy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvMzE3NyBhbmQgb3RoZXJzKSBzbyB3ZSB1c2VcbiAqIHRoaXMgaGFjayB0byBieXBhc3MgYW55IHJld3JpdGluZyBieSB0aGUgY29tcGlsZXIuXG4gKi9cblxudmFyIGZpbmFsaXplZCA9ICdmaW5hbGl6ZWQnO1xuLyoqXG4gKiBCYXNlIGVsZW1lbnQgY2xhc3Mgd2hpY2ggbWFuYWdlcyBlbGVtZW50IHByb3BlcnRpZXMgYW5kIGF0dHJpYnV0ZXMuIFdoZW5cbiAqIHByb3BlcnRpZXMgY2hhbmdlLCB0aGUgYHVwZGF0ZWAgbWV0aG9kIGlzIGFzeW5jaHJvbm91c2x5IGNhbGxlZC4gVGhpcyBtZXRob2RcbiAqIHNob3VsZCBiZSBzdXBwbGllZCBieSBzdWJjbGFzc2VycyB0byByZW5kZXIgdXBkYXRlcyBhcyBkZXNpcmVkLlxuICogQG5vSW5oZXJpdERvY1xuICovXG5cbmNsYXNzIFVwZGF0aW5nRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgYXR0cmlidXRlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSByZWdpc3RlcmVkIHByb3BlcnRpZXMuXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgLy8gbm90ZTogcGlnZ3kgYmFja2luZyBvbiB0aGlzIHRvIGVuc3VyZSB3ZSdyZSBmaW5hbGl6ZWQuXG4gICAgdGhpcy5maW5hbGl6ZSgpO1xuICAgIHZhciBhdHRyaWJ1dGVzID0gW107IC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvciBsb29wc1xuICAgIC8vIGV4cGVjdGluZyBhcnJheXNcblxuICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcy5mb3JFYWNoKCh2LCBwKSA9PiB7XG4gICAgICB2YXIgYXR0ciA9IHRoaXMuX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwLCB2KTtcblxuICAgICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwLnNldChhdHRyLCBwKTtcblxuICAgICAgICBhdHRyaWJ1dGVzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuICAvKipcbiAgICogRW5zdXJlcyB0aGUgcHJpdmF0ZSBgX2NsYXNzUHJvcGVydGllc2AgcHJvcGVydHkgbWV0YWRhdGEgaXMgY3JlYXRlZC5cbiAgICogSW4gYWRkaXRpb24gdG8gYGZpbmFsaXplYCB0aGlzIGlzIGFsc28gY2FsbGVkIGluIGBjcmVhdGVQcm9wZXJ0eWAgdG9cbiAgICogZW5zdXJlIHRoZSBgQHByb3BlcnR5YCBkZWNvcmF0b3IgY2FuIGFkZCBwcm9wZXJ0eSBtZXRhZGF0YS5cbiAgICovXG5cbiAgLyoqIEBub2NvbGxhcHNlICovXG5cblxuICBzdGF0aWMgX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpIHtcbiAgICAvLyBlbnN1cmUgcHJpdmF0ZSBzdG9yYWdlIGZvciBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMuXG4gICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19jbGFzc1Byb3BlcnRpZXMnLCB0aGlzKSkpIHtcbiAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyA9IG5ldyBNYXAoKTsgLy8gTk9URTogV29ya2Fyb3VuZCBJRTExIG5vdCBzdXBwb3J0aW5nIE1hcCBjb25zdHJ1Y3RvciBhcmd1bWVudC5cblxuICAgICAgdmFyIHN1cGVyUHJvcGVydGllcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fY2xhc3NQcm9wZXJ0aWVzO1xuXG4gICAgICBpZiAoc3VwZXJQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3VwZXJQcm9wZXJ0aWVzLmZvckVhY2goKHYsIGspID0+IHRoaXMuX2NsYXNzUHJvcGVydGllcy5zZXQoaywgdikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb3BlcnR5IGFjY2Vzc29yIG9uIHRoZSBlbGVtZW50IHByb3RvdHlwZSBpZiBvbmUgZG9lcyBub3QgZXhpc3RcbiAgICogYW5kIHN0b3JlcyBhIFByb3BlcnR5RGVjbGFyYXRpb24gZm9yIHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICAgKiBUaGUgcHJvcGVydHkgc2V0dGVyIGNhbGxzIHRoZSBwcm9wZXJ0eSdzIGBoYXNDaGFuZ2VkYCBwcm9wZXJ0eSBvcHRpb25cbiAgICogb3IgdXNlcyBhIHN0cmljdCBpZGVudGl0eSBjaGVjayB0byBkZXRlcm1pbmUgd2hldGhlciBvciBub3QgdG8gcmVxdWVzdFxuICAgKiBhbiB1cGRhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIG1heSBiZSBvdmVycmlkZGVuIHRvIGN1c3RvbWl6ZSBwcm9wZXJ0aWVzOyBob3dldmVyLFxuICAgKiB3aGVuIGRvaW5nIHNvLCBpdCdzIGltcG9ydGFudCB0byBjYWxsIGBzdXBlci5jcmVhdGVQcm9wZXJ0eWAgdG8gZW5zdXJlXG4gICAqIHRoZSBwcm9wZXJ0eSBpcyBzZXR1cCBjb3JyZWN0bHkuIFRoaXMgbWV0aG9kIGNhbGxzXG4gICAqIGBnZXRQcm9wZXJ0eURlc2NyaXB0b3JgIGludGVybmFsbHkgdG8gZ2V0IGEgZGVzY3JpcHRvciB0byBpbnN0YWxsLlxuICAgKiBUbyBjdXN0b21pemUgd2hhdCBwcm9wZXJ0aWVzIGRvIHdoZW4gdGhleSBhcmUgZ2V0IG9yIHNldCwgb3ZlcnJpZGVcbiAgICogYGdldFByb3BlcnR5RGVzY3JpcHRvcmAuIFRvIGN1c3RvbWl6ZSB0aGUgb3B0aW9ucyBmb3IgYSBwcm9wZXJ0eSxcbiAgICogaW1wbGVtZW50IGBjcmVhdGVQcm9wZXJ0eWAgbGlrZSB0aGlzOlxuICAgKlxuICAgKiBzdGF0aWMgY3JlYXRlUHJvcGVydHkobmFtZSwgb3B0aW9ucykge1xuICAgKiAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHtteU9wdGlvbjogdHJ1ZX0pO1xuICAgKiAgIHN1cGVyLmNyZWF0ZVByb3BlcnR5KG5hbWUsIG9wdGlvbnMpO1xuICAgKiB9XG4gICAqXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuXG5cbiAgc3RhdGljIGNyZWF0ZVByb3BlcnR5KG5hbWUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb247XG5cbiAgICAvLyBOb3RlLCBzaW5jZSB0aGlzIGNhbiBiZSBjYWxsZWQgYnkgdGhlIGBAcHJvcGVydHlgIGRlY29yYXRvciB3aGljaFxuICAgIC8vIGlzIGNhbGxlZCBiZWZvcmUgYGZpbmFsaXplYCwgd2UgZW5zdXJlIHN0b3JhZ2UgZXhpc3RzIGZvciBwcm9wZXJ0eVxuICAgIC8vIG1ldGFkYXRhLlxuICAgIHRoaXMuX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpO1xuXG4gICAgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLnNldChuYW1lLCBvcHRpb25zKTsgLy8gRG8gbm90IGdlbmVyYXRlIGFuIGFjY2Vzc29yIGlmIHRoZSBwcm90b3R5cGUgYWxyZWFkeSBoYXMgb25lLCBzaW5jZVxuICAgIC8vIGl0IHdvdWxkIGJlIGxvc3Qgb3RoZXJ3aXNlIGFuZCB0aGF0IHdvdWxkIG5ldmVyIGJlIHRoZSB1c2VyJ3MgaW50ZW50aW9uO1xuICAgIC8vIEluc3RlYWQsIHdlIGV4cGVjdCB1c2VycyB0byBjYWxsIGByZXF1ZXN0VXBkYXRlYCB0aGVtc2VsdmVzIGZyb21cbiAgICAvLyB1c2VyLWRlZmluZWQgYWNjZXNzb3JzLiBOb3RlIHRoYXQgaWYgdGhlIHN1cGVyIGhhcyBhbiBhY2Nlc3NvciB3ZSB3aWxsXG4gICAgLy8gc3RpbGwgb3ZlcndyaXRlIGl0XG5cblxuICAgIGlmIChvcHRpb25zLm5vQWNjZXNzb3IgfHwgdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gdHlwZW9mIG5hbWUgPT09ICdzeW1ib2wnID8gU3ltYm9sKCkgOiBcIl9fXCIuY29uY2F0KG5hbWUpO1xuICAgIHZhciBkZXNjcmlwdG9yID0gdGhpcy5nZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBvcHRpb25zKTtcblxuICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvcGVydHkgZGVzY3JpcHRvciB0byBiZSBkZWZpbmVkIG9uIHRoZSBnaXZlbiBuYW1lZCBwcm9wZXJ0eS5cbiAgICogSWYgbm8gZGVzY3JpcHRvciBpcyByZXR1cm5lZCwgdGhlIHByb3BlcnR5IHdpbGwgbm90IGJlY29tZSBhbiBhY2Nlc3Nvci5cbiAgICogRm9yIGV4YW1wbGUsXG4gICAqXG4gICAqICAgY2xhc3MgTXlFbGVtZW50IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAqICAgICBzdGF0aWMgZ2V0UHJvcGVydHlEZXNjcmlwdG9yKG5hbWUsIGtleSwgb3B0aW9ucykge1xuICAgKiAgICAgICBjb25zdCBkZWZhdWx0RGVzY3JpcHRvciA9XG4gICAqICAgICAgICAgICBzdXBlci5nZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBvcHRpb25zKTtcbiAgICogICAgICAgY29uc3Qgc2V0dGVyID0gZGVmYXVsdERlc2NyaXB0b3Iuc2V0O1xuICAgKiAgICAgICByZXR1cm4ge1xuICAgKiAgICAgICAgIGdldDogZGVmYXVsdERlc2NyaXB0b3IuZ2V0LFxuICAgKiAgICAgICAgIHNldCh2YWx1ZSkge1xuICAgKiAgICAgICAgICAgc2V0dGVyLmNhbGwodGhpcywgdmFsdWUpO1xuICAgKiAgICAgICAgICAgLy8gY3VzdG9tIGFjdGlvbi5cbiAgICogICAgICAgICB9LFxuICAgKiAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuXG5cbiAgc3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcihuYW1lLCBrZXksIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBubyBzeW1ib2wgaW4gaW5kZXhcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba2V5XTtcbiAgICAgIH0sXG5cbiAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzW25hbWVdO1xuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlSW50ZXJuYWwobmFtZSwgb2xkVmFsdWUsIG9wdGlvbnMpO1xuICAgICAgfSxcblxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BlcnR5IG9wdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICogVGhlc2Ugb3B0aW9ucyBhcmUgZGVmaW5lZCB3aXRoIGEgUHJvcGVydHlEZWNsYXJhdGlvbiB2aWEgdGhlIGBwcm9wZXJ0aWVzYFxuICAgKiBvYmplY3Qgb3IgdGhlIGBAcHJvcGVydHlgIGRlY29yYXRvciBhbmQgYXJlIHJlZ2lzdGVyZWQgaW5cbiAgICogYGNyZWF0ZVByb3BlcnR5KC4uLilgLlxuICAgKlxuICAgKiBOb3RlLCB0aGlzIG1ldGhvZCBzaG91bGQgYmUgY29uc2lkZXJlZCBcImZpbmFsXCIgYW5kIG5vdCBvdmVycmlkZGVuLiBUb1xuICAgKiBjdXN0b21pemUgdGhlIG9wdGlvbnMgZm9yIGEgZ2l2ZW4gcHJvcGVydHksIG92ZXJyaWRlIGBjcmVhdGVQcm9wZXJ0eWAuXG4gICAqXG4gICAqIEBub2NvbGxhcHNlXG4gICAqIEBmaW5hbFxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnMobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9jbGFzc1Byb3BlcnRpZXMgJiYgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLmdldChuYW1lKSB8fCBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbjtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBwcm9wZXJ0eSBhY2Nlc3NvcnMgZm9yIHJlZ2lzdGVyZWQgcHJvcGVydGllcyBhbmQgZW5zdXJlc1xuICAgKiBhbnkgc3VwZXJjbGFzc2VzIGFyZSBhbHNvIGZpbmFsaXplZC5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG5cblxuICBzdGF0aWMgZmluYWxpemUoKSB7XG4gICAgLy8gZmluYWxpemUgYW55IHN1cGVyY2xhc3Nlc1xuICAgIHZhciBzdXBlckN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7XG5cbiAgICBpZiAoIXN1cGVyQ3Rvci5oYXNPd25Qcm9wZXJ0eShmaW5hbGl6ZWQpKSB7XG4gICAgICBzdXBlckN0b3IuZmluYWxpemUoKTtcbiAgICB9XG5cbiAgICB0aGlzW2ZpbmFsaXplZF0gPSB0cnVlO1xuXG4gICAgdGhpcy5fZW5zdXJlQ2xhc3NQcm9wZXJ0aWVzKCk7IC8vIGluaXRpYWxpemUgTWFwIHBvcHVsYXRlZCBpbiBvYnNlcnZlZEF0dHJpYnV0ZXNcblxuXG4gICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcCA9IG5ldyBNYXAoKTsgLy8gbWFrZSBhbnkgcHJvcGVydGllc1xuICAgIC8vIE5vdGUsIG9ubHkgcHJvY2VzcyBcIm93blwiIHByb3BlcnRpZXMgc2luY2UgdGhpcyBlbGVtZW50IHdpbGwgaW5oZXJpdFxuICAgIC8vIGFueSBwcm9wZXJ0aWVzIGRlZmluZWQgb24gdGhlIHN1cGVyQ2xhc3MsIGFuZCBmaW5hbGl6YXRpb24gZW5zdXJlc1xuICAgIC8vIHRoZSBlbnRpcmUgcHJvdG90eXBlIGNoYWluIGlzIGZpbmFsaXplZC5cblxuICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3Byb3BlcnRpZXMnLCB0aGlzKSkpIHtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcGVydGllczsgLy8gc3VwcG9ydCBzeW1ib2xzIGluIHByb3BlcnRpZXMgKElFMTEgZG9lcyBub3Qgc3VwcG9ydCB0aGlzKVxuXG4gICAgICB2YXIgcHJvcEtleXMgPSBbLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvcHMpLCAuLi4odHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BzKSA6IFtdKV07IC8vIFRoaXMgZm9yL29mIGlzIG9rIGJlY2F1c2UgcHJvcEtleXMgaXMgYW4gYXJyYXlcblxuICAgICAgZm9yICh2YXIgcCBvZiBwcm9wS2V5cykge1xuICAgICAgICAvLyBub3RlLCB1c2Ugb2YgYGFueWAgaXMgZHVlIHRvIFR5cGVTcmlwdCBsYWNrIG9mIHN1cHBvcnQgZm9yIHN5bWJvbCBpblxuICAgICAgICAvLyBpbmRleCB0eXBlc1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IG5vIHN5bWJvbCBpbiBpbmRleFxuICAgICAgICB0aGlzLmNyZWF0ZVByb3BlcnR5KHAsIHByb3BzW3BdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BlcnR5IG5hbWUgZm9yIHRoZSBnaXZlbiBhdHRyaWJ1dGUgYG5hbWVgLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cblxuXG4gIHN0YXRpYyBfYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KG5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgYXR0cmlidXRlID0gb3B0aW9ucy5hdHRyaWJ1dGU7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZSA9PT0gZmFsc2UgPyB1bmRlZmluZWQgOiB0eXBlb2YgYXR0cmlidXRlID09PSAnc3RyaW5nJyA/IGF0dHJpYnV0ZSA6IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IG5hbWUudG9Mb3dlckNhc2UoKSA6IHVuZGVmaW5lZDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGEgcHJvcGVydHkgc2hvdWxkIHJlcXVlc3QgYW4gdXBkYXRlLlxuICAgKiBDYWxsZWQgd2hlbiBhIHByb3BlcnR5IHZhbHVlIGlzIHNldCBhbmQgdXNlcyB0aGUgYGhhc0NoYW5nZWRgXG4gICAqIG9wdGlvbiBmb3IgdGhlIHByb3BlcnR5IGlmIHByZXNlbnQgb3IgYSBzdHJpY3QgaWRlbnRpdHkgY2hlY2suXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuXG5cbiAgc3RhdGljIF92YWx1ZUhhc0NoYW5nZWQodmFsdWUsIG9sZCkge1xuICAgIHZhciBoYXNDaGFuZ2VkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBub3RFcXVhbDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgZm9yIHRoZSBnaXZlbiBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqIENhbGxlZCB2aWEgdGhlIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIGFuZCB1c2VzIHRoZSBwcm9wZXJ0eSdzXG4gICAqIGBjb252ZXJ0ZXJgIG9yIGBjb252ZXJ0ZXIuZnJvbUF0dHJpYnV0ZWAgcHJvcGVydHkgb3B0aW9uLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cblxuXG4gIHN0YXRpYyBfcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICB2YXIgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXIgfHwgZGVmYXVsdENvbnZlcnRlcjtcbiAgICB2YXIgZnJvbUF0dHJpYnV0ZSA9IHR5cGVvZiBjb252ZXJ0ZXIgPT09ICdmdW5jdGlvbicgPyBjb252ZXJ0ZXIgOiBjb252ZXJ0ZXIuZnJvbUF0dHJpYnV0ZTtcbiAgICByZXR1cm4gZnJvbUF0dHJpYnV0ZSA/IGZyb21BdHRyaWJ1dGUodmFsdWUsIHR5cGUpIDogdmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIHByb3BlcnR5IHZhbHVlLiBJZiB0aGlzXG4gICAqIHJldHVybnMgdW5kZWZpbmVkLCB0aGUgcHJvcGVydHkgd2lsbCAqbm90KiBiZSByZWZsZWN0ZWQgdG8gYW4gYXR0cmlidXRlLlxuICAgKiBJZiB0aGlzIHJldHVybnMgbnVsbCwgdGhlIGF0dHJpYnV0ZSB3aWxsIGJlIHJlbW92ZWQsIG90aGVyd2lzZSB0aGVcbiAgICogYXR0cmlidXRlIHdpbGwgYmUgc2V0IHRvIHRoZSB2YWx1ZS5cbiAgICogVGhpcyB1c2VzIHRoZSBwcm9wZXJ0eSdzIGByZWZsZWN0YCBhbmQgYHR5cGUudG9BdHRyaWJ1dGVgIHByb3BlcnR5IG9wdGlvbnMuXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuXG5cbiAgc3RhdGljIF9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5yZWZsZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICB2YXIgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXI7XG4gICAgdmFyIHRvQXR0cmlidXRlID0gY29udmVydGVyICYmIGNvbnZlcnRlci50b0F0dHJpYnV0ZSB8fCBkZWZhdWx0Q29udmVydGVyLnRvQXR0cmlidXRlO1xuICAgIHJldHVybiB0b0F0dHJpYnV0ZSh2YWx1ZSwgdHlwZSk7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGVsZW1lbnQgaW5pdGlhbGl6YXRpb24uIEJ5IGRlZmF1bHQgY2FwdHVyZXMgYW55IHByZS1zZXQgdmFsdWVzIGZvclxuICAgKiByZWdpc3RlcmVkIHByb3BlcnRpZXMuXG4gICAqL1xuXG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IDA7XG4gICAgdGhpcy5fdXBkYXRlUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlcyA9PiB0aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyID0gcmVzKTtcbiAgICB0aGlzLl9jaGFuZ2VkUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcblxuICAgIHRoaXMuX3NhdmVJbnN0YW5jZVByb3BlcnRpZXMoKTsgLy8gZW5zdXJlcyBmaXJzdCB1cGRhdGUgd2lsbCBiZSBjYXVnaHQgYnkgYW4gZWFybHkgYWNjZXNzIG9mXG4gICAgLy8gYHVwZGF0ZUNvbXBsZXRlYFxuXG5cbiAgICB0aGlzLnJlcXVlc3RVcGRhdGVJbnRlcm5hbCgpO1xuICB9XG4gIC8qKlxuICAgKiBGaXhlcyBhbnkgcHJvcGVydGllcyBzZXQgb24gdGhlIGluc3RhbmNlIGJlZm9yZSB1cGdyYWRlIHRpbWUuXG4gICAqIE90aGVyd2lzZSB0aGVzZSB3b3VsZCBzaGFkb3cgdGhlIGFjY2Vzc29yIGFuZCBicmVhayB0aGVzZSBwcm9wZXJ0aWVzLlxuICAgKiBUaGUgcHJvcGVydGllcyBhcmUgc3RvcmVkIGluIGEgTWFwIHdoaWNoIGlzIHBsYXllZCBiYWNrIGFmdGVyIHRoZVxuICAgKiBjb25zdHJ1Y3RvciBydW5zLiBOb3RlLCBvbiB2ZXJ5IG9sZCB2ZXJzaW9ucyBvZiBTYWZhcmkgKDw9OSkgb3IgQ2hyb21lXG4gICAqICg8PTQxKSwgcHJvcGVydGllcyBjcmVhdGVkIGZvciBuYXRpdmUgcGxhdGZvcm0gcHJvcGVydGllcyBsaWtlIChgaWRgIG9yXG4gICAqIGBuYW1lYCkgbWF5IG5vdCBoYXZlIGRlZmF1bHQgdmFsdWVzIHNldCBpbiB0aGUgZWxlbWVudCBjb25zdHJ1Y3Rvci4gT25cbiAgICogdGhlc2UgYnJvd3NlcnMgbmF0aXZlIHByb3BlcnRpZXMgYXBwZWFyIG9uIGluc3RhbmNlcyBhbmQgdGhlcmVmb3JlIHRoZWlyXG4gICAqIGRlZmF1bHQgdmFsdWUgd2lsbCBvdmVyd3JpdGUgYW55IGVsZW1lbnQgZGVmYXVsdCAoZS5nLiBpZiB0aGUgZWxlbWVudCBzZXRzXG4gICAqIHRoaXMuaWQgPSAnaWQnIGluIHRoZSBjb25zdHJ1Y3RvciwgdGhlICdpZCcgd2lsbCBiZWNvbWUgJycgc2luY2UgdGhpcyBpc1xuICAgKiB0aGUgbmF0aXZlIHBsYXRmb3JtIGRlZmF1bHQpLlxuICAgKi9cblxuXG4gIF9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzKCkge1xuICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvciBsb29wc1xuICAgIC8vIGV4cGVjdGluZyBhcnJheXNcbiAgICB0aGlzLmNvbnN0cnVjdG9yLl9jbGFzc1Byb3BlcnRpZXMuZm9yRWFjaCgoX3YsIHApID0+IHtcbiAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXNbcF07XG4gICAgICAgIGRlbGV0ZSB0aGlzW3BdO1xuXG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzLnNldChwLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGxpZXMgcHJldmlvdXNseSBzYXZlZCBpbnN0YW5jZSBwcm9wZXJ0aWVzLlxuICAgKi9cblxuXG4gIF9hcHBseUluc3RhbmNlUHJvcGVydGllcygpIHtcbiAgICAvLyBVc2UgZm9yRWFjaCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgZm9yL29mIGxvb3BzIGFyZSBjb21waWxlZCB0byBmb3IgbG9vcHNcbiAgICAvLyBleHBlY3RpbmcgYXJyYXlzXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcy5mb3JFYWNoKCh2LCBwKSA9PiB0aGlzW3BdID0gdik7XG5cbiAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAvLyBFbnN1cmUgZmlyc3QgY29ubmVjdGlvbiBjb21wbGV0ZXMgYW4gdXBkYXRlLiBVcGRhdGVzIGNhbm5vdCBjb21wbGV0ZVxuICAgIC8vIGJlZm9yZSBjb25uZWN0aW9uLlxuICAgIHRoaXMuZW5hYmxlVXBkYXRpbmcoKTtcbiAgfVxuXG4gIGVuYWJsZVVwZGF0aW5nKCkge1xuICAgIGlmICh0aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIoKTtcblxuICAgICAgdGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFsbG93cyBmb3IgYHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKClgIGluIGV4dGVuc2lvbnMgd2hpbGVcbiAgICogcmVzZXJ2aW5nIHRoZSBwb3NzaWJpbGl0eSBvZiBtYWtpbmcgbm9uLWJyZWFraW5nIGZlYXR1cmUgYWRkaXRpb25zXG4gICAqIHdoZW4gZGlzY29ubmVjdGluZyBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG4gICAqL1xuXG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7fVxuICAvKipcbiAgICogU3luY2hyb25pemVzIHByb3BlcnR5IHZhbHVlcyB3aGVuIGF0dHJpYnV0ZXMgY2hhbmdlLlxuICAgKi9cblxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlKSB7XG4gICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIF9wcm9wZXJ0eVRvQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uO1xuICAgIHZhciBjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjtcblxuICAgIHZhciBhdHRyID0gY3Rvci5fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KG5hbWUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGF0dHJWYWx1ZSA9IGN0b3IuX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZSh2YWx1ZSwgb3B0aW9ucyk7IC8vIGFuIHVuZGVmaW5lZCB2YWx1ZSBkb2VzIG5vdCBjaGFuZ2UgdGhlIGF0dHJpYnV0ZS5cblxuXG4gICAgICBpZiAoYXR0clZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUcmFjayBpZiB0aGUgcHJvcGVydHkgaXMgYmVpbmcgcmVmbGVjdGVkIHRvIGF2b2lkXG4gICAgICAvLyBzZXR0aW5nIHRoZSBwcm9wZXJ0eSBhZ2FpbiB2aWEgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AuIE5vdGU6XG4gICAgICAvLyAxLiB0aGlzIHRha2VzIGFkdmFudGFnZSBvZiB0aGUgZmFjdCB0aGF0IHRoZSBjYWxsYmFjayBpcyBzeW5jaHJvbm91cy5cbiAgICAgIC8vIDIuIHdpbGwgYmVoYXZlIGluY29ycmVjdGx5IGlmIG11bHRpcGxlIGF0dHJpYnV0ZXMgYXJlIGluIHRoZSByZWFjdGlvblxuICAgICAgLy8gc3RhY2sgYXQgdGltZSBvZiBjYWxsaW5nLiBIb3dldmVyLCBzaW5jZSB3ZSBwcm9jZXNzIGF0dHJpYnV0ZXNcbiAgICAgIC8vIGluIGB1cGRhdGVgIHRoaXMgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSAob3IgYW4gZXh0cmVtZSBjb3JuZXIgY2FzZVxuICAgICAgLy8gdGhhdCB3ZSdkIGxpa2UgdG8gZGlzY292ZXIpLlxuICAgICAgLy8gbWFyayBzdGF0ZSByZWZsZWN0aW5nXG5cblxuICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFO1xuXG4gICAgICBpZiAoYXR0clZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyVmFsdWUpO1xuICAgICAgfSAvLyBtYXJrIHN0YXRlIG5vdCByZWZsZWN0aW5nXG5cblxuICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSAmIH5TVEFURV9JU19SRUZMRUNUSU5HX1RPX0FUVFJJQlVURTtcbiAgICB9XG4gIH1cblxuICBfYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgIC8vIFVzZSB0cmFja2luZyBpbmZvIHRvIGF2b2lkIGRlc2VyaWFsaXppbmcgYXR0cmlidXRlIHZhbHVlIGlmIGl0IHdhc1xuICAgIC8vIGp1c3Qgc2V0IGZyb20gYSBwcm9wZXJ0eSBzZXR0ZXIuXG4gICAgaWYgKHRoaXMuX3VwZGF0ZVN0YXRlICYgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7IC8vIE5vdGUsIGhpbnQgdGhpcyBhcyBhbiBgQXR0cmlidXRlTWFwYCBzbyBjbG9zdXJlIGNsZWFybHkgdW5kZXJzdGFuZHNcbiAgICAvLyB0aGUgdHlwZTsgaXQgaGFzIGlzc3VlcyB3aXRoIHRyYWNraW5nIHR5cGVzIHRocm91Z2ggc3RhdGljc1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvblxuXG4gICAgdmFyIHByb3BOYW1lID0gY3Rvci5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5nZXQobmFtZSk7XG5cbiAgICBpZiAocHJvcE5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBjdG9yLmdldFByb3BlcnR5T3B0aW9ucyhwcm9wTmFtZSk7IC8vIG1hcmsgc3RhdGUgcmVmbGVjdGluZ1xuXG4gICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfSVNfUkVGTEVDVElOR19UT19QUk9QRVJUWTtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgY3Rvci5fcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpOyAvLyBtYXJrIHN0YXRlIG5vdCByZWZsZWN0aW5nXG5cbiAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfSVNfUkVGTEVDVElOR19UT19QUk9QRVJUWTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgcHJvdGVjdGVkIHZlcnNpb24gb2YgYHJlcXVlc3RVcGRhdGVgIGRvZXMgbm90IGFjY2VzcyBvciByZXR1cm4gdGhlXG4gICAqIGB1cGRhdGVDb21wbGV0ZWAgcHJvbWlzZS4gVGhpcyBwcm9taXNlIGNhbiBiZSBvdmVycmlkZGVuIGFuZCBpcyB0aGVyZWZvcmVcbiAgICogbm90IGZyZWUgdG8gYWNjZXNzLlxuICAgKi9cblxuXG4gIHJlcXVlc3RVcGRhdGVJbnRlcm5hbChuYW1lLCBvbGRWYWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaG91bGRSZXF1ZXN0VXBkYXRlID0gdHJ1ZTsgLy8gSWYgd2UgaGF2ZSBhIHByb3BlcnR5IGtleSwgcGVyZm9ybSBwcm9wZXJ0eSB1cGRhdGUgc3RlcHMuXG5cbiAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCBjdG9yLmdldFByb3BlcnR5T3B0aW9ucyhuYW1lKTtcblxuICAgICAgaWYgKGN0b3IuX3ZhbHVlSGFzQ2hhbmdlZCh0aGlzW25hbWVdLCBvbGRWYWx1ZSwgb3B0aW9ucy5oYXNDaGFuZ2VkKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLmhhcyhuYW1lKSkge1xuICAgICAgICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLnNldChuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gLy8gQWRkIHRvIHJlZmxlY3RpbmcgcHJvcGVydGllcyBzZXQuXG4gICAgICAgIC8vIE5vdGUsIGl0J3MgaW1wb3J0YW50IHRoYXQgZXZlcnkgY2hhbmdlIGhhcyBhIGNoYW5jZSB0byBhZGQgdGhlXG4gICAgICAgIC8vIHByb3BlcnR5IHRvIGBfcmVmbGVjdGluZ1Byb3BlcnRpZXNgLiBUaGlzIGVuc3VyZXMgc2V0dGluZ1xuICAgICAgICAvLyBhdHRyaWJ1dGUgKyBwcm9wZXJ0eSByZWZsZWN0cyBjb3JyZWN0bHkuXG5cblxuICAgICAgICBpZiAob3B0aW9ucy5yZWZsZWN0ID09PSB0cnVlICYmICEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZKSkge1xuICAgICAgICAgIGlmICh0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5zZXQobmFtZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFib3J0IHRoZSByZXF1ZXN0IGlmIHRoZSBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgY2hhbmdlZC5cbiAgICAgICAgc2hvdWxkUmVxdWVzdFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5faGFzUmVxdWVzdGVkVXBkYXRlICYmIHNob3VsZFJlcXVlc3RVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZVByb21pc2UgPSB0aGlzLl9lbnF1ZXVlVXBkYXRlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXF1ZXN0cyBhbiB1cGRhdGUgd2hpY2ggaXMgcHJvY2Vzc2VkIGFzeW5jaHJvbm91c2x5LiBUaGlzIHNob3VsZFxuICAgKiBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IHNob3VsZCB1cGRhdGUgYmFzZWQgb24gc29tZSBzdGF0ZSBub3QgdHJpZ2dlcmVkXG4gICAqIGJ5IHNldHRpbmcgYSBwcm9wZXJ0eS4gSW4gdGhpcyBjYXNlLCBwYXNzIG5vIGFyZ3VtZW50cy4gSXQgc2hvdWxkIGFsc28gYmVcbiAgICogY2FsbGVkIHdoZW4gbWFudWFsbHkgaW1wbGVtZW50aW5nIGEgcHJvcGVydHkgc2V0dGVyLiBJbiB0aGlzIGNhc2UsIHBhc3MgdGhlXG4gICAqIHByb3BlcnR5IGBuYW1lYCBhbmQgYG9sZFZhbHVlYCB0byBlbnN1cmUgdGhhdCBhbnkgY29uZmlndXJlZCBwcm9wZXJ0eVxuICAgKiBvcHRpb25zIGFyZSBob25vcmVkLiBSZXR1cm5zIHRoZSBgdXBkYXRlQ29tcGxldGVgIFByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWRcbiAgICogd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlcy5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUge1Byb3BlcnR5S2V5fSAob3B0aW9uYWwpIG5hbWUgb2YgcmVxdWVzdGluZyBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gb2xkVmFsdWUge2FueX0gKG9wdGlvbmFsKSBvbGQgdmFsdWUgb2YgcmVxdWVzdGluZyBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlcy5cbiAgICovXG5cblxuICByZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKSB7XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlSW50ZXJuYWwobmFtZSwgb2xkVmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUNvbXBsZXRlO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoZSBlbGVtZW50IHRvIGFzeW5jaHJvbm91c2x5IHVwZGF0ZS5cbiAgICovXG5cblxuICBfZW5xdWV1ZVVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBfdGhpcy5fdXBkYXRlU3RhdGUgPSBfdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9VUERBVEVfUkVRVUVTVEVEO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBFbnN1cmUgYW55IHByZXZpb3VzIHVwZGF0ZSBoYXMgcmVzb2x2ZWQgYmVmb3JlIHVwZGF0aW5nLlxuICAgICAgICAvLyBUaGlzIGBhd2FpdGAgYWxzbyBlbnN1cmVzIHRoYXQgcHJvcGVydHkgY2hhbmdlcyBhcmUgYmF0Y2hlZC5cbiAgICAgICAgeWllbGQgX3RoaXMuX3VwZGF0ZVByb21pc2U7XG4gICAgICB9IGNhdGNoIChlKSB7Ly8gSWdub3JlIGFueSBwcmV2aW91cyBlcnJvcnMuIFdlIG9ubHkgY2FyZSB0aGF0IHRoZSBwcmV2aW91cyBjeWNsZSBpc1xuICAgICAgICAvLyBkb25lLiBBbnkgZXJyb3Igc2hvdWxkIGhhdmUgYmVlbiBoYW5kbGVkIGluIHRoZSBwcmV2aW91cyB1cGRhdGUuXG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSBfdGhpcy5wZXJmb3JtVXBkYXRlKCk7IC8vIElmIGBwZXJmb3JtVXBkYXRlYCByZXR1cm5zIGEgUHJvbWlzZSwgd2UgYXdhaXQgaXQuIFRoaXMgaXMgZG9uZSB0b1xuICAgICAgLy8gZW5hYmxlIGNvb3JkaW5hdGluZyB1cGRhdGVzIHdpdGggYSBzY2hlZHVsZXIuIE5vdGUsIHRoZSByZXN1bHQgaXNcbiAgICAgIC8vIGNoZWNrZWQgdG8gYXZvaWQgZGVsYXlpbmcgYW4gYWRkaXRpb25hbCBtaWNyb3Rhc2sgdW5sZXNzIHdlIG5lZWQgdG8uXG5cblxuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIHlpZWxkIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICFfdGhpcy5faGFzUmVxdWVzdGVkVXBkYXRlO1xuICAgIH0pKCk7XG4gIH1cblxuICBnZXQgX2hhc1JlcXVlc3RlZFVwZGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9VUERBVEVfUkVRVUVTVEVEO1xuICB9XG5cbiAgZ2V0IGhhc1VwZGF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVN0YXRlICYgU1RBVEVfSEFTX1VQREFURUQ7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGFuIGVsZW1lbnQgdXBkYXRlLiBOb3RlLCBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGR1cmluZyB0aGVcbiAgICogdXBkYXRlLCBgZmlyc3RVcGRhdGVkYCBhbmQgYHVwZGF0ZWRgIHdpbGwgbm90IGJlIGNhbGxlZC5cbiAgICpcbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBjaGFuZ2UgdGhlIHRpbWluZyBvZiB1cGRhdGVzLiBJZiB0aGlzXG4gICAqIG1ldGhvZCBpcyBvdmVycmlkZGVuLCBgc3VwZXIucGVyZm9ybVVwZGF0ZSgpYCBtdXN0IGJlIGNhbGxlZC5cbiAgICpcbiAgICogRm9yIGluc3RhbmNlLCB0byBzY2hlZHVsZSB1cGRhdGVzIHRvIG9jY3VyIGp1c3QgYmVmb3JlIHRoZSBuZXh0IGZyYW1lOlxuICAgKlxuICAgKiBgYGBcbiAgICogcHJvdGVjdGVkIGFzeW5jIHBlcmZvcm1VcGRhdGUoKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAqICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiByZXNvbHZlKCkpKTtcbiAgICogICBzdXBlci5wZXJmb3JtVXBkYXRlKCk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuXG5cbiAgcGVyZm9ybVVwZGF0ZSgpIHtcbiAgICAvLyBBYm9ydCBhbnkgdXBkYXRlIGlmIG9uZSBpcyBub3QgcGVuZGluZyB3aGVuIHRoaXMgaXMgY2FsbGVkLlxuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBgcGVyZm9ybVVwZGF0ZWAgaXMgY2FsbGVkIGVhcmx5IHRvIFwiZmx1c2hcIlxuICAgIC8vIHRoZSB1cGRhdGUuXG4gICAgaWYgKCF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE1peGluIGluc3RhbmNlIHByb3BlcnRpZXMgb25jZSwgaWYgdGhleSBleGlzdC5cblxuXG4gICAgaWYgKHRoaXMuX2luc3RhbmNlUHJvcGVydGllcykge1xuICAgICAgdGhpcy5fYXBwbHlJbnN0YW5jZVByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gZmFsc2U7XG4gICAgdmFyIGNoYW5nZWRQcm9wZXJ0aWVzID0gdGhpcy5fY2hhbmdlZFByb3BlcnRpZXM7XG5cbiAgICB0cnkge1xuICAgICAgc2hvdWxkVXBkYXRlID0gdGhpcy5zaG91bGRVcGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX21hcmtVcGRhdGVkKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gUHJldmVudCBgZmlyc3RVcGRhdGVkYCBhbmQgYHVwZGF0ZWRgIGZyb20gcnVubmluZyB3aGVuIHRoZXJlJ3MgYW5cbiAgICAgIC8vIHVwZGF0ZSBleGNlcHRpb24uXG4gICAgICBzaG91bGRVcGRhdGUgPSBmYWxzZTsgLy8gRW5zdXJlIGVsZW1lbnQgY2FuIGFjY2VwdCBhZGRpdGlvbmFsIHVwZGF0ZXMgYWZ0ZXIgYW4gZXhjZXB0aW9uLlxuXG4gICAgICB0aGlzLl9tYXJrVXBkYXRlZCgpO1xuXG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAgIGlmICghKHRoaXMuX3VwZGF0ZVN0YXRlICYgU1RBVEVfSEFTX1VQREFURUQpKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9IQVNfVVBEQVRFRDtcbiAgICAgICAgdGhpcy5maXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuXG4gIF9tYXJrVXBkYXRlZCgpIHtcbiAgICB0aGlzLl9jaGFuZ2VkUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX1VQREFURV9SRVFVRVNURUQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZWxlbWVudCBoYXMgY29tcGxldGVkIHVwZGF0aW5nLlxuICAgKiBUaGUgUHJvbWlzZSB2YWx1ZSBpcyBhIGJvb2xlYW4gdGhhdCBpcyBgdHJ1ZWAgaWYgdGhlIGVsZW1lbnQgY29tcGxldGVkIHRoZVxuICAgKiB1cGRhdGUgd2l0aG91dCB0cmlnZ2VyaW5nIGFub3RoZXIgdXBkYXRlLiBUaGUgUHJvbWlzZSByZXN1bHQgaXMgYGZhbHNlYCBpZlxuICAgKiBhIHByb3BlcnR5IHdhcyBzZXQgaW5zaWRlIGB1cGRhdGVkKClgLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgYW5cbiAgICogZXhjZXB0aW9uIHdhcyB0aHJvd24gZHVyaW5nIHRoZSB1cGRhdGUuXG4gICAqXG4gICAqIFRvIGF3YWl0IGFkZGl0aW9uYWwgYXN5bmNocm9ub3VzIHdvcmssIG92ZXJyaWRlIHRoZSBgX2dldFVwZGF0ZUNvbXBsZXRlYFxuICAgKiBtZXRob2QuIEZvciBleGFtcGxlLCBpdCBpcyBzb21ldGltZXMgdXNlZnVsIHRvIGF3YWl0IGEgcmVuZGVyZWQgZWxlbWVudFxuICAgKiBiZWZvcmUgZnVsZmlsbGluZyB0aGlzIFByb21pc2UuIFRvIGRvIHRoaXMsIGZpcnN0IGF3YWl0XG4gICAqIGBzdXBlci5fZ2V0VXBkYXRlQ29tcGxldGUoKWAsIHRoZW4gYW55IHN1YnNlcXVlbnQgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSByZXR1cm5zIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGVcbiAgICogdXBkYXRlIHJlc29sdmVkIHdpdGhvdXQgdHJpZ2dlcmluZyBhbm90aGVyIHVwZGF0ZS5cbiAgICovXG5cblxuICBnZXQgdXBkYXRlQ29tcGxldGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFVwZGF0ZUNvbXBsZXRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHBvaW50IGZvciB0aGUgYHVwZGF0ZUNvbXBsZXRlYCBwcm9taXNlLlxuICAgKlxuICAgKiBJdCBpcyBub3Qgc2FmZSB0byBvdmVycmlkZSB0aGUgYHVwZGF0ZUNvbXBsZXRlYCBnZXR0ZXIgZGlyZWN0bHkgZHVlIHRvIGFcbiAgICogbGltaXRhdGlvbiBpbiBUeXBlU2NyaXB0IHdoaWNoIG1lYW5zIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBjYWxsIGFcbiAgICogc3VwZXJjbGFzcyBnZXR0ZXIgKGUuZy4gYHN1cGVyLnVwZGF0ZUNvbXBsZXRlLnRoZW4oLi4uKWApIHdoZW4gdGhlIHRhcmdldFxuICAgKiBsYW5ndWFnZSBpcyBFUzUgKGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzM4KS5cbiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW5zdGVhZC4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICAgY2xhc3MgTXlFbGVtZW50IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAqICAgICBhc3luYyBfZ2V0VXBkYXRlQ29tcGxldGUoKSB7XG4gICAqICAgICAgIGF3YWl0IHN1cGVyLl9nZXRVcGRhdGVDb21wbGV0ZSgpO1xuICAgKiAgICAgICBhd2FpdCB0aGlzLl9teUNoaWxkLnVwZGF0ZUNvbXBsZXRlO1xuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICovXG5cblxuICBfZ2V0VXBkYXRlQ29tcGxldGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVByb21pc2U7XG4gIH1cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IGB1cGRhdGVgIHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgZWxlbWVudCByZXF1ZXN0c1xuICAgKiBhbiB1cGRhdGUuIEJ5IGRlZmF1bHQsIHRoaXMgbWV0aG9kIGFsd2F5cyByZXR1cm5zIGB0cnVlYCwgYnV0IHRoaXMgY2FuIGJlXG4gICAqIGN1c3RvbWl6ZWQgdG8gY29udHJvbCB3aGVuIHRvIHVwZGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgKi9cblxuXG4gIHNob3VsZFVwZGF0ZShfY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgZWxlbWVudC4gVGhpcyBtZXRob2QgcmVmbGVjdHMgcHJvcGVydHkgdmFsdWVzIHRvIGF0dHJpYnV0ZXMuXG4gICAqIEl0IGNhbiBiZSBvdmVycmlkZGVuIHRvIHJlbmRlciBhbmQga2VlcCB1cGRhdGVkIGVsZW1lbnQgRE9NLlxuICAgKiBTZXR0aW5nIHByb3BlcnRpZXMgaW5zaWRlIHRoaXMgbWV0aG9kIHdpbGwgKm5vdCogdHJpZ2dlclxuICAgKiBhbm90aGVyIHVwZGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgKi9cblxuXG4gIHVwZGF0ZShfY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICBpZiAodGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5zaXplID4gMCkge1xuICAgICAgLy8gVXNlIGZvckVhY2ggc28gdGhpcyB3b3JrcyBldmVuIGlmIGZvci9vZiBsb29wcyBhcmUgY29tcGlsZWQgdG8gZm9yXG4gICAgICAvLyBsb29wcyBleHBlY3RpbmcgYXJyYXlzXG4gICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLl9wcm9wZXJ0eVRvQXR0cmlidXRlKGssIHRoaXNba10sIHYpKTtcblxuICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5fbWFya1VwZGF0ZWQoKTtcbiAgfVxuICAvKipcbiAgICogSW52b2tlZCB3aGVuZXZlciB0aGUgZWxlbWVudCBpcyB1cGRhdGVkLiBJbXBsZW1lbnQgdG8gcGVyZm9ybVxuICAgKiBwb3N0LXVwZGF0aW5nIHRhc2tzIHZpYSBET00gQVBJcywgZm9yIGV4YW1wbGUsIGZvY3VzaW5nIGFuIGVsZW1lbnQuXG4gICAqXG4gICAqIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGUgdGhpcyBtZXRob2Qgd2lsbCB0cmlnZ2VyIHRoZSBlbGVtZW50IHRvIHVwZGF0ZVxuICAgKiBhZ2FpbiBhZnRlciB0aGlzIHVwZGF0ZSBjeWNsZSBjb21wbGV0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBfY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICovXG5cblxuICB1cGRhdGVkKF9jaGFuZ2VkUHJvcGVydGllcykge31cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBmaXJzdCB1cGRhdGVkLiBJbXBsZW1lbnQgdG8gcGVyZm9ybSBvbmUgdGltZVxuICAgKiB3b3JrIG9uIHRoZSBlbGVtZW50IGFmdGVyIHVwZGF0ZS5cbiAgICpcbiAgICogU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsIHRyaWdnZXIgdGhlIGVsZW1lbnQgdG8gdXBkYXRlXG4gICAqIGFnYWluIGFmdGVyIHRoaXMgdXBkYXRlIGN5Y2xlIGNvbXBsZXRlcy5cbiAgICpcbiAgICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgKi9cblxuXG4gIGZpcnN0VXBkYXRlZChfY2hhbmdlZFByb3BlcnRpZXMpIHt9XG5cbn1cbl9hID0gZmluYWxpemVkO1xuLyoqXG4gKiBNYXJrcyBjbGFzcyBhcyBoYXZpbmcgZmluaXNoZWQgY3JlYXRpbmcgcHJvcGVydGllcy5cbiAqL1xuXG5VcGRhdGluZ0VsZW1lbnRbX2FdID0gdHJ1ZTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xudmFyIGxlZ2FjeUN1c3RvbUVsZW1lbnQgPSAodGFnTmFtZSwgY2xhenopID0+IHtcbiAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBjbGF6eik7IC8vIENhc3QgYXMgYW55IGJlY2F1c2UgVFMgZG9lc24ndCByZWNvZ25pemUgdGhlIHJldHVybiB0eXBlIGFzIGJlaW5nIGFcbiAgLy8gc3VidHlwZSBvZiB0aGUgZGVjb3JhdGVkIGNsYXNzIHdoZW4gY2xhenogaXMgdHlwZWQgYXNcbiAgLy8gYENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PmAgZm9yIHNvbWUgcmVhc29uLlxuICAvLyBgQ29uc3RydWN0b3I8SFRNTEVsZW1lbnQ+YCBpcyBoZWxwZnVsIHRvIG1ha2Ugc3VyZSB0aGUgZGVjb3JhdG9yIGlzXG4gIC8vIGFwcGxpZWQgdG8gZWxlbWVudHMgaG93ZXZlci5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuXG4gIHJldHVybiBjbGF6ejtcbn07XG5cbnZhciBzdGFuZGFyZEN1c3RvbUVsZW1lbnQgPSAodGFnTmFtZSwgZGVzY3JpcHRvcikgPT4ge1xuICB2YXIge1xuICAgIGtpbmQsXG4gICAgZWxlbWVudHNcbiAgfSA9IGRlc2NyaXB0b3I7XG4gIHJldHVybiB7XG4gICAga2luZCxcbiAgICBlbGVtZW50cyxcblxuICAgIC8vIFRoaXMgY2FsbGJhY2sgaXMgY2FsbGVkIG9uY2UgdGhlIGNsYXNzIGlzIG90aGVyd2lzZSBmdWxseSBkZWZpbmVkXG4gICAgZmluaXNoZXIoY2xhenopIHtcbiAgICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgY2xhenopO1xuICAgIH1cblxuICB9O1xufTtcbi8qKlxuICogQ2xhc3MgZGVjb3JhdG9yIGZhY3RvcnkgdGhhdCBkZWZpbmVzIHRoZSBkZWNvcmF0ZWQgY2xhc3MgYXMgYSBjdXN0b20gZWxlbWVudC5cbiAqXG4gKiBgYGBcbiAqIEBjdXN0b21FbGVtZW50KCdteS1lbGVtZW50JylcbiAqIGNsYXNzIE15RWxlbWVudCB7XG4gKiAgIHJlbmRlcigpIHtcbiAqICAgICByZXR1cm4gaHRtbGBgO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqIEBjYXRlZ29yeSBEZWNvcmF0b3JcbiAqIEBwYXJhbSB0YWdOYW1lIFRoZSBuYW1lIG9mIHRoZSBjdXN0b20gZWxlbWVudCB0byBkZWZpbmUuXG4gKi9cblxuXG52YXIgY3VzdG9tRWxlbWVudCA9IHRhZ05hbWUgPT4gY2xhc3NPckRlc2NyaXB0b3IgPT4gdHlwZW9mIGNsYXNzT3JEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nID8gbGVnYWN5Q3VzdG9tRWxlbWVudCh0YWdOYW1lLCBjbGFzc09yRGVzY3JpcHRvcikgOiBzdGFuZGFyZEN1c3RvbUVsZW1lbnQodGFnTmFtZSwgY2xhc3NPckRlc2NyaXB0b3IpO1xuXG52YXIgc3RhbmRhcmRQcm9wZXJ0eSA9IChvcHRpb25zLCBlbGVtZW50KSA9PiB7XG4gIC8vIFdoZW4gZGVjb3JhdGluZyBhbiBhY2Nlc3NvciwgcGFzcyBpdCB0aHJvdWdoIGFuZCBhZGQgcHJvcGVydHkgbWV0YWRhdGEuXG4gIC8vIE5vdGUsIHRoZSBgaGFzT3duUHJvcGVydHlgIGNoZWNrIGluIGBjcmVhdGVQcm9wZXJ0eWAgZW5zdXJlcyB3ZSBkb24ndFxuICAvLyBzdG9tcCBvdmVyIHRoZSB1c2VyJ3MgYWNjZXNzb3IuXG4gIGlmIChlbGVtZW50LmtpbmQgPT09ICdtZXRob2QnICYmIGVsZW1lbnQuZGVzY3JpcHRvciAmJiAhKCd2YWx1ZScgaW4gZWxlbWVudC5kZXNjcmlwdG9yKSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGVsZW1lbnQpLCB7XG4gICAgICBmaW5pc2hlcihjbGF6eikge1xuICAgICAgICBjbGF6ei5jcmVhdGVQcm9wZXJ0eShlbGVtZW50LmtleSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBjcmVhdGVQcm9wZXJ0eSgpIHRha2VzIGNhcmUgb2YgZGVmaW5pbmcgdGhlIHByb3BlcnR5LCBidXQgd2Ugc3RpbGxcbiAgICAvLyBtdXN0IHJldHVybiBzb21lIGtpbmQgb2YgZGVzY3JpcHRvciwgc28gcmV0dXJuIGEgZGVzY3JpcHRvciBmb3IgYW5cbiAgICAvLyB1bnVzZWQgcHJvdG90eXBlIGZpZWxkLiBUaGUgZmluaXNoZXIgY2FsbHMgY3JlYXRlUHJvcGVydHkoKS5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogJ2ZpZWxkJyxcbiAgICAgIGtleTogU3ltYm9sKCksXG4gICAgICBwbGFjZW1lbnQ6ICdvd24nLFxuICAgICAgZGVzY3JpcHRvcjoge30sXG5cbiAgICAgIC8vIFdoZW4gQGJhYmVsL3BsdWdpbi1wcm9wb3NhbC1kZWNvcmF0b3JzIGltcGxlbWVudHMgaW5pdGlhbGl6ZXJzLFxuICAgICAgLy8gZG8gdGhpcyBpbnN0ZWFkIG9mIHRoZSBpbml0aWFsaXplciBiZWxvdy4gU2VlOlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL2lzc3Vlcy85MjYwIGV4dHJhczogW1xuICAgICAgLy8gICB7XG4gICAgICAvLyAgICAga2luZDogJ2luaXRpYWxpemVyJyxcbiAgICAgIC8vICAgICBwbGFjZW1lbnQ6ICdvd24nLFxuICAgICAgLy8gICAgIGluaXRpYWxpemVyOiBkZXNjcmlwdG9yLmluaXRpYWxpemVyLFxuICAgICAgLy8gICB9XG4gICAgICAvLyBdLFxuICAgICAgaW5pdGlhbGl6ZXIoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5pbml0aWFsaXplciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXNbZWxlbWVudC5rZXldID0gZWxlbWVudC5pbml0aWFsaXplci5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBmaW5pc2hlcihjbGF6eikge1xuICAgICAgICBjbGF6ei5jcmVhdGVQcm9wZXJ0eShlbGVtZW50LmtleSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICB9O1xuICB9XG59O1xuXG52YXIgbGVnYWN5UHJvcGVydHkgPSAob3B0aW9ucywgcHJvdG8sIG5hbWUpID0+IHtcbiAgcHJvdG8uY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB3aGljaCBjcmVhdGVzIGEgTGl0RWxlbWVudCBwcm9wZXJ0eSB3aGljaCByZWZsZWN0cyBhXG4gKiBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZSB2YWx1ZS4gQSBbW2BQcm9wZXJ0eURlY2xhcmF0aW9uYF1dIG1heSBvcHRpb25hbGx5IGJlXG4gKiBzdXBwbGllZCB0byBjb25maWd1cmUgcHJvcGVydHkgZmVhdHVyZXMuXG4gKlxuICogVGhpcyBkZWNvcmF0b3Igc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgcHVibGljIGZpZWxkcy4gUHJpdmF0ZSBvciBwcm90ZWN0ZWRcbiAqIGZpZWxkcyBzaG91bGQgdXNlIHRoZSBbW2BpbnRlcm5hbFByb3BlcnR5YF1dIGRlY29yYXRvci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNsYXNzIE15RWxlbWVudCB7XG4gKiAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4gfSlcbiAqICAgY2xpY2tlZCA9IGZhbHNlO1xuICogfVxuICogYGBgXG4gKiBAY2F0ZWdvcnkgRGVjb3JhdG9yXG4gKiBARXhwb3J0RGVjb3JhdGVkSXRlbXNcbiAqL1xuXG5cbmZ1bmN0aW9uIHByb3BlcnR5KG9wdGlvbnMpIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBkZWNvcmF0b3JcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvciwgbmFtZSkgPT4gbmFtZSAhPT0gdW5kZWZpbmVkID8gbGVnYWN5UHJvcGVydHkob3B0aW9ucywgcHJvdG9PckRlc2NyaXB0b3IsIG5hbWUpIDogc3RhbmRhcmRQcm9wZXJ0eShvcHRpb25zLCBwcm90b09yRGVzY3JpcHRvcik7XG59XG4vKipcbiAqIERlY2xhcmVzIGEgcHJpdmF0ZSBvciBwcm90ZWN0ZWQgcHJvcGVydHkgdGhhdCBzdGlsbCB0cmlnZ2VycyB1cGRhdGVzIHRvIHRoZVxuICogZWxlbWVudCB3aGVuIGl0IGNoYW5nZXMuXG4gKlxuICogUHJvcGVydGllcyBkZWNsYXJlZCB0aGlzIHdheSBtdXN0IG5vdCBiZSB1c2VkIGZyb20gSFRNTCBvciBIVE1MIHRlbXBsYXRpbmdcbiAqIHN5c3RlbXMsIHRoZXkncmUgc29sZWx5IGZvciBwcm9wZXJ0aWVzIGludGVybmFsIHRvIHRoZSBlbGVtZW50LiBUaGVzZVxuICogcHJvcGVydGllcyBtYXkgYmUgcmVuYW1lZCBieSBvcHRpbWl6YXRpb24gdG9vbHMgbGlrZSBjbG9zdXJlIGNvbXBpbGVyLlxuICogQGNhdGVnb3J5IERlY29yYXRvclxuICovXG5cbmZ1bmN0aW9uIGludGVybmFsUHJvcGVydHkob3B0aW9ucykge1xuICByZXR1cm4gcHJvcGVydHkoe1xuICAgIGF0dHJpYnV0ZTogZmFsc2UsXG4gICAgaGFzQ2hhbmdlZDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhhc0NoYW5nZWRcbiAgfSk7XG59XG4vKipcbiAqIEEgcHJvcGVydHkgZGVjb3JhdG9yIHRoYXQgY29udmVydHMgYSBjbGFzcyBwcm9wZXJ0eSBpbnRvIGEgZ2V0dGVyIHRoYXRcbiAqIGV4ZWN1dGVzIGEgcXVlcnlTZWxlY3RvciBvbiB0aGUgZWxlbWVudCdzIHJlbmRlclJvb3QuXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIEEgRE9NU3RyaW5nIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgc2VsZWN0b3JzIHRvIG1hdGNoLlxuICogQHBhcmFtIGNhY2hlIEFuIG9wdGlvbmFsIGJvb2xlYW4gd2hpY2ggd2hlbiB0cnVlIHBlcmZvcm1zIHRoZSBET00gcXVlcnkgb25seVxuICogb25jZSBhbmQgY2FjaGVzIHRoZSByZXN1bHQuXG4gKlxuICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvcXVlcnlTZWxlY3RvclxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIGNsYXNzIE15RWxlbWVudCB7XG4gKiAgIEBxdWVyeSgnI2ZpcnN0JylcbiAqICAgZmlyc3Q7XG4gKlxuICogICByZW5kZXIoKSB7XG4gKiAgICAgcmV0dXJuIGh0bWxgXG4gKiAgICAgICA8ZGl2IGlkPVwiZmlyc3RcIj48L2Rpdj5cbiAqICAgICAgIDxkaXYgaWQ9XCJzZWNvbmRcIj48L2Rpdj5cbiAqICAgICBgO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqIEBjYXRlZ29yeSBEZWNvcmF0b3JcbiAqL1xuXG5mdW5jdGlvbiBxdWVyeShzZWxlY3RvciwgY2FjaGUpIHtcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvciwgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBkZWNvcmF0b3JcbiAgbmFtZSkgPT4ge1xuICAgIHZhciBkZXNjcmlwdG9yID0ge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJSb290LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfSxcblxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHZhciBrZXkgPSB0eXBlb2YgbmFtZSA9PT0gJ3N5bWJvbCcgPyBTeW1ib2woKSA6IFwiX19cIi5jb25jYXQobmFtZSk7XG5cbiAgICAgIGRlc2NyaXB0b3IuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzW2tleV0gPSB0aGlzLnJlbmRlclJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpc1trZXldO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkID8gbGVnYWN5UXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IsIG5hbWUpIDogc3RhbmRhcmRRdWVyeShkZXNjcmlwdG9yLCBwcm90b09yRGVzY3JpcHRvcik7XG4gIH07XG59IC8vIE5vdGUsIGluIHRoZSBmdXR1cmUsIHdlIG1heSBleHRlbmQgdGhpcyBkZWNvcmF0b3IgdG8gc3VwcG9ydCB0aGUgdXNlIGNhc2Vcbi8vIHdoZXJlIHRoZSBxdWVyaWVkIGVsZW1lbnQgbWF5IG5lZWQgdG8gZG8gd29yayB0byBiZWNvbWUgcmVhZHkgdG8gaW50ZXJhY3Rcbi8vIHdpdGggKGUuZy4gbG9hZCBzb21lIGltcGxlbWVudGF0aW9uIGNvZGUpLiBJZiBzbywgd2UgbWlnaHQgZWxlY3QgdG9cbi8vIGFkZCBhIHNlY29uZCBhcmd1bWVudCBkZWZpbmluZyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHJ1biB0byBtYWtlIHRoZVxuLy8gcXVlcmllZCBlbGVtZW50IGxvYWRlZC91cGRhdGVkL3JlYWR5LlxuXG4vKipcbiAqIEEgcHJvcGVydHkgZGVjb3JhdG9yIHRoYXQgY29udmVydHMgYSBjbGFzcyBwcm9wZXJ0eSBpbnRvIGEgZ2V0dGVyIHRoYXRcbiAqIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHJlc3VsdCBvZiBhIHF1ZXJ5U2VsZWN0b3Igb24gdGhlXG4gKiBlbGVtZW50J3MgcmVuZGVyUm9vdCBkb25lIGFmdGVyIHRoZSBlbGVtZW50J3MgYHVwZGF0ZUNvbXBsZXRlYCBwcm9taXNlXG4gKiByZXNvbHZlcy4gV2hlbiB0aGUgcXVlcmllZCBwcm9wZXJ0eSBtYXkgY2hhbmdlIHdpdGggZWxlbWVudCBzdGF0ZSwgdGhpc1xuICogZGVjb3JhdG9yIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgcmVxdWlyaW5nIHVzZXJzIHRvIGF3YWl0IHRoZVxuICogYHVwZGF0ZUNvbXBsZXRlYCBiZWZvcmUgYWNjZXNzaW5nIHRoZSBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgQSBET01TdHJpbmcgY29udGFpbmluZyBvbmUgb3IgbW9yZSBzZWxlY3RvcnMgdG8gbWF0Y2guXG4gKlxuICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvcXVlcnlTZWxlY3RvclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY2xhc3MgTXlFbGVtZW50IHtcbiAqICAgQHF1ZXJ5QXN5bmMoJyNmaXJzdCcpXG4gKiAgIGZpcnN0O1xuICpcbiAqICAgcmVuZGVyKCkge1xuICogICAgIHJldHVybiBodG1sYFxuICogICAgICAgPGRpdiBpZD1cImZpcnN0XCI+PC9kaXY+XG4gKiAgICAgICA8ZGl2IGlkPVwic2Vjb25kXCI+PC9kaXY+XG4gKiAgICAgYDtcbiAqICAgfVxuICogfVxuICpcbiAqIC8vIGV4dGVybmFsIHVzYWdlXG4gKiBhc3luYyBkb1NvbWV0aGluZ1dpdGhGaXJzdCgpIHtcbiAqICAoYXdhaXQgYU15RWxlbWVudC5maXJzdCkuZG9Tb21ldGhpbmcoKTtcbiAqIH1cbiAqIGBgYFxuICogQGNhdGVnb3J5IERlY29yYXRvclxuICovXG5cbmZ1bmN0aW9uIHF1ZXJ5QXN5bmMoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvciwgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBkZWNvcmF0b3JcbiAgbmFtZSkgPT4ge1xuICAgIHZhciBkZXNjcmlwdG9yID0ge1xuICAgICAgZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgICAgIHlpZWxkIF90aGlzLnVwZGF0ZUNvbXBsZXRlO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJSb290LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICB9KSgpO1xuICAgICAgfSxcblxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIG5hbWUgIT09IHVuZGVmaW5lZCA/IGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA6IHN0YW5kYXJkUXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IpO1xuICB9O1xufVxuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB0aGF0IGNvbnZlcnRzIGEgY2xhc3MgcHJvcGVydHkgaW50byBhIGdldHRlclxuICogdGhhdCBleGVjdXRlcyBhIHF1ZXJ5U2VsZWN0b3JBbGwgb24gdGhlIGVsZW1lbnQncyByZW5kZXJSb290LlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBBIERPTVN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIHNlbGVjdG9ycyB0byBtYXRjaC5cbiAqXG4gKiBTZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvcXVlcnlTZWxlY3RvckFsbFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY2xhc3MgTXlFbGVtZW50IHtcbiAqICAgQHF1ZXJ5QWxsKCdkaXYnKVxuICogICBkaXZzO1xuICpcbiAqICAgcmVuZGVyKCkge1xuICogICAgIHJldHVybiBodG1sYFxuICogICAgICAgPGRpdiBpZD1cImZpcnN0XCI+PC9kaXY+XG4gKiAgICAgICA8ZGl2IGlkPVwic2Vjb25kXCI+PC9kaXY+XG4gKiAgICAgYDtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKiBAY2F0ZWdvcnkgRGVjb3JhdG9yXG4gKi9cblxuZnVuY3Rpb24gcXVlcnlBbGwoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvciwgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBkZWNvcmF0b3JcbiAgbmFtZSkgPT4ge1xuICAgIHZhciBkZXNjcmlwdG9yID0ge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJSb290LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgfSxcblxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIG5hbWUgIT09IHVuZGVmaW5lZCA/IGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA6IHN0YW5kYXJkUXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IpO1xuICB9O1xufVxuXG52YXIgbGVnYWN5UXVlcnkgPSAoZGVzY3JpcHRvciwgcHJvdG8sIG5hbWUpID0+IHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCBkZXNjcmlwdG9yKTtcbn07XG5cbnZhciBzdGFuZGFyZFF1ZXJ5ID0gKGRlc2NyaXB0b3IsIGVsZW1lbnQpID0+ICh7XG4gIGtpbmQ6ICdtZXRob2QnLFxuICBwbGFjZW1lbnQ6ICdwcm90b3R5cGUnLFxuICBrZXk6IGVsZW1lbnQua2V5LFxuICBkZXNjcmlwdG9yXG59KTtcblxudmFyIHN0YW5kYXJkRXZlbnRPcHRpb25zID0gKG9wdGlvbnMsIGVsZW1lbnQpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZWxlbWVudCksIHtcbiAgICBmaW5pc2hlcihjbGF6eikge1xuICAgICAgT2JqZWN0LmFzc2lnbihjbGF6ei5wcm90b3R5cGVbZWxlbWVudC5rZXldLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgfSk7XG59O1xuXG52YXIgbGVnYWN5RXZlbnRPcHRpb25zID0gLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBsZWdhY3kgZGVjb3JhdG9yXG4ob3B0aW9ucywgcHJvdG8sIG5hbWUpID0+IHtcbiAgT2JqZWN0LmFzc2lnbihwcm90b1tuYW1lXSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBZGRzIGV2ZW50IGxpc3RlbmVyIG9wdGlvbnMgdG8gYSBtZXRob2QgdXNlZCBhcyBhbiBldmVudCBsaXN0ZW5lciBpbiBhXG4gKiBsaXQtaHRtbCB0ZW1wbGF0ZS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgZXZlbnQgbGlzdGVuZXIgb3B0aW9ucyBhcyBhY2NlcHRlZCBieVxuICogYEV2ZW50VGFyZ2V0I2FkZEV2ZW50TGlzdGVuZXJgIGFuZCBgRXZlbnRUYXJnZXQjcmVtb3ZlRXZlbnRMaXN0ZW5lcmAuXG4gKlxuICogQ3VycmVudCBicm93c2VycyBzdXBwb3J0IHRoZSBgY2FwdHVyZWAsIGBwYXNzaXZlYCwgYW5kIGBvbmNlYCBvcHRpb25zLiBTZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNQYXJhbWV0ZXJzXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjbGFzcyBNeUVsZW1lbnQge1xuICogICBjbGlja2VkID0gZmFsc2U7XG4gKlxuICogICByZW5kZXIoKSB7XG4gKiAgICAgcmV0dXJuIGh0bWxgXG4gKiAgICAgICA8ZGl2IEBjbGljaz0ke3RoaXMuX29uQ2xpY2t9YD5cbiAqICAgICAgICAgPGJ1dHRvbj48L2J1dHRvbj5cbiAqICAgICAgIDwvZGl2PlxuICogICAgIGA7XG4gKiAgIH1cbiAqXG4gKiAgIEBldmVudE9wdGlvbnMoe2NhcHR1cmU6IHRydWV9KVxuICogICBfb25DbGljayhlKSB7XG4gKiAgICAgdGhpcy5jbGlja2VkID0gdHJ1ZTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKiBAY2F0ZWdvcnkgRGVjb3JhdG9yXG4gKi9cblxuXG5mdW5jdGlvbiBldmVudE9wdGlvbnMob3B0aW9ucykge1xuICAvLyBSZXR1cm4gdmFsdWUgdHlwZWQgYXMgYW55IHRvIHByZXZlbnQgVHlwZVNjcmlwdCBmcm9tIGNvbXBsYWluaW5nIHRoYXRcbiAgLy8gc3RhbmRhcmQgZGVjb3JhdG9yIGZ1bmN0aW9uIHNpZ25hdHVyZSBkb2VzIG5vdCBtYXRjaCBUeXBlU2NyaXB0IGRlY29yYXRvclxuICAvLyBzaWduYXR1cmVcbiAgLy8gVE9ETyhrc2NoYWFmKTogdW5jbGVhciB3aHkgaXQgd2FzIG9ubHkgZmFpbGluZyBvbiB0aGlzIGRlY29yYXRvciBhbmQgbm90XG4gIC8vIHRoZSBvdGhlcnNcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvciwgbmFtZSkgPT4gbmFtZSAhPT0gdW5kZWZpbmVkID8gbGVnYWN5RXZlbnRPcHRpb25zKG9wdGlvbnMsIHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA6IHN0YW5kYXJkRXZlbnRPcHRpb25zKG9wdGlvbnMsIHByb3RvT3JEZXNjcmlwdG9yKTtcbn0gLy8geC1icm93c2VyIHN1cHBvcnQgZm9yIG1hdGNoZXNcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcblxudmFyIEVsZW1lbnRQcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xudmFyIGxlZ2FjeU1hdGNoZXMgPSBFbGVtZW50UHJvdG8ubXNNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudFByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcbi8qKlxuICogQSBwcm9wZXJ0eSBkZWNvcmF0b3IgdGhhdCBjb252ZXJ0cyBhIGNsYXNzIHByb3BlcnR5IGludG8gYSBnZXR0ZXIgdGhhdFxuICogcmV0dXJucyB0aGUgYGFzc2lnbmVkTm9kZXNgIG9mIHRoZSBnaXZlbiBuYW1lZCBgc2xvdGAuIE5vdGUsIHRoZSB0eXBlIG9mXG4gKiB0aGlzIHByb3BlcnR5IHNob3VsZCBiZSBhbm5vdGF0ZWQgYXMgYE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+YC5cbiAqXG4gKiBAcGFyYW0gc2xvdE5hbWUgQSBzdHJpbmcgbmFtZSBvZiB0aGUgc2xvdC5cbiAqIEBwYXJhbSBmbGF0dGVuIEEgYm9vbGVhbiB3aGljaCB3aGVuIHRydWUgZmxhdHRlbnMgdGhlIGFzc2lnbmVkIG5vZGVzLFxuICogbWVhbmluZyBhbnkgYXNzaWduZWQgbm9kZXMgdGhhdCBhcmUgc2xvdCBlbGVtZW50cyBhcmUgcmVwbGFjZWQgd2l0aCB0aGVpclxuICogYXNzaWduZWQgbm9kZXMuXG4gKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgd2hpY2ggZmlsdGVycyB0aGUgcmVzdWx0cyB0byBlbGVtZW50cyB0aGF0IG1hdGNoXG4gKiB0aGUgZ2l2ZW4gY3NzIHNlbGVjdG9yLlxuICpcbiAqICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjbGFzcyBNeUVsZW1lbnQge1xuICogICBAcXVlcnlBc3NpZ25lZE5vZGVzKCdsaXN0JywgdHJ1ZSwgJy5pdGVtJylcbiAqICAgbGlzdEl0ZW1zO1xuICpcbiAqICAgcmVuZGVyKCkge1xuICogICAgIHJldHVybiBodG1sYFxuICogICAgICAgPHNsb3QgbmFtZT1cImxpc3RcIj48L3Nsb3Q+XG4gKiAgICAgYDtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKiBAY2F0ZWdvcnkgRGVjb3JhdG9yXG4gKi9cblxuZnVuY3Rpb24gcXVlcnlBc3NpZ25lZE5vZGVzKCkge1xuICB2YXIgc2xvdE5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICB2YXIgZmxhdHRlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHZhciBzZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG4gIHJldHVybiAocHJvdG9PckRlc2NyaXB0b3IsIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gIG5hbWUpID0+IHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgdmFyIHNsb3RTZWxlY3RvciA9IFwic2xvdFwiLmNvbmNhdChzbG90TmFtZSA/IFwiW25hbWU9XCIuY29uY2F0KHNsb3ROYW1lLCBcIl1cIikgOiAnOm5vdChbbmFtZV0pJyk7XG4gICAgICAgIHZhciBzbG90ID0gdGhpcy5yZW5kZXJSb290LnF1ZXJ5U2VsZWN0b3Ioc2xvdFNlbGVjdG9yKTtcbiAgICAgICAgdmFyIG5vZGVzID0gc2xvdCAmJiBzbG90LmFzc2lnbmVkTm9kZXMoe1xuICAgICAgICAgIGZsYXR0ZW5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG5vZGVzICYmIHNlbGVjdG9yKSB7XG4gICAgICAgICAgbm9kZXMgPSBub2Rlcy5maWx0ZXIobm9kZSA9PiBub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBub2RlLm1hdGNoZXMgPyBub2RlLm1hdGNoZXMoc2VsZWN0b3IpIDogbGVnYWN5TWF0Y2hlcy5jYWxsKG5vZGUsIHNlbGVjdG9yKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgICB9LFxuXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkID8gbGVnYWN5UXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IsIG5hbWUpIDogc3RhbmRhcmRRdWVyeShkZXNjcmlwdG9yLCBwcm90b09yRGVzY3JpcHRvcik7XG4gIH07XG59XG5cbi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxOSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGN1cnJlbnQgYnJvd3NlciBzdXBwb3J0cyBgYWRvcHRlZFN0eWxlU2hlZXRzYC5cbiAqL1xudmFyIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyA9IHdpbmRvdy5TaGFkb3dSb290ICYmICh3aW5kb3cuU2hhZHlDU1MgPT09IHVuZGVmaW5lZCB8fCB3aW5kb3cuU2hhZHlDU1MubmF0aXZlU2hhZG93KSAmJiAnYWRvcHRlZFN0eWxlU2hlZXRzJyBpbiBEb2N1bWVudC5wcm90b3R5cGUgJiYgJ3JlcGxhY2UnIGluIENTU1N0eWxlU2hlZXQucHJvdG90eXBlO1xudmFyIGNvbnN0cnVjdGlvblRva2VuID0gU3ltYm9sKCk7XG5jbGFzcyBDU1NSZXN1bHQge1xuICBjb25zdHJ1Y3Rvcihjc3NUZXh0LCBzYWZlVG9rZW4pIHtcbiAgICBpZiAoc2FmZVRva2VuICE9PSBjb25zdHJ1Y3Rpb25Ub2tlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHRoaXMuY3NzVGV4dCA9IGNzc1RleHQ7XG4gIH0gLy8gTm90ZSwgdGhpcyBpcyBhIGdldHRlciBzbyB0aGF0IGl0J3MgbGF6eS4gSW4gcHJhY3RpY2UsIHRoaXMgbWVhbnNcbiAgLy8gc3R5bGVzaGVldHMgYXJlIG5vdCBjcmVhdGVkIHVudGlsIHRoZSBmaXJzdCBlbGVtZW50IGluc3RhbmNlIGlzIG1hZGUuXG5cblxuICBnZXQgc3R5bGVTaGVldCgpIHtcbiAgICBpZiAodGhpcy5fc3R5bGVTaGVldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBOb3RlLCBpZiBgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzYCBpcyB0cnVlIHRoZW4gd2UgYXNzdW1lXG4gICAgICAvLyBDU1NTdHlsZVNoZWV0IGlzIGNvbnN0cnVjdGFibGUuXG4gICAgICBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7XG4gICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBuZXcgQ1NTU3R5bGVTaGVldCgpO1xuXG4gICAgICAgIHRoaXMuX3N0eWxlU2hlZXQucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHlsZVNoZWV0O1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzVGV4dDtcbiAgfVxuXG59XG4vKipcbiAqIFdyYXAgYSB2YWx1ZSBmb3IgaW50ZXJwb2xhdGlvbiBpbiBhIFtbYGNzc2BdXSB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbC5cbiAqXG4gKiBUaGlzIGlzIHVuc2FmZSBiZWNhdXNlIHVudHJ1c3RlZCBDU1MgdGV4dCBjYW4gYmUgdXNlZCB0byBwaG9uZSBob21lXG4gKiBvciBleGZpbHRyYXRlIGRhdGEgdG8gYW4gYXR0YWNrZXIgY29udHJvbGxlZCBzaXRlLiBUYWtlIGNhcmUgdG8gb25seSB1c2VcbiAqIHRoaXMgd2l0aCB0cnVzdGVkIGlucHV0LlxuICovXG5cbnZhciB1bnNhZmVDU1MgPSB2YWx1ZSA9PiB7XG4gIHJldHVybiBuZXcgQ1NTUmVzdWx0KFN0cmluZyh2YWx1ZSksIGNvbnN0cnVjdGlvblRva2VuKTtcbn07XG5cbnZhciB0ZXh0RnJvbUNTU1Jlc3VsdCA9IHZhbHVlID0+IHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQ1NTUmVzdWx0KSB7XG4gICAgcmV0dXJuIHZhbHVlLmNzc1RleHQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogXCIuY29uY2F0KHZhbHVlLCBcIi4gVXNlICd1bnNhZmVDU1MnIHRvIHBhc3Mgbm9uLWxpdGVyYWwgdmFsdWVzLCBidXRcXG4gICAgICAgICAgICB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpKTtcbiAgfVxufTtcbi8qKlxuICogVGVtcGxhdGUgdGFnIHdoaWNoIHdoaWNoIGNhbiBiZSB1c2VkIHdpdGggTGl0RWxlbWVudCdzIFtbTGl0RWxlbWVudC5zdHlsZXMgfFxuICogYHN0eWxlc2BdXSBwcm9wZXJ0eSB0byBzZXQgZWxlbWVudCBzdHlsZXMuIEZvciBzZWN1cml0eSByZWFzb25zLCBvbmx5IGxpdGVyYWxcbiAqIHN0cmluZyB2YWx1ZXMgbWF5IGJlIHVzZWQuIFRvIGluY29ycG9yYXRlIG5vbi1saXRlcmFsIHZhbHVlcyBbW2B1bnNhZmVDU1NgXV1cbiAqIG1heSBiZSB1c2VkIGluc2lkZSBhIHRlbXBsYXRlIHN0cmluZyBwYXJ0LlxuICovXG5cblxudmFyIGNzcyA9IGZ1bmN0aW9uIGNzcyhzdHJpbmdzKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB2YWx1ZXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHZhbHVlc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgY3NzVGV4dCA9IHZhbHVlcy5yZWR1Y2UoKGFjYywgdiwgaWR4KSA9PiBhY2MgKyB0ZXh0RnJvbUNTU1Jlc3VsdCh2KSArIHN0cmluZ3NbaWR4ICsgMV0sIHN0cmluZ3NbMF0pO1xuICByZXR1cm4gbmV3IENTU1Jlc3VsdChjc3NUZXh0LCBjb25zdHJ1Y3Rpb25Ub2tlbik7XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vLyBUaGlzIGxpbmUgd2lsbCBiZSB1c2VkIGluIHJlZ2V4ZXMgdG8gc2VhcmNoIGZvciBMaXRFbGVtZW50IHVzYWdlLlxuLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogaW5qZWN0IHZlcnNpb24gbnVtYmVyIGF0IGJ1aWxkIHRpbWVcblxuKHdpbmRvd1snbGl0RWxlbWVudFZlcnNpb25zJ10gfHwgKHdpbmRvd1snbGl0RWxlbWVudFZlcnNpb25zJ10gPSBbXSkpLnB1c2goJzIuNC4wJyk7XG4vKipcbiAqIFNlbnRpbmFsIHZhbHVlIHVzZWQgdG8gYXZvaWQgY2FsbGluZyBsaXQtaHRtbCdzIHJlbmRlciBmdW5jdGlvbiB3aGVuXG4gKiBzdWJjbGFzc2VzIGRvIG5vdCBpbXBsZW1lbnQgYHJlbmRlcmBcbiAqL1xuXG52YXIgcmVuZGVyTm90SW1wbGVtZW50ZWQgPSB7fTtcbi8qKlxuICogQmFzZSBlbGVtZW50IGNsYXNzIHRoYXQgbWFuYWdlcyBlbGVtZW50IHByb3BlcnRpZXMgYW5kIGF0dHJpYnV0ZXMsIGFuZFxuICogcmVuZGVycyBhIGxpdC1odG1sIHRlbXBsYXRlLlxuICpcbiAqIFRvIGRlZmluZSBhIGNvbXBvbmVudCwgc3ViY2xhc3MgYExpdEVsZW1lbnRgIGFuZCBpbXBsZW1lbnQgYVxuICogYHJlbmRlcmAgbWV0aG9kIHRvIHByb3ZpZGUgdGhlIGNvbXBvbmVudCdzIHRlbXBsYXRlLiBEZWZpbmUgcHJvcGVydGllc1xuICogdXNpbmcgdGhlIFtbYHByb3BlcnRpZXNgXV0gcHJvcGVydHkgb3IgdGhlIFtbYHByb3BlcnR5YF1dIGRlY29yYXRvci5cbiAqL1xuXG5jbGFzcyBMaXRFbGVtZW50IGV4dGVuZHMgVXBkYXRpbmdFbGVtZW50IHtcbiAgLyoqXG4gICAqIFJldHVybiB0aGUgYXJyYXkgb2Ygc3R5bGVzIHRvIGFwcGx5IHRvIHRoZSBlbGVtZW50LlxuICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBpbnRlZ3JhdGUgaW50byBhIHN0eWxlIG1hbmFnZW1lbnQgc3lzdGVtLlxuICAgKlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgc3RhdGljIGdldFN0eWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdHlsZXM7XG4gIH1cbiAgLyoqIEBub2NvbGxhcHNlICovXG5cblxuICBzdGF0aWMgX2dldFVuaXF1ZVN0eWxlcygpIHtcbiAgICAvLyBPbmx5IGdhdGhlciBzdHlsZXMgb25jZSBwZXIgY2xhc3NcbiAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfc3R5bGVzJywgdGhpcykpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUYWtlIGNhcmUgbm90IHRvIGNhbGwgYHRoaXMuZ2V0U3R5bGVzKClgIG11bHRpcGxlIHRpbWVzIHNpbmNlIHRoaXNcbiAgICAvLyBnZW5lcmF0ZXMgbmV3IENTU1Jlc3VsdHMgZWFjaCB0aW1lLlxuICAgIC8vIFRPRE8oc29ydmVsbCk6IFNpbmNlIHdlIGRvIG5vdCBjYWNoZSBDU1NSZXN1bHRzIGJ5IGlucHV0LCBhbnlcbiAgICAvLyBzaGFyZWQgc3R5bGVzIHdpbGwgZ2VuZXJhdGUgbmV3IHN0eWxlc2hlZXQgb2JqZWN0cywgd2hpY2ggaXMgd2FzdGVmdWwuXG4gICAgLy8gVGhpcyBzaG91bGQgYmUgYWRkcmVzc2VkIHdoZW4gYSBicm93c2VyIHNoaXBzIGNvbnN0cnVjdGFibGVcbiAgICAvLyBzdHlsZXNoZWV0cy5cblxuXG4gICAgdmFyIHVzZXJTdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodXNlclN0eWxlcykpIHtcbiAgICAgIC8vIERlLWR1cGxpY2F0ZSBzdHlsZXMgcHJlc2VydmluZyB0aGUgX2xhc3RfIGluc3RhbmNlIGluIHRoZSBzZXQuXG4gICAgICAvLyBUaGlzIGlzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHRvIGF2b2lkIGR1cGxpY2F0ZWQgc3R5bGVzIHRoYXQgY2FuXG4gICAgICAvLyBvY2N1ciBlc3BlY2lhbGx5IHdoZW4gY29tcG9zaW5nIHZpYSBzdWJjbGFzc2luZy5cbiAgICAgIC8vIFRoZSBsYXN0IGl0ZW0gaXMga2VwdCB0byB0cnkgdG8gcHJlc2VydmUgdGhlIGNhc2NhZGUgb3JkZXIgd2l0aCB0aGVcbiAgICAgIC8vIGFzc3VtcHRpb24gdGhhdCBpdCdzIG1vc3QgaW1wb3J0YW50IHRoYXQgbGFzdCBhZGRlZCBzdHlsZXMgb3ZlcnJpZGVcbiAgICAgIC8vIHByZXZpb3VzIHN0eWxlcy5cbiAgICAgIHZhciBhZGRTdHlsZXMgPSAoc3R5bGVzLCBzZXQpID0+IHN0eWxlcy5yZWR1Y2VSaWdodCgoc2V0LCBzKSA9PiAvLyBOb3RlOiBPbiBJRSBzZXQuYWRkKCkgZG9lcyBub3QgcmV0dXJuIHRoZSBzZXRcbiAgICAgIEFycmF5LmlzQXJyYXkocykgPyBhZGRTdHlsZXMocywgc2V0KSA6IChzZXQuYWRkKHMpLCBzZXQpLCBzZXQpOyAvLyBBcnJheS5mcm9tIGRvZXMgbm90IHdvcmsgb24gU2V0IGluIElFLCBvdGhlcndpc2UgcmV0dXJuXG4gICAgICAvLyBBcnJheS5mcm9tKGFkZFN0eWxlcyh1c2VyU3R5bGVzLCBuZXcgU2V0PENTU1Jlc3VsdD4oKSkpLnJldmVyc2UoKVxuXG5cbiAgICAgIHZhciBzZXQgPSBhZGRTdHlsZXModXNlclN0eWxlcywgbmV3IFNldCgpKTtcbiAgICAgIHZhciBzdHlsZXMgPSBbXTtcbiAgICAgIHNldC5mb3JFYWNoKHYgPT4gc3R5bGVzLnVuc2hpZnQodikpO1xuICAgICAgdGhpcy5fc3R5bGVzID0gc3R5bGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zdHlsZXMgPSB1c2VyU3R5bGVzID09PSB1bmRlZmluZWQgPyBbXSA6IFt1c2VyU3R5bGVzXTtcbiAgICB9IC8vIEVuc3VyZSB0aGF0IHRoZXJlIGFyZSBubyBpbnZhbGlkIENTU1N0eWxlU2hlZXQgaW5zdGFuY2VzIGhlcmUuIFRoZXkgYXJlXG4gICAgLy8gaW52YWxpZCBpbiB0d28gY29uZGl0aW9ucy5cbiAgICAvLyAoMSkgdGhlIHNoZWV0IGlzIG5vbi1jb25zdHJ1Y3RpYmxlIChgc2hlZXRgIG9mIGEgSFRNTFN0eWxlRWxlbWVudCksIGJ1dFxuICAgIC8vICAgICB0aGlzIGlzIGltcG9zc2libGUgdG8gY2hlY2sgZXhjZXB0IHZpYSAucmVwbGFjZVN5bmMgb3IgdXNlXG4gICAgLy8gKDIpIHRoZSBTaGFkeUNTUyBwb2x5ZmlsbCBpcyBlbmFibGVkICg6LiBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMgaXNcbiAgICAvLyAgICAgZmFsc2UpXG5cblxuICAgIHRoaXMuX3N0eWxlcyA9IHRoaXMuX3N0eWxlcy5tYXAocyA9PiB7XG4gICAgICBpZiAocyBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQgJiYgIXN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cykge1xuICAgICAgICAvLyBGbGF0dGVuIHRoZSBjc3NUZXh0IGZyb20gdGhlIHBhc3NlZCBjb25zdHJ1Y3RpYmxlIHN0eWxlc2hlZXQgKG9yXG4gICAgICAgIC8vIHVuZGV0ZWN0YWJsZSBub24tY29uc3RydWN0aWJsZSBzdHlsZXNoZWV0KS4gVGhlIHVzZXIgbWlnaHQgaGF2ZVxuICAgICAgICAvLyBleHBlY3RlZCB0byB1cGRhdGUgdGhlaXIgc3R5bGVzaGVldHMgb3ZlciB0aW1lLCBidXQgdGhlIGFsdGVybmF0aXZlXG4gICAgICAgIC8vIGlzIGEgY3Jhc2guXG4gICAgICAgIHZhciBjc3NUZXh0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocy5jc3NSdWxlcykucmVkdWNlKChjc3MsIHJ1bGUpID0+IGNzcyArIHJ1bGUuY3NzVGV4dCwgJycpO1xuICAgICAgICByZXR1cm4gdW5zYWZlQ1NTKGNzc1RleHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcztcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUGVyZm9ybXMgZWxlbWVudCBpbml0aWFsaXphdGlvbi4gQnkgZGVmYXVsdCB0aGlzIGNhbGxzXG4gICAqIFtbYGNyZWF0ZVJlbmRlclJvb3RgXV0gdG8gY3JlYXRlIHRoZSBlbGVtZW50IFtbYHJlbmRlclJvb3RgXV0gbm9kZSBhbmRcbiAgICogY2FwdHVyZXMgYW55IHByZS1zZXQgdmFsdWVzIGZvciByZWdpc3RlcmVkIHByb3BlcnRpZXMuXG4gICAqL1xuXG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG5cbiAgICB0aGlzLmNvbnN0cnVjdG9yLl9nZXRVbmlxdWVTdHlsZXMoKTtcblxuICAgIHRoaXMucmVuZGVyUm9vdCA9IHRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpOyAvLyBOb3RlLCBpZiByZW5kZXJSb290IGlzIG5vdCBhIHNoYWRvd1Jvb3QsIHN0eWxlcyB3b3VsZC9jb3VsZCBhcHBseSB0byB0aGVcbiAgICAvLyBlbGVtZW50J3MgZ2V0Um9vdE5vZGUoKS4gV2hpbGUgdGhpcyBjb3VsZCBiZSBkb25lLCB3ZSdyZSBjaG9vc2luZyBub3QgdG9cbiAgICAvLyBzdXBwb3J0IHRoaXMgbm93IHNpbmNlIGl0IHdvdWxkIHJlcXVpcmUgZGlmZmVyZW50IGxvZ2ljIGFyb3VuZCBkZS1kdXBpbmcuXG5cbiAgICBpZiAod2luZG93LlNoYWRvd1Jvb3QgJiYgdGhpcy5yZW5kZXJSb290IGluc3RhbmNlb2Ygd2luZG93LlNoYWRvd1Jvb3QpIHtcbiAgICAgIHRoaXMuYWRvcHRTdHlsZXMoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5vZGUgaW50byB3aGljaCB0aGUgZWxlbWVudCBzaG91bGQgcmVuZGVyIGFuZCBieSBkZWZhdWx0XG4gICAqIGNyZWF0ZXMgYW5kIHJldHVybnMgYW4gb3BlbiBzaGFkb3dSb290LiBJbXBsZW1lbnQgdG8gY3VzdG9taXplIHdoZXJlIHRoZVxuICAgKiBlbGVtZW50J3MgRE9NIGlzIHJlbmRlcmVkLiBGb3IgZXhhbXBsZSwgdG8gcmVuZGVyIGludG8gdGhlIGVsZW1lbnQnc1xuICAgKiBjaGlsZE5vZGVzLCByZXR1cm4gYHRoaXNgLlxuICAgKiBAcmV0dXJucyB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBSZXR1cm5zIGEgbm9kZSBpbnRvIHdoaWNoIHRvIHJlbmRlci5cbiAgICovXG5cblxuICBjcmVhdGVSZW5kZXJSb290KCkge1xuICAgIHJldHVybiB0aGlzLmF0dGFjaFNoYWRvdyh7XG4gICAgICBtb2RlOiAnb3BlbidcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQXBwbGllcyBzdHlsaW5nIHRvIHRoZSBlbGVtZW50IHNoYWRvd1Jvb3QgdXNpbmcgdGhlIFtbYHN0eWxlc2BdXVxuICAgKiBwcm9wZXJ0eS4gU3R5bGluZyB3aWxsIGFwcGx5IHVzaW5nIGBzaGFkb3dSb290LmFkb3B0ZWRTdHlsZVNoZWV0c2Agd2hlcmVcbiAgICogYXZhaWxhYmxlIGFuZCB3aWxsIGZhbGxiYWNrIG90aGVyd2lzZS4gV2hlbiBTaGFkb3cgRE9NIGlzIHBvbHlmaWxsZWQsXG4gICAqIFNoYWR5Q1NTIHNjb3BlcyBzdHlsZXMgYW5kIGFkZHMgdGhlbSB0byB0aGUgZG9jdW1lbnQuIFdoZW4gU2hhZG93IERPTVxuICAgKiBpcyBhdmFpbGFibGUgYnV0IGBhZG9wdGVkU3R5bGVTaGVldHNgIGlzIG5vdCwgc3R5bGVzIGFyZSBhcHBlbmRlZCB0byB0aGVcbiAgICogZW5kIG9mIHRoZSBgc2hhZG93Um9vdGAgdG8gW21pbWljIHNwZWNcbiAgICogYmVoYXZpb3JdKGh0dHBzOi8vd2ljZy5naXRodWIuaW8vY29uc3RydWN0LXN0eWxlc2hlZXRzLyN1c2luZy1jb25zdHJ1Y3RlZC1zdHlsZXNoZWV0cykuXG4gICAqL1xuXG5cbiAgYWRvcHRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuY29uc3RydWN0b3IuX3N0eWxlcztcblxuICAgIGlmIChzdHlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUaGVyZSBhcmUgdGhyZWUgc2VwYXJhdGUgY2FzZXMgaGVyZSBiYXNlZCBvbiBTaGFkb3cgRE9NIHN1cHBvcnQuXG4gICAgLy8gKDEpIHNoYWRvd1Jvb3QgcG9seWZpbGxlZDogdXNlIFNoYWR5Q1NTXG4gICAgLy8gKDIpIHNoYWRvd1Jvb3QuYWRvcHRlZFN0eWxlU2hlZXRzIGF2YWlsYWJsZTogdXNlIGl0XG4gICAgLy8gKDMpIHNoYWRvd1Jvb3QuYWRvcHRlZFN0eWxlU2hlZXRzIHBvbHlmaWxsZWQ6IGFwcGVuZCBzdHlsZXMgYWZ0ZXJcbiAgICAvLyByZW5kZXJpbmdcblxuXG4gICAgaWYgKHdpbmRvdy5TaGFkeUNTUyAhPT0gdW5kZWZpbmVkICYmICF3aW5kb3cuU2hhZHlDU1MubmF0aXZlU2hhZG93KSB7XG4gICAgICB3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0ucHJlcGFyZUFkb3B0ZWRDc3NUZXh0KHN0eWxlcy5tYXAocyA9PiBzLmNzc1RleHQpLCB0aGlzLmxvY2FsTmFtZSk7XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMpIHtcbiAgICAgIHRoaXMucmVuZGVyUm9vdC5hZG9wdGVkU3R5bGVTaGVldHMgPSBzdHlsZXMubWFwKHMgPT4gcyBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQgPyBzIDogcy5zdHlsZVNoZWV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBtdXN0IGJlIGRvbmUgYWZ0ZXIgcmVuZGVyaW5nIHNvIHRoZSBhY3R1YWwgc3R5bGUgaW5zZXJ0aW9uIGlzIGRvbmVcbiAgICAgIC8vIGluIGB1cGRhdGVgLlxuICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpOyAvLyBOb3RlLCBmaXJzdCB1cGRhdGUvcmVuZGVyIGhhbmRsZXMgc3R5bGVFbGVtZW50IHNvIHdlIG9ubHkgY2FsbCB0aGlzIGlmXG4gICAgLy8gY29ubmVjdGVkIGFmdGVyIGZpcnN0IHVwZGF0ZS5cblxuICAgIGlmICh0aGlzLmhhc1VwZGF0ZWQgJiYgd2luZG93LlNoYWR5Q1NTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBlbGVtZW50LiBUaGlzIG1ldGhvZCByZWZsZWN0cyBwcm9wZXJ0eSB2YWx1ZXMgdG8gYXR0cmlidXRlc1xuICAgKiBhbmQgY2FsbHMgYHJlbmRlcmAgdG8gcmVuZGVyIERPTSB2aWEgbGl0LWh0bWwuIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGVcbiAgICogdGhpcyBtZXRob2Qgd2lsbCAqbm90KiB0cmlnZ2VyIGFub3RoZXIgdXBkYXRlLlxuICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAqL1xuXG5cbiAgdXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgLy8gU2V0dGluZyBwcm9wZXJ0aWVzIGluIGByZW5kZXJgIHNob3VsZCBub3QgdHJpZ2dlciBhbiB1cGRhdGUuIFNpbmNlXG4gICAgLy8gdXBkYXRlcyBhcmUgYWxsb3dlZCBhZnRlciBzdXBlci51cGRhdGUsIGl0J3MgaW1wb3J0YW50IHRvIGNhbGwgYHJlbmRlcmBcbiAgICAvLyBiZWZvcmUgdGhhdC5cbiAgICB2YXIgdGVtcGxhdGVSZXN1bHQgPSB0aGlzLnJlbmRlcigpO1xuICAgIHN1cGVyLnVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7IC8vIElmIHJlbmRlciBpcyBub3QgaW1wbGVtZW50ZWQgYnkgdGhlIGNvbXBvbmVudCwgZG9uJ3QgY2FsbCBsaXQtaHRtbCByZW5kZXJcblxuICAgIGlmICh0ZW1wbGF0ZVJlc3VsdCAhPT0gcmVuZGVyTm90SW1wbGVtZW50ZWQpIHtcbiAgICAgIHRoaXMuY29uc3RydWN0b3IucmVuZGVyKHRlbXBsYXRlUmVzdWx0LCB0aGlzLnJlbmRlclJvb3QsIHtcbiAgICAgICAgc2NvcGVOYW1lOiB0aGlzLmxvY2FsTmFtZSxcbiAgICAgICAgZXZlbnRDb250ZXh0OiB0aGlzXG4gICAgICB9KTtcbiAgICB9IC8vIFdoZW4gbmF0aXZlIFNoYWRvdyBET00gaXMgdXNlZCBidXQgYWRvcHRlZFN0eWxlcyBhcmUgbm90IHN1cHBvcnRlZCxcbiAgICAvLyBpbnNlcnQgc3R5bGluZyBhZnRlciByZW5kZXJpbmcgdG8gZW5zdXJlIGFkb3B0ZWRTdHlsZXMgaGF2ZSBoaWdoZXN0XG4gICAgLy8gcHJpb3JpdHkuXG5cblxuICAgIGlmICh0aGlzLl9uZWVkc1NoaW1BZG9wdGVkU3R5bGVTaGVldHMpIHtcbiAgICAgIHRoaXMuX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLl9zdHlsZXMuZm9yRWFjaChzID0+IHtcbiAgICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzLmNzc1RleHQ7XG4gICAgICAgIHRoaXMucmVuZGVyUm9vdC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEludm9rZWQgb24gZWFjaCB1cGRhdGUgdG8gcGVyZm9ybSByZW5kZXJpbmcgdGFza3MuIFRoaXMgbWV0aG9kIG1heSByZXR1cm5cbiAgICogYW55IHZhbHVlIHJlbmRlcmFibGUgYnkgbGl0LWh0bWwncyBgTm9kZVBhcnRgIC0gdHlwaWNhbGx5IGFcbiAgICogYFRlbXBsYXRlUmVzdWx0YC4gU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsICpub3QqIHRyaWdnZXJcbiAgICogdGhlIGVsZW1lbnQgdG8gdXBkYXRlLlxuICAgKi9cblxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gcmVuZGVyTm90SW1wbGVtZW50ZWQ7XG4gIH1cblxufVxuLyoqXG4gKiBFbnN1cmUgdGhpcyBjbGFzcyBpcyBtYXJrZWQgYXMgYGZpbmFsaXplZGAgYXMgYW4gb3B0aW1pemF0aW9uIGVuc3VyaW5nXG4gKiBpdCB3aWxsIG5vdCBuZWVkbGVzc2x5IHRyeSB0byBgZmluYWxpemVgLlxuICpcbiAqIE5vdGUgdGhpcyBwcm9wZXJ0eSBuYW1lIGlzIGEgc3RyaW5nIHRvIHByZXZlbnQgYnJlYWtpbmcgQ2xvc3VyZSBKUyBDb21waWxlclxuICogb3B0aW1pemF0aW9ucy4gU2VlIHVwZGF0aW5nLWVsZW1lbnQudHMgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cblxuTGl0RWxlbWVudFsnZmluYWxpemVkJ10gPSB0cnVlO1xuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHVuZGVybHlpbmcgbGlicmFyeSBtZXRob2QgdXNlZCB0byByZW5kZXIgdGhlIGVsZW1lbnQnc1xuICogRE9NLiBCeSBkZWZhdWx0LCBwb2ludHMgdG8gdGhlIGByZW5kZXJgIG1ldGhvZCBmcm9tIGxpdC1odG1sJ3Mgc2hhZHktcmVuZGVyXG4gKiBtb2R1bGUuXG4gKlxuICogKipNb3N0IHVzZXJzIHdpbGwgbmV2ZXIgbmVlZCB0byB0b3VjaCB0aGlzIHByb3BlcnR5LioqXG4gKlxuICogVGhpcyAgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSBjb25mdXNlZCB3aXRoIHRoZSBgcmVuZGVyYCBpbnN0YW5jZSBtZXRob2QsXG4gKiB3aGljaCBzaG91bGQgYmUgb3ZlcnJpZGRlbiB0byBkZWZpbmUgYSB0ZW1wbGF0ZSBmb3IgdGhlIGVsZW1lbnQuXG4gKlxuICogQWR2YW5jZWQgdXNlcnMgY3JlYXRpbmcgYSBuZXcgYmFzZSBjbGFzcyBiYXNlZCBvbiBMaXRFbGVtZW50IGNhbiBvdmVycmlkZVxuICogdGhpcyBwcm9wZXJ0eSB0byBwb2ludCB0byBhIGN1c3RvbSByZW5kZXIgbWV0aG9kIHdpdGggYSBzaWduYXR1cmUgdGhhdFxuICogbWF0Y2hlcyBbc2hhZHktcmVuZGVyJ3MgYHJlbmRlcmBcbiAqIG1ldGhvZF0oaHR0cHM6Ly9saXQtaHRtbC5wb2x5bWVyLXByb2plY3Qub3JnL2FwaS9tb2R1bGVzL3NoYWR5X3JlbmRlci5odG1sI3JlbmRlcikuXG4gKlxuICogQG5vY29sbGFwc2VcbiAqL1xuXG5MaXRFbGVtZW50LnJlbmRlciA9IHJlbmRlcjtcblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBiYXNlZGlyLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHtcblx0ICBwYXRoOiBiYXNlZGlyLFxuXHQgIGV4cG9ydHM6IHt9LFxuXHQgIHJlcXVpcmU6IGZ1bmN0aW9uIChwYXRoLCBiYXNlKSB7XG4gICAgICByZXR1cm4gY29tbW9uanNSZXF1aXJlKHBhdGgsIChiYXNlID09PSB1bmRlZmluZWQgfHwgYmFzZSA9PT0gbnVsbCkgPyBtb2R1bGUucGF0aCA6IGJhc2UpO1xuICAgIH1cblx0fSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG5mdW5jdGlvbiBnZXRDanNFeHBvcnRGcm9tTmFtZXNwYWNlIChuKSB7XG5cdHJldHVybiBuICYmIG5bJ2RlZmF1bHQnXSB8fCBuO1xufVxuXG5mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUgKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzJyk7XG59XG5cbnZhciBsb3R0aWU9Y3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlKXt0eXBlb2YgbmF2aWdhdG9yIT09XCJ1bmRlZmluZWRcIiYmZnVuY3Rpb24ocm9vdCxmYWN0b3J5KXtpZih0eXBlb2YgdW5kZWZpbmVkPT09XCJmdW5jdGlvblwiJiZ1bmRlZmluZWQuYW1kKXt1bmRlZmluZWQoZnVuY3Rpb24oKXtyZXR1cm4gZmFjdG9yeShyb290KTt9KTt9ZWxzZSBpZignb2JqZWN0Jz09PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1mYWN0b3J5KHJvb3QpO31lbHNlIHtyb290LmxvdHRpZT1mYWN0b3J5KHJvb3QpO3Jvb3QuYm9keW1vdmluPXJvb3QubG90dGllO319KHdpbmRvd3x8e30sZnVuY3Rpb24od2luZG93KXsvKiBnbG9iYWwgbG9jYXRpb25IcmVmOndyaXRhYmxlLCBhbmltYXRpb25NYW5hZ2VyLCBzdWJmcmFtZUVuYWJsZWQ6d3JpdGFibGUsIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzOndyaXRhYmxlLCByb3VuZFZhbHVlcyxcclxuZXhwcmVzc2lvbnNQbHVnaW46d3JpdGFibGUsIFByb3BlcnR5RmFjdG9yeSwgU2hhcGVQcm9wZXJ0eUZhY3RvcnksIE1hdHJpeCAqLyAvKiBleHBvcnRlZCBsb2NhdGlvbkhyZWYsIHN1YmZyYW1lRW5hYmxlZCwgZXhwcmVzc2lvbnNQbHVnaW4gKi8ndXNlIHN0cmljdCc7LyogZXhwb3J0ZWQgc3ZnTlMsIGxvY2F0aW9uSHJlZiwgaW5pdGlhbERlZmF1bHRGcmFtZSAqL3ZhciBzdmdOUz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO3ZhciBsb2NhdGlvbkhyZWY9Jyc7dmFyIGluaXRpYWxEZWZhdWx0RnJhbWU9LTk5OTk5OTsvKiBnbG9iYWwgY3JlYXRlU2l6ZWRBcnJheSAqLyAvKiBleHBvcnRlZCBzdWJmcmFtZUVuYWJsZWQsIGV4cHJlc3Npb25zUGx1Z2luLCBpc1NhZmFyaSwgY2FjaGVkQ29sb3JzLCBibVBvdywgYm1TcXJ0LCBibUZsb29yLCBibU1heCwgYm1NaW4sIFByb2plY3RJbnRlcmZhY2UsXHJcbmRlZmF1bHRDdXJ2ZVNlZ21lbnRzLCBkZWdUb1JhZHMsIHJvdW5kQ29ybmVyLCBibVJuZCwgc3R5bGVEaXYsIEJNRW50ZXJGcmFtZUV2ZW50LCBCTUNvbXBsZXRlRXZlbnQsIEJNQ29tcGxldGVMb29wRXZlbnQsXHJcbkJNU2VnbWVudFN0YXJ0RXZlbnQsIEJNRGVzdHJveUV2ZW50LCBCTVJlbmRlckZyYW1lRXJyb3JFdmVudCwgQk1Db25maWdFcnJvckV2ZW50LCBCTUFuaW1hdGlvbkNvbmZpZ0Vycm9yRXZlbnQsIGNyZWF0ZUVsZW1lbnRJRCxcclxuYWRkU2F0dXJhdGlvblRvUkdCLCBhZGRCcmlnaHRuZXNzVG9SR0IsIGFkZEh1ZVRvUkdCLCByZ2JUb0hleCAqL3ZhciBzdWJmcmFtZUVuYWJsZWQ9dHJ1ZTt2YXIgZXhwcmVzc2lvbnNQbHVnaW47dmFyIGlzU2FmYXJpPS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7dmFyIGNhY2hlZENvbG9ycz17fTt2YXIgYm1SbmQ7dmFyIGJtUG93PU1hdGgucG93O3ZhciBibVNxcnQ9TWF0aC5zcXJ0O3ZhciBibUZsb29yPU1hdGguZmxvb3I7dmFyIGJtTWF4PU1hdGgubWF4O3ZhciBibU1pbj1NYXRoLm1pbjt2YXIgQk1NYXRoPXt9OyhmdW5jdGlvbigpe3ZhciBwcm9wZXJ0eU5hbWVzPVsnYWJzJywnYWNvcycsJ2Fjb3NoJywnYXNpbicsJ2FzaW5oJywnYXRhbicsJ2F0YW5oJywnYXRhbjInLCdjZWlsJywnY2JydCcsJ2V4cG0xJywnY2x6MzInLCdjb3MnLCdjb3NoJywnZXhwJywnZmxvb3InLCdmcm91bmQnLCdoeXBvdCcsJ2ltdWwnLCdsb2cnLCdsb2cxcCcsJ2xvZzInLCdsb2cxMCcsJ21heCcsJ21pbicsJ3BvdycsJ3JhbmRvbScsJ3JvdW5kJywnc2lnbicsJ3NpbicsJ3NpbmgnLCdzcXJ0JywndGFuJywndGFuaCcsJ3RydW5jJywnRScsJ0xOMTAnLCdMTjInLCdMT0cxMEUnLCdMT0cyRScsJ1BJJywnU1FSVDFfMicsJ1NRUlQyJ107dmFyIGk7dmFyIGxlbj1wcm9wZXJ0eU5hbWVzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe0JNTWF0aFtwcm9wZXJ0eU5hbWVzW2ldXT1NYXRoW3Byb3BlcnR5TmFtZXNbaV1dO319KSgpO2Z1bmN0aW9uIFByb2plY3RJbnRlcmZhY2UoKXtyZXR1cm4ge307fUJNTWF0aC5yYW5kb209TWF0aC5yYW5kb207Qk1NYXRoLmFicz1mdW5jdGlvbih2YWwpe3ZhciB0T2ZWYWw9dHlwZW9mIHZhbDtpZih0T2ZWYWw9PT0nb2JqZWN0JyYmdmFsLmxlbmd0aCl7dmFyIGFic0Fycj1jcmVhdGVTaXplZEFycmF5KHZhbC5sZW5ndGgpO3ZhciBpO3ZhciBsZW49dmFsLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe2Fic0FycltpXT1NYXRoLmFicyh2YWxbaV0pO31yZXR1cm4gYWJzQXJyO31yZXR1cm4gTWF0aC5hYnModmFsKTt9O3ZhciBkZWZhdWx0Q3VydmVTZWdtZW50cz0xNTA7dmFyIGRlZ1RvUmFkcz1NYXRoLlBJLzE4MDt2YXIgcm91bmRDb3JuZXI9MC41NTE5O2Z1bmN0aW9uIHJvdW5kVmFsdWVzKGZsYWcpe2lmKGZsYWcpe2JtUm5kPU1hdGgucm91bmQ7fWVsc2Uge2JtUm5kPWZ1bmN0aW9uIGJtUm5kKHZhbCl7cmV0dXJuIHZhbDt9O319cm91bmRWYWx1ZXMoZmFsc2UpO2Z1bmN0aW9uIHN0eWxlRGl2KGVsZW1lbnQpe2VsZW1lbnQuc3R5bGUucG9zaXRpb249J2Fic29sdXRlJztlbGVtZW50LnN0eWxlLnRvcD0wO2VsZW1lbnQuc3R5bGUubGVmdD0wO2VsZW1lbnQuc3R5bGUuZGlzcGxheT0nYmxvY2snO2VsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luPScwIDAnO2VsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luPScwIDAnO2VsZW1lbnQuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5PSd2aXNpYmxlJztlbGVtZW50LnN0eWxlLndlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eT0ndmlzaWJsZSc7ZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1TdHlsZT0ncHJlc2VydmUtM2QnO2VsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtU3R5bGU9J3ByZXNlcnZlLTNkJztlbGVtZW50LnN0eWxlLm1velRyYW5zZm9ybVN0eWxlPSdwcmVzZXJ2ZS0zZCc7fWZ1bmN0aW9uIEJNRW50ZXJGcmFtZUV2ZW50KHR5cGUsY3VycmVudFRpbWUsdG90YWxUaW1lLGZyYW1lTXVsdGlwbGllcil7dGhpcy50eXBlPXR5cGU7dGhpcy5jdXJyZW50VGltZT1jdXJyZW50VGltZTt0aGlzLnRvdGFsVGltZT10b3RhbFRpbWU7dGhpcy5kaXJlY3Rpb249ZnJhbWVNdWx0aXBsaWVyPDA/LTE6MTt9ZnVuY3Rpb24gQk1Db21wbGV0ZUV2ZW50KHR5cGUsZnJhbWVNdWx0aXBsaWVyKXt0aGlzLnR5cGU9dHlwZTt0aGlzLmRpcmVjdGlvbj1mcmFtZU11bHRpcGxpZXI8MD8tMToxO31mdW5jdGlvbiBCTUNvbXBsZXRlTG9vcEV2ZW50KHR5cGUsdG90YWxMb29wcyxjdXJyZW50TG9vcCxmcmFtZU11bHRpcGxpZXIpe3RoaXMudHlwZT10eXBlO3RoaXMuY3VycmVudExvb3A9Y3VycmVudExvb3A7dGhpcy50b3RhbExvb3BzPXRvdGFsTG9vcHM7dGhpcy5kaXJlY3Rpb249ZnJhbWVNdWx0aXBsaWVyPDA/LTE6MTt9ZnVuY3Rpb24gQk1TZWdtZW50U3RhcnRFdmVudCh0eXBlLGZpcnN0RnJhbWUsdG90YWxGcmFtZXMpe3RoaXMudHlwZT10eXBlO3RoaXMuZmlyc3RGcmFtZT1maXJzdEZyYW1lO3RoaXMudG90YWxGcmFtZXM9dG90YWxGcmFtZXM7fWZ1bmN0aW9uIEJNRGVzdHJveUV2ZW50KHR5cGUsdGFyZ2V0KXt0aGlzLnR5cGU9dHlwZTt0aGlzLnRhcmdldD10YXJnZXQ7fWZ1bmN0aW9uIEJNUmVuZGVyRnJhbWVFcnJvckV2ZW50KG5hdGl2ZUVycm9yLGN1cnJlbnRUaW1lKXt0aGlzLnR5cGU9J3JlbmRlckZyYW1lRXJyb3InO3RoaXMubmF0aXZlRXJyb3I9bmF0aXZlRXJyb3I7dGhpcy5jdXJyZW50VGltZT1jdXJyZW50VGltZTt9ZnVuY3Rpb24gQk1Db25maWdFcnJvckV2ZW50KG5hdGl2ZUVycm9yKXt0aGlzLnR5cGU9J2NvbmZpZ0Vycm9yJzt0aGlzLm5hdGl2ZUVycm9yPW5hdGl2ZUVycm9yO31mdW5jdGlvbiBCTUFuaW1hdGlvbkNvbmZpZ0Vycm9yRXZlbnQodHlwZSxuYXRpdmVFcnJvcil7dGhpcy50eXBlPXR5cGU7dGhpcy5uYXRpdmVFcnJvcj1uYXRpdmVFcnJvcjt9dmFyIGNyZWF0ZUVsZW1lbnRJRD1mdW5jdGlvbigpe3ZhciBfY291bnQ9MDtyZXR1cm4gZnVuY3Rpb24gY3JlYXRlSUQoKXtfY291bnQrPTE7cmV0dXJuICdfX2xvdHRpZV9lbGVtZW50XycrX2NvdW50O307fSgpO2Z1bmN0aW9uIEhTVnRvUkdCKGgscyx2KXt2YXIgcjt2YXIgZzt2YXIgYjt2YXIgaTt2YXIgZjt2YXIgcDt2YXIgcTt2YXIgdDtpPU1hdGguZmxvb3IoaCo2KTtmPWgqNi1pO3A9diooMS1zKTtxPXYqKDEtZipzKTt0PXYqKDEtKDEtZikqcyk7c3dpdGNoKGklNil7Y2FzZSAwOnI9djtnPXQ7Yj1wO2JyZWFrO2Nhc2UgMTpyPXE7Zz12O2I9cDticmVhaztjYXNlIDI6cj1wO2c9djtiPXQ7YnJlYWs7Y2FzZSAzOnI9cDtnPXE7Yj12O2JyZWFrO2Nhc2UgNDpyPXQ7Zz1wO2I9djticmVhaztjYXNlIDU6cj12O2c9cDtiPXE7YnJlYWs7ZGVmYXVsdDpicmVhazt9cmV0dXJuIFtyLGcsYl07fWZ1bmN0aW9uIFJHQnRvSFNWKHIsZyxiKXt2YXIgbWF4PU1hdGgubWF4KHIsZyxiKTt2YXIgbWluPU1hdGgubWluKHIsZyxiKTt2YXIgZD1tYXgtbWluO3ZhciBoO3ZhciBzPW1heD09PTA/MDpkL21heDt2YXIgdj1tYXgvMjU1O3N3aXRjaChtYXgpe2Nhc2UgbWluOmg9MDticmVhaztjYXNlIHI6aD1nLWIrZCooZzxiPzY6MCk7aC89NipkO2JyZWFrO2Nhc2UgZzpoPWItcitkKjI7aC89NipkO2JyZWFrO2Nhc2UgYjpoPXItZytkKjQ7aC89NipkO2JyZWFrO2RlZmF1bHQ6YnJlYWs7fXJldHVybiBbaCxzLHZdO31mdW5jdGlvbiBhZGRTYXR1cmF0aW9uVG9SR0IoY29sb3Isb2Zmc2V0KXt2YXIgaHN2PVJHQnRvSFNWKGNvbG9yWzBdKjI1NSxjb2xvclsxXSoyNTUsY29sb3JbMl0qMjU1KTtoc3ZbMV0rPW9mZnNldDtpZihoc3ZbMV0+MSl7aHN2WzFdPTE7fWVsc2UgaWYoaHN2WzFdPD0wKXtoc3ZbMV09MDt9cmV0dXJuIEhTVnRvUkdCKGhzdlswXSxoc3ZbMV0saHN2WzJdKTt9ZnVuY3Rpb24gYWRkQnJpZ2h0bmVzc1RvUkdCKGNvbG9yLG9mZnNldCl7dmFyIGhzdj1SR0J0b0hTVihjb2xvclswXSoyNTUsY29sb3JbMV0qMjU1LGNvbG9yWzJdKjI1NSk7aHN2WzJdKz1vZmZzZXQ7aWYoaHN2WzJdPjEpe2hzdlsyXT0xO31lbHNlIGlmKGhzdlsyXTwwKXtoc3ZbMl09MDt9cmV0dXJuIEhTVnRvUkdCKGhzdlswXSxoc3ZbMV0saHN2WzJdKTt9ZnVuY3Rpb24gYWRkSHVlVG9SR0IoY29sb3Isb2Zmc2V0KXt2YXIgaHN2PVJHQnRvSFNWKGNvbG9yWzBdKjI1NSxjb2xvclsxXSoyNTUsY29sb3JbMl0qMjU1KTtoc3ZbMF0rPW9mZnNldC8zNjA7aWYoaHN2WzBdPjEpe2hzdlswXS09MTt9ZWxzZSBpZihoc3ZbMF08MCl7aHN2WzBdKz0xO31yZXR1cm4gSFNWdG9SR0IoaHN2WzBdLGhzdlsxXSxoc3ZbMl0pO312YXIgcmdiVG9IZXg9ZnVuY3Rpb24oKXt2YXIgY29sb3JNYXA9W107dmFyIGk7dmFyIGhleDtmb3IoaT0wO2k8MjU2O2krPTEpe2hleD1pLnRvU3RyaW5nKDE2KTtjb2xvck1hcFtpXT1oZXgubGVuZ3RoPT09MT8nMCcraGV4OmhleDt9cmV0dXJuIGZ1bmN0aW9uKHIsZyxiKXtpZihyPDApe3I9MDt9aWYoZzwwKXtnPTA7fWlmKGI8MCl7Yj0wO31yZXR1cm4gJyMnK2NvbG9yTWFwW3JdK2NvbG9yTWFwW2ddK2NvbG9yTWFwW2JdO307fSgpO2Z1bmN0aW9uIEJhc2VFdmVudCgpe31CYXNlRXZlbnQucHJvdG90eXBlPXt0cmlnZ2VyRXZlbnQ6ZnVuY3Rpb24gdHJpZ2dlckV2ZW50KGV2ZW50TmFtZSxhcmdzKXtpZih0aGlzLl9jYnNbZXZlbnROYW1lXSl7dmFyIGxlbj10aGlzLl9jYnNbZXZlbnROYW1lXS5sZW5ndGg7Zm9yKHZhciBpPTA7aTxsZW47aSs9MSl7dGhpcy5fY2JzW2V2ZW50TmFtZV1baV0oYXJncyk7fX19LGFkZEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsY2FsbGJhY2spe2lmKCF0aGlzLl9jYnNbZXZlbnROYW1lXSl7dGhpcy5fY2JzW2V2ZW50TmFtZV09W107fXRoaXMuX2Nic1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spO3JldHVybiBmdW5jdGlvbigpe3RoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsY2FsbGJhY2spO30uYmluZCh0aGlzKTt9LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsY2FsbGJhY2spe2lmKCFjYWxsYmFjayl7dGhpcy5fY2JzW2V2ZW50TmFtZV09bnVsbDt9ZWxzZSBpZih0aGlzLl9jYnNbZXZlbnROYW1lXSl7dmFyIGk9MDt2YXIgbGVuPXRoaXMuX2Nic1tldmVudE5hbWVdLmxlbmd0aDt3aGlsZShpPGxlbil7aWYodGhpcy5fY2JzW2V2ZW50TmFtZV1baV09PT1jYWxsYmFjayl7dGhpcy5fY2JzW2V2ZW50TmFtZV0uc3BsaWNlKGksMSk7aS09MTtsZW4tPTE7fWkrPTE7fWlmKCF0aGlzLl9jYnNbZXZlbnROYW1lXS5sZW5ndGgpe3RoaXMuX2Nic1tldmVudE5hbWVdPW51bGw7fX19fTsvKiBleHBvcnRlZCBjcmVhdGVUeXBlZEFycmF5LCBjcmVhdGVTaXplZEFycmF5ICovdmFyIGNyZWF0ZVR5cGVkQXJyYXk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBjcmVhdGVSZWd1bGFyQXJyYXkodHlwZSxsZW4pe3ZhciBpPTA7dmFyIGFycj1bXTt2YXIgdmFsdWU7c3dpdGNoKHR5cGUpe2Nhc2UnaW50MTYnOmNhc2UndWludDhjJzp2YWx1ZT0xO2JyZWFrO2RlZmF1bHQ6dmFsdWU9MS4xO2JyZWFrO31mb3IoaT0wO2k8bGVuO2krPTEpe2Fyci5wdXNoKHZhbHVlKTt9cmV0dXJuIGFycjt9ZnVuY3Rpb24gY3JlYXRlVHlwZWRBcnJheUZhY3RvcnkodHlwZSxsZW4pe2lmKHR5cGU9PT0nZmxvYXQzMicpe3JldHVybiBuZXcgRmxvYXQzMkFycmF5KGxlbik7fWlmKHR5cGU9PT0naW50MTYnKXtyZXR1cm4gbmV3IEludDE2QXJyYXkobGVuKTt9aWYodHlwZT09PSd1aW50OGMnKXtyZXR1cm4gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGxlbik7fXJldHVybiBjcmVhdGVSZWd1bGFyQXJyYXkodHlwZSxsZW4pO31pZih0eXBlb2YgVWludDhDbGFtcGVkQXJyYXk9PT0nZnVuY3Rpb24nJiZ0eXBlb2YgRmxvYXQzMkFycmF5PT09J2Z1bmN0aW9uJyl7cmV0dXJuIGNyZWF0ZVR5cGVkQXJyYXlGYWN0b3J5O31yZXR1cm4gY3JlYXRlUmVndWxhckFycmF5O30oKTtmdW5jdGlvbiBjcmVhdGVTaXplZEFycmF5KGxlbil7cmV0dXJuIEFycmF5LmFwcGx5KG51bGwse2xlbmd0aDpsZW59KTt9LyogZ2xvYmFsIHN2Z05TICovIC8qIGV4cG9ydGVkIGNyZWF0ZU5TICovZnVuY3Rpb24gY3JlYXRlTlModHlwZSl7Ly8gcmV0dXJuIHthcHBlbmRDaGlsZDpmdW5jdGlvbigpe30sc2V0QXR0cmlidXRlOmZ1bmN0aW9uKCl7fSxzdHlsZTp7fX1cbnJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsdHlwZSk7fS8qIGV4cG9ydGVkIGNyZWF0ZVRhZyAqL2Z1bmN0aW9uIGNyZWF0ZVRhZyh0eXBlKXsvLyByZXR1cm4ge2FwcGVuZENoaWxkOmZ1bmN0aW9uKCl7fSxzZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oKXt9LHN0eWxlOnt9fVxucmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7fWZ1bmN0aW9uIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcigpe31EeW5hbWljUHJvcGVydHlDb250YWluZXIucHJvdG90eXBlPXthZGREeW5hbWljUHJvcGVydHk6ZnVuY3Rpb24gYWRkRHluYW1pY1Byb3BlcnR5KHByb3Ape2lmKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMuaW5kZXhPZihwcm9wKT09PS0xKXt0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLnB1c2gocHJvcCk7dGhpcy5jb250YWluZXIuYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO3RoaXMuX2lzQW5pbWF0ZWQ9dHJ1ZTt9fSxpdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM6ZnVuY3Rpb24gaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCl7dGhpcy5fbWRmPWZhbHNlO3ZhciBpO3ZhciBsZW49dGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLmdldFZhbHVlKCk7aWYodGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5fbWRmKXt0aGlzLl9tZGY9dHJ1ZTt9fX0saW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcjpmdW5jdGlvbiBpbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGNvbnRhaW5lcil7dGhpcy5jb250YWluZXI9Y29udGFpbmVyO3RoaXMuZHluYW1pY1Byb3BlcnRpZXM9W107dGhpcy5fbWRmPWZhbHNlO3RoaXMuX2lzQW5pbWF0ZWQ9ZmFsc2U7fX07LyogZXhwb3J0ZWQgZ2V0QmxlbmRNb2RlICovdmFyIGdldEJsZW5kTW9kZT1mdW5jdGlvbigpe3ZhciBibGVuZE1vZGVFbnVtcz17MDonc291cmNlLW92ZXInLDE6J211bHRpcGx5JywyOidzY3JlZW4nLDM6J292ZXJsYXknLDQ6J2RhcmtlbicsNTonbGlnaHRlbicsNjonY29sb3ItZG9kZ2UnLDc6J2NvbG9yLWJ1cm4nLDg6J2hhcmQtbGlnaHQnLDk6J3NvZnQtbGlnaHQnLDEwOidkaWZmZXJlbmNlJywxMTonZXhjbHVzaW9uJywxMjonaHVlJywxMzonc2F0dXJhdGlvbicsMTQ6J2NvbG9yJywxNTonbHVtaW5vc2l0eSd9O3JldHVybiBmdW5jdGlvbihtb2RlKXtyZXR1cm4gYmxlbmRNb2RlRW51bXNbbW9kZV18fCcnO307fSgpOy8qIGdsb2JhbCBjcmVhdGVUeXBlZEFycmF5ICovIC8qIVxyXG4gVHJhbnNmb3JtYXRpb24gTWF0cml4IHYyLjBcclxuIChjKSBFcGlzdGVtZXggMjAxNC0yMDE1XHJcbiB3d3cuZXBpc3RlbWV4LmNvbVxyXG4gQnkgS2VuIEZ5cnN0ZW5iZXJnXHJcbiBDb250cmlidXRpb25zIGJ5IGxlZW9uaXlhLlxyXG4gTGljZW5zZTogTUlULCBoZWFkZXIgcmVxdWlyZWQuXHJcbiAqLyAvKipcclxuICogMkQgdHJhbnNmb3JtYXRpb24gbWF0cml4IG9iamVjdCBpbml0aWFsaXplZCB3aXRoIGlkZW50aXR5IG1hdHJpeC5cclxuICpcclxuICogVGhlIG1hdHJpeCBjYW4gc3luY2hyb25pemUgYSBjYW52YXMgY29udGV4dCBieSBzdXBwbHlpbmcgdGhlIGNvbnRleHRcclxuICogYXMgYW4gYXJndW1lbnQsIG9yIGxhdGVyIGFwcGx5IGN1cnJlbnQgYWJzb2x1dGUgdHJhbnNmb3JtIHRvIGFuXHJcbiAqIGV4aXN0aW5nIGNvbnRleHQuXHJcbiAqXHJcbiAqIEFsbCB2YWx1ZXMgYXJlIGhhbmRsZWQgYXMgZmxvYXRpbmcgcG9pbnQgdmFsdWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gW2NvbnRleHRdIC0gT3B0aW9uYWwgY29udGV4dCB0byBzeW5jIHdpdGggTWF0cml4XHJcbiAqIEBwcm9wIHtudW1iZXJ9IGEgLSBzY2FsZSB4XHJcbiAqIEBwcm9wIHtudW1iZXJ9IGIgLSBzaGVhciB5XHJcbiAqIEBwcm9wIHtudW1iZXJ9IGMgLSBzaGVhciB4XHJcbiAqIEBwcm9wIHtudW1iZXJ9IGQgLSBzY2FsZSB5XHJcbiAqIEBwcm9wIHtudW1iZXJ9IGUgLSB0cmFuc2xhdGUgeFxyXG4gKiBAcHJvcCB7bnVtYmVyfSBmIC0gdHJhbnNsYXRlIHlcclxuICogQHByb3Age0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRHxudWxsfSBbY29udGV4dD1udWxsXSAtIHNldCBvciBnZXQgY3VycmVudCBjYW52YXMgY29udGV4dFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovdmFyIE1hdHJpeD1mdW5jdGlvbigpe3ZhciBfY29zPU1hdGguY29zO3ZhciBfc2luPU1hdGguc2luO3ZhciBfdGFuPU1hdGgudGFuO3ZhciBfcm5kPU1hdGgucm91bmQ7ZnVuY3Rpb24gcmVzZXQoKXt0aGlzLnByb3BzWzBdPTE7dGhpcy5wcm9wc1sxXT0wO3RoaXMucHJvcHNbMl09MDt0aGlzLnByb3BzWzNdPTA7dGhpcy5wcm9wc1s0XT0wO3RoaXMucHJvcHNbNV09MTt0aGlzLnByb3BzWzZdPTA7dGhpcy5wcm9wc1s3XT0wO3RoaXMucHJvcHNbOF09MDt0aGlzLnByb3BzWzldPTA7dGhpcy5wcm9wc1sxMF09MTt0aGlzLnByb3BzWzExXT0wO3RoaXMucHJvcHNbMTJdPTA7dGhpcy5wcm9wc1sxM109MDt0aGlzLnByb3BzWzE0XT0wO3RoaXMucHJvcHNbMTVdPTE7cmV0dXJuIHRoaXM7fWZ1bmN0aW9uIHJvdGF0ZShhbmdsZSl7aWYoYW5nbGU9PT0wKXtyZXR1cm4gdGhpczt9dmFyIG1Db3M9X2NvcyhhbmdsZSk7dmFyIG1TaW49X3NpbihhbmdsZSk7cmV0dXJuIHRoaXMuX3QobUNvcywtbVNpbiwwLDAsbVNpbixtQ29zLDAsMCwwLDAsMSwwLDAsMCwwLDEpO31mdW5jdGlvbiByb3RhdGVYKGFuZ2xlKXtpZihhbmdsZT09PTApe3JldHVybiB0aGlzO312YXIgbUNvcz1fY29zKGFuZ2xlKTt2YXIgbVNpbj1fc2luKGFuZ2xlKTtyZXR1cm4gdGhpcy5fdCgxLDAsMCwwLDAsbUNvcywtbVNpbiwwLDAsbVNpbixtQ29zLDAsMCwwLDAsMSk7fWZ1bmN0aW9uIHJvdGF0ZVkoYW5nbGUpe2lmKGFuZ2xlPT09MCl7cmV0dXJuIHRoaXM7fXZhciBtQ29zPV9jb3MoYW5nbGUpO3ZhciBtU2luPV9zaW4oYW5nbGUpO3JldHVybiB0aGlzLl90KG1Db3MsMCxtU2luLDAsMCwxLDAsMCwtbVNpbiwwLG1Db3MsMCwwLDAsMCwxKTt9ZnVuY3Rpb24gcm90YXRlWihhbmdsZSl7aWYoYW5nbGU9PT0wKXtyZXR1cm4gdGhpczt9dmFyIG1Db3M9X2NvcyhhbmdsZSk7dmFyIG1TaW49X3NpbihhbmdsZSk7cmV0dXJuIHRoaXMuX3QobUNvcywtbVNpbiwwLDAsbVNpbixtQ29zLDAsMCwwLDAsMSwwLDAsMCwwLDEpO31mdW5jdGlvbiBzaGVhcihzeCxzeSl7cmV0dXJuIHRoaXMuX3QoMSxzeSxzeCwxLDAsMCk7fWZ1bmN0aW9uIHNrZXcoYXgsYXkpe3JldHVybiB0aGlzLnNoZWFyKF90YW4oYXgpLF90YW4oYXkpKTt9ZnVuY3Rpb24gc2tld0Zyb21BeGlzKGF4LGFuZ2xlKXt2YXIgbUNvcz1fY29zKGFuZ2xlKTt2YXIgbVNpbj1fc2luKGFuZ2xlKTtyZXR1cm4gdGhpcy5fdChtQ29zLG1TaW4sMCwwLC1tU2luLG1Db3MsMCwwLDAsMCwxLDAsMCwwLDAsMSkuX3QoMSwwLDAsMCxfdGFuKGF4KSwxLDAsMCwwLDAsMSwwLDAsMCwwLDEpLl90KG1Db3MsLW1TaW4sMCwwLG1TaW4sbUNvcywwLDAsMCwwLDEsMCwwLDAsMCwxKTsvLyByZXR1cm4gdGhpcy5fdChtQ29zLCBtU2luLCAtbVNpbiwgbUNvcywgMCwgMCkuX3QoMSwgMCwgX3RhbihheCksIDEsIDAsIDApLl90KG1Db3MsIC1tU2luLCBtU2luLCBtQ29zLCAwLCAwKTtcbn1mdW5jdGlvbiBzY2FsZShzeCxzeSxzeil7aWYoIXN6JiZzeiE9PTApe3N6PTE7fWlmKHN4PT09MSYmc3k9PT0xJiZzej09PTEpe3JldHVybiB0aGlzO31yZXR1cm4gdGhpcy5fdChzeCwwLDAsMCwwLHN5LDAsMCwwLDAsc3osMCwwLDAsMCwxKTt9ZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGEsYixjLGQsZSxmLGcsaCxpLGosayxsLG0sbixvLHApe3RoaXMucHJvcHNbMF09YTt0aGlzLnByb3BzWzFdPWI7dGhpcy5wcm9wc1syXT1jO3RoaXMucHJvcHNbM109ZDt0aGlzLnByb3BzWzRdPWU7dGhpcy5wcm9wc1s1XT1mO3RoaXMucHJvcHNbNl09Zzt0aGlzLnByb3BzWzddPWg7dGhpcy5wcm9wc1s4XT1pO3RoaXMucHJvcHNbOV09ajt0aGlzLnByb3BzWzEwXT1rO3RoaXMucHJvcHNbMTFdPWw7dGhpcy5wcm9wc1sxMl09bTt0aGlzLnByb3BzWzEzXT1uO3RoaXMucHJvcHNbMTRdPW87dGhpcy5wcm9wc1sxNV09cDtyZXR1cm4gdGhpczt9ZnVuY3Rpb24gdHJhbnNsYXRlKHR4LHR5LHR6KXt0ej10enx8MDtpZih0eCE9PTB8fHR5IT09MHx8dHohPT0wKXtyZXR1cm4gdGhpcy5fdCgxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCx0eCx0eSx0eiwxKTt9cmV0dXJuIHRoaXM7fWZ1bmN0aW9uIHRyYW5zZm9ybShhMixiMixjMixkMixlMixmMixnMixoMixpMixqMixrMixsMixtMixuMixvMixwMil7dmFyIF9wPXRoaXMucHJvcHM7aWYoYTI9PT0xJiZiMj09PTAmJmMyPT09MCYmZDI9PT0wJiZlMj09PTAmJmYyPT09MSYmZzI9PT0wJiZoMj09PTAmJmkyPT09MCYmajI9PT0wJiZrMj09PTEmJmwyPT09MCl7Ly8gTk9URTogY29tbWVudGluZyB0aGlzIGNvbmRpdGlvbiBiZWNhdXNlIFR1cmJvRmFuIGRlb3B0aW1pemVzIGNvZGUgd2hlbiBwcmVzZW50XG4vLyBpZihtMiAhPT0gMCB8fCBuMiAhPT0gMCB8fCBvMiAhPT0gMCl7XG5fcFsxMl09X3BbMTJdKmEyK19wWzE1XSptMjtfcFsxM109X3BbMTNdKmYyK19wWzE1XSpuMjtfcFsxNF09X3BbMTRdKmsyK19wWzE1XSpvMjtfcFsxNV0qPXAyOy8vIH1cbnRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZD1mYWxzZTtyZXR1cm4gdGhpczt9dmFyIGExPV9wWzBdO3ZhciBiMT1fcFsxXTt2YXIgYzE9X3BbMl07dmFyIGQxPV9wWzNdO3ZhciBlMT1fcFs0XTt2YXIgZjE9X3BbNV07dmFyIGcxPV9wWzZdO3ZhciBoMT1fcFs3XTt2YXIgaTE9X3BbOF07dmFyIGoxPV9wWzldO3ZhciBrMT1fcFsxMF07dmFyIGwxPV9wWzExXTt2YXIgbTE9X3BbMTJdO3ZhciBuMT1fcFsxM107dmFyIG8xPV9wWzE0XTt2YXIgcDE9X3BbMTVdOy8qIG1hdHJpeCBvcmRlciAoY2FudmFzIGNvbXBhdGlibGUpOlxyXG4gICAgICAgICAqIGFjZVxyXG4gICAgICAgICAqIGJkZlxyXG4gICAgICAgICAqIDAwMVxyXG4gICAgICAgICAqL19wWzBdPWExKmEyK2IxKmUyK2MxKmkyK2QxKm0yO19wWzFdPWExKmIyK2IxKmYyK2MxKmoyK2QxKm4yO19wWzJdPWExKmMyK2IxKmcyK2MxKmsyK2QxKm8yO19wWzNdPWExKmQyK2IxKmgyK2MxKmwyK2QxKnAyO19wWzRdPWUxKmEyK2YxKmUyK2cxKmkyK2gxKm0yO19wWzVdPWUxKmIyK2YxKmYyK2cxKmoyK2gxKm4yO19wWzZdPWUxKmMyK2YxKmcyK2cxKmsyK2gxKm8yO19wWzddPWUxKmQyK2YxKmgyK2cxKmwyK2gxKnAyO19wWzhdPWkxKmEyK2oxKmUyK2sxKmkyK2wxKm0yO19wWzldPWkxKmIyK2oxKmYyK2sxKmoyK2wxKm4yO19wWzEwXT1pMSpjMitqMSpnMitrMSprMitsMSpvMjtfcFsxMV09aTEqZDIrajEqaDIrazEqbDIrbDEqcDI7X3BbMTJdPW0xKmEyK24xKmUyK28xKmkyK3AxKm0yO19wWzEzXT1tMSpiMituMSpmMitvMSpqMitwMSpuMjtfcFsxNF09bTEqYzIrbjEqZzIrbzEqazIrcDEqbzI7X3BbMTVdPW0xKmQyK24xKmgyK28xKmwyK3AxKnAyO3RoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZD1mYWxzZTtyZXR1cm4gdGhpczt9ZnVuY3Rpb24gaXNJZGVudGl0eSgpe2lmKCF0aGlzLl9pZGVudGl0eUNhbGN1bGF0ZWQpe3RoaXMuX2lkZW50aXR5PSEodGhpcy5wcm9wc1swXSE9PTF8fHRoaXMucHJvcHNbMV0hPT0wfHx0aGlzLnByb3BzWzJdIT09MHx8dGhpcy5wcm9wc1szXSE9PTB8fHRoaXMucHJvcHNbNF0hPT0wfHx0aGlzLnByb3BzWzVdIT09MXx8dGhpcy5wcm9wc1s2XSE9PTB8fHRoaXMucHJvcHNbN10hPT0wfHx0aGlzLnByb3BzWzhdIT09MHx8dGhpcy5wcm9wc1s5XSE9PTB8fHRoaXMucHJvcHNbMTBdIT09MXx8dGhpcy5wcm9wc1sxMV0hPT0wfHx0aGlzLnByb3BzWzEyXSE9PTB8fHRoaXMucHJvcHNbMTNdIT09MHx8dGhpcy5wcm9wc1sxNF0hPT0wfHx0aGlzLnByb3BzWzE1XSE9PTEpO3RoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZD10cnVlO31yZXR1cm4gdGhpcy5faWRlbnRpdHk7fWZ1bmN0aW9uIGVxdWFscyhtYXRyKXt2YXIgaT0wO3doaWxlKGk8MTYpe2lmKG1hdHIucHJvcHNbaV0hPT10aGlzLnByb3BzW2ldKXtyZXR1cm4gZmFsc2U7fWkrPTE7fXJldHVybiB0cnVlO31mdW5jdGlvbiBjbG9uZShtYXRyKXt2YXIgaTtmb3IoaT0wO2k8MTY7aSs9MSl7bWF0ci5wcm9wc1tpXT10aGlzLnByb3BzW2ldO31yZXR1cm4gbWF0cjt9ZnVuY3Rpb24gY2xvbmVGcm9tUHJvcHMocHJvcHMpe3ZhciBpO2ZvcihpPTA7aTwxNjtpKz0xKXt0aGlzLnByb3BzW2ldPXByb3BzW2ldO319ZnVuY3Rpb24gYXBwbHlUb1BvaW50KHgseSx6KXtyZXR1cm4ge3g6eCp0aGlzLnByb3BzWzBdK3kqdGhpcy5wcm9wc1s0XSt6KnRoaXMucHJvcHNbOF0rdGhpcy5wcm9wc1sxMl0seTp4KnRoaXMucHJvcHNbMV0reSp0aGlzLnByb3BzWzVdK3oqdGhpcy5wcm9wc1s5XSt0aGlzLnByb3BzWzEzXSx6OngqdGhpcy5wcm9wc1syXSt5KnRoaXMucHJvcHNbNl0reip0aGlzLnByb3BzWzEwXSt0aGlzLnByb3BzWzE0XX07LyogcmV0dXJuIHtcclxuICAgICAgICAgeDogeCAqIG1lLmEgKyB5ICogbWUuYyArIG1lLmUsXHJcbiAgICAgICAgIHk6IHggKiBtZS5iICsgeSAqIG1lLmQgKyBtZS5mXHJcbiAgICAgICAgIH07ICovfWZ1bmN0aW9uIGFwcGx5VG9YKHgseSx6KXtyZXR1cm4geCp0aGlzLnByb3BzWzBdK3kqdGhpcy5wcm9wc1s0XSt6KnRoaXMucHJvcHNbOF0rdGhpcy5wcm9wc1sxMl07fWZ1bmN0aW9uIGFwcGx5VG9ZKHgseSx6KXtyZXR1cm4geCp0aGlzLnByb3BzWzFdK3kqdGhpcy5wcm9wc1s1XSt6KnRoaXMucHJvcHNbOV0rdGhpcy5wcm9wc1sxM107fWZ1bmN0aW9uIGFwcGx5VG9aKHgseSx6KXtyZXR1cm4geCp0aGlzLnByb3BzWzJdK3kqdGhpcy5wcm9wc1s2XSt6KnRoaXMucHJvcHNbMTBdK3RoaXMucHJvcHNbMTRdO31mdW5jdGlvbiBnZXRJbnZlcnNlTWF0cml4KCl7dmFyIGRldGVybWluYW50PXRoaXMucHJvcHNbMF0qdGhpcy5wcm9wc1s1XS10aGlzLnByb3BzWzFdKnRoaXMucHJvcHNbNF07dmFyIGE9dGhpcy5wcm9wc1s1XS9kZXRlcm1pbmFudDt2YXIgYj0tdGhpcy5wcm9wc1sxXS9kZXRlcm1pbmFudDt2YXIgYz0tdGhpcy5wcm9wc1s0XS9kZXRlcm1pbmFudDt2YXIgZD10aGlzLnByb3BzWzBdL2RldGVybWluYW50O3ZhciBlPSh0aGlzLnByb3BzWzRdKnRoaXMucHJvcHNbMTNdLXRoaXMucHJvcHNbNV0qdGhpcy5wcm9wc1sxMl0pL2RldGVybWluYW50O3ZhciBmPS0odGhpcy5wcm9wc1swXSp0aGlzLnByb3BzWzEzXS10aGlzLnByb3BzWzFdKnRoaXMucHJvcHNbMTJdKS9kZXRlcm1pbmFudDt2YXIgaW52ZXJzZU1hdHJpeD1uZXcgTWF0cml4KCk7aW52ZXJzZU1hdHJpeC5wcm9wc1swXT1hO2ludmVyc2VNYXRyaXgucHJvcHNbMV09YjtpbnZlcnNlTWF0cml4LnByb3BzWzRdPWM7aW52ZXJzZU1hdHJpeC5wcm9wc1s1XT1kO2ludmVyc2VNYXRyaXgucHJvcHNbMTJdPWU7aW52ZXJzZU1hdHJpeC5wcm9wc1sxM109ZjtyZXR1cm4gaW52ZXJzZU1hdHJpeDt9ZnVuY3Rpb24gaW52ZXJzZVBvaW50KHB0KXt2YXIgaW52ZXJzZU1hdHJpeD10aGlzLmdldEludmVyc2VNYXRyaXgoKTtyZXR1cm4gaW52ZXJzZU1hdHJpeC5hcHBseVRvUG9pbnRBcnJheShwdFswXSxwdFsxXSxwdFsyXXx8MCk7fWZ1bmN0aW9uIGludmVyc2VQb2ludHMocHRzKXt2YXIgaTt2YXIgbGVuPXB0cy5sZW5ndGg7dmFyIHJldFB0cz1bXTtmb3IoaT0wO2k8bGVuO2krPTEpe3JldFB0c1tpXT1pbnZlcnNlUG9pbnQocHRzW2ldKTt9cmV0dXJuIHJldFB0czt9ZnVuY3Rpb24gYXBwbHlUb1RyaXBsZVBvaW50cyhwdDEscHQyLHB0Myl7dmFyIGFycj1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyw2KTtpZih0aGlzLmlzSWRlbnRpdHkoKSl7YXJyWzBdPXB0MVswXTthcnJbMV09cHQxWzFdO2FyclsyXT1wdDJbMF07YXJyWzNdPXB0MlsxXTthcnJbNF09cHQzWzBdO2Fycls1XT1wdDNbMV07fWVsc2Uge3ZhciBwMD10aGlzLnByb3BzWzBdO3ZhciBwMT10aGlzLnByb3BzWzFdO3ZhciBwND10aGlzLnByb3BzWzRdO3ZhciBwNT10aGlzLnByb3BzWzVdO3ZhciBwMTI9dGhpcy5wcm9wc1sxMl07dmFyIHAxMz10aGlzLnByb3BzWzEzXTthcnJbMF09cHQxWzBdKnAwK3B0MVsxXSpwNCtwMTI7YXJyWzFdPXB0MVswXSpwMStwdDFbMV0qcDUrcDEzO2FyclsyXT1wdDJbMF0qcDArcHQyWzFdKnA0K3AxMjthcnJbM109cHQyWzBdKnAxK3B0MlsxXSpwNStwMTM7YXJyWzRdPXB0M1swXSpwMCtwdDNbMV0qcDQrcDEyO2Fycls1XT1wdDNbMF0qcDErcHQzWzFdKnA1K3AxMzt9cmV0dXJuIGFycjt9ZnVuY3Rpb24gYXBwbHlUb1BvaW50QXJyYXkoeCx5LHope3ZhciBhcnI7aWYodGhpcy5pc0lkZW50aXR5KCkpe2Fycj1beCx5LHpdO31lbHNlIHthcnI9W3gqdGhpcy5wcm9wc1swXSt5KnRoaXMucHJvcHNbNF0reip0aGlzLnByb3BzWzhdK3RoaXMucHJvcHNbMTJdLHgqdGhpcy5wcm9wc1sxXSt5KnRoaXMucHJvcHNbNV0reip0aGlzLnByb3BzWzldK3RoaXMucHJvcHNbMTNdLHgqdGhpcy5wcm9wc1syXSt5KnRoaXMucHJvcHNbNl0reip0aGlzLnByb3BzWzEwXSt0aGlzLnByb3BzWzE0XV07fXJldHVybiBhcnI7fWZ1bmN0aW9uIGFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKHgseSl7aWYodGhpcy5pc0lkZW50aXR5KCkpe3JldHVybiB4KycsJyt5O312YXIgX3A9dGhpcy5wcm9wcztyZXR1cm4gTWF0aC5yb3VuZCgoeCpfcFswXSt5Kl9wWzRdK19wWzEyXSkqMTAwKS8xMDArJywnK01hdGgucm91bmQoKHgqX3BbMV0reSpfcFs1XStfcFsxM10pKjEwMCkvMTAwO31mdW5jdGlvbiB0b0NTUygpey8vIERvZXNuJ3QgbWFrZSBtdWNoIHNlbnNlIHRvIGFkZCB0aGlzIG9wdGltaXphdGlvbi4gSWYgaXQgaXMgYW4gaWRlbnRpdHkgbWF0cml4LCBpdCdzIHZlcnkgbGlrZWx5IHRoaXMgd2lsbCBnZXQgY2FsbGVkIG9ubHkgb25jZSBzaW5jZSBpdCB3b24ndCBiZSBrZXlmcmFtZWQuXG4vKiBpZih0aGlzLmlzSWRlbnRpdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfSAqL3ZhciBpPTA7dmFyIHByb3BzPXRoaXMucHJvcHM7dmFyIGNzc1ZhbHVlPSdtYXRyaXgzZCgnO3ZhciB2PTEwMDAwO3doaWxlKGk8MTYpe2Nzc1ZhbHVlKz1fcm5kKHByb3BzW2ldKnYpL3Y7Y3NzVmFsdWUrPWk9PT0xNT8nKSc6JywnO2krPTE7fXJldHVybiBjc3NWYWx1ZTt9ZnVuY3Rpb24gcm91bmRNYXRyaXhQcm9wZXJ0eSh2YWwpe3ZhciB2PTEwMDAwO2lmKHZhbDwwLjAwMDAwMSYmdmFsPjB8fHZhbD4tMC4wMDAwMDEmJnZhbDwwKXtyZXR1cm4gX3JuZCh2YWwqdikvdjt9cmV0dXJuIHZhbDt9ZnVuY3Rpb24gdG8yZENTUygpey8vIERvZXNuJ3QgbWFrZSBtdWNoIHNlbnNlIHRvIGFkZCB0aGlzIG9wdGltaXphdGlvbi4gSWYgaXQgaXMgYW4gaWRlbnRpdHkgbWF0cml4LCBpdCdzIHZlcnkgbGlrZWx5IHRoaXMgd2lsbCBnZXQgY2FsbGVkIG9ubHkgb25jZSBzaW5jZSBpdCB3b24ndCBiZSBrZXlmcmFtZWQuXG4vKiBpZih0aGlzLmlzSWRlbnRpdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfSAqL3ZhciBwcm9wcz10aGlzLnByb3BzO3ZhciBfYT1yb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzBdKTt2YXIgX2I9cm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1sxXSk7dmFyIF9jPXJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbNF0pO3ZhciBfZD1yb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzVdKTt2YXIgX2U9cm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1sxMl0pO3ZhciBfZj1yb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzEzXSk7cmV0dXJuICdtYXRyaXgoJytfYSsnLCcrX2IrJywnK19jKycsJytfZCsnLCcrX2UrJywnK19mKycpJzt9cmV0dXJuIGZ1bmN0aW9uKCl7dGhpcy5yZXNldD1yZXNldDt0aGlzLnJvdGF0ZT1yb3RhdGU7dGhpcy5yb3RhdGVYPXJvdGF0ZVg7dGhpcy5yb3RhdGVZPXJvdGF0ZVk7dGhpcy5yb3RhdGVaPXJvdGF0ZVo7dGhpcy5za2V3PXNrZXc7dGhpcy5za2V3RnJvbUF4aXM9c2tld0Zyb21BeGlzO3RoaXMuc2hlYXI9c2hlYXI7dGhpcy5zY2FsZT1zY2FsZTt0aGlzLnNldFRyYW5zZm9ybT1zZXRUcmFuc2Zvcm07dGhpcy50cmFuc2xhdGU9dHJhbnNsYXRlO3RoaXMudHJhbnNmb3JtPXRyYW5zZm9ybTt0aGlzLmFwcGx5VG9Qb2ludD1hcHBseVRvUG9pbnQ7dGhpcy5hcHBseVRvWD1hcHBseVRvWDt0aGlzLmFwcGx5VG9ZPWFwcGx5VG9ZO3RoaXMuYXBwbHlUb1o9YXBwbHlUb1o7dGhpcy5hcHBseVRvUG9pbnRBcnJheT1hcHBseVRvUG9pbnRBcnJheTt0aGlzLmFwcGx5VG9UcmlwbGVQb2ludHM9YXBwbHlUb1RyaXBsZVBvaW50czt0aGlzLmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkPWFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkO3RoaXMudG9DU1M9dG9DU1M7dGhpcy50bzJkQ1NTPXRvMmRDU1M7dGhpcy5jbG9uZT1jbG9uZTt0aGlzLmNsb25lRnJvbVByb3BzPWNsb25lRnJvbVByb3BzO3RoaXMuZXF1YWxzPWVxdWFsczt0aGlzLmludmVyc2VQb2ludHM9aW52ZXJzZVBvaW50czt0aGlzLmludmVyc2VQb2ludD1pbnZlcnNlUG9pbnQ7dGhpcy5nZXRJbnZlcnNlTWF0cml4PWdldEludmVyc2VNYXRyaXg7dGhpcy5fdD10aGlzLnRyYW5zZm9ybTt0aGlzLmlzSWRlbnRpdHk9aXNJZGVudGl0eTt0aGlzLl9pZGVudGl0eT10cnVlO3RoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZD1mYWxzZTt0aGlzLnByb3BzPWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLDE2KTt0aGlzLnJlc2V0KCk7fTt9KCk7LyogZXNsaW50LWRpc2FibGUgKi8gLypcclxuIENvcHlyaWdodCAyMDE0IERhdmlkIEJhdS5cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcclxuIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxyXG4gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXHJcbiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXHJcbiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cclxuIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xyXG4gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXHJcbiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxyXG4gRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXHJcbiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXHJcbiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxyXG4gQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcclxuIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXHJcbiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuXHJcbiAqLyhmdW5jdGlvbihwb29sLG1hdGgpey8vXG4vLyBUaGUgZm9sbG93aW5nIGNvbnN0YW50cyBhcmUgcmVsYXRlZCB0byBJRUVFIDc1NCBsaW1pdHMuXG4vL1xudmFyIGdsb2JhbD10aGlzLHdpZHRoPTI1NiwvLyBlYWNoIFJDNCBvdXRwdXQgaXMgMCA8PSB4IDwgMjU2XG5jaHVua3M9NiwvLyBhdCBsZWFzdCBzaXggUkM0IG91dHB1dHMgZm9yIGVhY2ggZG91YmxlXG5kaWdpdHM9NTIsLy8gdGhlcmUgYXJlIDUyIHNpZ25pZmljYW50IGRpZ2l0cyBpbiBhIGRvdWJsZVxucm5nbmFtZT0ncmFuZG9tJywvLyBybmduYW1lOiBuYW1lIGZvciBNYXRoLnJhbmRvbSBhbmQgTWF0aC5zZWVkcmFuZG9tXG5zdGFydGRlbm9tPW1hdGgucG93KHdpZHRoLGNodW5rcyksc2lnbmlmaWNhbmNlPW1hdGgucG93KDIsZGlnaXRzKSxvdmVyZmxvdz1zaWduaWZpY2FuY2UqMixtYXNrPXdpZHRoLTEsbm9kZWNyeXB0bzsvLyBub2RlLmpzIGNyeXB0byBtb2R1bGUsIGluaXRpYWxpemVkIGF0IHRoZSBib3R0b20uXG4vL1xuLy8gc2VlZHJhbmRvbSgpXG4vLyBUaGlzIGlzIHRoZSBzZWVkcmFuZG9tIGZ1bmN0aW9uIGRlc2NyaWJlZCBhYm92ZS5cbi8vXG5mdW5jdGlvbiBzZWVkcmFuZG9tKHNlZWQsb3B0aW9ucyxjYWxsYmFjayl7dmFyIGtleT1bXTtvcHRpb25zPW9wdGlvbnM9PT10cnVlP3tlbnRyb3B5OnRydWV9Om9wdGlvbnN8fHt9Oy8vIEZsYXR0ZW4gdGhlIHNlZWQgc3RyaW5nIG9yIGJ1aWxkIG9uZSBmcm9tIGxvY2FsIGVudHJvcHkgaWYgbmVlZGVkLlxudmFyIHNob3J0c2VlZD1taXhrZXkoZmxhdHRlbihvcHRpb25zLmVudHJvcHk/W3NlZWQsdG9zdHJpbmcocG9vbCldOnNlZWQ9PT1udWxsP2F1dG9zZWVkKCk6c2VlZCwzKSxrZXkpOy8vIFVzZSB0aGUgc2VlZCB0byBpbml0aWFsaXplIGFuIEFSQzQgZ2VuZXJhdG9yLlxudmFyIGFyYzQ9bmV3IEFSQzQoa2V5KTsvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSByYW5kb20gZG91YmxlIGluIFswLCAxKSB0aGF0IGNvbnRhaW5zXG4vLyByYW5kb21uZXNzIGluIGV2ZXJ5IGJpdCBvZiB0aGUgbWFudGlzc2Egb2YgdGhlIElFRUUgNzU0IHZhbHVlLlxudmFyIHBybmc9ZnVuY3Rpb24gcHJuZygpe3ZhciBuPWFyYzQuZyhjaHVua3MpLC8vIFN0YXJ0IHdpdGggYSBudW1lcmF0b3IgbiA8IDIgXiA0OFxuZD1zdGFydGRlbm9tLC8vICAgYW5kIGRlbm9taW5hdG9yIGQgPSAyIF4gNDguXG54PTA7Ly8gICBhbmQgbm8gJ2V4dHJhIGxhc3QgYnl0ZScuXG53aGlsZShuPHNpZ25pZmljYW5jZSl7Ly8gRmlsbCB1cCBhbGwgc2lnbmlmaWNhbnQgZGlnaXRzIGJ5XG5uPShuK3gpKndpZHRoOy8vICAgc2hpZnRpbmcgbnVtZXJhdG9yIGFuZFxuZCo9d2lkdGg7Ly8gICBkZW5vbWluYXRvciBhbmQgZ2VuZXJhdGluZyBhXG54PWFyYzQuZygxKTsvLyAgIG5ldyBsZWFzdC1zaWduaWZpY2FudC1ieXRlLlxufXdoaWxlKG4+PW92ZXJmbG93KXsvLyBUbyBhdm9pZCByb3VuZGluZyB1cCwgYmVmb3JlIGFkZGluZ1xubi89MjsvLyAgIGxhc3QgYnl0ZSwgc2hpZnQgZXZlcnl0aGluZ1xuZC89MjsvLyAgIHJpZ2h0IHVzaW5nIGludGVnZXIgbWF0aCB1bnRpbFxueD4+Pj0xOy8vICAgd2UgaGF2ZSBleGFjdGx5IHRoZSBkZXNpcmVkIGJpdHMuXG59cmV0dXJuIChuK3gpL2Q7Ly8gRm9ybSB0aGUgbnVtYmVyIHdpdGhpbiBbMCwgMSkuXG59O3BybmcuaW50MzI9ZnVuY3Rpb24oKXtyZXR1cm4gYXJjNC5nKDQpfDA7fTtwcm5nLnF1aWNrPWZ1bmN0aW9uKCl7cmV0dXJuIGFyYzQuZyg0KS8weDEwMDAwMDAwMDt9O3BybmcuZG91YmxlPXBybmc7Ly8gTWl4IHRoZSByYW5kb21uZXNzIGludG8gYWNjdW11bGF0ZWQgZW50cm9weS5cbm1peGtleSh0b3N0cmluZyhhcmM0LlMpLHBvb2wpOy8vIENhbGxpbmcgY29udmVudGlvbjogd2hhdCB0byByZXR1cm4gYXMgYSBmdW5jdGlvbiBvZiBwcm5nLCBzZWVkLCBpc19tYXRoLlxucmV0dXJuIChvcHRpb25zLnBhc3N8fGNhbGxiYWNrfHxmdW5jdGlvbihwcm5nLHNlZWQsaXNfbWF0aF9jYWxsLHN0YXRlKXtpZihzdGF0ZSl7Ly8gTG9hZCB0aGUgYXJjNCBzdGF0ZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBpZiBpdCBoYXMgYW4gUyBhcnJheS5cbmlmKHN0YXRlLlMpe2NvcHkoc3RhdGUsYXJjNCk7fS8vIE9ubHkgcHJvdmlkZSB0aGUgLnN0YXRlIG1ldGhvZCBpZiByZXF1ZXN0ZWQgdmlhIG9wdGlvbnMuc3RhdGUuXG5wcm5nLnN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIGNvcHkoYXJjNCx7fSk7fTt9Ly8gSWYgY2FsbGVkIGFzIGEgbWV0aG9kIG9mIE1hdGggKE1hdGguc2VlZHJhbmRvbSgpKSwgbXV0YXRlXG4vLyBNYXRoLnJhbmRvbSBiZWNhdXNlIHRoYXQgaXMgaG93IHNlZWRyYW5kb20uanMgaGFzIHdvcmtlZCBzaW5jZSB2MS4wLlxuaWYoaXNfbWF0aF9jYWxsKXttYXRoW3JuZ25hbWVdPXBybmc7cmV0dXJuIHNlZWQ7fS8vIE90aGVyd2lzZSwgaXQgaXMgYSBuZXdlciBjYWxsaW5nIGNvbnZlbnRpb24sIHNvIHJldHVybiB0aGVcbi8vIHBybmcgZGlyZWN0bHkuXG5lbHNlIHJldHVybiBwcm5nO30pKHBybmcsc2hvcnRzZWVkLCdnbG9iYWwnaW4gb3B0aW9ucz9vcHRpb25zLmdsb2JhbDp0aGlzPT1tYXRoLG9wdGlvbnMuc3RhdGUpO31tYXRoWydzZWVkJytybmduYW1lXT1zZWVkcmFuZG9tOy8vXG4vLyBBUkM0XG4vL1xuLy8gQW4gQVJDNCBpbXBsZW1lbnRhdGlvbi4gIFRoZSBjb25zdHJ1Y3RvciB0YWtlcyBhIGtleSBpbiB0aGUgZm9ybSBvZlxuLy8gYW4gYXJyYXkgb2YgYXQgbW9zdCAod2lkdGgpIGludGVnZXJzIHRoYXQgc2hvdWxkIGJlIDAgPD0geCA8ICh3aWR0aCkuXG4vL1xuLy8gVGhlIGcoY291bnQpIG1ldGhvZCByZXR1cm5zIGEgcHNldWRvcmFuZG9tIGludGVnZXIgdGhhdCBjb25jYXRlbmF0ZXNcbi8vIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBmcm9tIEFSQzQuICBJdHMgcmV0dXJuIHZhbHVlIGlzIGEgbnVtYmVyIHhcbi8vIHRoYXQgaXMgaW4gdGhlIHJhbmdlIDAgPD0geCA8ICh3aWR0aCBeIGNvdW50KS5cbi8vXG5mdW5jdGlvbiBBUkM0KGtleSl7dmFyIHQsa2V5bGVuPWtleS5sZW5ndGgsbWU9dGhpcyxpPTAsaj1tZS5pPW1lLmo9MCxzPW1lLlM9W107Ly8gVGhlIGVtcHR5IGtleSBbXSBpcyB0cmVhdGVkIGFzIFswXS5cbmlmKCFrZXlsZW4pe2tleT1ba2V5bGVuKytdO30vLyBTZXQgdXAgUyB1c2luZyB0aGUgc3RhbmRhcmQga2V5IHNjaGVkdWxpbmcgYWxnb3JpdGhtLlxud2hpbGUoaTx3aWR0aCl7c1tpXT1pKys7fWZvcihpPTA7aTx3aWR0aDtpKyspe3NbaV09c1tqPW1hc2smaitrZXlbaSVrZXlsZW5dKyh0PXNbaV0pXTtzW2pdPXQ7fS8vIFRoZSBcImdcIiBtZXRob2QgcmV0dXJucyB0aGUgbmV4dCAoY291bnQpIG91dHB1dHMgYXMgb25lIG51bWJlci5cbm1lLmc9ZnVuY3Rpb24oY291bnQpey8vIFVzaW5nIGluc3RhbmNlIG1lbWJlcnMgaW5zdGVhZCBvZiBjbG9zdXJlIHN0YXRlIG5lYXJseSBkb3VibGVzIHNwZWVkLlxudmFyIHQscj0wLGk9bWUuaSxqPW1lLmoscz1tZS5TO3doaWxlKGNvdW50LS0pe3Q9c1tpPW1hc2smaSsxXTtyPXIqd2lkdGgrc1ttYXNrJihzW2ldPXNbaj1tYXNrJmordF0pKyhzW2pdPXQpXTt9bWUuaT1pO21lLmo9ajtyZXR1cm4gcjsvLyBGb3Igcm9idXN0IHVucHJlZGljdGFiaWxpdHksIHRoZSBmdW5jdGlvbiBjYWxsIGJlbG93IGF1dG9tYXRpY2FsbHlcbi8vIGRpc2NhcmRzIGFuIGluaXRpYWwgYmF0Y2ggb2YgdmFsdWVzLiAgVGhpcyBpcyBjYWxsZWQgUkM0LWRyb3BbMjU2XS5cbi8vIFNlZSBodHRwOi8vZ29vZ2xlLmNvbS9zZWFyY2g/cT1yc2ErZmx1aHJlcityZXNwb25zZSZidG5JXG59O30vL1xuLy8gY29weSgpXG4vLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIGNvcHkoZix0KXt0Lmk9Zi5pO3Quaj1mLmo7dC5TPWYuUy5zbGljZSgpO3JldHVybiB0O30vL1xuLy8gZmxhdHRlbigpXG4vLyBDb252ZXJ0cyBhbiBvYmplY3QgdHJlZSB0byBuZXN0ZWQgYXJyYXlzIG9mIHN0cmluZ3MuXG4vL1xuZnVuY3Rpb24gZmxhdHRlbihvYmosZGVwdGgpe3ZhciByZXN1bHQ9W10sdHlwPXR5cGVvZiBvYmoscHJvcDtpZihkZXB0aCYmdHlwPT0nb2JqZWN0Jyl7Zm9yKHByb3AgaW4gb2JqKXt0cnl7cmVzdWx0LnB1c2goZmxhdHRlbihvYmpbcHJvcF0sZGVwdGgtMSkpO31jYXRjaChlKXt9fX1yZXR1cm4gcmVzdWx0Lmxlbmd0aD9yZXN1bHQ6dHlwPT0nc3RyaW5nJz9vYmo6b2JqKydcXDAnO30vL1xuLy8gbWl4a2V5KClcbi8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbi8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuLy9cbmZ1bmN0aW9uIG1peGtleShzZWVkLGtleSl7dmFyIHN0cmluZ3NlZWQ9c2VlZCsnJyxzbWVhcixqPTA7d2hpbGUoajxzdHJpbmdzZWVkLmxlbmd0aCl7a2V5W21hc2smal09bWFzayYoc21lYXJePWtleVttYXNrJmpdKjE5KStzdHJpbmdzZWVkLmNoYXJDb2RlQXQoaisrKTt9cmV0dXJuIHRvc3RyaW5nKGtleSk7fS8vXG4vLyBhdXRvc2VlZCgpXG4vLyBSZXR1cm5zIGFuIG9iamVjdCBmb3IgYXV0b3NlZWRpbmcsIHVzaW5nIHdpbmRvdy5jcnlwdG8gYW5kIE5vZGUgY3J5cHRvXG4vLyBtb2R1bGUgaWYgYXZhaWxhYmxlLlxuLy9cbmZ1bmN0aW9uIGF1dG9zZWVkKCl7dHJ5e2lmKG5vZGVjcnlwdG8pe3JldHVybiB0b3N0cmluZyhub2RlY3J5cHRvLnJhbmRvbUJ5dGVzKHdpZHRoKSk7fXZhciBvdXQ9bmV3IFVpbnQ4QXJyYXkod2lkdGgpOyhnbG9iYWwuY3J5cHRvfHxnbG9iYWwubXNDcnlwdG8pLmdldFJhbmRvbVZhbHVlcyhvdXQpO3JldHVybiB0b3N0cmluZyhvdXQpO31jYXRjaChlKXt2YXIgYnJvd3Nlcj1nbG9iYWwubmF2aWdhdG9yLHBsdWdpbnM9YnJvd3NlciYmYnJvd3Nlci5wbHVnaW5zO3JldHVybiBbK25ldyBEYXRlKCksZ2xvYmFsLHBsdWdpbnMsZ2xvYmFsLnNjcmVlbix0b3N0cmluZyhwb29sKV07fX0vL1xuLy8gdG9zdHJpbmcoKVxuLy8gQ29udmVydHMgYW4gYXJyYXkgb2YgY2hhcmNvZGVzIHRvIGEgc3RyaW5nXG4vL1xuZnVuY3Rpb24gdG9zdHJpbmcoYSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoMCxhKTt9Ly9cbi8vIFdoZW4gc2VlZHJhbmRvbS5qcyBpcyBsb2FkZWQsIHdlIGltbWVkaWF0ZWx5IG1peCBhIGZldyBiaXRzXG4vLyBmcm9tIHRoZSBidWlsdC1pbiBSTkcgaW50byB0aGUgZW50cm9weSBwb29sLiAgQmVjYXVzZSB3ZSBkb1xuLy8gbm90IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggZGV0ZXJtaW5pc3RpYyBQUk5HIHN0YXRlIGxhdGVyLFxuLy8gc2VlZHJhbmRvbSB3aWxsIG5vdCBjYWxsIG1hdGgucmFuZG9tIG9uIGl0cyBvd24gYWdhaW4gYWZ0ZXJcbi8vIGluaXRpYWxpemF0aW9uLlxuLy9cbm1peGtleShtYXRoLnJhbmRvbSgpLHBvb2wpOy8vXG4vLyBOb2RlanMgYW5kIEFNRCBzdXBwb3J0OiBleHBvcnQgdGhlIGltcGxlbWVudGF0aW9uIGFzIGEgbW9kdWxlIHVzaW5nXG4vLyBlaXRoZXIgY29udmVudGlvbi5cbi8vXG4vLyBFbmQgYW5vbnltb3VzIHNjb3BlLCBhbmQgcGFzcyBpbml0aWFsIHZhbHVlcy5cbn0pKFtdLC8vIHBvb2w6IGVudHJvcHkgcG9vbCBzdGFydHMgZW1wdHlcbkJNTWF0aC8vIG1hdGg6IHBhY2thZ2UgY29udGFpbmluZyByYW5kb20sIHBvdywgYW5kIHNlZWRyYW5kb21cbik7LyogZXNsaW50LWRpc2FibGUgKi92YXIgQmV6aWVyRmFjdG9yeT1mdW5jdGlvbigpey8qKlxyXG4gICAgICogQmV6aWVyRWFzaW5nIC0gdXNlIGJlemllciBjdXJ2ZSBmb3IgdHJhbnNpdGlvbiBlYXNpbmcgZnVuY3Rpb25cclxuICAgICAqIGJ5IEdhw6t0YW4gUmVuYXVkZWF1IDIwMTQgLSAyMDE1IOKAkyBNSVQgTGljZW5zZVxyXG4gICAgICpcclxuICAgICAqIENyZWRpdHM6IGlzIGJhc2VkIG9uIEZpcmVmb3gncyBuc1NNSUxLZXlTcGxpbmUuY3BwXHJcbiAgICAgKiBVc2FnZTpcclxuICAgICAqIHZhciBzcGxpbmUgPSBCZXppZXJFYXNpbmcoWyAwLjI1LCAwLjEsIDAuMjUsIDEuMCBdKVxyXG4gICAgICogc3BsaW5lLmdldCh4KSA9PiByZXR1cm5zIHRoZSBlYXNpbmcgdmFsdWUgfCB4IG11c3QgYmUgaW4gWzAsIDFdIHJhbmdlXHJcbiAgICAgKlxyXG4gICAgICovdmFyIG9iPXt9O29iLmdldEJlemllckVhc2luZz1nZXRCZXppZXJFYXNpbmc7dmFyIGJlemllcnM9e307ZnVuY3Rpb24gZ2V0QmV6aWVyRWFzaW5nKGEsYixjLGQsbm0pe3ZhciBzdHI9bm18fCgnYmV6XycrYSsnXycrYisnXycrYysnXycrZCkucmVwbGFjZSgvXFwuL2csJ3AnKTtpZihiZXppZXJzW3N0cl0pe3JldHVybiBiZXppZXJzW3N0cl07fXZhciBiZXpFYXNpbmc9bmV3IEJlemllckVhc2luZyhbYSxiLGMsZF0pO2JlemllcnNbc3RyXT1iZXpFYXNpbmc7cmV0dXJuIGJlekVhc2luZzt9Ly8gVGhlc2UgdmFsdWVzIGFyZSBlc3RhYmxpc2hlZCBieSBlbXBpcmljaXNtIHdpdGggdGVzdHMgKHRyYWRlb2ZmOiBwZXJmb3JtYW5jZSBWUyBwcmVjaXNpb24pXG52YXIgTkVXVE9OX0lURVJBVElPTlM9NDt2YXIgTkVXVE9OX01JTl9TTE9QRT0wLjAwMTt2YXIgU1VCRElWSVNJT05fUFJFQ0lTSU9OPTAuMDAwMDAwMTt2YXIgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlM9MTA7dmFyIGtTcGxpbmVUYWJsZVNpemU9MTE7dmFyIGtTYW1wbGVTdGVwU2l6ZT0xLjAvKGtTcGxpbmVUYWJsZVNpemUtMS4wKTt2YXIgZmxvYXQzMkFycmF5U3VwcG9ydGVkPXR5cGVvZiBGbG9hdDMyQXJyYXk9PT0nZnVuY3Rpb24nO2Z1bmN0aW9uIEEoYUExLGFBMil7cmV0dXJuIDEuMC0zLjAqYUEyKzMuMCphQTE7fWZ1bmN0aW9uIEIoYUExLGFBMil7cmV0dXJuIDMuMCphQTItNi4wKmFBMTt9ZnVuY3Rpb24gQyhhQTEpe3JldHVybiAzLjAqYUExO30vLyBSZXR1cm5zIHgodCkgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgeSh0KSBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuZnVuY3Rpb24gY2FsY0JlemllcihhVCxhQTEsYUEyKXtyZXR1cm4gKChBKGFBMSxhQTIpKmFUK0IoYUExLGFBMikpKmFUK0MoYUExKSkqYVQ7fS8vIFJldHVybnMgZHgvZHQgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgZHkvZHQgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGdldFNsb3BlKGFULGFBMSxhQTIpe3JldHVybiAzLjAqQShhQTEsYUEyKSphVCphVCsyLjAqQihhQTEsYUEyKSphVCtDKGFBMSk7fWZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZShhWCxhQSxhQixtWDEsbVgyKXt2YXIgY3VycmVudFgsY3VycmVudFQsaT0wO2Rve2N1cnJlbnRUPWFBKyhhQi1hQSkvMi4wO2N1cnJlbnRYPWNhbGNCZXppZXIoY3VycmVudFQsbVgxLG1YMiktYVg7aWYoY3VycmVudFg+MC4wKXthQj1jdXJyZW50VDt9ZWxzZSB7YUE9Y3VycmVudFQ7fX13aGlsZShNYXRoLmFicyhjdXJyZW50WCk+U1VCRElWSVNJT05fUFJFQ0lTSU9OJiYrK2k8U1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMpO3JldHVybiBjdXJyZW50VDt9ZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsYUd1ZXNzVCxtWDEsbVgyKXtmb3IodmFyIGk9MDtpPE5FV1RPTl9JVEVSQVRJT05TOysraSl7dmFyIGN1cnJlbnRTbG9wZT1nZXRTbG9wZShhR3Vlc3NULG1YMSxtWDIpO2lmKGN1cnJlbnRTbG9wZT09PTAuMClyZXR1cm4gYUd1ZXNzVDt2YXIgY3VycmVudFg9Y2FsY0JlemllcihhR3Vlc3NULG1YMSxtWDIpLWFYO2FHdWVzc1QtPWN1cnJlbnRYL2N1cnJlbnRTbG9wZTt9cmV0dXJuIGFHdWVzc1Q7fS8qKlxyXG4gICAgICogcG9pbnRzIGlzIGFuIGFycmF5IG9mIFsgbVgxLCBtWTEsIG1YMiwgbVkyIF1cclxuICAgICAqL2Z1bmN0aW9uIEJlemllckVhc2luZyhwb2ludHMpe3RoaXMuX3A9cG9pbnRzO3RoaXMuX21TYW1wbGVWYWx1ZXM9ZmxvYXQzMkFycmF5U3VwcG9ydGVkP25ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk6bmV3IEFycmF5KGtTcGxpbmVUYWJsZVNpemUpO3RoaXMuX3ByZWNvbXB1dGVkPWZhbHNlO3RoaXMuZ2V0PXRoaXMuZ2V0LmJpbmQodGhpcyk7fUJlemllckVhc2luZy5wcm90b3R5cGU9e2dldDpmdW5jdGlvbiBnZXQoeCl7dmFyIG1YMT10aGlzLl9wWzBdLG1ZMT10aGlzLl9wWzFdLG1YMj10aGlzLl9wWzJdLG1ZMj10aGlzLl9wWzNdO2lmKCF0aGlzLl9wcmVjb21wdXRlZCl0aGlzLl9wcmVjb21wdXRlKCk7aWYobVgxPT09bVkxJiZtWDI9PT1tWTIpcmV0dXJuIHg7Ly8gbGluZWFyXG4vLyBCZWNhdXNlIEphdmFTY3JpcHQgbnVtYmVyIGFyZSBpbXByZWNpc2UsIHdlIHNob3VsZCBndWFyYW50ZWUgdGhlIGV4dHJlbWVzIGFyZSByaWdodC5cbmlmKHg9PT0wKXJldHVybiAwO2lmKHg9PT0xKXJldHVybiAxO3JldHVybiBjYWxjQmV6aWVyKHRoaXMuX2dldFRGb3JYKHgpLG1ZMSxtWTIpO30sLy8gUHJpdmF0ZSBwYXJ0XG5fcHJlY29tcHV0ZTpmdW5jdGlvbiBfcHJlY29tcHV0ZSgpe3ZhciBtWDE9dGhpcy5fcFswXSxtWTE9dGhpcy5fcFsxXSxtWDI9dGhpcy5fcFsyXSxtWTI9dGhpcy5fcFszXTt0aGlzLl9wcmVjb21wdXRlZD10cnVlO2lmKG1YMSE9PW1ZMXx8bVgyIT09bVkyKXt0aGlzLl9jYWxjU2FtcGxlVmFsdWVzKCk7fX0sX2NhbGNTYW1wbGVWYWx1ZXM6ZnVuY3Rpb24gX2NhbGNTYW1wbGVWYWx1ZXMoKXt2YXIgbVgxPXRoaXMuX3BbMF0sbVgyPXRoaXMuX3BbMl07Zm9yKHZhciBpPTA7aTxrU3BsaW5lVGFibGVTaXplOysraSl7dGhpcy5fbVNhbXBsZVZhbHVlc1tpXT1jYWxjQmV6aWVyKGkqa1NhbXBsZVN0ZXBTaXplLG1YMSxtWDIpO319LC8qKlxyXG4gICAgICAgICAqIGdldFRGb3JYIGNob3NlIHRoZSBmYXN0ZXN0IGhldXJpc3RpYyB0byBkZXRlcm1pbmUgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgcHJlY2lzZWx5IGZyb20gYSBnaXZlbiBYIHByb2plY3Rpb24uXHJcbiAgICAgICAgICovX2dldFRGb3JYOmZ1bmN0aW9uIF9nZXRURm9yWChhWCl7dmFyIG1YMT10aGlzLl9wWzBdLG1YMj10aGlzLl9wWzJdLG1TYW1wbGVWYWx1ZXM9dGhpcy5fbVNhbXBsZVZhbHVlczt2YXIgaW50ZXJ2YWxTdGFydD0wLjA7dmFyIGN1cnJlbnRTYW1wbGU9MTt2YXIgbGFzdFNhbXBsZT1rU3BsaW5lVGFibGVTaXplLTE7Zm9yKDtjdXJyZW50U2FtcGxlIT09bGFzdFNhbXBsZSYmbVNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXTw9YVg7KytjdXJyZW50U2FtcGxlKXtpbnRlcnZhbFN0YXJ0Kz1rU2FtcGxlU3RlcFNpemU7fS0tY3VycmVudFNhbXBsZTsvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcbnZhciBkaXN0PShhWC1tU2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKS8obVNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlKzFdLW1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO3ZhciBndWVzc0ZvclQ9aW50ZXJ2YWxTdGFydCtkaXN0KmtTYW1wbGVTdGVwU2l6ZTt2YXIgaW5pdGlhbFNsb3BlPWdldFNsb3BlKGd1ZXNzRm9yVCxtWDEsbVgyKTtpZihpbml0aWFsU2xvcGU+PU5FV1RPTl9NSU5fU0xPUEUpe3JldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCxndWVzc0ZvclQsbVgxLG1YMik7fWlmKGluaXRpYWxTbG9wZT09PTAuMCl7cmV0dXJuIGd1ZXNzRm9yVDt9cmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCxpbnRlcnZhbFN0YXJ0LGludGVydmFsU3RhcnQra1NhbXBsZVN0ZXBTaXplLG1YMSxtWDIpO319O3JldHVybiBvYjt9KCk7KGZ1bmN0aW9uKCl7dmFyIGxhc3RUaW1lPTA7dmFyIHZlbmRvcnM9WydtcycsJ21veicsJ3dlYmtpdCcsJ28nXTtmb3IodmFyIHg9MDt4PHZlbmRvcnMubGVuZ3RoJiYhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsrK3gpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGx1c3BsdXNcbndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU9d2luZG93W3ZlbmRvcnNbeF0rJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO3dpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZT13aW5kb3dbdmVuZG9yc1t4XSsnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXXx8d2luZG93W3ZlbmRvcnNbeF0rJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO31pZighd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSl7d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT1mdW5jdGlvbihjYWxsYmFjayl7dmFyIGN1cnJUaW1lPW5ldyBEYXRlKCkuZ2V0VGltZSgpO3ZhciB0aW1lVG9DYWxsPU1hdGgubWF4KDAsMTYtKGN1cnJUaW1lLWxhc3RUaW1lKSk7dmFyIGlkPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtjYWxsYmFjayhjdXJyVGltZSt0aW1lVG9DYWxsKTt9LHRpbWVUb0NhbGwpO2xhc3RUaW1lPWN1cnJUaW1lK3RpbWVUb0NhbGw7cmV0dXJuIGlkO307fWlmKCF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpe3dpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZT1mdW5jdGlvbihpZCl7Y2xlYXJUaW1lb3V0KGlkKTt9O319KSgpOy8qIGV4cG9ydGVkIGV4dGVuZFByb3RvdHlwZSwgZ2V0RGVzY3JpcHRvciwgY3JlYXRlUHJveHlGdW5jdGlvbiAqL2Z1bmN0aW9uIGV4dGVuZFByb3RvdHlwZShzb3VyY2VzLGRlc3RpbmF0aW9uKXt2YXIgaTt2YXIgbGVuPXNvdXJjZXMubGVuZ3RoO3ZhciBzb3VyY2VQcm90b3R5cGU7Zm9yKGk9MDtpPGxlbjtpKz0xKXtzb3VyY2VQcm90b3R5cGU9c291cmNlc1tpXS5wcm90b3R5cGU7Zm9yKHZhciBhdHRyIGluIHNvdXJjZVByb3RvdHlwZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZVByb3RvdHlwZSxhdHRyKSlkZXN0aW5hdGlvbi5wcm90b3R5cGVbYXR0cl09c291cmNlUHJvdG90eXBlW2F0dHJdO319fWZ1bmN0aW9uIGdldERlc2NyaXB0b3Iob2JqZWN0LHByb3Ape3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCxwcm9wKTt9ZnVuY3Rpb24gY3JlYXRlUHJveHlGdW5jdGlvbihwcm90b3R5cGUpe2Z1bmN0aW9uIFByb3h5RnVuY3Rpb24oKXt9UHJveHlGdW5jdGlvbi5wcm90b3R5cGU9cHJvdG90eXBlO3JldHVybiBQcm94eUZ1bmN0aW9uO30vKiBnbG9iYWwgc2VnbWVudHNMZW5ndGhQb29sLCBkZWZhdWx0Q3VydmVTZWdtZW50cywgY3JlYXRlU2l6ZWRBcnJheSwgYm1Qb3csIGJtU3FydCwgYm1GbG9vciwgY3JlYXRlVHlwZWRBcnJheSwgYmV6aWVyTGVuZ3RoUG9vbCAqLyAvKiBleHBvcnRlZCBiZXogKi9mdW5jdGlvbiBiZXpGdW5jdGlvbigpe3ZhciBtYXRoPU1hdGg7ZnVuY3Rpb24gcG9pbnRPbkxpbmUyRCh4MSx5MSx4Mix5Mix4Myx5Myl7dmFyIGRldDE9eDEqeTIreTEqeDMreDIqeTMteDMqeTIteTMqeDEteDIqeTE7cmV0dXJuIGRldDE+LTAuMDAxJiZkZXQxPDAuMDAxO31mdW5jdGlvbiBwb2ludE9uTGluZTNEKHgxLHkxLHoxLHgyLHkyLHoyLHgzLHkzLHozKXtpZih6MT09PTAmJnoyPT09MCYmejM9PT0wKXtyZXR1cm4gcG9pbnRPbkxpbmUyRCh4MSx5MSx4Mix5Mix4Myx5Myk7fXZhciBkaXN0MT1tYXRoLnNxcnQobWF0aC5wb3coeDIteDEsMikrbWF0aC5wb3coeTIteTEsMikrbWF0aC5wb3coejItejEsMikpO3ZhciBkaXN0Mj1tYXRoLnNxcnQobWF0aC5wb3coeDMteDEsMikrbWF0aC5wb3coeTMteTEsMikrbWF0aC5wb3coejMtejEsMikpO3ZhciBkaXN0Mz1tYXRoLnNxcnQobWF0aC5wb3coeDMteDIsMikrbWF0aC5wb3coeTMteTIsMikrbWF0aC5wb3coejMtejIsMikpO3ZhciBkaWZmRGlzdDtpZihkaXN0MT5kaXN0Mil7aWYoZGlzdDE+ZGlzdDMpe2RpZmZEaXN0PWRpc3QxLWRpc3QyLWRpc3QzO31lbHNlIHtkaWZmRGlzdD1kaXN0My1kaXN0Mi1kaXN0MTt9fWVsc2UgaWYoZGlzdDM+ZGlzdDIpe2RpZmZEaXN0PWRpc3QzLWRpc3QyLWRpc3QxO31lbHNlIHtkaWZmRGlzdD1kaXN0Mi1kaXN0MS1kaXN0Mzt9cmV0dXJuIGRpZmZEaXN0Pi0wLjAwMDEmJmRpZmZEaXN0PDAuMDAwMTt9dmFyIGdldEJlemllckxlbmd0aD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihwdDEscHQyLHB0MyxwdDQpe3ZhciBjdXJ2ZVNlZ21lbnRzPWRlZmF1bHRDdXJ2ZVNlZ21lbnRzO3ZhciBrO3ZhciBpO3ZhciBsZW47dmFyIHB0Q29vcmQ7dmFyIHBlcmM7dmFyIGFkZGVkTGVuZ3RoPTA7dmFyIHB0RGlzdGFuY2U7dmFyIHBvaW50PVtdO3ZhciBsYXN0UG9pbnQ9W107dmFyIGxlbmd0aERhdGE9YmV6aWVyTGVuZ3RoUG9vbC5uZXdFbGVtZW50KCk7bGVuPXB0My5sZW5ndGg7Zm9yKGs9MDtrPGN1cnZlU2VnbWVudHM7ays9MSl7cGVyYz1rLyhjdXJ2ZVNlZ21lbnRzLTEpO3B0RGlzdGFuY2U9MDtmb3IoaT0wO2k8bGVuO2krPTEpe3B0Q29vcmQ9Ym1Qb3coMS1wZXJjLDMpKnB0MVtpXSszKmJtUG93KDEtcGVyYywyKSpwZXJjKnB0M1tpXSszKigxLXBlcmMpKmJtUG93KHBlcmMsMikqcHQ0W2ldK2JtUG93KHBlcmMsMykqcHQyW2ldO3BvaW50W2ldPXB0Q29vcmQ7aWYobGFzdFBvaW50W2ldIT09bnVsbCl7cHREaXN0YW5jZSs9Ym1Qb3cocG9pbnRbaV0tbGFzdFBvaW50W2ldLDIpO31sYXN0UG9pbnRbaV09cG9pbnRbaV07fWlmKHB0RGlzdGFuY2Upe3B0RGlzdGFuY2U9Ym1TcXJ0KHB0RGlzdGFuY2UpO2FkZGVkTGVuZ3RoKz1wdERpc3RhbmNlO31sZW5ndGhEYXRhLnBlcmNlbnRzW2tdPXBlcmM7bGVuZ3RoRGF0YS5sZW5ndGhzW2tdPWFkZGVkTGVuZ3RoO31sZW5ndGhEYXRhLmFkZGVkTGVuZ3RoPWFkZGVkTGVuZ3RoO3JldHVybiBsZW5ndGhEYXRhO307fSgpO2Z1bmN0aW9uIGdldFNlZ21lbnRzTGVuZ3RoKHNoYXBlRGF0YSl7dmFyIHNlZ21lbnRzTGVuZ3RoPXNlZ21lbnRzTGVuZ3RoUG9vbC5uZXdFbGVtZW50KCk7dmFyIGNsb3NlZD1zaGFwZURhdGEuYzt2YXIgcGF0aFY9c2hhcGVEYXRhLnY7dmFyIHBhdGhPPXNoYXBlRGF0YS5vO3ZhciBwYXRoST1zaGFwZURhdGEuaTt2YXIgaTt2YXIgbGVuPXNoYXBlRGF0YS5fbGVuZ3RoO3ZhciBsZW5ndGhzPXNlZ21lbnRzTGVuZ3RoLmxlbmd0aHM7dmFyIHRvdGFsTGVuZ3RoPTA7Zm9yKGk9MDtpPGxlbi0xO2krPTEpe2xlbmd0aHNbaV09Z2V0QmV6aWVyTGVuZ3RoKHBhdGhWW2ldLHBhdGhWW2krMV0scGF0aE9baV0scGF0aElbaSsxXSk7dG90YWxMZW5ndGgrPWxlbmd0aHNbaV0uYWRkZWRMZW5ndGg7fWlmKGNsb3NlZCYmbGVuKXtsZW5ndGhzW2ldPWdldEJlemllckxlbmd0aChwYXRoVltpXSxwYXRoVlswXSxwYXRoT1tpXSxwYXRoSVswXSk7dG90YWxMZW5ndGgrPWxlbmd0aHNbaV0uYWRkZWRMZW5ndGg7fXNlZ21lbnRzTGVuZ3RoLnRvdGFsTGVuZ3RoPXRvdGFsTGVuZ3RoO3JldHVybiBzZWdtZW50c0xlbmd0aDt9ZnVuY3Rpb24gQmV6aWVyRGF0YShsZW5ndGgpe3RoaXMuc2VnbWVudExlbmd0aD0wO3RoaXMucG9pbnRzPW5ldyBBcnJheShsZW5ndGgpO31mdW5jdGlvbiBQb2ludERhdGEocGFydGlhbCxwb2ludCl7dGhpcy5wYXJ0aWFsTGVuZ3RoPXBhcnRpYWw7dGhpcy5wb2ludD1wb2ludDt9dmFyIGJ1aWxkQmV6aWVyRGF0YT1mdW5jdGlvbigpe3ZhciBzdG9yZWREYXRhPXt9O3JldHVybiBmdW5jdGlvbihwdDEscHQyLHB0MyxwdDQpe3ZhciBiZXppZXJOYW1lPShwdDFbMF0rJ18nK3B0MVsxXSsnXycrcHQyWzBdKydfJytwdDJbMV0rJ18nK3B0M1swXSsnXycrcHQzWzFdKydfJytwdDRbMF0rJ18nK3B0NFsxXSkucmVwbGFjZSgvXFwuL2csJ3AnKTtpZighc3RvcmVkRGF0YVtiZXppZXJOYW1lXSl7dmFyIGN1cnZlU2VnbWVudHM9ZGVmYXVsdEN1cnZlU2VnbWVudHM7dmFyIGs7dmFyIGk7dmFyIGxlbjt2YXIgcHRDb29yZDt2YXIgcGVyYzt2YXIgYWRkZWRMZW5ndGg9MDt2YXIgcHREaXN0YW5jZTt2YXIgcG9pbnQ7dmFyIGxhc3RQb2ludD1udWxsO2lmKHB0MS5sZW5ndGg9PT0yJiYocHQxWzBdIT09cHQyWzBdfHxwdDFbMV0hPT1wdDJbMV0pJiZwb2ludE9uTGluZTJEKHB0MVswXSxwdDFbMV0scHQyWzBdLHB0MlsxXSxwdDFbMF0rcHQzWzBdLHB0MVsxXStwdDNbMV0pJiZwb2ludE9uTGluZTJEKHB0MVswXSxwdDFbMV0scHQyWzBdLHB0MlsxXSxwdDJbMF0rcHQ0WzBdLHB0MlsxXStwdDRbMV0pKXtjdXJ2ZVNlZ21lbnRzPTI7fXZhciBiZXppZXJEYXRhPW5ldyBCZXppZXJEYXRhKGN1cnZlU2VnbWVudHMpO2xlbj1wdDMubGVuZ3RoO2ZvcihrPTA7azxjdXJ2ZVNlZ21lbnRzO2srPTEpe3BvaW50PWNyZWF0ZVNpemVkQXJyYXkobGVuKTtwZXJjPWsvKGN1cnZlU2VnbWVudHMtMSk7cHREaXN0YW5jZT0wO2ZvcihpPTA7aTxsZW47aSs9MSl7cHRDb29yZD1ibVBvdygxLXBlcmMsMykqcHQxW2ldKzMqYm1Qb3coMS1wZXJjLDIpKnBlcmMqKHB0MVtpXStwdDNbaV0pKzMqKDEtcGVyYykqYm1Qb3cocGVyYywyKSoocHQyW2ldK3B0NFtpXSkrYm1Qb3cocGVyYywzKSpwdDJbaV07cG9pbnRbaV09cHRDb29yZDtpZihsYXN0UG9pbnQhPT1udWxsKXtwdERpc3RhbmNlKz1ibVBvdyhwb2ludFtpXS1sYXN0UG9pbnRbaV0sMik7fX1wdERpc3RhbmNlPWJtU3FydChwdERpc3RhbmNlKTthZGRlZExlbmd0aCs9cHREaXN0YW5jZTtiZXppZXJEYXRhLnBvaW50c1trXT1uZXcgUG9pbnREYXRhKHB0RGlzdGFuY2UscG9pbnQpO2xhc3RQb2ludD1wb2ludDt9YmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoPWFkZGVkTGVuZ3RoO3N0b3JlZERhdGFbYmV6aWVyTmFtZV09YmV6aWVyRGF0YTt9cmV0dXJuIHN0b3JlZERhdGFbYmV6aWVyTmFtZV07fTt9KCk7ZnVuY3Rpb24gZ2V0RGlzdGFuY2VQZXJjKHBlcmMsYmV6aWVyRGF0YSl7dmFyIHBlcmNlbnRzPWJlemllckRhdGEucGVyY2VudHM7dmFyIGxlbmd0aHM9YmV6aWVyRGF0YS5sZW5ndGhzO3ZhciBsZW49cGVyY2VudHMubGVuZ3RoO3ZhciBpbml0UG9zPWJtRmxvb3IoKGxlbi0xKSpwZXJjKTt2YXIgbGVuZ3RoUG9zPXBlcmMqYmV6aWVyRGF0YS5hZGRlZExlbmd0aDt2YXIgbFBlcmM9MDtpZihpbml0UG9zPT09bGVuLTF8fGluaXRQb3M9PT0wfHxsZW5ndGhQb3M9PT1sZW5ndGhzW2luaXRQb3NdKXtyZXR1cm4gcGVyY2VudHNbaW5pdFBvc107fXZhciBkaXI9bGVuZ3Roc1tpbml0UG9zXT5sZW5ndGhQb3M/LTE6MTt2YXIgZmxhZz10cnVlO3doaWxlKGZsYWcpe2lmKGxlbmd0aHNbaW5pdFBvc108PWxlbmd0aFBvcyYmbGVuZ3Roc1tpbml0UG9zKzFdPmxlbmd0aFBvcyl7bFBlcmM9KGxlbmd0aFBvcy1sZW5ndGhzW2luaXRQb3NdKS8obGVuZ3Roc1tpbml0UG9zKzFdLWxlbmd0aHNbaW5pdFBvc10pO2ZsYWc9ZmFsc2U7fWVsc2Uge2luaXRQb3MrPWRpcjt9aWYoaW5pdFBvczwwfHxpbml0UG9zPj1sZW4tMSl7Ly8gRklYIGZvciBUeXBlZEFycmF5cyB0aGF0IGRvbid0IHN0b3JlIGZsb2F0aW5nIHBvaW50IHZhbHVlcyB3aXRoIGVub3VnaCBhY2N1cmFjeVxuaWYoaW5pdFBvcz09PWxlbi0xKXtyZXR1cm4gcGVyY2VudHNbaW5pdFBvc107fWZsYWc9ZmFsc2U7fX1yZXR1cm4gcGVyY2VudHNbaW5pdFBvc10rKHBlcmNlbnRzW2luaXRQb3MrMV0tcGVyY2VudHNbaW5pdFBvc10pKmxQZXJjO31mdW5jdGlvbiBnZXRQb2ludEluU2VnbWVudChwdDEscHQyLHB0MyxwdDQscGVyY2VudCxiZXppZXJEYXRhKXt2YXIgdDE9Z2V0RGlzdGFuY2VQZXJjKHBlcmNlbnQsYmV6aWVyRGF0YSk7dmFyIHUxPTEtdDE7dmFyIHB0WD1tYXRoLnJvdW5kKCh1MSp1MSp1MSpwdDFbMF0rKHQxKnUxKnUxK3UxKnQxKnUxK3UxKnUxKnQxKSpwdDNbMF0rKHQxKnQxKnUxK3UxKnQxKnQxK3QxKnUxKnQxKSpwdDRbMF0rdDEqdDEqdDEqcHQyWzBdKSoxMDAwKS8xMDAwO3ZhciBwdFk9bWF0aC5yb3VuZCgodTEqdTEqdTEqcHQxWzFdKyh0MSp1MSp1MSt1MSp0MSp1MSt1MSp1MSp0MSkqcHQzWzFdKyh0MSp0MSp1MSt1MSp0MSp0MSt0MSp1MSp0MSkqcHQ0WzFdK3QxKnQxKnQxKnB0MlsxXSkqMTAwMCkvMTAwMDtyZXR1cm4gW3B0WCxwdFldO312YXIgYmV6aWVyU2VnbWVudFBvaW50cz1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyw4KTtmdW5jdGlvbiBnZXROZXdTZWdtZW50KHB0MSxwdDIscHQzLHB0NCxzdGFydFBlcmMsZW5kUGVyYyxiZXppZXJEYXRhKXtpZihzdGFydFBlcmM8MCl7c3RhcnRQZXJjPTA7fWVsc2UgaWYoc3RhcnRQZXJjPjEpe3N0YXJ0UGVyYz0xO312YXIgdDA9Z2V0RGlzdGFuY2VQZXJjKHN0YXJ0UGVyYyxiZXppZXJEYXRhKTtlbmRQZXJjPWVuZFBlcmM+MT8xOmVuZFBlcmM7dmFyIHQxPWdldERpc3RhbmNlUGVyYyhlbmRQZXJjLGJlemllckRhdGEpO3ZhciBpO3ZhciBsZW49cHQxLmxlbmd0aDt2YXIgdTA9MS10MDt2YXIgdTE9MS10MTt2YXIgdTB1MHUwPXUwKnUwKnUwO3ZhciB0MHUwdTBfMz10MCp1MCp1MCozOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG52YXIgdDB0MHUwXzM9dDAqdDAqdTAqMzsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxudmFyIHQwdDB0MD10MCp0MCp0MDsvL1xudmFyIHUwdTB1MT11MCp1MCp1MTt2YXIgdDB1MHUxXzM9dDAqdTAqdTErdTAqdDAqdTErdTAqdTAqdDE7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbnZhciB0MHQwdTFfMz10MCp0MCp1MSt1MCp0MCp0MSt0MCp1MCp0MTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxudmFyIHQwdDB0MT10MCp0MCp0MTsvL1xudmFyIHUwdTF1MT11MCp1MSp1MTt2YXIgdDB1MXUxXzM9dDAqdTEqdTErdTAqdDEqdTErdTAqdTEqdDE7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbnZhciB0MHQxdTFfMz10MCp0MSp1MSt1MCp0MSp0MSt0MCp1MSp0MTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxudmFyIHQwdDF0MT10MCp0MSp0MTsvL1xudmFyIHUxdTF1MT11MSp1MSp1MTt2YXIgdDF1MXUxXzM9dDEqdTEqdTErdTEqdDEqdTErdTEqdTEqdDE7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbnZhciB0MXQxdTFfMz10MSp0MSp1MSt1MSp0MSp0MSt0MSp1MSp0MTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxudmFyIHQxdDF0MT10MSp0MSp0MTtmb3IoaT0wO2k8bGVuO2krPTEpe2JlemllclNlZ21lbnRQb2ludHNbaSo0XT1tYXRoLnJvdW5kKCh1MHUwdTAqcHQxW2ldK3QwdTB1MF8zKnB0M1tpXSt0MHQwdTBfMypwdDRbaV0rdDB0MHQwKnB0MltpXSkqMTAwMCkvMTAwMDsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuYmV6aWVyU2VnbWVudFBvaW50c1tpKjQrMV09bWF0aC5yb3VuZCgodTB1MHUxKnB0MVtpXSt0MHUwdTFfMypwdDNbaV0rdDB0MHUxXzMqcHQ0W2ldK3QwdDB0MSpwdDJbaV0pKjEwMDApLzEwMDA7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbmJlemllclNlZ21lbnRQb2ludHNbaSo0KzJdPW1hdGgucm91bmQoKHUwdTF1MSpwdDFbaV0rdDB1MXUxXzMqcHQzW2ldK3QwdDF1MV8zKnB0NFtpXSt0MHQxdDEqcHQyW2ldKSoxMDAwKS8xMDAwOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5iZXppZXJTZWdtZW50UG9pbnRzW2kqNCszXT1tYXRoLnJvdW5kKCh1MXUxdTEqcHQxW2ldK3QxdTF1MV8zKnB0M1tpXSt0MXQxdTFfMypwdDRbaV0rdDF0MXQxKnB0MltpXSkqMTAwMCkvMTAwMDsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxufXJldHVybiBiZXppZXJTZWdtZW50UG9pbnRzO31yZXR1cm4ge2dldFNlZ21lbnRzTGVuZ3RoOmdldFNlZ21lbnRzTGVuZ3RoLGdldE5ld1NlZ21lbnQ6Z2V0TmV3U2VnbWVudCxnZXRQb2ludEluU2VnbWVudDpnZXRQb2ludEluU2VnbWVudCxidWlsZEJlemllckRhdGE6YnVpbGRCZXppZXJEYXRhLHBvaW50T25MaW5lMkQ6cG9pbnRPbkxpbmUyRCxwb2ludE9uTGluZTNEOnBvaW50T25MaW5lM0R9O312YXIgYmV6PWJlekZ1bmN0aW9uKCk7LyogZXhwb3J0ZWQgZGF0YU1hbmFnZXIgKi9mdW5jdGlvbiBkYXRhRnVuY3Rpb25NYW5hZ2VyKCl7Ly8gdmFyIHRDYW52YXNIZWxwZXIgPSBjcmVhdGVUYWcoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJyk7XG5mdW5jdGlvbiBjb21wbGV0ZUxheWVycyhsYXllcnMsY29tcHMsZm9udE1hbmFnZXIpe3ZhciBsYXllckRhdGE7dmFyIGk7dmFyIGxlbj1sYXllcnMubGVuZ3RoO3ZhciBqO3ZhciBqTGVuO3ZhciBrO3ZhciBrTGVuO2ZvcihpPTA7aTxsZW47aSs9MSl7bGF5ZXJEYXRhPWxheWVyc1tpXTtpZigna3MnaW4gbGF5ZXJEYXRhJiYhbGF5ZXJEYXRhLmNvbXBsZXRlZCl7bGF5ZXJEYXRhLmNvbXBsZXRlZD10cnVlO2lmKGxheWVyRGF0YS50dCl7bGF5ZXJzW2ktMV0udGQ9bGF5ZXJEYXRhLnR0O31pZihsYXllckRhdGEuaGFzTWFzayl7dmFyIG1hc2tQcm9wcz1sYXllckRhdGEubWFza3NQcm9wZXJ0aWVzO2pMZW49bWFza1Byb3BzLmxlbmd0aDtmb3Ioaj0wO2o8akxlbjtqKz0xKXtpZihtYXNrUHJvcHNbal0ucHQuay5pKXtjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKG1hc2tQcm9wc1tqXS5wdC5rKTt9ZWxzZSB7a0xlbj1tYXNrUHJvcHNbal0ucHQuay5sZW5ndGg7Zm9yKGs9MDtrPGtMZW47ays9MSl7aWYobWFza1Byb3BzW2pdLnB0Lmtba10ucyl7Y29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhtYXNrUHJvcHNbal0ucHQua1trXS5zWzBdKTt9aWYobWFza1Byb3BzW2pdLnB0Lmtba10uZSl7Y29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhtYXNrUHJvcHNbal0ucHQua1trXS5lWzBdKTt9fX19fWlmKGxheWVyRGF0YS50eT09PTApe2xheWVyRGF0YS5sYXllcnM9ZmluZENvbXBMYXllcnMobGF5ZXJEYXRhLnJlZklkLGNvbXBzKTtjb21wbGV0ZUxheWVycyhsYXllckRhdGEubGF5ZXJzLGNvbXBzLGZvbnRNYW5hZ2VyKTt9ZWxzZSBpZihsYXllckRhdGEudHk9PT00KXtjb21wbGV0ZVNoYXBlcyhsYXllckRhdGEuc2hhcGVzKTt9ZWxzZSBpZihsYXllckRhdGEudHk9PT01KXtjb21wbGV0ZVRleHQobGF5ZXJEYXRhLGZvbnRNYW5hZ2VyKTt9fX19ZnVuY3Rpb24gZmluZENvbXBMYXllcnMoaWQsY29tcHMpe3ZhciBpPTA7dmFyIGxlbj1jb21wcy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKGNvbXBzW2ldLmlkPT09aWQpe2lmKCFjb21wc1tpXS5sYXllcnMuX191c2VkKXtjb21wc1tpXS5sYXllcnMuX191c2VkPXRydWU7cmV0dXJuIGNvbXBzW2ldLmxheWVyczt9cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29tcHNbaV0ubGF5ZXJzKSk7fWkrPTE7fXJldHVybiBudWxsO31mdW5jdGlvbiBjb21wbGV0ZVNoYXBlcyhhcnIpe3ZhciBpO3ZhciBsZW49YXJyLmxlbmd0aDt2YXIgajt2YXIgakxlbjtmb3IoaT1sZW4tMTtpPj0wO2ktPTEpe2lmKGFycltpXS50eT09PSdzaCcpe2lmKGFycltpXS5rcy5rLmkpe2NvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMoYXJyW2ldLmtzLmspO31lbHNlIHtqTGVuPWFycltpXS5rcy5rLmxlbmd0aDtmb3Ioaj0wO2o8akxlbjtqKz0xKXtpZihhcnJbaV0ua3Mua1tqXS5zKXtjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKGFycltpXS5rcy5rW2pdLnNbMF0pO31pZihhcnJbaV0ua3Mua1tqXS5lKXtjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKGFycltpXS5rcy5rW2pdLmVbMF0pO319fX1lbHNlIGlmKGFycltpXS50eT09PSdncicpe2NvbXBsZXRlU2hhcGVzKGFycltpXS5pdCk7fX19ZnVuY3Rpb24gY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhwYXRoKXt2YXIgaTt2YXIgbGVuPXBhdGguaS5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtwYXRoLmlbaV1bMF0rPXBhdGgudltpXVswXTtwYXRoLmlbaV1bMV0rPXBhdGgudltpXVsxXTtwYXRoLm9baV1bMF0rPXBhdGgudltpXVswXTtwYXRoLm9baV1bMV0rPXBhdGgudltpXVsxXTt9fWZ1bmN0aW9uIGNoZWNrVmVyc2lvbihtaW5pbXVtLGFuaW1WZXJzaW9uU3RyaW5nKXt2YXIgYW5pbVZlcnNpb249YW5pbVZlcnNpb25TdHJpbmc/YW5pbVZlcnNpb25TdHJpbmcuc3BsaXQoJy4nKTpbMTAwLDEwMCwxMDBdO2lmKG1pbmltdW1bMF0+YW5pbVZlcnNpb25bMF0pe3JldHVybiB0cnVlO31pZihhbmltVmVyc2lvblswXT5taW5pbXVtWzBdKXtyZXR1cm4gZmFsc2U7fWlmKG1pbmltdW1bMV0+YW5pbVZlcnNpb25bMV0pe3JldHVybiB0cnVlO31pZihhbmltVmVyc2lvblsxXT5taW5pbXVtWzFdKXtyZXR1cm4gZmFsc2U7fWlmKG1pbmltdW1bMl0+YW5pbVZlcnNpb25bMl0pe3JldHVybiB0cnVlO31pZihhbmltVmVyc2lvblsyXT5taW5pbXVtWzJdKXtyZXR1cm4gZmFsc2U7fXJldHVybiBudWxsO312YXIgY2hlY2tUZXh0PWZ1bmN0aW9uKCl7dmFyIG1pbmltdW1WZXJzaW9uPVs0LDQsMTRdO2Z1bmN0aW9uIHVwZGF0ZVRleHRMYXllcih0ZXh0TGF5ZXIpe3ZhciBkb2N1bWVudERhdGE9dGV4dExheWVyLnQuZDt0ZXh0TGF5ZXIudC5kPXtrOlt7czpkb2N1bWVudERhdGEsdDowfV19O31mdW5jdGlvbiBpdGVyYXRlTGF5ZXJzKGxheWVycyl7dmFyIGk7dmFyIGxlbj1sYXllcnMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYobGF5ZXJzW2ldLnR5PT09NSl7dXBkYXRlVGV4dExheWVyKGxheWVyc1tpXSk7fX19cmV0dXJuIGZ1bmN0aW9uKGFuaW1hdGlvbkRhdGEpe2lmKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbixhbmltYXRpb25EYXRhLnYpKXtpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEubGF5ZXJzKTtpZihhbmltYXRpb25EYXRhLmFzc2V0cyl7dmFyIGk7dmFyIGxlbj1hbmltYXRpb25EYXRhLmFzc2V0cy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZihhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpe2l0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKTt9fX19fTt9KCk7dmFyIGNoZWNrQ2hhcnM9ZnVuY3Rpb24oKXt2YXIgbWluaW11bVZlcnNpb249WzQsNyw5OV07cmV0dXJuIGZ1bmN0aW9uKGFuaW1hdGlvbkRhdGEpe2lmKGFuaW1hdGlvbkRhdGEuY2hhcnMmJiFjaGVja1ZlcnNpb24obWluaW11bVZlcnNpb24sYW5pbWF0aW9uRGF0YS52KSl7dmFyIGk7dmFyIGxlbj1hbmltYXRpb25EYXRhLmNoYXJzLmxlbmd0aDt2YXIgajt2YXIgakxlbjt2YXIgcGF0aERhdGE7dmFyIHBhdGhzO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoYW5pbWF0aW9uRGF0YS5jaGFyc1tpXS5kYXRhJiZhbmltYXRpb25EYXRhLmNoYXJzW2ldLmRhdGEuc2hhcGVzKXtwYXRocz1hbmltYXRpb25EYXRhLmNoYXJzW2ldLmRhdGEuc2hhcGVzWzBdLml0O2pMZW49cGF0aHMubGVuZ3RoO2ZvcihqPTA7ajxqTGVuO2orPTEpe3BhdGhEYXRhPXBhdGhzW2pdLmtzLms7aWYoIXBhdGhEYXRhLl9fY29udmVydGVkKXtjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKHBhdGhzW2pdLmtzLmspO3BhdGhEYXRhLl9fY29udmVydGVkPXRydWU7fX19fX19O30oKTt2YXIgY2hlY2tDb2xvcnM9ZnVuY3Rpb24oKXt2YXIgbWluaW11bVZlcnNpb249WzQsMSw5XTtmdW5jdGlvbiBpdGVyYXRlU2hhcGVzKHNoYXBlcyl7dmFyIGk7dmFyIGxlbj1zaGFwZXMubGVuZ3RoO3ZhciBqO3ZhciBqTGVuO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoc2hhcGVzW2ldLnR5PT09J2dyJyl7aXRlcmF0ZVNoYXBlcyhzaGFwZXNbaV0uaXQpO31lbHNlIGlmKHNoYXBlc1tpXS50eT09PSdmbCd8fHNoYXBlc1tpXS50eT09PSdzdCcpe2lmKHNoYXBlc1tpXS5jLmsmJnNoYXBlc1tpXS5jLmtbMF0uaSl7akxlbj1zaGFwZXNbaV0uYy5rLmxlbmd0aDtmb3Ioaj0wO2o8akxlbjtqKz0xKXtpZihzaGFwZXNbaV0uYy5rW2pdLnMpe3NoYXBlc1tpXS5jLmtbal0uc1swXS89MjU1O3NoYXBlc1tpXS5jLmtbal0uc1sxXS89MjU1O3NoYXBlc1tpXS5jLmtbal0uc1syXS89MjU1O3NoYXBlc1tpXS5jLmtbal0uc1szXS89MjU1O31pZihzaGFwZXNbaV0uYy5rW2pdLmUpe3NoYXBlc1tpXS5jLmtbal0uZVswXS89MjU1O3NoYXBlc1tpXS5jLmtbal0uZVsxXS89MjU1O3NoYXBlc1tpXS5jLmtbal0uZVsyXS89MjU1O3NoYXBlc1tpXS5jLmtbal0uZVszXS89MjU1O319fWVsc2Uge3NoYXBlc1tpXS5jLmtbMF0vPTI1NTtzaGFwZXNbaV0uYy5rWzFdLz0yNTU7c2hhcGVzW2ldLmMua1syXS89MjU1O3NoYXBlc1tpXS5jLmtbM10vPTI1NTt9fX19ZnVuY3Rpb24gaXRlcmF0ZUxheWVycyhsYXllcnMpe3ZhciBpO3ZhciBsZW49bGF5ZXJzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKGxheWVyc1tpXS50eT09PTQpe2l0ZXJhdGVTaGFwZXMobGF5ZXJzW2ldLnNoYXBlcyk7fX19cmV0dXJuIGZ1bmN0aW9uKGFuaW1hdGlvbkRhdGEpe2lmKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbixhbmltYXRpb25EYXRhLnYpKXtpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEubGF5ZXJzKTtpZihhbmltYXRpb25EYXRhLmFzc2V0cyl7dmFyIGk7dmFyIGxlbj1hbmltYXRpb25EYXRhLmFzc2V0cy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZihhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpe2l0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKTt9fX19fTt9KCk7dmFyIGNoZWNrU2hhcGVzPWZ1bmN0aW9uKCl7dmFyIG1pbmltdW1WZXJzaW9uPVs0LDQsMThdO2Z1bmN0aW9uIGNvbXBsZXRlQ2xvc2luZ1NoYXBlcyhhcnIpe3ZhciBpO3ZhciBsZW49YXJyLmxlbmd0aDt2YXIgajt2YXIgakxlbjtmb3IoaT1sZW4tMTtpPj0wO2ktPTEpe2lmKGFycltpXS50eT09PSdzaCcpe2lmKGFycltpXS5rcy5rLmkpe2FycltpXS5rcy5rLmM9YXJyW2ldLmNsb3NlZDt9ZWxzZSB7akxlbj1hcnJbaV0ua3Muay5sZW5ndGg7Zm9yKGo9MDtqPGpMZW47ais9MSl7aWYoYXJyW2ldLmtzLmtbal0ucyl7YXJyW2ldLmtzLmtbal0uc1swXS5jPWFycltpXS5jbG9zZWQ7fWlmKGFycltpXS5rcy5rW2pdLmUpe2FycltpXS5rcy5rW2pdLmVbMF0uYz1hcnJbaV0uY2xvc2VkO319fX1lbHNlIGlmKGFycltpXS50eT09PSdncicpe2NvbXBsZXRlQ2xvc2luZ1NoYXBlcyhhcnJbaV0uaXQpO319fWZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKXt2YXIgbGF5ZXJEYXRhO3ZhciBpO3ZhciBsZW49bGF5ZXJzLmxlbmd0aDt2YXIgajt2YXIgakxlbjt2YXIgazt2YXIga0xlbjtmb3IoaT0wO2k8bGVuO2krPTEpe2xheWVyRGF0YT1sYXllcnNbaV07aWYobGF5ZXJEYXRhLmhhc01hc2spe3ZhciBtYXNrUHJvcHM9bGF5ZXJEYXRhLm1hc2tzUHJvcGVydGllcztqTGVuPW1hc2tQcm9wcy5sZW5ndGg7Zm9yKGo9MDtqPGpMZW47ais9MSl7aWYobWFza1Byb3BzW2pdLnB0LmsuaSl7bWFza1Byb3BzW2pdLnB0LmsuYz1tYXNrUHJvcHNbal0uY2w7fWVsc2Uge2tMZW49bWFza1Byb3BzW2pdLnB0LmsubGVuZ3RoO2ZvcihrPTA7azxrTGVuO2srPTEpe2lmKG1hc2tQcm9wc1tqXS5wdC5rW2tdLnMpe21hc2tQcm9wc1tqXS5wdC5rW2tdLnNbMF0uYz1tYXNrUHJvcHNbal0uY2w7fWlmKG1hc2tQcm9wc1tqXS5wdC5rW2tdLmUpe21hc2tQcm9wc1tqXS5wdC5rW2tdLmVbMF0uYz1tYXNrUHJvcHNbal0uY2w7fX19fX1pZihsYXllckRhdGEudHk9PT00KXtjb21wbGV0ZUNsb3NpbmdTaGFwZXMobGF5ZXJEYXRhLnNoYXBlcyk7fX19cmV0dXJuIGZ1bmN0aW9uKGFuaW1hdGlvbkRhdGEpe2lmKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbixhbmltYXRpb25EYXRhLnYpKXtpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEubGF5ZXJzKTtpZihhbmltYXRpb25EYXRhLmFzc2V0cyl7dmFyIGk7dmFyIGxlbj1hbmltYXRpb25EYXRhLmFzc2V0cy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZihhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpe2l0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKTt9fX19fTt9KCk7ZnVuY3Rpb24gY29tcGxldGVEYXRhKGFuaW1hdGlvbkRhdGEsZm9udE1hbmFnZXIpe2lmKGFuaW1hdGlvbkRhdGEuX19jb21wbGV0ZSl7cmV0dXJuO31jaGVja0NvbG9ycyhhbmltYXRpb25EYXRhKTtjaGVja1RleHQoYW5pbWF0aW9uRGF0YSk7Y2hlY2tDaGFycyhhbmltYXRpb25EYXRhKTtjaGVja1NoYXBlcyhhbmltYXRpb25EYXRhKTtjb21wbGV0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyxhbmltYXRpb25EYXRhLmFzc2V0cyxmb250TWFuYWdlcik7YW5pbWF0aW9uRGF0YS5fX2NvbXBsZXRlPXRydWU7fWZ1bmN0aW9uIGNvbXBsZXRlVGV4dChkYXRhKXtpZihkYXRhLnQuYS5sZW5ndGg9PT0wJiYhKCdtJ2luIGRhdGEudC5wKSl7ZGF0YS5zaW5nbGVTaGFwZT10cnVlO319dmFyIG1vZHVsZU9iPXt9O21vZHVsZU9iLmNvbXBsZXRlRGF0YT1jb21wbGV0ZURhdGE7bW9kdWxlT2IuY2hlY2tDb2xvcnM9Y2hlY2tDb2xvcnM7bW9kdWxlT2IuY2hlY2tDaGFycz1jaGVja0NoYXJzO21vZHVsZU9iLmNoZWNrU2hhcGVzPWNoZWNrU2hhcGVzO21vZHVsZU9iLmNvbXBsZXRlTGF5ZXJzPWNvbXBsZXRlTGF5ZXJzO3JldHVybiBtb2R1bGVPYjt9dmFyIGRhdGFNYW5hZ2VyPWRhdGFGdW5jdGlvbk1hbmFnZXIoKTsvKiBleHBvcnRlZCBnZXRGb250UHJvcGVydGllcyAqL2Z1bmN0aW9uIGdldEZvbnRQcm9wZXJ0aWVzKGZvbnREYXRhKXt2YXIgc3R5bGVzPWZvbnREYXRhLmZTdHlsZT9mb250RGF0YS5mU3R5bGUuc3BsaXQoJyAnKTpbXTt2YXIgZldlaWdodD0nbm9ybWFsJzt2YXIgZlN0eWxlPSdub3JtYWwnO3ZhciBsZW49c3R5bGVzLmxlbmd0aDt2YXIgc3R5bGVOYW1lO2Zvcih2YXIgaT0wO2k8bGVuO2krPTEpe3N0eWxlTmFtZT1zdHlsZXNbaV0udG9Mb3dlckNhc2UoKTtzd2l0Y2goc3R5bGVOYW1lKXtjYXNlJ2l0YWxpYyc6ZlN0eWxlPSdpdGFsaWMnO2JyZWFrO2Nhc2UnYm9sZCc6ZldlaWdodD0nNzAwJzticmVhaztjYXNlJ2JsYWNrJzpmV2VpZ2h0PSc5MDAnO2JyZWFrO2Nhc2UnbWVkaXVtJzpmV2VpZ2h0PSc1MDAnO2JyZWFrO2Nhc2UncmVndWxhcic6Y2FzZSdub3JtYWwnOmZXZWlnaHQ9JzQwMCc7YnJlYWs7Y2FzZSdsaWdodCc6Y2FzZSd0aGluJzpmV2VpZ2h0PScyMDAnO2JyZWFrO2RlZmF1bHQ6YnJlYWs7fX1yZXR1cm4ge3N0eWxlOmZTdHlsZSx3ZWlnaHQ6Zm9udERhdGEuZldlaWdodHx8ZldlaWdodH07fS8qIGdsb2JhbCBjcmVhdGVOUywgY3JlYXRlVGFnLCBnZXRGb250UHJvcGVydGllcyAqLyAvKiBleHBvcnRlZCBGb250TWFuYWdlciAqL3ZhciBGb250TWFuYWdlcj1mdW5jdGlvbigpe3ZhciBtYXhXYWl0aW5nVGltZT01MDAwO3ZhciBlbXB0eUNoYXI9e3c6MCxzaXplOjAsc2hhcGVzOltdfTt2YXIgY29tYmluZWRDaGFyYWN0ZXJzPVtdOy8vIEhpbmRpIGNoYXJhY3RlcnNcbmNvbWJpbmVkQ2hhcmFjdGVycz1jb21iaW5lZENoYXJhY3RlcnMuY29uY2F0KFsyMzA0LDIzMDUsMjMwNiwyMzA3LDIzNjIsMjM2MywyMzY0LDIzNjQsMjM2NiwyMzY3LDIzNjgsMjM2OSwyMzcwLDIzNzEsMjM3MiwyMzczLDIzNzQsMjM3NSwyMzc2LDIzNzcsMjM3OCwyMzc5LDIzODAsMjM4MSwyMzgyLDIzODMsMjM4NywyMzg4LDIzODksMjM5MCwyMzkxLDI0MDIsMjQwM10pO2Z1bmN0aW9uIHRyaW1Gb250T3B0aW9ucyhmb250KXt2YXIgZmFtaWx5QXJyYXk9Zm9udC5zcGxpdCgnLCcpO3ZhciBpO3ZhciBsZW49ZmFtaWx5QXJyYXkubGVuZ3RoO3ZhciBlbmFibGVkRmFtaWxpZXM9W107Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZihmYW1pbHlBcnJheVtpXSE9PSdzYW5zLXNlcmlmJyYmZmFtaWx5QXJyYXlbaV0hPT0nbW9ub3NwYWNlJyl7ZW5hYmxlZEZhbWlsaWVzLnB1c2goZmFtaWx5QXJyYXlbaV0pO319cmV0dXJuIGVuYWJsZWRGYW1pbGllcy5qb2luKCcsJyk7fWZ1bmN0aW9uIHNldFVwTm9kZShmb250LGZhbWlseSl7dmFyIHBhcmVudE5vZGU9Y3JlYXRlVGFnKCdzcGFuJyk7cGFyZW50Tm9kZS5zdHlsZS5mb250RmFtaWx5PWZhbWlseTt2YXIgbm9kZT1jcmVhdGVUYWcoJ3NwYW4nKTsvLyBDaGFyYWN0ZXJzIHRoYXQgdmFyeSBzaWduaWZpY2FudGx5IGFtb25nIGRpZmZlcmVudCBmb250c1xubm9kZS5pbm5lclRleHQ9J2dpSXRUMVdReUAhLS8jJzsvLyBWaXNpYmxlIC0gc28gd2UgY2FuIG1lYXN1cmUgaXQgLSBidXQgbm90IG9uIHRoZSBzY3JlZW5cbnBhcmVudE5vZGUuc3R5bGUucG9zaXRpb249J2Fic29sdXRlJztwYXJlbnROb2RlLnN0eWxlLmxlZnQ9Jy0xMDAwMHB4JztwYXJlbnROb2RlLnN0eWxlLnRvcD0nLTEwMDAwcHgnOy8vIExhcmdlIGZvbnQgc2l6ZSBtYWtlcyBldmVuIHN1YnRsZSBjaGFuZ2VzIG9idmlvdXNcbnBhcmVudE5vZGUuc3R5bGUuZm9udFNpemU9JzMwMHB4JzsvLyBSZXNldCBhbnkgZm9udCBwcm9wZXJ0aWVzXG5wYXJlbnROb2RlLnN0eWxlLmZvbnRWYXJpYW50PSdub3JtYWwnO3BhcmVudE5vZGUuc3R5bGUuZm9udFN0eWxlPSdub3JtYWwnO3BhcmVudE5vZGUuc3R5bGUuZm9udFdlaWdodD0nbm9ybWFsJztwYXJlbnROb2RlLnN0eWxlLmxldHRlclNwYWNpbmc9JzAnO3BhcmVudE5vZGUuYXBwZW5kQ2hpbGQobm9kZSk7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwYXJlbnROb2RlKTsvLyBSZW1lbWJlciB3aWR0aCB3aXRoIG5vIGFwcGxpZWQgd2ViIGZvbnRcbnZhciB3aWR0aD1ub2RlLm9mZnNldFdpZHRoO25vZGUuc3R5bGUuZm9udEZhbWlseT10cmltRm9udE9wdGlvbnMoZm9udCkrJywgJytmYW1pbHk7cmV0dXJuIHtub2RlOm5vZGUsdzp3aWR0aCxwYXJlbnQ6cGFyZW50Tm9kZX07fWZ1bmN0aW9uIGNoZWNrTG9hZGVkRm9udHMoKXt2YXIgaTt2YXIgbGVuPXRoaXMuZm9udHMubGVuZ3RoO3ZhciBub2RlO3ZhciB3O3ZhciBsb2FkZWRDb3VudD1sZW47Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZih0aGlzLmZvbnRzW2ldLmxvYWRlZCl7bG9hZGVkQ291bnQtPTE7fWVsc2UgaWYodGhpcy5mb250c1tpXS5mT3JpZ2luPT09J24nfHx0aGlzLmZvbnRzW2ldLm9yaWdpbj09PTApe3RoaXMuZm9udHNbaV0ubG9hZGVkPXRydWU7fWVsc2Uge25vZGU9dGhpcy5mb250c1tpXS5tb25vQ2FzZS5ub2RlO3c9dGhpcy5mb250c1tpXS5tb25vQ2FzZS53O2lmKG5vZGUub2Zmc2V0V2lkdGghPT13KXtsb2FkZWRDb3VudC09MTt0aGlzLmZvbnRzW2ldLmxvYWRlZD10cnVlO31lbHNlIHtub2RlPXRoaXMuZm9udHNbaV0uc2Fuc0Nhc2Uubm9kZTt3PXRoaXMuZm9udHNbaV0uc2Fuc0Nhc2UudztpZihub2RlLm9mZnNldFdpZHRoIT09dyl7bG9hZGVkQ291bnQtPTE7dGhpcy5mb250c1tpXS5sb2FkZWQ9dHJ1ZTt9fWlmKHRoaXMuZm9udHNbaV0ubG9hZGVkKXt0aGlzLmZvbnRzW2ldLnNhbnNDYXNlLnBhcmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9udHNbaV0uc2Fuc0Nhc2UucGFyZW50KTt0aGlzLmZvbnRzW2ldLm1vbm9DYXNlLnBhcmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9udHNbaV0ubW9ub0Nhc2UucGFyZW50KTt9fX1pZihsb2FkZWRDb3VudCE9PTAmJkRhdGUubm93KCktdGhpcy5pbml0VGltZTxtYXhXYWl0aW5nVGltZSl7c2V0VGltZW91dCh0aGlzLmNoZWNrTG9hZGVkRm9udHNCaW5kZWQsMjApO31lbHNlIHtzZXRUaW1lb3V0KHRoaXMuc2V0SXNMb2FkZWRCaW5kZWQsMTApO319ZnVuY3Rpb24gY3JlYXRlSGVscGVyKGRlZixmb250RGF0YSl7dmFyIHRIZWxwZXI9Y3JlYXRlTlMoJ3RleHQnKTt0SGVscGVyLnN0eWxlLmZvbnRTaXplPScxMDBweCc7Ly8gdEhlbHBlci5zdHlsZS5mb250RmFtaWx5ID0gZm9udERhdGEuZkZhbWlseTtcbnZhciBmb250UHJvcHM9Z2V0Rm9udFByb3BlcnRpZXMoZm9udERhdGEpO3RIZWxwZXIuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsZm9udERhdGEuZkZhbWlseSk7dEhlbHBlci5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc3R5bGUnLGZvbnRQcm9wcy5zdHlsZSk7dEhlbHBlci5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0Jyxmb250UHJvcHMud2VpZ2h0KTt0SGVscGVyLnRleHRDb250ZW50PScxJztpZihmb250RGF0YS5mQ2xhc3Mpe3RIZWxwZXIuc3R5bGUuZm9udEZhbWlseT0naW5oZXJpdCc7dEhlbHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJyxmb250RGF0YS5mQ2xhc3MpO31lbHNlIHt0SGVscGVyLnN0eWxlLmZvbnRGYW1pbHk9Zm9udERhdGEuZkZhbWlseTt9ZGVmLmFwcGVuZENoaWxkKHRIZWxwZXIpO3ZhciB0Q2FudmFzSGVscGVyPWNyZWF0ZVRhZygnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTt0Q2FudmFzSGVscGVyLmZvbnQ9Zm9udERhdGEuZldlaWdodCsnICcrZm9udERhdGEuZlN0eWxlKycgMTAwcHggJytmb250RGF0YS5mRmFtaWx5Oy8vIHRDYW52YXNIZWxwZXIuZm9udCA9ICcgMTAwcHggJysgZm9udERhdGEuZkZhbWlseTtcbnJldHVybiB0SGVscGVyO31mdW5jdGlvbiBhZGRGb250cyhmb250RGF0YSxkZWZzKXtpZighZm9udERhdGEpe3RoaXMuaXNMb2FkZWQ9dHJ1ZTtyZXR1cm47fWlmKHRoaXMuY2hhcnMpe3RoaXMuaXNMb2FkZWQ9dHJ1ZTt0aGlzLmZvbnRzPWZvbnREYXRhLmxpc3Q7cmV0dXJuO312YXIgZm9udEFycj1mb250RGF0YS5saXN0O3ZhciBpO3ZhciBsZW49Zm9udEFyci5sZW5ndGg7dmFyIF9wZW5kaW5nRm9udHM9bGVuO2ZvcihpPTA7aTxsZW47aSs9MSl7dmFyIHNob3VsZExvYWRGb250PXRydWU7dmFyIGxvYWRlZFNlbGVjdG9yO3ZhciBqO2ZvbnRBcnJbaV0ubG9hZGVkPWZhbHNlO2ZvbnRBcnJbaV0ubW9ub0Nhc2U9c2V0VXBOb2RlKGZvbnRBcnJbaV0uZkZhbWlseSwnbW9ub3NwYWNlJyk7Zm9udEFycltpXS5zYW5zQ2FzZT1zZXRVcE5vZGUoZm9udEFycltpXS5mRmFtaWx5LCdzYW5zLXNlcmlmJyk7aWYoIWZvbnRBcnJbaV0uZlBhdGgpe2ZvbnRBcnJbaV0ubG9hZGVkPXRydWU7X3BlbmRpbmdGb250cy09MTt9ZWxzZSBpZihmb250QXJyW2ldLmZPcmlnaW49PT0ncCd8fGZvbnRBcnJbaV0ub3JpZ2luPT09Myl7bG9hZGVkU2VsZWN0b3I9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbZi1mb3JpZ2luPVwicFwiXVtmLWZhbWlseT1cIicrZm9udEFycltpXS5mRmFtaWx5KydcIl0sIHN0eWxlW2Ytb3JpZ2luPVwiM1wiXVtmLWZhbWlseT1cIicrZm9udEFycltpXS5mRmFtaWx5KydcIl0nKTtpZihsb2FkZWRTZWxlY3Rvci5sZW5ndGg+MCl7c2hvdWxkTG9hZEZvbnQ9ZmFsc2U7fWlmKHNob3VsZExvYWRGb250KXt2YXIgcz1jcmVhdGVUYWcoJ3N0eWxlJyk7cy5zZXRBdHRyaWJ1dGUoJ2YtZm9yaWdpbicsZm9udEFycltpXS5mT3JpZ2luKTtzLnNldEF0dHJpYnV0ZSgnZi1vcmlnaW4nLGZvbnRBcnJbaV0ub3JpZ2luKTtzLnNldEF0dHJpYnV0ZSgnZi1mYW1pbHknLGZvbnRBcnJbaV0uZkZhbWlseSk7cy50eXBlPSd0ZXh0L2Nzcyc7cy5pbm5lclRleHQ9J0Bmb250LWZhY2Uge2ZvbnQtZmFtaWx5OiAnK2ZvbnRBcnJbaV0uZkZhbWlseStcIjsgZm9udC1zdHlsZTogbm9ybWFsOyBzcmM6IHVybCgnXCIrZm9udEFycltpXS5mUGF0aCtcIicpO31cIjtkZWZzLmFwcGVuZENoaWxkKHMpO319ZWxzZSBpZihmb250QXJyW2ldLmZPcmlnaW49PT0nZyd8fGZvbnRBcnJbaV0ub3JpZ2luPT09MSl7bG9hZGVkU2VsZWN0b3I9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGlua1tmLWZvcmlnaW49XCJnXCJdLCBsaW5rW2Ytb3JpZ2luPVwiMVwiXScpO2ZvcihqPTA7ajxsb2FkZWRTZWxlY3Rvci5sZW5ndGg7ais9MSl7aWYobG9hZGVkU2VsZWN0b3Jbal0uaHJlZi5pbmRleE9mKGZvbnRBcnJbaV0uZlBhdGgpIT09LTEpey8vIEZvbnQgaXMgYWxyZWFkeSBsb2FkZWRcbnNob3VsZExvYWRGb250PWZhbHNlO319aWYoc2hvdWxkTG9hZEZvbnQpe3ZhciBsPWNyZWF0ZVRhZygnbGluaycpO2wuc2V0QXR0cmlidXRlKCdmLWZvcmlnaW4nLGZvbnRBcnJbaV0uZk9yaWdpbik7bC5zZXRBdHRyaWJ1dGUoJ2Ytb3JpZ2luJyxmb250QXJyW2ldLm9yaWdpbik7bC50eXBlPSd0ZXh0L2Nzcyc7bC5yZWw9J3N0eWxlc2hlZXQnO2wuaHJlZj1mb250QXJyW2ldLmZQYXRoO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobCk7fX1lbHNlIGlmKGZvbnRBcnJbaV0uZk9yaWdpbj09PSd0J3x8Zm9udEFycltpXS5vcmlnaW49PT0yKXtsb2FkZWRTZWxlY3Rvcj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHRbZi1mb3JpZ2luPVwidFwiXSwgc2NyaXB0W2Ytb3JpZ2luPVwiMlwiXScpO2ZvcihqPTA7ajxsb2FkZWRTZWxlY3Rvci5sZW5ndGg7ais9MSl7aWYoZm9udEFycltpXS5mUGF0aD09PWxvYWRlZFNlbGVjdG9yW2pdLnNyYyl7Ly8gRm9udCBpcyBhbHJlYWR5IGxvYWRlZFxuc2hvdWxkTG9hZEZvbnQ9ZmFsc2U7fX1pZihzaG91bGRMb2FkRm9udCl7dmFyIHNjPWNyZWF0ZVRhZygnbGluaycpO3NjLnNldEF0dHJpYnV0ZSgnZi1mb3JpZ2luJyxmb250QXJyW2ldLmZPcmlnaW4pO3NjLnNldEF0dHJpYnV0ZSgnZi1vcmlnaW4nLGZvbnRBcnJbaV0ub3JpZ2luKTtzYy5zZXRBdHRyaWJ1dGUoJ3JlbCcsJ3N0eWxlc2hlZXQnKTtzYy5zZXRBdHRyaWJ1dGUoJ2hyZWYnLGZvbnRBcnJbaV0uZlBhdGgpO2RlZnMuYXBwZW5kQ2hpbGQoc2MpO319Zm9udEFycltpXS5oZWxwZXI9Y3JlYXRlSGVscGVyKGRlZnMsZm9udEFycltpXSk7Zm9udEFycltpXS5jYWNoZT17fTt0aGlzLmZvbnRzLnB1c2goZm9udEFycltpXSk7fWlmKF9wZW5kaW5nRm9udHM9PT0wKXt0aGlzLmlzTG9hZGVkPXRydWU7fWVsc2Ugey8vIE9uIHNvbWUgY2FzZXMgZXZlbiBpZiB0aGUgZm9udCBpcyBsb2FkZWQsIGl0IHdvbid0IGxvYWQgY29ycmVjdGx5IHdoZW4gbWVhc3VyaW5nIHRleHQgb24gY2FudmFzLlxuLy8gQWRkaW5nIHRoaXMgdGltZW91dCBzZWVtcyB0byBmaXggaXRcbnNldFRpbWVvdXQodGhpcy5jaGVja0xvYWRlZEZvbnRzLmJpbmQodGhpcyksMTAwKTt9fWZ1bmN0aW9uIGFkZENoYXJzKGNoYXJzKXtpZighY2hhcnMpe3JldHVybjt9aWYoIXRoaXMuY2hhcnMpe3RoaXMuY2hhcnM9W107fXZhciBpO3ZhciBsZW49Y2hhcnMubGVuZ3RoO3ZhciBqO3ZhciBqTGVuPXRoaXMuY2hhcnMubGVuZ3RoO3ZhciBmb3VuZDtmb3IoaT0wO2k8bGVuO2krPTEpe2o9MDtmb3VuZD1mYWxzZTt3aGlsZShqPGpMZW4pe2lmKHRoaXMuY2hhcnNbal0uc3R5bGU9PT1jaGFyc1tpXS5zdHlsZSYmdGhpcy5jaGFyc1tqXS5mRmFtaWx5PT09Y2hhcnNbaV0uZkZhbWlseSYmdGhpcy5jaGFyc1tqXS5jaD09PWNoYXJzW2ldLmNoKXtmb3VuZD10cnVlO31qKz0xO31pZighZm91bmQpe3RoaXMuY2hhcnMucHVzaChjaGFyc1tpXSk7akxlbis9MTt9fX1mdW5jdGlvbiBnZXRDaGFyRGF0YShjaGFyLHN0eWxlLGZvbnQpe3ZhciBpPTA7dmFyIGxlbj10aGlzLmNoYXJzLmxlbmd0aDt3aGlsZShpPGxlbil7aWYodGhpcy5jaGFyc1tpXS5jaD09PWNoYXImJnRoaXMuY2hhcnNbaV0uc3R5bGU9PT1zdHlsZSYmdGhpcy5jaGFyc1tpXS5mRmFtaWx5PT09Zm9udCl7cmV0dXJuIHRoaXMuY2hhcnNbaV07fWkrPTE7fWlmKCh0eXBlb2YgY2hhcj09PSdzdHJpbmcnJiZjaGFyLmNoYXJDb2RlQXQoMCkhPT0xM3x8IWNoYXIpJiZjb25zb2xlJiZjb25zb2xlLndhcm4vLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiYmIXRoaXMuX3dhcm5lZCl7dGhpcy5fd2FybmVkPXRydWU7Y29uc29sZS53YXJuKCdNaXNzaW5nIGNoYXJhY3RlciBmcm9tIGV4cG9ydGVkIGNoYXJhY3RlcnMgbGlzdDogJyxjaGFyLHN0eWxlLGZvbnQpOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxufXJldHVybiBlbXB0eUNoYXI7fWZ1bmN0aW9uIG1lYXN1cmVUZXh0KGNoYXIsZm9udE5hbWUsc2l6ZSl7dmFyIGZvbnREYXRhPXRoaXMuZ2V0Rm9udEJ5TmFtZShmb250TmFtZSk7dmFyIGluZGV4PWNoYXIuY2hhckNvZGVBdCgwKTtpZighZm9udERhdGEuY2FjaGVbaW5kZXgrMV0pe3ZhciB0SGVscGVyPWZvbnREYXRhLmhlbHBlcjsvLyBDYW52YXMgdmVyc2lvblxuLy8gZm9udERhdGEuY2FjaGVbaW5kZXhdID0gdEhlbHBlci5tZWFzdXJlVGV4dChjaGFyKS53aWR0aCAvIDEwMDtcbi8vIFNWRyB2ZXJzaW9uXG4vLyBjb25zb2xlLmxvZyh0SGVscGVyLmdldEJCb3goKS53aWR0aClcbmlmKGNoYXI9PT0nICcpe3RIZWxwZXIudGV4dENvbnRlbnQ9J3wnK2NoYXIrJ3wnO3ZhciBkb3VibGVTaXplPXRIZWxwZXIuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCk7dEhlbHBlci50ZXh0Q29udGVudD0nfHwnO3ZhciBzaW5nbGVTaXplPXRIZWxwZXIuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCk7Zm9udERhdGEuY2FjaGVbaW5kZXgrMV09KGRvdWJsZVNpemUtc2luZ2xlU2l6ZSkvMTAwO31lbHNlIHt0SGVscGVyLnRleHRDb250ZW50PWNoYXI7Zm9udERhdGEuY2FjaGVbaW5kZXgrMV09dEhlbHBlci5nZXRDb21wdXRlZFRleHRMZW5ndGgoKS8xMDA7fX1yZXR1cm4gZm9udERhdGEuY2FjaGVbaW5kZXgrMV0qc2l6ZTt9ZnVuY3Rpb24gZ2V0Rm9udEJ5TmFtZShuYW1lKXt2YXIgaT0wO3ZhciBsZW49dGhpcy5mb250cy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKHRoaXMuZm9udHNbaV0uZk5hbWU9PT1uYW1lKXtyZXR1cm4gdGhpcy5mb250c1tpXTt9aSs9MTt9cmV0dXJuIHRoaXMuZm9udHNbMF07fWZ1bmN0aW9uIGdldENvbWJpbmVkQ2hhcmFjdGVyQ29kZXMoKXtyZXR1cm4gY29tYmluZWRDaGFyYWN0ZXJzO31mdW5jdGlvbiBzZXRJc0xvYWRlZCgpe3RoaXMuaXNMb2FkZWQ9dHJ1ZTt9dmFyIEZvbnQ9ZnVuY3Rpb24gRm9udCgpe3RoaXMuZm9udHM9W107dGhpcy5jaGFycz1udWxsO3RoaXMudHlwZWtpdExvYWRlZD0wO3RoaXMuaXNMb2FkZWQ9ZmFsc2U7dGhpcy5fd2FybmVkPWZhbHNlO3RoaXMuaW5pdFRpbWU9RGF0ZS5ub3coKTt0aGlzLnNldElzTG9hZGVkQmluZGVkPXRoaXMuc2V0SXNMb2FkZWQuYmluZCh0aGlzKTt0aGlzLmNoZWNrTG9hZGVkRm9udHNCaW5kZWQ9dGhpcy5jaGVja0xvYWRlZEZvbnRzLmJpbmQodGhpcyk7fTsvLyBUT0RPOiBmb3Igbm93IEknbSBhZGRpbmcgdGhlc2UgbWV0aG9kcyB0byB0aGUgQ2xhc3MgYW5kIG5vdCB0aGUgcHJvdG90eXBlLiBUaGluayBvZiBhIGJldHRlciB3YXkgdG8gaW1wbGVtZW50IGl0LlxuRm9udC5nZXRDb21iaW5lZENoYXJhY3RlckNvZGVzPWdldENvbWJpbmVkQ2hhcmFjdGVyQ29kZXM7dmFyIGZvbnRQcm90b3R5cGU9e2FkZENoYXJzOmFkZENoYXJzLGFkZEZvbnRzOmFkZEZvbnRzLGdldENoYXJEYXRhOmdldENoYXJEYXRhLGdldEZvbnRCeU5hbWU6Z2V0Rm9udEJ5TmFtZSxtZWFzdXJlVGV4dDptZWFzdXJlVGV4dCxjaGVja0xvYWRlZEZvbnRzOmNoZWNrTG9hZGVkRm9udHMsc2V0SXNMb2FkZWQ6c2V0SXNMb2FkZWR9O0ZvbnQucHJvdG90eXBlPWZvbnRQcm90b3R5cGU7cmV0dXJuIEZvbnQ7fSgpOy8qIGdsb2JhbCBpbml0aWFsRGVmYXVsdEZyYW1lLCBCZXppZXJGYWN0b3J5LCBkZWdUb1JhZHMsIGJleiwgY3JlYXRlVHlwZWRBcnJheSAqLyAvKiBleHBvcnRlZCBQcm9wZXJ0eUZhY3RvcnkgKi92YXIgUHJvcGVydHlGYWN0b3J5PWZ1bmN0aW9uKCl7dmFyIGluaXRGcmFtZT1pbml0aWFsRGVmYXVsdEZyYW1lO3ZhciBtYXRoQWJzPU1hdGguYWJzO2Z1bmN0aW9uIGludGVycG9sYXRlVmFsdWUoZnJhbWVOdW0sY2FjaGluZyl7dmFyIG9mZnNldFRpbWU9dGhpcy5vZmZzZXRUaW1lO3ZhciBuZXdWYWx1ZTtpZih0aGlzLnByb3BUeXBlPT09J211bHRpZGltZW5zaW9uYWwnKXtuZXdWYWx1ZT1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyx0aGlzLnB2Lmxlbmd0aCk7fXZhciBpdGVyYXRpb25JbmRleD1jYWNoaW5nLmxhc3RJbmRleDt2YXIgaT1pdGVyYXRpb25JbmRleDt2YXIgbGVuPXRoaXMua2V5ZnJhbWVzLmxlbmd0aC0xO3ZhciBmbGFnPXRydWU7dmFyIGtleURhdGE7dmFyIG5leHRLZXlEYXRhO3doaWxlKGZsYWcpe2tleURhdGE9dGhpcy5rZXlmcmFtZXNbaV07bmV4dEtleURhdGE9dGhpcy5rZXlmcmFtZXNbaSsxXTtpZihpPT09bGVuLTEmJmZyYW1lTnVtPj1uZXh0S2V5RGF0YS50LW9mZnNldFRpbWUpe2lmKGtleURhdGEuaCl7a2V5RGF0YT1uZXh0S2V5RGF0YTt9aXRlcmF0aW9uSW5kZXg9MDticmVhazt9aWYobmV4dEtleURhdGEudC1vZmZzZXRUaW1lPmZyYW1lTnVtKXtpdGVyYXRpb25JbmRleD1pO2JyZWFrO31pZihpPGxlbi0xKXtpKz0xO31lbHNlIHtpdGVyYXRpb25JbmRleD0wO2ZsYWc9ZmFsc2U7fX12YXIgazt2YXIga0xlbjt2YXIgcGVyYzt2YXIgakxlbjt2YXIgajt2YXIgZm5jO3ZhciBuZXh0S2V5VGltZT1uZXh0S2V5RGF0YS50LW9mZnNldFRpbWU7dmFyIGtleVRpbWU9a2V5RGF0YS50LW9mZnNldFRpbWU7dmFyIGVuZFZhbHVlO2lmKGtleURhdGEudG8pe2lmKCFrZXlEYXRhLmJlemllckRhdGEpe2tleURhdGEuYmV6aWVyRGF0YT1iZXouYnVpbGRCZXppZXJEYXRhKGtleURhdGEucyxuZXh0S2V5RGF0YS5zfHxrZXlEYXRhLmUsa2V5RGF0YS50byxrZXlEYXRhLnRpKTt9dmFyIGJlemllckRhdGE9a2V5RGF0YS5iZXppZXJEYXRhO2lmKGZyYW1lTnVtPj1uZXh0S2V5VGltZXx8ZnJhbWVOdW08a2V5VGltZSl7dmFyIGluZD1mcmFtZU51bT49bmV4dEtleVRpbWU/YmV6aWVyRGF0YS5wb2ludHMubGVuZ3RoLTE6MDtrTGVuPWJlemllckRhdGEucG9pbnRzW2luZF0ucG9pbnQubGVuZ3RoO2ZvcihrPTA7azxrTGVuO2srPTEpe25ld1ZhbHVlW2tdPWJlemllckRhdGEucG9pbnRzW2luZF0ucG9pbnRba107fS8vIGNhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4ID0gLTE7XG59ZWxzZSB7aWYoa2V5RGF0YS5fX2ZuY3Qpe2ZuYz1rZXlEYXRhLl9fZm5jdDt9ZWxzZSB7Zm5jPUJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKGtleURhdGEuby54LGtleURhdGEuby55LGtleURhdGEuaS54LGtleURhdGEuaS55LGtleURhdGEubikuZ2V0O2tleURhdGEuX19mbmN0PWZuYzt9cGVyYz1mbmMoKGZyYW1lTnVtLWtleVRpbWUpLyhuZXh0S2V5VGltZS1rZXlUaW1lKSk7dmFyIGRpc3RhbmNlSW5MaW5lPWJlemllckRhdGEuc2VnbWVudExlbmd0aCpwZXJjO3ZhciBzZWdtZW50UGVyYzt2YXIgYWRkZWRMZW5ndGg9Y2FjaGluZy5sYXN0RnJhbWU8ZnJhbWVOdW0mJmNhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4PT09aT9jYWNoaW5nLl9sYXN0QWRkZWRMZW5ndGg6MDtqPWNhY2hpbmcubGFzdEZyYW1lPGZyYW1lTnVtJiZjYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleD09PWk/Y2FjaGluZy5fbGFzdFBvaW50OjA7ZmxhZz10cnVlO2pMZW49YmV6aWVyRGF0YS5wb2ludHMubGVuZ3RoO3doaWxlKGZsYWcpe2FkZGVkTGVuZ3RoKz1iZXppZXJEYXRhLnBvaW50c1tqXS5wYXJ0aWFsTGVuZ3RoO2lmKGRpc3RhbmNlSW5MaW5lPT09MHx8cGVyYz09PTB8fGo9PT1iZXppZXJEYXRhLnBvaW50cy5sZW5ndGgtMSl7a0xlbj1iZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludC5sZW5ndGg7Zm9yKGs9MDtrPGtMZW47ays9MSl7bmV3VmFsdWVba109YmV6aWVyRGF0YS5wb2ludHNbal0ucG9pbnRba107fWJyZWFrO31lbHNlIGlmKGRpc3RhbmNlSW5MaW5lPj1hZGRlZExlbmd0aCYmZGlzdGFuY2VJbkxpbmU8YWRkZWRMZW5ndGgrYmV6aWVyRGF0YS5wb2ludHNbaisxXS5wYXJ0aWFsTGVuZ3RoKXtzZWdtZW50UGVyYz0oZGlzdGFuY2VJbkxpbmUtYWRkZWRMZW5ndGgpL2JlemllckRhdGEucG9pbnRzW2orMV0ucGFydGlhbExlbmd0aDtrTGVuPWJlemllckRhdGEucG9pbnRzW2pdLnBvaW50Lmxlbmd0aDtmb3Ioaz0wO2s8a0xlbjtrKz0xKXtuZXdWYWx1ZVtrXT1iZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludFtrXSsoYmV6aWVyRGF0YS5wb2ludHNbaisxXS5wb2ludFtrXS1iZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludFtrXSkqc2VnbWVudFBlcmM7fWJyZWFrO31pZihqPGpMZW4tMSl7ais9MTt9ZWxzZSB7ZmxhZz1mYWxzZTt9fWNhY2hpbmcuX2xhc3RQb2ludD1qO2NhY2hpbmcuX2xhc3RBZGRlZExlbmd0aD1hZGRlZExlbmd0aC1iZXppZXJEYXRhLnBvaW50c1tqXS5wYXJ0aWFsTGVuZ3RoO2NhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4PWk7fX1lbHNlIHt2YXIgb3V0WDt2YXIgb3V0WTt2YXIgaW5YO3ZhciBpblk7dmFyIGtleVZhbHVlO2xlbj1rZXlEYXRhLnMubGVuZ3RoO2VuZFZhbHVlPW5leHRLZXlEYXRhLnN8fGtleURhdGEuZTtpZih0aGlzLnNoJiZrZXlEYXRhLmghPT0xKXtpZihmcmFtZU51bT49bmV4dEtleVRpbWUpe25ld1ZhbHVlWzBdPWVuZFZhbHVlWzBdO25ld1ZhbHVlWzFdPWVuZFZhbHVlWzFdO25ld1ZhbHVlWzJdPWVuZFZhbHVlWzJdO31lbHNlIGlmKGZyYW1lTnVtPD1rZXlUaW1lKXtuZXdWYWx1ZVswXT1rZXlEYXRhLnNbMF07bmV3VmFsdWVbMV09a2V5RGF0YS5zWzFdO25ld1ZhbHVlWzJdPWtleURhdGEuc1syXTt9ZWxzZSB7dmFyIHF1YXRTdGFydD1jcmVhdGVRdWF0ZXJuaW9uKGtleURhdGEucyk7dmFyIHF1YXRFbmQ9Y3JlYXRlUXVhdGVybmlvbihlbmRWYWx1ZSk7dmFyIHRpbWU9KGZyYW1lTnVtLWtleVRpbWUpLyhuZXh0S2V5VGltZS1rZXlUaW1lKTtxdWF0ZXJuaW9uVG9FdWxlcihuZXdWYWx1ZSxzbGVycChxdWF0U3RhcnQscXVhdEVuZCx0aW1lKSk7fX1lbHNlIHtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKGtleURhdGEuaCE9PTEpe2lmKGZyYW1lTnVtPj1uZXh0S2V5VGltZSl7cGVyYz0xO31lbHNlIGlmKGZyYW1lTnVtPGtleVRpbWUpe3BlcmM9MDt9ZWxzZSB7aWYoa2V5RGF0YS5vLnguY29uc3RydWN0b3I9PT1BcnJheSl7aWYoIWtleURhdGEuX19mbmN0KXtrZXlEYXRhLl9fZm5jdD1bXTt9aWYoIWtleURhdGEuX19mbmN0W2ldKXtvdXRYPXR5cGVvZiBrZXlEYXRhLm8ueFtpXT09PSd1bmRlZmluZWQnP2tleURhdGEuby54WzBdOmtleURhdGEuby54W2ldO291dFk9dHlwZW9mIGtleURhdGEuby55W2ldPT09J3VuZGVmaW5lZCc/a2V5RGF0YS5vLnlbMF06a2V5RGF0YS5vLnlbaV07aW5YPXR5cGVvZiBrZXlEYXRhLmkueFtpXT09PSd1bmRlZmluZWQnP2tleURhdGEuaS54WzBdOmtleURhdGEuaS54W2ldO2luWT10eXBlb2Yga2V5RGF0YS5pLnlbaV09PT0ndW5kZWZpbmVkJz9rZXlEYXRhLmkueVswXTprZXlEYXRhLmkueVtpXTtmbmM9QmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcob3V0WCxvdXRZLGluWCxpblkpLmdldDtrZXlEYXRhLl9fZm5jdFtpXT1mbmM7fWVsc2Uge2ZuYz1rZXlEYXRhLl9fZm5jdFtpXTt9fWVsc2UgaWYoIWtleURhdGEuX19mbmN0KXtvdXRYPWtleURhdGEuby54O291dFk9a2V5RGF0YS5vLnk7aW5YPWtleURhdGEuaS54O2luWT1rZXlEYXRhLmkueTtmbmM9QmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcob3V0WCxvdXRZLGluWCxpblkpLmdldDtrZXlEYXRhLl9fZm5jdD1mbmM7fWVsc2Uge2ZuYz1rZXlEYXRhLl9fZm5jdDt9cGVyYz1mbmMoKGZyYW1lTnVtLWtleVRpbWUpLyhuZXh0S2V5VGltZS1rZXlUaW1lKSk7fX1lbmRWYWx1ZT1uZXh0S2V5RGF0YS5zfHxrZXlEYXRhLmU7a2V5VmFsdWU9a2V5RGF0YS5oPT09MT9rZXlEYXRhLnNbaV06a2V5RGF0YS5zW2ldKyhlbmRWYWx1ZVtpXS1rZXlEYXRhLnNbaV0pKnBlcmM7aWYodGhpcy5wcm9wVHlwZT09PSdtdWx0aWRpbWVuc2lvbmFsJyl7bmV3VmFsdWVbaV09a2V5VmFsdWU7fWVsc2Uge25ld1ZhbHVlPWtleVZhbHVlO319fX1jYWNoaW5nLmxhc3RJbmRleD1pdGVyYXRpb25JbmRleDtyZXR1cm4gbmV3VmFsdWU7fS8vIGJhc2VkIG9uIEBUb2ppJ3MgaHR0cHM6Ly9naXRodWIuY29tL3RvamkvZ2wtbWF0cml4L1xuZnVuY3Rpb24gc2xlcnAoYSxiLHQpe3ZhciBvdXQ9W107dmFyIGF4PWFbMF07dmFyIGF5PWFbMV07dmFyIGF6PWFbMl07dmFyIGF3PWFbM107dmFyIGJ4PWJbMF07dmFyIGJ5PWJbMV07dmFyIGJ6PWJbMl07dmFyIGJ3PWJbM107dmFyIG9tZWdhO3ZhciBjb3NvbTt2YXIgc2lub207dmFyIHNjYWxlMDt2YXIgc2NhbGUxO2Nvc29tPWF4KmJ4K2F5KmJ5K2F6KmJ6K2F3KmJ3O2lmKGNvc29tPDAuMCl7Y29zb209LWNvc29tO2J4PS1ieDtieT0tYnk7Yno9LWJ6O2J3PS1idzt9aWYoMS4wLWNvc29tPjAuMDAwMDAxKXtvbWVnYT1NYXRoLmFjb3MoY29zb20pO3Npbm9tPU1hdGguc2luKG9tZWdhKTtzY2FsZTA9TWF0aC5zaW4oKDEuMC10KSpvbWVnYSkvc2lub207c2NhbGUxPU1hdGguc2luKHQqb21lZ2EpL3Npbm9tO31lbHNlIHtzY2FsZTA9MS4wLXQ7c2NhbGUxPXQ7fW91dFswXT1zY2FsZTAqYXgrc2NhbGUxKmJ4O291dFsxXT1zY2FsZTAqYXkrc2NhbGUxKmJ5O291dFsyXT1zY2FsZTAqYXorc2NhbGUxKmJ6O291dFszXT1zY2FsZTAqYXcrc2NhbGUxKmJ3O3JldHVybiBvdXQ7fWZ1bmN0aW9uIHF1YXRlcm5pb25Ub0V1bGVyKG91dCxxdWF0KXt2YXIgcXg9cXVhdFswXTt2YXIgcXk9cXVhdFsxXTt2YXIgcXo9cXVhdFsyXTt2YXIgcXc9cXVhdFszXTt2YXIgaGVhZGluZz1NYXRoLmF0YW4yKDIqcXkqcXctMipxeCpxeiwxLTIqcXkqcXktMipxeipxeik7dmFyIGF0dGl0dWRlPU1hdGguYXNpbigyKnF4KnF5KzIqcXoqcXcpO3ZhciBiYW5rPU1hdGguYXRhbjIoMipxeCpxdy0yKnF5KnF6LDEtMipxeCpxeC0yKnF6KnF6KTtvdXRbMF09aGVhZGluZy9kZWdUb1JhZHM7b3V0WzFdPWF0dGl0dWRlL2RlZ1RvUmFkcztvdXRbMl09YmFuay9kZWdUb1JhZHM7fWZ1bmN0aW9uIGNyZWF0ZVF1YXRlcm5pb24odmFsdWVzKXt2YXIgaGVhZGluZz12YWx1ZXNbMF0qZGVnVG9SYWRzO3ZhciBhdHRpdHVkZT12YWx1ZXNbMV0qZGVnVG9SYWRzO3ZhciBiYW5rPXZhbHVlc1syXSpkZWdUb1JhZHM7dmFyIGMxPU1hdGguY29zKGhlYWRpbmcvMik7dmFyIGMyPU1hdGguY29zKGF0dGl0dWRlLzIpO3ZhciBjMz1NYXRoLmNvcyhiYW5rLzIpO3ZhciBzMT1NYXRoLnNpbihoZWFkaW5nLzIpO3ZhciBzMj1NYXRoLnNpbihhdHRpdHVkZS8yKTt2YXIgczM9TWF0aC5zaW4oYmFuay8yKTt2YXIgdz1jMSpjMipjMy1zMSpzMipzMzt2YXIgeD1zMSpzMipjMytjMSpjMipzMzt2YXIgeT1zMSpjMipjMytjMSpzMipzMzt2YXIgej1jMSpzMipjMy1zMSpjMipzMztyZXR1cm4gW3gseSx6LHddO31mdW5jdGlvbiBnZXRWYWx1ZUF0Q3VycmVudFRpbWUoKXt2YXIgZnJhbWVOdW09dGhpcy5jb21wLnJlbmRlcmVkRnJhbWUtdGhpcy5vZmZzZXRUaW1lO3ZhciBpbml0VGltZT10aGlzLmtleWZyYW1lc1swXS50LXRoaXMub2Zmc2V0VGltZTt2YXIgZW5kVGltZT10aGlzLmtleWZyYW1lc1t0aGlzLmtleWZyYW1lcy5sZW5ndGgtMV0udC10aGlzLm9mZnNldFRpbWU7aWYoIShmcmFtZU51bT09PXRoaXMuX2NhY2hpbmcubGFzdEZyYW1lfHx0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSE9PWluaXRGcmFtZSYmKHRoaXMuX2NhY2hpbmcubGFzdEZyYW1lPj1lbmRUaW1lJiZmcmFtZU51bT49ZW5kVGltZXx8dGhpcy5fY2FjaGluZy5sYXN0RnJhbWU8aW5pdFRpbWUmJmZyYW1lTnVtPGluaXRUaW1lKSkpe2lmKHRoaXMuX2NhY2hpbmcubGFzdEZyYW1lPj1mcmFtZU51bSl7dGhpcy5fY2FjaGluZy5fbGFzdEtleWZyYW1lSW5kZXg9LTE7dGhpcy5fY2FjaGluZy5sYXN0SW5kZXg9MDt9dmFyIHJlbmRlclJlc3VsdD10aGlzLmludGVycG9sYXRlVmFsdWUoZnJhbWVOdW0sdGhpcy5fY2FjaGluZyk7dGhpcy5wdj1yZW5kZXJSZXN1bHQ7fXRoaXMuX2NhY2hpbmcubGFzdEZyYW1lPWZyYW1lTnVtO3JldHVybiB0aGlzLnB2O31mdW5jdGlvbiBzZXRWVmFsdWUodmFsKXt2YXIgbXVsdGlwbGllZFZhbHVlO2lmKHRoaXMucHJvcFR5cGU9PT0ndW5pZGltZW5zaW9uYWwnKXttdWx0aXBsaWVkVmFsdWU9dmFsKnRoaXMubXVsdDtpZihtYXRoQWJzKHRoaXMudi1tdWx0aXBsaWVkVmFsdWUpPjAuMDAwMDEpe3RoaXMudj1tdWx0aXBsaWVkVmFsdWU7dGhpcy5fbWRmPXRydWU7fX1lbHNlIHt2YXIgaT0wO3ZhciBsZW49dGhpcy52Lmxlbmd0aDt3aGlsZShpPGxlbil7bXVsdGlwbGllZFZhbHVlPXZhbFtpXSp0aGlzLm11bHQ7aWYobWF0aEFicyh0aGlzLnZbaV0tbXVsdGlwbGllZFZhbHVlKT4wLjAwMDAxKXt0aGlzLnZbaV09bXVsdGlwbGllZFZhbHVlO3RoaXMuX21kZj10cnVlO31pKz0xO319fWZ1bmN0aW9uIHByb2Nlc3NFZmZlY3RzU2VxdWVuY2UoKXtpZih0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkPT09dGhpcy5mcmFtZUlkfHwhdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKXtyZXR1cm47fWlmKHRoaXMubG9jayl7dGhpcy5zZXRWVmFsdWUodGhpcy5wdik7cmV0dXJuO310aGlzLmxvY2s9dHJ1ZTt0aGlzLl9tZGY9dGhpcy5faXNGaXJzdEZyYW1lO3ZhciBpO3ZhciBsZW49dGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO3ZhciBmaW5hbFZhbHVlPXRoaXMua2Y/dGhpcy5wdjp0aGlzLmRhdGEuaztmb3IoaT0wO2k8bGVuO2krPTEpe2ZpbmFsVmFsdWU9dGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0oZmluYWxWYWx1ZSk7fXRoaXMuc2V0VlZhbHVlKGZpbmFsVmFsdWUpO3RoaXMuX2lzRmlyc3RGcmFtZT1mYWxzZTt0aGlzLmxvY2s9ZmFsc2U7dGhpcy5mcmFtZUlkPXRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7fWZ1bmN0aW9uIGFkZEVmZmVjdChlZmZlY3RGdW5jdGlvbil7dGhpcy5lZmZlY3RzU2VxdWVuY2UucHVzaChlZmZlY3RGdW5jdGlvbik7dGhpcy5jb250YWluZXIuYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO31mdW5jdGlvbiBWYWx1ZVByb3BlcnR5KGVsZW0sZGF0YSxtdWx0LGNvbnRhaW5lcil7dGhpcy5wcm9wVHlwZT0ndW5pZGltZW5zaW9uYWwnO3RoaXMubXVsdD1tdWx0fHwxO3RoaXMuZGF0YT1kYXRhO3RoaXMudj1tdWx0P2RhdGEuayptdWx0OmRhdGEuazt0aGlzLnB2PWRhdGEuazt0aGlzLl9tZGY9ZmFsc2U7dGhpcy5lbGVtPWVsZW07dGhpcy5jb250YWluZXI9Y29udGFpbmVyO3RoaXMuY29tcD1lbGVtLmNvbXA7dGhpcy5rPWZhbHNlO3RoaXMua2Y9ZmFsc2U7dGhpcy52ZWw9MDt0aGlzLmVmZmVjdHNTZXF1ZW5jZT1bXTt0aGlzLl9pc0ZpcnN0RnJhbWU9dHJ1ZTt0aGlzLmdldFZhbHVlPXByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7dGhpcy5zZXRWVmFsdWU9c2V0VlZhbHVlO3RoaXMuYWRkRWZmZWN0PWFkZEVmZmVjdDt9ZnVuY3Rpb24gTXVsdGlEaW1lbnNpb25hbFByb3BlcnR5KGVsZW0sZGF0YSxtdWx0LGNvbnRhaW5lcil7dGhpcy5wcm9wVHlwZT0nbXVsdGlkaW1lbnNpb25hbCc7dGhpcy5tdWx0PW11bHR8fDE7dGhpcy5kYXRhPWRhdGE7dGhpcy5fbWRmPWZhbHNlO3RoaXMuZWxlbT1lbGVtO3RoaXMuY29udGFpbmVyPWNvbnRhaW5lcjt0aGlzLmNvbXA9ZWxlbS5jb21wO3RoaXMuaz1mYWxzZTt0aGlzLmtmPWZhbHNlO3RoaXMuZnJhbWVJZD0tMTt2YXIgaTt2YXIgbGVuPWRhdGEuay5sZW5ndGg7dGhpcy52PWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGxlbik7dGhpcy5wdj1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxsZW4pO3RoaXMudmVsPWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGxlbik7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLnZbaV09ZGF0YS5rW2ldKnRoaXMubXVsdDt0aGlzLnB2W2ldPWRhdGEua1tpXTt9dGhpcy5faXNGaXJzdEZyYW1lPXRydWU7dGhpcy5lZmZlY3RzU2VxdWVuY2U9W107dGhpcy5nZXRWYWx1ZT1wcm9jZXNzRWZmZWN0c1NlcXVlbmNlO3RoaXMuc2V0VlZhbHVlPXNldFZWYWx1ZTt0aGlzLmFkZEVmZmVjdD1hZGRFZmZlY3Q7fWZ1bmN0aW9uIEtleWZyYW1lZFZhbHVlUHJvcGVydHkoZWxlbSxkYXRhLG11bHQsY29udGFpbmVyKXt0aGlzLnByb3BUeXBlPSd1bmlkaW1lbnNpb25hbCc7dGhpcy5rZXlmcmFtZXM9ZGF0YS5rO3RoaXMub2Zmc2V0VGltZT1lbGVtLmRhdGEuc3Q7dGhpcy5mcmFtZUlkPS0xO3RoaXMuX2NhY2hpbmc9e2xhc3RGcmFtZTppbml0RnJhbWUsbGFzdEluZGV4OjAsdmFsdWU6MCxfbGFzdEtleWZyYW1lSW5kZXg6LTF9O3RoaXMuaz10cnVlO3RoaXMua2Y9dHJ1ZTt0aGlzLmRhdGE9ZGF0YTt0aGlzLm11bHQ9bXVsdHx8MTt0aGlzLmVsZW09ZWxlbTt0aGlzLmNvbnRhaW5lcj1jb250YWluZXI7dGhpcy5jb21wPWVsZW0uY29tcDt0aGlzLnY9aW5pdEZyYW1lO3RoaXMucHY9aW5pdEZyYW1lO3RoaXMuX2lzRmlyc3RGcmFtZT10cnVlO3RoaXMuZ2V0VmFsdWU9cHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZTt0aGlzLnNldFZWYWx1ZT1zZXRWVmFsdWU7dGhpcy5pbnRlcnBvbGF0ZVZhbHVlPWludGVycG9sYXRlVmFsdWU7dGhpcy5lZmZlY3RzU2VxdWVuY2U9W2dldFZhbHVlQXRDdXJyZW50VGltZS5iaW5kKHRoaXMpXTt0aGlzLmFkZEVmZmVjdD1hZGRFZmZlY3Q7fWZ1bmN0aW9uIEtleWZyYW1lZE11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eShlbGVtLGRhdGEsbXVsdCxjb250YWluZXIpe3RoaXMucHJvcFR5cGU9J211bHRpZGltZW5zaW9uYWwnO3ZhciBpO3ZhciBsZW49ZGF0YS5rLmxlbmd0aDt2YXIgczt2YXIgZTt2YXIgdG87dmFyIHRpO2ZvcihpPTA7aTxsZW4tMTtpKz0xKXtpZihkYXRhLmtbaV0udG8mJmRhdGEua1tpXS5zJiZkYXRhLmtbaSsxXSYmZGF0YS5rW2krMV0ucyl7cz1kYXRhLmtbaV0ucztlPWRhdGEua1tpKzFdLnM7dG89ZGF0YS5rW2ldLnRvO3RpPWRhdGEua1tpXS50aTtpZihzLmxlbmd0aD09PTImJiEoc1swXT09PWVbMF0mJnNbMV09PT1lWzFdKSYmYmV6LnBvaW50T25MaW5lMkQoc1swXSxzWzFdLGVbMF0sZVsxXSxzWzBdK3RvWzBdLHNbMV0rdG9bMV0pJiZiZXoucG9pbnRPbkxpbmUyRChzWzBdLHNbMV0sZVswXSxlWzFdLGVbMF0rdGlbMF0sZVsxXSt0aVsxXSl8fHMubGVuZ3RoPT09MyYmIShzWzBdPT09ZVswXSYmc1sxXT09PWVbMV0mJnNbMl09PT1lWzJdKSYmYmV6LnBvaW50T25MaW5lM0Qoc1swXSxzWzFdLHNbMl0sZVswXSxlWzFdLGVbMl0sc1swXSt0b1swXSxzWzFdK3RvWzFdLHNbMl0rdG9bMl0pJiZiZXoucG9pbnRPbkxpbmUzRChzWzBdLHNbMV0sc1syXSxlWzBdLGVbMV0sZVsyXSxlWzBdK3RpWzBdLGVbMV0rdGlbMV0sZVsyXSt0aVsyXSkpe2RhdGEua1tpXS50bz1udWxsO2RhdGEua1tpXS50aT1udWxsO31pZihzWzBdPT09ZVswXSYmc1sxXT09PWVbMV0mJnRvWzBdPT09MCYmdG9bMV09PT0wJiZ0aVswXT09PTAmJnRpWzFdPT09MCl7aWYocy5sZW5ndGg9PT0yfHxzWzJdPT09ZVsyXSYmdG9bMl09PT0wJiZ0aVsyXT09PTApe2RhdGEua1tpXS50bz1udWxsO2RhdGEua1tpXS50aT1udWxsO319fX10aGlzLmVmZmVjdHNTZXF1ZW5jZT1bZ2V0VmFsdWVBdEN1cnJlbnRUaW1lLmJpbmQodGhpcyldO3RoaXMuZGF0YT1kYXRhO3RoaXMua2V5ZnJhbWVzPWRhdGEuazt0aGlzLm9mZnNldFRpbWU9ZWxlbS5kYXRhLnN0O3RoaXMuaz10cnVlO3RoaXMua2Y9dHJ1ZTt0aGlzLl9pc0ZpcnN0RnJhbWU9dHJ1ZTt0aGlzLm11bHQ9bXVsdHx8MTt0aGlzLmVsZW09ZWxlbTt0aGlzLmNvbnRhaW5lcj1jb250YWluZXI7dGhpcy5jb21wPWVsZW0uY29tcDt0aGlzLmdldFZhbHVlPXByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7dGhpcy5zZXRWVmFsdWU9c2V0VlZhbHVlO3RoaXMuaW50ZXJwb2xhdGVWYWx1ZT1pbnRlcnBvbGF0ZVZhbHVlO3RoaXMuZnJhbWVJZD0tMTt2YXIgYXJyTGVuPWRhdGEua1swXS5zLmxlbmd0aDt0aGlzLnY9Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsYXJyTGVuKTt0aGlzLnB2PWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGFyckxlbik7Zm9yKGk9MDtpPGFyckxlbjtpKz0xKXt0aGlzLnZbaV09aW5pdEZyYW1lO3RoaXMucHZbaV09aW5pdEZyYW1lO310aGlzLl9jYWNoaW5nPXtsYXN0RnJhbWU6aW5pdEZyYW1lLGxhc3RJbmRleDowLHZhbHVlOmNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGFyckxlbil9O3RoaXMuYWRkRWZmZWN0PWFkZEVmZmVjdDt9ZnVuY3Rpb24gZ2V0UHJvcChlbGVtLGRhdGEsdHlwZSxtdWx0LGNvbnRhaW5lcil7dmFyIHA7aWYoIWRhdGEuay5sZW5ndGgpe3A9bmV3IFZhbHVlUHJvcGVydHkoZWxlbSxkYXRhLG11bHQsY29udGFpbmVyKTt9ZWxzZSBpZih0eXBlb2YgZGF0YS5rWzBdPT09J251bWJlcicpe3A9bmV3IE11bHRpRGltZW5zaW9uYWxQcm9wZXJ0eShlbGVtLGRhdGEsbXVsdCxjb250YWluZXIpO31lbHNlIHtzd2l0Y2godHlwZSl7Y2FzZSAwOnA9bmV3IEtleWZyYW1lZFZhbHVlUHJvcGVydHkoZWxlbSxkYXRhLG11bHQsY29udGFpbmVyKTticmVhaztjYXNlIDE6cD1uZXcgS2V5ZnJhbWVkTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5KGVsZW0sZGF0YSxtdWx0LGNvbnRhaW5lcik7YnJlYWs7ZGVmYXVsdDpicmVhazt9fWlmKHAuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCl7Y29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eShwKTt9cmV0dXJuIHA7fXZhciBvYj17Z2V0UHJvcDpnZXRQcm9wfTtyZXR1cm4gb2I7fSgpOy8qIGdsb2JhbCBNYXRyaXgsIGRlZ1RvUmFkcywgUHJvcGVydHlGYWN0b3J5LCBleHRlbmRQcm90b3R5cGUsIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lciAqLyAvKiBleHBvcnRlZCBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkgKi92YXIgVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5PWZ1bmN0aW9uKCl7dmFyIGRlZmF1bHRWZWN0b3I9WzAsMF07ZnVuY3Rpb24gYXBwbHlUb01hdHJpeChtYXQpe3ZhciBfbWRmPXRoaXMuX21kZjt0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO3RoaXMuX21kZj10aGlzLl9tZGZ8fF9tZGY7aWYodGhpcy5hKXttYXQudHJhbnNsYXRlKC10aGlzLmEudlswXSwtdGhpcy5hLnZbMV0sdGhpcy5hLnZbMl0pO31pZih0aGlzLnMpe21hdC5zY2FsZSh0aGlzLnMudlswXSx0aGlzLnMudlsxXSx0aGlzLnMudlsyXSk7fWlmKHRoaXMuc2spe21hdC5za2V3RnJvbUF4aXMoLXRoaXMuc2sudix0aGlzLnNhLnYpO31pZih0aGlzLnIpe21hdC5yb3RhdGUoLXRoaXMuci52KTt9ZWxzZSB7bWF0LnJvdGF0ZVooLXRoaXMucnoudikucm90YXRlWSh0aGlzLnJ5LnYpLnJvdGF0ZVgodGhpcy5yeC52KS5yb3RhdGVaKC10aGlzLm9yLnZbMl0pLnJvdGF0ZVkodGhpcy5vci52WzFdKS5yb3RhdGVYKHRoaXMub3IudlswXSk7fWlmKHRoaXMuZGF0YS5wLnMpe2lmKHRoaXMuZGF0YS5wLnope21hdC50cmFuc2xhdGUodGhpcy5weC52LHRoaXMucHkudiwtdGhpcy5wei52KTt9ZWxzZSB7bWF0LnRyYW5zbGF0ZSh0aGlzLnB4LnYsdGhpcy5weS52LDApO319ZWxzZSB7bWF0LnRyYW5zbGF0ZSh0aGlzLnAudlswXSx0aGlzLnAudlsxXSwtdGhpcy5wLnZbMl0pO319ZnVuY3Rpb24gcHJvY2Vzc0tleXMoZm9yY2VSZW5kZXIpe2lmKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ9PT10aGlzLmZyYW1lSWQpe3JldHVybjt9aWYodGhpcy5faXNEaXJ0eSl7dGhpcy5wcmVjYWxjdWxhdGVNYXRyaXgoKTt0aGlzLl9pc0RpcnR5PWZhbHNlO310aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO2lmKHRoaXMuX21kZnx8Zm9yY2VSZW5kZXIpe3ZhciBmcmFtZVJhdGU7dGhpcy52LmNsb25lRnJvbVByb3BzKHRoaXMucHJlLnByb3BzKTtpZih0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnM8MSl7dGhpcy52LnRyYW5zbGF0ZSgtdGhpcy5hLnZbMF0sLXRoaXMuYS52WzFdLHRoaXMuYS52WzJdKTt9aWYodGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zPDIpe3RoaXMudi5zY2FsZSh0aGlzLnMudlswXSx0aGlzLnMudlsxXSx0aGlzLnMudlsyXSk7fWlmKHRoaXMuc2smJnRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9uczwzKXt0aGlzLnYuc2tld0Zyb21BeGlzKC10aGlzLnNrLnYsdGhpcy5zYS52KTt9aWYodGhpcy5yJiZ0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnM8NCl7dGhpcy52LnJvdGF0ZSgtdGhpcy5yLnYpO31lbHNlIGlmKCF0aGlzLnImJnRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9uczw0KXt0aGlzLnYucm90YXRlWigtdGhpcy5yei52KS5yb3RhdGVZKHRoaXMucnkudikucm90YXRlWCh0aGlzLnJ4LnYpLnJvdGF0ZVooLXRoaXMub3IudlsyXSkucm90YXRlWSh0aGlzLm9yLnZbMV0pLnJvdGF0ZVgodGhpcy5vci52WzBdKTt9aWYodGhpcy5hdXRvT3JpZW50ZWQpe3ZhciB2MTt2YXIgdjI7ZnJhbWVSYXRlPXRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtpZih0aGlzLnAmJnRoaXMucC5rZXlmcmFtZXMmJnRoaXMucC5nZXRWYWx1ZUF0VGltZSl7aWYodGhpcy5wLl9jYWNoaW5nLmxhc3RGcmFtZSt0aGlzLnAub2Zmc2V0VGltZTw9dGhpcy5wLmtleWZyYW1lc1swXS50KXt2MT10aGlzLnAuZ2V0VmFsdWVBdFRpbWUoKHRoaXMucC5rZXlmcmFtZXNbMF0udCswLjAxKS9mcmFtZVJhdGUsMCk7djI9dGhpcy5wLmdldFZhbHVlQXRUaW1lKHRoaXMucC5rZXlmcmFtZXNbMF0udC9mcmFtZVJhdGUsMCk7fWVsc2UgaWYodGhpcy5wLl9jYWNoaW5nLmxhc3RGcmFtZSt0aGlzLnAub2Zmc2V0VGltZT49dGhpcy5wLmtleWZyYW1lc1t0aGlzLnAua2V5ZnJhbWVzLmxlbmd0aC0xXS50KXt2MT10aGlzLnAuZ2V0VmFsdWVBdFRpbWUodGhpcy5wLmtleWZyYW1lc1t0aGlzLnAua2V5ZnJhbWVzLmxlbmd0aC0xXS50L2ZyYW1lUmF0ZSwwKTt2Mj10aGlzLnAuZ2V0VmFsdWVBdFRpbWUoKHRoaXMucC5rZXlmcmFtZXNbdGhpcy5wLmtleWZyYW1lcy5sZW5ndGgtMV0udC0wLjA1KS9mcmFtZVJhdGUsMCk7fWVsc2Uge3YxPXRoaXMucC5wdjt2Mj10aGlzLnAuZ2V0VmFsdWVBdFRpbWUoKHRoaXMucC5fY2FjaGluZy5sYXN0RnJhbWUrdGhpcy5wLm9mZnNldFRpbWUtMC4wMSkvZnJhbWVSYXRlLHRoaXMucC5vZmZzZXRUaW1lKTt9fWVsc2UgaWYodGhpcy5weCYmdGhpcy5weC5rZXlmcmFtZXMmJnRoaXMucHkua2V5ZnJhbWVzJiZ0aGlzLnB4LmdldFZhbHVlQXRUaW1lJiZ0aGlzLnB5LmdldFZhbHVlQXRUaW1lKXt2MT1bXTt2Mj1bXTt2YXIgcHg9dGhpcy5weDt2YXIgcHk9dGhpcy5weTtpZihweC5fY2FjaGluZy5sYXN0RnJhbWUrcHgub2Zmc2V0VGltZTw9cHgua2V5ZnJhbWVzWzBdLnQpe3YxWzBdPXB4LmdldFZhbHVlQXRUaW1lKChweC5rZXlmcmFtZXNbMF0udCswLjAxKS9mcmFtZVJhdGUsMCk7djFbMV09cHkuZ2V0VmFsdWVBdFRpbWUoKHB5LmtleWZyYW1lc1swXS50KzAuMDEpL2ZyYW1lUmF0ZSwwKTt2MlswXT1weC5nZXRWYWx1ZUF0VGltZShweC5rZXlmcmFtZXNbMF0udC9mcmFtZVJhdGUsMCk7djJbMV09cHkuZ2V0VmFsdWVBdFRpbWUocHkua2V5ZnJhbWVzWzBdLnQvZnJhbWVSYXRlLDApO31lbHNlIGlmKHB4Ll9jYWNoaW5nLmxhc3RGcmFtZStweC5vZmZzZXRUaW1lPj1weC5rZXlmcmFtZXNbcHgua2V5ZnJhbWVzLmxlbmd0aC0xXS50KXt2MVswXT1weC5nZXRWYWx1ZUF0VGltZShweC5rZXlmcmFtZXNbcHgua2V5ZnJhbWVzLmxlbmd0aC0xXS50L2ZyYW1lUmF0ZSwwKTt2MVsxXT1weS5nZXRWYWx1ZUF0VGltZShweS5rZXlmcmFtZXNbcHkua2V5ZnJhbWVzLmxlbmd0aC0xXS50L2ZyYW1lUmF0ZSwwKTt2MlswXT1weC5nZXRWYWx1ZUF0VGltZSgocHgua2V5ZnJhbWVzW3B4LmtleWZyYW1lcy5sZW5ndGgtMV0udC0wLjAxKS9mcmFtZVJhdGUsMCk7djJbMV09cHkuZ2V0VmFsdWVBdFRpbWUoKHB5LmtleWZyYW1lc1tweS5rZXlmcmFtZXMubGVuZ3RoLTFdLnQtMC4wMSkvZnJhbWVSYXRlLDApO31lbHNlIHt2MT1bcHgucHYscHkucHZdO3YyWzBdPXB4LmdldFZhbHVlQXRUaW1lKChweC5fY2FjaGluZy5sYXN0RnJhbWUrcHgub2Zmc2V0VGltZS0wLjAxKS9mcmFtZVJhdGUscHgub2Zmc2V0VGltZSk7djJbMV09cHkuZ2V0VmFsdWVBdFRpbWUoKHB5Ll9jYWNoaW5nLmxhc3RGcmFtZStweS5vZmZzZXRUaW1lLTAuMDEpL2ZyYW1lUmF0ZSxweS5vZmZzZXRUaW1lKTt9fWVsc2Uge3YyPWRlZmF1bHRWZWN0b3I7djE9djI7fXRoaXMudi5yb3RhdGUoLU1hdGguYXRhbjIodjFbMV0tdjJbMV0sdjFbMF0tdjJbMF0pKTt9aWYodGhpcy5kYXRhLnAmJnRoaXMuZGF0YS5wLnMpe2lmKHRoaXMuZGF0YS5wLnope3RoaXMudi50cmFuc2xhdGUodGhpcy5weC52LHRoaXMucHkudiwtdGhpcy5wei52KTt9ZWxzZSB7dGhpcy52LnRyYW5zbGF0ZSh0aGlzLnB4LnYsdGhpcy5weS52LDApO319ZWxzZSB7dGhpcy52LnRyYW5zbGF0ZSh0aGlzLnAudlswXSx0aGlzLnAudlsxXSwtdGhpcy5wLnZbMl0pO319dGhpcy5mcmFtZUlkPXRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7fWZ1bmN0aW9uIHByZWNhbGN1bGF0ZU1hdHJpeCgpe2lmKCF0aGlzLmEuayl7dGhpcy5wcmUudHJhbnNsYXRlKC10aGlzLmEudlswXSwtdGhpcy5hLnZbMV0sdGhpcy5hLnZbMl0pO3RoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucz0xO31lbHNlIHtyZXR1cm47fWlmKCF0aGlzLnMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCl7dGhpcy5wcmUuc2NhbGUodGhpcy5zLnZbMF0sdGhpcy5zLnZbMV0sdGhpcy5zLnZbMl0pO3RoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucz0yO31lbHNlIHtyZXR1cm47fWlmKHRoaXMuc2spe2lmKCF0aGlzLnNrLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgmJiF0aGlzLnNhLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpe3RoaXMucHJlLnNrZXdGcm9tQXhpcygtdGhpcy5zay52LHRoaXMuc2Eudik7dGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zPTM7fWVsc2Uge3JldHVybjt9fWlmKHRoaXMucil7aWYoIXRoaXMuci5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKXt0aGlzLnByZS5yb3RhdGUoLXRoaXMuci52KTt0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnM9NDt9fWVsc2UgaWYoIXRoaXMucnouZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCYmIXRoaXMucnkuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCYmIXRoaXMucnguZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCYmIXRoaXMub3IuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCl7dGhpcy5wcmUucm90YXRlWigtdGhpcy5yei52KS5yb3RhdGVZKHRoaXMucnkudikucm90YXRlWCh0aGlzLnJ4LnYpLnJvdGF0ZVooLXRoaXMub3IudlsyXSkucm90YXRlWSh0aGlzLm9yLnZbMV0pLnJvdGF0ZVgodGhpcy5vci52WzBdKTt0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnM9NDt9fWZ1bmN0aW9uIGF1dG9PcmllbnQoKXsvL1xuLy8gdmFyIHByZXZQID0gdGhpcy5nZXRWYWx1ZUF0VGltZSgpO1xufWZ1bmN0aW9uIGFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKXt0aGlzLl9hZGREeW5hbWljUHJvcGVydHkocHJvcCk7dGhpcy5lbGVtLmFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTt0aGlzLl9pc0RpcnR5PXRydWU7fWZ1bmN0aW9uIFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sZGF0YSxjb250YWluZXIpe3RoaXMuZWxlbT1lbGVtO3RoaXMuZnJhbWVJZD0tMTt0aGlzLnByb3BUeXBlPSd0cmFuc2Zvcm0nO3RoaXMuZGF0YT1kYXRhO3RoaXMudj1uZXcgTWF0cml4KCk7Ly8gUHJlY2FsY3VsYXRlZCBtYXRyaXggd2l0aCBub24gYW5pbWF0ZWQgcHJvcGVydGllc1xudGhpcy5wcmU9bmV3IE1hdHJpeCgpO3RoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucz0wO3RoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihjb250YWluZXJ8fGVsZW0pO2lmKGRhdGEucCYmZGF0YS5wLnMpe3RoaXMucHg9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnAueCwwLDAsdGhpcyk7dGhpcy5weT1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEucC55LDAsMCx0aGlzKTtpZihkYXRhLnAueil7dGhpcy5wej1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEucC56LDAsMCx0aGlzKTt9fWVsc2Uge3RoaXMucD1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEucHx8e2s6WzAsMCwwXX0sMSwwLHRoaXMpO31pZihkYXRhLnJ4KXt0aGlzLnJ4PVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5yeCwwLGRlZ1RvUmFkcyx0aGlzKTt0aGlzLnJ5PVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5yeSwwLGRlZ1RvUmFkcyx0aGlzKTt0aGlzLnJ6PVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5yeiwwLGRlZ1RvUmFkcyx0aGlzKTtpZihkYXRhLm9yLmtbMF0udGkpe3ZhciBpO3ZhciBsZW49ZGF0YS5vci5rLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe2RhdGEub3Iua1tpXS50bz1udWxsO2RhdGEub3Iua1tpXS50aT1udWxsO319dGhpcy5vcj1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEub3IsMSxkZWdUb1JhZHMsdGhpcyk7Ly8gc2ggSW5kaWNhdGVzIGl0IG5lZWRzIHRvIGJlIGNhcHBlZCBiZXR3ZWVuIC0xODAgYW5kIDE4MFxudGhpcy5vci5zaD10cnVlO31lbHNlIHt0aGlzLnI9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnJ8fHtrOjB9LDAsZGVnVG9SYWRzLHRoaXMpO31pZihkYXRhLnNrKXt0aGlzLnNrPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5zaywwLGRlZ1RvUmFkcyx0aGlzKTt0aGlzLnNhPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5zYSwwLGRlZ1RvUmFkcyx0aGlzKTt9dGhpcy5hPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5hfHx7azpbMCwwLDBdfSwxLDAsdGhpcyk7dGhpcy5zPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5zfHx7azpbMTAwLDEwMCwxMDBdfSwxLDAuMDEsdGhpcyk7Ly8gT3BhY2l0eSBpcyBub3QgcGFydCBvZiB0aGUgdHJhbnNmb3JtIHByb3BlcnRpZXMsIHRoYXQncyB3aHkgaXQgd29uJ3QgdXNlIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMuIFRoYXQgd2F5IHRyYW5zZm9ybXMgd29uJ3QgZ2V0IHVwZGF0ZWQgaWYgb3BhY2l0eSBjaGFuZ2VzLlxuaWYoZGF0YS5vKXt0aGlzLm89UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLm8sMCwwLjAxLGVsZW0pO31lbHNlIHt0aGlzLm89e19tZGY6ZmFsc2UsdjoxfTt9dGhpcy5faXNEaXJ0eT10cnVlO2lmKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCl7dGhpcy5nZXRWYWx1ZSh0cnVlKTt9fVRyYW5zZm9ybVByb3BlcnR5LnByb3RvdHlwZT17YXBwbHlUb01hdHJpeDphcHBseVRvTWF0cml4LGdldFZhbHVlOnByb2Nlc3NLZXlzLHByZWNhbGN1bGF0ZU1hdHJpeDpwcmVjYWxjdWxhdGVNYXRyaXgsYXV0b09yaWVudDphdXRvT3JpZW50fTtleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sVHJhbnNmb3JtUHJvcGVydHkpO1RyYW5zZm9ybVByb3BlcnR5LnByb3RvdHlwZS5hZGREeW5hbWljUHJvcGVydHk9YWRkRHluYW1pY1Byb3BlcnR5O1RyYW5zZm9ybVByb3BlcnR5LnByb3RvdHlwZS5fYWRkRHluYW1pY1Byb3BlcnR5PUR5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lci5wcm90b3R5cGUuYWRkRHluYW1pY1Byb3BlcnR5O2Z1bmN0aW9uIGdldFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sZGF0YSxjb250YWluZXIpe3JldHVybiBuZXcgVHJhbnNmb3JtUHJvcGVydHkoZWxlbSxkYXRhLGNvbnRhaW5lcik7fXJldHVybiB7Z2V0VHJhbnNmb3JtUHJvcGVydHk6Z2V0VHJhbnNmb3JtUHJvcGVydHl9O30oKTsvKiBnbG9iYWwgY3JlYXRlU2l6ZWRBcnJheSwgY3JlYXRlU2l6ZWRBcnJheSwgcG9pbnRQb29sICovZnVuY3Rpb24gU2hhcGVQYXRoKCl7dGhpcy5jPWZhbHNlO3RoaXMuX2xlbmd0aD0wO3RoaXMuX21heExlbmd0aD04O3RoaXMudj1jcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCk7dGhpcy5vPWNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKTt0aGlzLmk9Y3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpO31TaGFwZVBhdGgucHJvdG90eXBlLnNldFBhdGhEYXRhPWZ1bmN0aW9uKGNsb3NlZCxsZW4pe3RoaXMuYz1jbG9zZWQ7dGhpcy5zZXRMZW5ndGgobGVuKTt2YXIgaT0wO3doaWxlKGk8bGVuKXt0aGlzLnZbaV09cG9pbnRQb29sLm5ld0VsZW1lbnQoKTt0aGlzLm9baV09cG9pbnRQb29sLm5ld0VsZW1lbnQoKTt0aGlzLmlbaV09cG9pbnRQb29sLm5ld0VsZW1lbnQoKTtpKz0xO319O1NoYXBlUGF0aC5wcm90b3R5cGUuc2V0TGVuZ3RoPWZ1bmN0aW9uKGxlbil7d2hpbGUodGhpcy5fbWF4TGVuZ3RoPGxlbil7dGhpcy5kb3VibGVBcnJheUxlbmd0aCgpO310aGlzLl9sZW5ndGg9bGVuO307U2hhcGVQYXRoLnByb3RvdHlwZS5kb3VibGVBcnJheUxlbmd0aD1mdW5jdGlvbigpe3RoaXMudj10aGlzLnYuY29uY2F0KGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKSk7dGhpcy5pPXRoaXMuaS5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpKTt0aGlzLm89dGhpcy5vLmNvbmNhdChjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCkpO3RoaXMuX21heExlbmd0aCo9Mjt9O1NoYXBlUGF0aC5wcm90b3R5cGUuc2V0WFlBdD1mdW5jdGlvbih4LHksdHlwZSxwb3MscmVwbGFjZSl7dmFyIGFycjt0aGlzLl9sZW5ndGg9TWF0aC5tYXgodGhpcy5fbGVuZ3RoLHBvcysxKTtpZih0aGlzLl9sZW5ndGg+PXRoaXMuX21heExlbmd0aCl7dGhpcy5kb3VibGVBcnJheUxlbmd0aCgpO31zd2l0Y2godHlwZSl7Y2FzZSd2JzphcnI9dGhpcy52O2JyZWFrO2Nhc2UnaSc6YXJyPXRoaXMuaTticmVhaztjYXNlJ28nOmFycj10aGlzLm87YnJlYWs7ZGVmYXVsdDphcnI9W107YnJlYWs7fWlmKCFhcnJbcG9zXXx8YXJyW3Bvc10mJiFyZXBsYWNlKXthcnJbcG9zXT1wb2ludFBvb2wubmV3RWxlbWVudCgpO31hcnJbcG9zXVswXT14O2Fycltwb3NdWzFdPXk7fTtTaGFwZVBhdGgucHJvdG90eXBlLnNldFRyaXBsZUF0PWZ1bmN0aW9uKHZYLHZZLG9YLG9ZLGlYLGlZLHBvcyxyZXBsYWNlKXt0aGlzLnNldFhZQXQodlgsdlksJ3YnLHBvcyxyZXBsYWNlKTt0aGlzLnNldFhZQXQob1gsb1ksJ28nLHBvcyxyZXBsYWNlKTt0aGlzLnNldFhZQXQoaVgsaVksJ2knLHBvcyxyZXBsYWNlKTt9O1NoYXBlUGF0aC5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbigpe3ZhciBuZXdQYXRoPW5ldyBTaGFwZVBhdGgoKTtuZXdQYXRoLnNldFBhdGhEYXRhKHRoaXMuYyx0aGlzLl9sZW5ndGgpO3ZhciB2ZXJ0aWNlcz10aGlzLnY7dmFyIG91dFBvaW50cz10aGlzLm87dmFyIGluUG9pbnRzPXRoaXMuaTt2YXIgaW5pdD0wO2lmKHRoaXMuYyl7bmV3UGF0aC5zZXRUcmlwbGVBdCh2ZXJ0aWNlc1swXVswXSx2ZXJ0aWNlc1swXVsxXSxpblBvaW50c1swXVswXSxpblBvaW50c1swXVsxXSxvdXRQb2ludHNbMF1bMF0sb3V0UG9pbnRzWzBdWzFdLDAsZmFsc2UpO2luaXQ9MTt9dmFyIGNudD10aGlzLl9sZW5ndGgtMTt2YXIgbGVuPXRoaXMuX2xlbmd0aDt2YXIgaTtmb3IoaT1pbml0O2k8bGVuO2krPTEpe25ld1BhdGguc2V0VHJpcGxlQXQodmVydGljZXNbY250XVswXSx2ZXJ0aWNlc1tjbnRdWzFdLGluUG9pbnRzW2NudF1bMF0saW5Qb2ludHNbY250XVsxXSxvdXRQb2ludHNbY250XVswXSxvdXRQb2ludHNbY250XVsxXSxpLGZhbHNlKTtjbnQtPTE7fXJldHVybiBuZXdQYXRoO307LyogZ2xvYmFsIGV4dGVuZFByb3RvdHlwZSwgcm91bmRDb3JuZXIsIEJlemllckZhY3RvcnksIHNoYXBlUG9vbCwgZGVnVG9SYWRzLFxyXG4gIHNoYXBlQ29sbGVjdGlvblBvb2wsIFByb3BlcnR5RmFjdG9yeSwgYm1NaW4sIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lciAqLyAvKiBleHBvcnRlZCBTaGFwZVByb3BlcnR5RmFjdG9yeSAqL3ZhciBTaGFwZVByb3BlcnR5RmFjdG9yeT1mdW5jdGlvbigpe3ZhciBpbml0RnJhbWU9LTk5OTk5OTtmdW5jdGlvbiBpbnRlcnBvbGF0ZVNoYXBlKGZyYW1lTnVtLHByZXZpb3VzVmFsdWUsY2FjaGluZyl7dmFyIGl0ZXJhdGlvbkluZGV4PWNhY2hpbmcubGFzdEluZGV4O3ZhciBrZXlQcm9wUzt2YXIga2V5UHJvcEU7dmFyIGlzSG9sZDt2YXIgajt2YXIgazt2YXIgakxlbjt2YXIga0xlbjt2YXIgcGVyYzt2YXIgdmVydGV4VmFsdWU7dmFyIGtmPXRoaXMua2V5ZnJhbWVzO2lmKGZyYW1lTnVtPGtmWzBdLnQtdGhpcy5vZmZzZXRUaW1lKXtrZXlQcm9wUz1rZlswXS5zWzBdO2lzSG9sZD10cnVlO2l0ZXJhdGlvbkluZGV4PTA7fWVsc2UgaWYoZnJhbWVOdW0+PWtmW2tmLmxlbmd0aC0xXS50LXRoaXMub2Zmc2V0VGltZSl7a2V5UHJvcFM9a2Zba2YubGVuZ3RoLTFdLnM/a2Zba2YubGVuZ3RoLTFdLnNbMF06a2Zba2YubGVuZ3RoLTJdLmVbMF07LyogaWYoa2Zba2YubGVuZ3RoIC0gMV0ucyl7XHJcbiAgICAgICAgICAgICAgICBrZXlQcm9wUyA9IGtmW2tmLmxlbmd0aCAtIDFdLnNbMF07XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAga2V5UHJvcFMgPSBrZltrZi5sZW5ndGggLSAyXS5lWzBdO1xyXG4gICAgICAgICAgICB9ICovaXNIb2xkPXRydWU7fWVsc2Uge3ZhciBpPWl0ZXJhdGlvbkluZGV4O3ZhciBsZW49a2YubGVuZ3RoLTE7dmFyIGZsYWc9dHJ1ZTt2YXIga2V5RGF0YTt2YXIgbmV4dEtleURhdGE7d2hpbGUoZmxhZyl7a2V5RGF0YT1rZltpXTtuZXh0S2V5RGF0YT1rZltpKzFdO2lmKG5leHRLZXlEYXRhLnQtdGhpcy5vZmZzZXRUaW1lPmZyYW1lTnVtKXticmVhazt9aWYoaTxsZW4tMSl7aSs9MTt9ZWxzZSB7ZmxhZz1mYWxzZTt9fWlzSG9sZD1rZXlEYXRhLmg9PT0xO2l0ZXJhdGlvbkluZGV4PWk7aWYoIWlzSG9sZCl7aWYoZnJhbWVOdW0+PW5leHRLZXlEYXRhLnQtdGhpcy5vZmZzZXRUaW1lKXtwZXJjPTE7fWVsc2UgaWYoZnJhbWVOdW08a2V5RGF0YS50LXRoaXMub2Zmc2V0VGltZSl7cGVyYz0wO31lbHNlIHt2YXIgZm5jO2lmKGtleURhdGEuX19mbmN0KXtmbmM9a2V5RGF0YS5fX2ZuY3Q7fWVsc2Uge2ZuYz1CZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyhrZXlEYXRhLm8ueCxrZXlEYXRhLm8ueSxrZXlEYXRhLmkueCxrZXlEYXRhLmkueSkuZ2V0O2tleURhdGEuX19mbmN0PWZuYzt9cGVyYz1mbmMoKGZyYW1lTnVtLShrZXlEYXRhLnQtdGhpcy5vZmZzZXRUaW1lKSkvKG5leHRLZXlEYXRhLnQtdGhpcy5vZmZzZXRUaW1lLShrZXlEYXRhLnQtdGhpcy5vZmZzZXRUaW1lKSkpO31rZXlQcm9wRT1uZXh0S2V5RGF0YS5zP25leHRLZXlEYXRhLnNbMF06a2V5RGF0YS5lWzBdO31rZXlQcm9wUz1rZXlEYXRhLnNbMF07fWpMZW49cHJldmlvdXNWYWx1ZS5fbGVuZ3RoO2tMZW49a2V5UHJvcFMuaVswXS5sZW5ndGg7Y2FjaGluZy5sYXN0SW5kZXg9aXRlcmF0aW9uSW5kZXg7Zm9yKGo9MDtqPGpMZW47ais9MSl7Zm9yKGs9MDtrPGtMZW47ays9MSl7dmVydGV4VmFsdWU9aXNIb2xkP2tleVByb3BTLmlbal1ba106a2V5UHJvcFMuaVtqXVtrXSsoa2V5UHJvcEUuaVtqXVtrXS1rZXlQcm9wUy5pW2pdW2tdKSpwZXJjO3ByZXZpb3VzVmFsdWUuaVtqXVtrXT12ZXJ0ZXhWYWx1ZTt2ZXJ0ZXhWYWx1ZT1pc0hvbGQ/a2V5UHJvcFMub1tqXVtrXTprZXlQcm9wUy5vW2pdW2tdKyhrZXlQcm9wRS5vW2pdW2tdLWtleVByb3BTLm9bal1ba10pKnBlcmM7cHJldmlvdXNWYWx1ZS5vW2pdW2tdPXZlcnRleFZhbHVlO3ZlcnRleFZhbHVlPWlzSG9sZD9rZXlQcm9wUy52W2pdW2tdOmtleVByb3BTLnZbal1ba10rKGtleVByb3BFLnZbal1ba10ta2V5UHJvcFMudltqXVtrXSkqcGVyYztwcmV2aW91c1ZhbHVlLnZbal1ba109dmVydGV4VmFsdWU7fX19ZnVuY3Rpb24gaW50ZXJwb2xhdGVTaGFwZUN1cnJlbnRUaW1lKCl7dmFyIGZyYW1lTnVtPXRoaXMuY29tcC5yZW5kZXJlZEZyYW1lLXRoaXMub2Zmc2V0VGltZTt2YXIgaW5pdFRpbWU9dGhpcy5rZXlmcmFtZXNbMF0udC10aGlzLm9mZnNldFRpbWU7dmFyIGVuZFRpbWU9dGhpcy5rZXlmcmFtZXNbdGhpcy5rZXlmcmFtZXMubGVuZ3RoLTFdLnQtdGhpcy5vZmZzZXRUaW1lO3ZhciBsYXN0RnJhbWU9dGhpcy5fY2FjaGluZy5sYXN0RnJhbWU7aWYoIShsYXN0RnJhbWUhPT1pbml0RnJhbWUmJihsYXN0RnJhbWU8aW5pdFRpbWUmJmZyYW1lTnVtPGluaXRUaW1lfHxsYXN0RnJhbWU+ZW5kVGltZSYmZnJhbWVOdW0+ZW5kVGltZSkpKXsvLy8gL1xudGhpcy5fY2FjaGluZy5sYXN0SW5kZXg9bGFzdEZyYW1lPGZyYW1lTnVtP3RoaXMuX2NhY2hpbmcubGFzdEluZGV4OjA7dGhpcy5pbnRlcnBvbGF0ZVNoYXBlKGZyYW1lTnVtLHRoaXMucHYsdGhpcy5fY2FjaGluZyk7Ly8vIC9cbn10aGlzLl9jYWNoaW5nLmxhc3RGcmFtZT1mcmFtZU51bTtyZXR1cm4gdGhpcy5wdjt9ZnVuY3Rpb24gcmVzZXRTaGFwZSgpe3RoaXMucGF0aHM9dGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjt9ZnVuY3Rpb24gc2hhcGVzRXF1YWwoc2hhcGUxLHNoYXBlMil7aWYoc2hhcGUxLl9sZW5ndGghPT1zaGFwZTIuX2xlbmd0aHx8c2hhcGUxLmMhPT1zaGFwZTIuYyl7cmV0dXJuIGZhbHNlO312YXIgaTt2YXIgbGVuPXNoYXBlMS5fbGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoc2hhcGUxLnZbaV1bMF0hPT1zaGFwZTIudltpXVswXXx8c2hhcGUxLnZbaV1bMV0hPT1zaGFwZTIudltpXVsxXXx8c2hhcGUxLm9baV1bMF0hPT1zaGFwZTIub1tpXVswXXx8c2hhcGUxLm9baV1bMV0hPT1zaGFwZTIub1tpXVsxXXx8c2hhcGUxLmlbaV1bMF0hPT1zaGFwZTIuaVtpXVswXXx8c2hhcGUxLmlbaV1bMV0hPT1zaGFwZTIuaVtpXVsxXSl7cmV0dXJuIGZhbHNlO319cmV0dXJuIHRydWU7fWZ1bmN0aW9uIHNldFZWYWx1ZShuZXdQYXRoKXtpZighc2hhcGVzRXF1YWwodGhpcy52LG5ld1BhdGgpKXt0aGlzLnY9c2hhcGVQb29sLmNsb25lKG5ld1BhdGgpO3RoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO3RoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy52KTt0aGlzLl9tZGY9dHJ1ZTt0aGlzLnBhdGhzPXRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247fX1mdW5jdGlvbiBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlKCl7aWYodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZD09PXRoaXMuZnJhbWVJZCl7cmV0dXJuO31pZighdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKXt0aGlzLl9tZGY9ZmFsc2U7cmV0dXJuO31pZih0aGlzLmxvY2spe3RoaXMuc2V0VlZhbHVlKHRoaXMucHYpO3JldHVybjt9dGhpcy5sb2NrPXRydWU7dGhpcy5fbWRmPWZhbHNlO3ZhciBmaW5hbFZhbHVlO2lmKHRoaXMua2Ype2ZpbmFsVmFsdWU9dGhpcy5wdjt9ZWxzZSBpZih0aGlzLmRhdGEua3Mpe2ZpbmFsVmFsdWU9dGhpcy5kYXRhLmtzLms7fWVsc2Uge2ZpbmFsVmFsdWU9dGhpcy5kYXRhLnB0Lms7fXZhciBpO3ZhciBsZW49dGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7ZmluYWxWYWx1ZT10aGlzLmVmZmVjdHNTZXF1ZW5jZVtpXShmaW5hbFZhbHVlKTt9dGhpcy5zZXRWVmFsdWUoZmluYWxWYWx1ZSk7dGhpcy5sb2NrPWZhbHNlO3RoaXMuZnJhbWVJZD10aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO31mdW5jdGlvbiBTaGFwZVByb3BlcnR5KGVsZW0sZGF0YSx0eXBlKXt0aGlzLnByb3BUeXBlPSdzaGFwZSc7dGhpcy5jb21wPWVsZW0uY29tcDt0aGlzLmNvbnRhaW5lcj1lbGVtO3RoaXMuZWxlbT1lbGVtO3RoaXMuZGF0YT1kYXRhO3RoaXMuaz1mYWxzZTt0aGlzLmtmPWZhbHNlO3RoaXMuX21kZj1mYWxzZTt2YXIgcGF0aERhdGE9dHlwZT09PTM/ZGF0YS5wdC5rOmRhdGEua3Muazt0aGlzLnY9c2hhcGVQb29sLmNsb25lKHBhdGhEYXRhKTt0aGlzLnB2PXNoYXBlUG9vbC5jbG9uZSh0aGlzLnYpO3RoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb249c2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKTt0aGlzLnBhdGhzPXRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247dGhpcy5wYXRocy5hZGRTaGFwZSh0aGlzLnYpO3RoaXMucmVzZXQ9cmVzZXRTaGFwZTt0aGlzLmVmZmVjdHNTZXF1ZW5jZT1bXTt9ZnVuY3Rpb24gYWRkRWZmZWN0KGVmZmVjdEZ1bmN0aW9uKXt0aGlzLmVmZmVjdHNTZXF1ZW5jZS5wdXNoKGVmZmVjdEZ1bmN0aW9uKTt0aGlzLmNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7fVNoYXBlUHJvcGVydHkucHJvdG90eXBlLmludGVycG9sYXRlU2hhcGU9aW50ZXJwb2xhdGVTaGFwZTtTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZT1wcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1NoYXBlUHJvcGVydHkucHJvdG90eXBlLnNldFZWYWx1ZT1zZXRWVmFsdWU7U2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuYWRkRWZmZWN0PWFkZEVmZmVjdDtmdW5jdGlvbiBLZXlmcmFtZWRTaGFwZVByb3BlcnR5KGVsZW0sZGF0YSx0eXBlKXt0aGlzLnByb3BUeXBlPSdzaGFwZSc7dGhpcy5jb21wPWVsZW0uY29tcDt0aGlzLmVsZW09ZWxlbTt0aGlzLmNvbnRhaW5lcj1lbGVtO3RoaXMub2Zmc2V0VGltZT1lbGVtLmRhdGEuc3Q7dGhpcy5rZXlmcmFtZXM9dHlwZT09PTM/ZGF0YS5wdC5rOmRhdGEua3Muazt0aGlzLms9dHJ1ZTt0aGlzLmtmPXRydWU7dmFyIGxlbj10aGlzLmtleWZyYW1lc1swXS5zWzBdLmkubGVuZ3RoO3RoaXMudj1zaGFwZVBvb2wubmV3RWxlbWVudCgpO3RoaXMudi5zZXRQYXRoRGF0YSh0aGlzLmtleWZyYW1lc1swXS5zWzBdLmMsbGVuKTt0aGlzLnB2PXNoYXBlUG9vbC5jbG9uZSh0aGlzLnYpO3RoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb249c2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKTt0aGlzLnBhdGhzPXRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247dGhpcy5wYXRocy5hZGRTaGFwZSh0aGlzLnYpO3RoaXMubGFzdEZyYW1lPWluaXRGcmFtZTt0aGlzLnJlc2V0PXJlc2V0U2hhcGU7dGhpcy5fY2FjaGluZz17bGFzdEZyYW1lOmluaXRGcmFtZSxsYXN0SW5kZXg6MH07dGhpcy5lZmZlY3RzU2VxdWVuY2U9W2ludGVycG9sYXRlU2hhcGVDdXJyZW50VGltZS5iaW5kKHRoaXMpXTt9S2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWU9cHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZTtLZXlmcmFtZWRTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5pbnRlcnBvbGF0ZVNoYXBlPWludGVycG9sYXRlU2hhcGU7S2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuc2V0VlZhbHVlPXNldFZWYWx1ZTtLZXlmcmFtZWRTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5hZGRFZmZlY3Q9YWRkRWZmZWN0O3ZhciBFbGxTaGFwZVByb3BlcnR5PWZ1bmN0aW9uKCl7dmFyIGNQb2ludD1yb3VuZENvcm5lcjtmdW5jdGlvbiBFbGxTaGFwZVByb3BlcnR5RmFjdG9yeShlbGVtLGRhdGEpey8qIHRoaXMudiA9IHtcclxuICAgICAgICAgICAgICAgIHY6IGNyZWF0ZVNpemVkQXJyYXkoNCksXHJcbiAgICAgICAgICAgICAgICBpOiBjcmVhdGVTaXplZEFycmF5KDQpLFxyXG4gICAgICAgICAgICAgICAgbzogY3JlYXRlU2l6ZWRBcnJheSg0KSxcclxuICAgICAgICAgICAgICAgIGM6IHRydWVcclxuICAgICAgICAgICAgfTsgKi90aGlzLnY9c2hhcGVQb29sLm5ld0VsZW1lbnQoKTt0aGlzLnYuc2V0UGF0aERhdGEodHJ1ZSw0KTt0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uPXNoYXBlQ29sbGVjdGlvblBvb2wubmV3U2hhcGVDb2xsZWN0aW9uKCk7dGhpcy5wYXRocz10aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO3RoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy52KTt0aGlzLmQ9ZGF0YS5kO3RoaXMuZWxlbT1lbGVtO3RoaXMuY29tcD1lbGVtLmNvbXA7dGhpcy5mcmFtZUlkPS0xO3RoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTt0aGlzLnA9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnAsMSwwLHRoaXMpO3RoaXMucz1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEucywxLDAsdGhpcyk7aWYodGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpe3RoaXMuaz10cnVlO31lbHNlIHt0aGlzLms9ZmFsc2U7dGhpcy5jb252ZXJ0RWxsVG9QYXRoKCk7fX1FbGxTaGFwZVByb3BlcnR5RmFjdG9yeS5wcm90b3R5cGU9e3Jlc2V0OnJlc2V0U2hhcGUsZ2V0VmFsdWU6ZnVuY3Rpb24gZ2V0VmFsdWUoKXtpZih0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkPT09dGhpcy5mcmFtZUlkKXtyZXR1cm47fXRoaXMuZnJhbWVJZD10aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO3RoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7aWYodGhpcy5fbWRmKXt0aGlzLmNvbnZlcnRFbGxUb1BhdGgoKTt9fSxjb252ZXJ0RWxsVG9QYXRoOmZ1bmN0aW9uIGNvbnZlcnRFbGxUb1BhdGgoKXt2YXIgcDA9dGhpcy5wLnZbMF07dmFyIHAxPXRoaXMucC52WzFdO3ZhciBzMD10aGlzLnMudlswXS8yO3ZhciBzMT10aGlzLnMudlsxXS8yO3ZhciBfY3c9dGhpcy5kIT09Mzt2YXIgX3Y9dGhpcy52O192LnZbMF1bMF09cDA7X3YudlswXVsxXT1wMS1zMTtfdi52WzFdWzBdPV9jdz9wMCtzMDpwMC1zMDtfdi52WzFdWzFdPXAxO192LnZbMl1bMF09cDA7X3YudlsyXVsxXT1wMStzMTtfdi52WzNdWzBdPV9jdz9wMC1zMDpwMCtzMDtfdi52WzNdWzFdPXAxO192LmlbMF1bMF09X2N3P3AwLXMwKmNQb2ludDpwMCtzMCpjUG9pbnQ7X3YuaVswXVsxXT1wMS1zMTtfdi5pWzFdWzBdPV9jdz9wMCtzMDpwMC1zMDtfdi5pWzFdWzFdPXAxLXMxKmNQb2ludDtfdi5pWzJdWzBdPV9jdz9wMCtzMCpjUG9pbnQ6cDAtczAqY1BvaW50O192LmlbMl1bMV09cDErczE7X3YuaVszXVswXT1fY3c/cDAtczA6cDArczA7X3YuaVszXVsxXT1wMStzMSpjUG9pbnQ7X3Yub1swXVswXT1fY3c/cDArczAqY1BvaW50OnAwLXMwKmNQb2ludDtfdi5vWzBdWzFdPXAxLXMxO192Lm9bMV1bMF09X2N3P3AwK3MwOnAwLXMwO192Lm9bMV1bMV09cDErczEqY1BvaW50O192Lm9bMl1bMF09X2N3P3AwLXMwKmNQb2ludDpwMCtzMCpjUG9pbnQ7X3Yub1syXVsxXT1wMStzMTtfdi5vWzNdWzBdPV9jdz9wMC1zMDpwMCtzMDtfdi5vWzNdWzFdPXAxLXMxKmNQb2ludDt9fTtleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sRWxsU2hhcGVQcm9wZXJ0eUZhY3RvcnkpO3JldHVybiBFbGxTaGFwZVByb3BlcnR5RmFjdG9yeTt9KCk7dmFyIFN0YXJTaGFwZVByb3BlcnR5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gU3RhclNoYXBlUHJvcGVydHlGYWN0b3J5KGVsZW0sZGF0YSl7dGhpcy52PXNoYXBlUG9vbC5uZXdFbGVtZW50KCk7dGhpcy52LnNldFBhdGhEYXRhKHRydWUsMCk7dGhpcy5lbGVtPWVsZW07dGhpcy5jb21wPWVsZW0uY29tcDt0aGlzLmRhdGE9ZGF0YTt0aGlzLmZyYW1lSWQ9LTE7dGhpcy5kPWRhdGEuZDt0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7aWYoZGF0YS5zeT09PTEpe3RoaXMuaXI9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLmlyLDAsMCx0aGlzKTt0aGlzLmlzPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5pcywwLDAuMDEsdGhpcyk7dGhpcy5jb252ZXJ0VG9QYXRoPXRoaXMuY29udmVydFN0YXJUb1BhdGg7fWVsc2Uge3RoaXMuY29udmVydFRvUGF0aD10aGlzLmNvbnZlcnRQb2x5Z29uVG9QYXRoO310aGlzLnB0PVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5wdCwwLDAsdGhpcyk7dGhpcy5wPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5wLDEsMCx0aGlzKTt0aGlzLnI9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnIsMCxkZWdUb1JhZHMsdGhpcyk7dGhpcy5vcj1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEub3IsMCwwLHRoaXMpO3RoaXMub3M9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLm9zLDAsMC4wMSx0aGlzKTt0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uPXNoYXBlQ29sbGVjdGlvblBvb2wubmV3U2hhcGVDb2xsZWN0aW9uKCk7dGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnYpO3RoaXMucGF0aHM9dGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjtpZih0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCl7dGhpcy5rPXRydWU7fWVsc2Uge3RoaXMuaz1mYWxzZTt0aGlzLmNvbnZlcnRUb1BhdGgoKTt9fVN0YXJTaGFwZVByb3BlcnR5RmFjdG9yeS5wcm90b3R5cGU9e3Jlc2V0OnJlc2V0U2hhcGUsZ2V0VmFsdWU6ZnVuY3Rpb24gZ2V0VmFsdWUoKXtpZih0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkPT09dGhpcy5mcmFtZUlkKXtyZXR1cm47fXRoaXMuZnJhbWVJZD10aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO3RoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7aWYodGhpcy5fbWRmKXt0aGlzLmNvbnZlcnRUb1BhdGgoKTt9fSxjb252ZXJ0U3RhclRvUGF0aDpmdW5jdGlvbiBjb252ZXJ0U3RhclRvUGF0aCgpe3ZhciBudW1QdHM9TWF0aC5mbG9vcih0aGlzLnB0LnYpKjI7dmFyIGFuZ2xlPU1hdGguUEkqMi9udW1QdHM7LyogdGhpcy52LnYubGVuZ3RoID0gbnVtUHRzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52LmkubGVuZ3RoID0gbnVtUHRzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52Lm8ubGVuZ3RoID0gbnVtUHRzOyAqL3ZhciBsb25nRmxhZz10cnVlO3ZhciBsb25nUmFkPXRoaXMub3Iudjt2YXIgc2hvcnRSYWQ9dGhpcy5pci52O3ZhciBsb25nUm91bmQ9dGhpcy5vcy52O3ZhciBzaG9ydFJvdW5kPXRoaXMuaXMudjt2YXIgbG9uZ1BlcmltU2VnbWVudD0yKk1hdGguUEkqbG9uZ1JhZC8obnVtUHRzKjIpO3ZhciBzaG9ydFBlcmltU2VnbWVudD0yKk1hdGguUEkqc2hvcnRSYWQvKG51bVB0cyoyKTt2YXIgaTt2YXIgcmFkO3ZhciByb3VuZG5lc3M7dmFyIHBlcmltU2VnbWVudDt2YXIgY3VycmVudEFuZz0tTWF0aC5QSS8yO2N1cnJlbnRBbmcrPXRoaXMuci52O3ZhciBkaXI9dGhpcy5kYXRhLmQ9PT0zPy0xOjE7dGhpcy52Ll9sZW5ndGg9MDtmb3IoaT0wO2k8bnVtUHRzO2krPTEpe3JhZD1sb25nRmxhZz9sb25nUmFkOnNob3J0UmFkO3JvdW5kbmVzcz1sb25nRmxhZz9sb25nUm91bmQ6c2hvcnRSb3VuZDtwZXJpbVNlZ21lbnQ9bG9uZ0ZsYWc/bG9uZ1BlcmltU2VnbWVudDpzaG9ydFBlcmltU2VnbWVudDt2YXIgeD1yYWQqTWF0aC5jb3MoY3VycmVudEFuZyk7dmFyIHk9cmFkKk1hdGguc2luKGN1cnJlbnRBbmcpO3ZhciBveD14PT09MCYmeT09PTA/MDp5L01hdGguc3FydCh4KngreSp5KTt2YXIgb3k9eD09PTAmJnk9PT0wPzA6LXgvTWF0aC5zcXJ0KHgqeCt5KnkpO3grPSt0aGlzLnAudlswXTt5Kz0rdGhpcy5wLnZbMV07dGhpcy52LnNldFRyaXBsZUF0KHgseSx4LW94KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyLHktb3kqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXIseCtveCpwZXJpbVNlZ21lbnQqcm91bmRuZXNzKmRpcix5K295KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyLGksdHJ1ZSk7LyogdGhpcy52LnZbaV0gPSBbeCx5XTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnYuaVtpXSA9IFt4K294KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyLHkrb3kqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudi5vW2ldID0gW3gtb3gqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXIseS1veSpwZXJpbVNlZ21lbnQqcm91bmRuZXNzKmRpcl07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52Ll9sZW5ndGggPSBudW1QdHM7ICovbG9uZ0ZsYWc9IWxvbmdGbGFnO2N1cnJlbnRBbmcrPWFuZ2xlKmRpcjt9fSxjb252ZXJ0UG9seWdvblRvUGF0aDpmdW5jdGlvbiBjb252ZXJ0UG9seWdvblRvUGF0aCgpe3ZhciBudW1QdHM9TWF0aC5mbG9vcih0aGlzLnB0LnYpO3ZhciBhbmdsZT1NYXRoLlBJKjIvbnVtUHRzO3ZhciByYWQ9dGhpcy5vci52O3ZhciByb3VuZG5lc3M9dGhpcy5vcy52O3ZhciBwZXJpbVNlZ21lbnQ9MipNYXRoLlBJKnJhZC8obnVtUHRzKjQpO3ZhciBpO3ZhciBjdXJyZW50QW5nPS1NYXRoLlBJKjAuNTt2YXIgZGlyPXRoaXMuZGF0YS5kPT09Mz8tMToxO2N1cnJlbnRBbmcrPXRoaXMuci52O3RoaXMudi5fbGVuZ3RoPTA7Zm9yKGk9MDtpPG51bVB0cztpKz0xKXt2YXIgeD1yYWQqTWF0aC5jb3MoY3VycmVudEFuZyk7dmFyIHk9cmFkKk1hdGguc2luKGN1cnJlbnRBbmcpO3ZhciBveD14PT09MCYmeT09PTA/MDp5L01hdGguc3FydCh4KngreSp5KTt2YXIgb3k9eD09PTAmJnk9PT0wPzA6LXgvTWF0aC5zcXJ0KHgqeCt5KnkpO3grPSt0aGlzLnAudlswXTt5Kz0rdGhpcy5wLnZbMV07dGhpcy52LnNldFRyaXBsZUF0KHgseSx4LW94KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyLHktb3kqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXIseCtveCpwZXJpbVNlZ21lbnQqcm91bmRuZXNzKmRpcix5K295KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyLGksdHJ1ZSk7Y3VycmVudEFuZys9YW5nbGUqZGlyO310aGlzLnBhdGhzLmxlbmd0aD0wO3RoaXMucGF0aHNbMF09dGhpcy52O319O2V4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSxTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkpO3JldHVybiBTdGFyU2hhcGVQcm9wZXJ0eUZhY3Rvcnk7fSgpO3ZhciBSZWN0U2hhcGVQcm9wZXJ0eT1mdW5jdGlvbigpe2Z1bmN0aW9uIFJlY3RTaGFwZVByb3BlcnR5RmFjdG9yeShlbGVtLGRhdGEpe3RoaXMudj1zaGFwZVBvb2wubmV3RWxlbWVudCgpO3RoaXMudi5jPXRydWU7dGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbj1zaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO3RoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy52KTt0aGlzLnBhdGhzPXRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247dGhpcy5lbGVtPWVsZW07dGhpcy5jb21wPWVsZW0uY29tcDt0aGlzLmZyYW1lSWQ9LTE7dGhpcy5kPWRhdGEuZDt0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7dGhpcy5wPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5wLDEsMCx0aGlzKTt0aGlzLnM9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnMsMSwwLHRoaXMpO3RoaXMucj1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEuciwwLDAsdGhpcyk7aWYodGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpe3RoaXMuaz10cnVlO31lbHNlIHt0aGlzLms9ZmFsc2U7dGhpcy5jb252ZXJ0UmVjdFRvUGF0aCgpO319UmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5LnByb3RvdHlwZT17Y29udmVydFJlY3RUb1BhdGg6ZnVuY3Rpb24gY29udmVydFJlY3RUb1BhdGgoKXt2YXIgcDA9dGhpcy5wLnZbMF07dmFyIHAxPXRoaXMucC52WzFdO3ZhciB2MD10aGlzLnMudlswXS8yO3ZhciB2MT10aGlzLnMudlsxXS8yO3ZhciByb3VuZD1ibU1pbih2MCx2MSx0aGlzLnIudik7dmFyIGNQb2ludD1yb3VuZCooMS1yb3VuZENvcm5lcik7dGhpcy52Ll9sZW5ndGg9MDtpZih0aGlzLmQ9PT0yfHx0aGlzLmQ9PT0xKXt0aGlzLnYuc2V0VHJpcGxlQXQocDArdjAscDEtdjErcm91bmQscDArdjAscDEtdjErcm91bmQscDArdjAscDEtdjErY1BvaW50LDAsdHJ1ZSk7dGhpcy52LnNldFRyaXBsZUF0KHAwK3YwLHAxK3YxLXJvdW5kLHAwK3YwLHAxK3YxLWNQb2ludCxwMCt2MCxwMSt2MS1yb3VuZCwxLHRydWUpO2lmKHJvdW5kIT09MCl7dGhpcy52LnNldFRyaXBsZUF0KHAwK3YwLXJvdW5kLHAxK3YxLHAwK3YwLXJvdW5kLHAxK3YxLHAwK3YwLWNQb2ludCxwMSt2MSwyLHRydWUpO3RoaXMudi5zZXRUcmlwbGVBdChwMC12MCtyb3VuZCxwMSt2MSxwMC12MCtjUG9pbnQscDErdjEscDAtdjArcm91bmQscDErdjEsMyx0cnVlKTt0aGlzLnYuc2V0VHJpcGxlQXQocDAtdjAscDErdjEtcm91bmQscDAtdjAscDErdjEtcm91bmQscDAtdjAscDErdjEtY1BvaW50LDQsdHJ1ZSk7dGhpcy52LnNldFRyaXBsZUF0KHAwLXYwLHAxLXYxK3JvdW5kLHAwLXYwLHAxLXYxK2NQb2ludCxwMC12MCxwMS12MStyb3VuZCw1LHRydWUpO3RoaXMudi5zZXRUcmlwbGVBdChwMC12MCtyb3VuZCxwMS12MSxwMC12MCtyb3VuZCxwMS12MSxwMC12MCtjUG9pbnQscDEtdjEsNix0cnVlKTt0aGlzLnYuc2V0VHJpcGxlQXQocDArdjAtcm91bmQscDEtdjEscDArdjAtY1BvaW50LHAxLXYxLHAwK3YwLXJvdW5kLHAxLXYxLDcsdHJ1ZSk7fWVsc2Uge3RoaXMudi5zZXRUcmlwbGVBdChwMC12MCxwMSt2MSxwMC12MCtjUG9pbnQscDErdjEscDAtdjAscDErdjEsMik7dGhpcy52LnNldFRyaXBsZUF0KHAwLXYwLHAxLXYxLHAwLXYwLHAxLXYxK2NQb2ludCxwMC12MCxwMS12MSwzKTt9fWVsc2Uge3RoaXMudi5zZXRUcmlwbGVBdChwMCt2MCxwMS12MStyb3VuZCxwMCt2MCxwMS12MStjUG9pbnQscDArdjAscDEtdjErcm91bmQsMCx0cnVlKTtpZihyb3VuZCE9PTApe3RoaXMudi5zZXRUcmlwbGVBdChwMCt2MC1yb3VuZCxwMS12MSxwMCt2MC1yb3VuZCxwMS12MSxwMCt2MC1jUG9pbnQscDEtdjEsMSx0cnVlKTt0aGlzLnYuc2V0VHJpcGxlQXQocDAtdjArcm91bmQscDEtdjEscDAtdjArY1BvaW50LHAxLXYxLHAwLXYwK3JvdW5kLHAxLXYxLDIsdHJ1ZSk7dGhpcy52LnNldFRyaXBsZUF0KHAwLXYwLHAxLXYxK3JvdW5kLHAwLXYwLHAxLXYxK3JvdW5kLHAwLXYwLHAxLXYxK2NQb2ludCwzLHRydWUpO3RoaXMudi5zZXRUcmlwbGVBdChwMC12MCxwMSt2MS1yb3VuZCxwMC12MCxwMSt2MS1jUG9pbnQscDAtdjAscDErdjEtcm91bmQsNCx0cnVlKTt0aGlzLnYuc2V0VHJpcGxlQXQocDAtdjArcm91bmQscDErdjEscDAtdjArcm91bmQscDErdjEscDAtdjArY1BvaW50LHAxK3YxLDUsdHJ1ZSk7dGhpcy52LnNldFRyaXBsZUF0KHAwK3YwLXJvdW5kLHAxK3YxLHAwK3YwLWNQb2ludCxwMSt2MSxwMCt2MC1yb3VuZCxwMSt2MSw2LHRydWUpO3RoaXMudi5zZXRUcmlwbGVBdChwMCt2MCxwMSt2MS1yb3VuZCxwMCt2MCxwMSt2MS1yb3VuZCxwMCt2MCxwMSt2MS1jUG9pbnQsNyx0cnVlKTt9ZWxzZSB7dGhpcy52LnNldFRyaXBsZUF0KHAwLXYwLHAxLXYxLHAwLXYwK2NQb2ludCxwMS12MSxwMC12MCxwMS12MSwxLHRydWUpO3RoaXMudi5zZXRUcmlwbGVBdChwMC12MCxwMSt2MSxwMC12MCxwMSt2MS1jUG9pbnQscDAtdjAscDErdjEsMix0cnVlKTt0aGlzLnYuc2V0VHJpcGxlQXQocDArdjAscDErdjEscDArdjAtY1BvaW50LHAxK3YxLHAwK3YwLHAxK3YxLDMsdHJ1ZSk7fX19LGdldFZhbHVlOmZ1bmN0aW9uIGdldFZhbHVlKCl7aWYodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZD09PXRoaXMuZnJhbWVJZCl7cmV0dXJuO310aGlzLmZyYW1lSWQ9dGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDt0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO2lmKHRoaXMuX21kZil7dGhpcy5jb252ZXJ0UmVjdFRvUGF0aCgpO319LHJlc2V0OnJlc2V0U2hhcGV9O2V4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSxSZWN0U2hhcGVQcm9wZXJ0eUZhY3RvcnkpO3JldHVybiBSZWN0U2hhcGVQcm9wZXJ0eUZhY3Rvcnk7fSgpO2Z1bmN0aW9uIGdldFNoYXBlUHJvcChlbGVtLGRhdGEsdHlwZSl7dmFyIHByb3A7aWYodHlwZT09PTN8fHR5cGU9PT00KXt2YXIgZGF0YVByb3A9dHlwZT09PTM/ZGF0YS5wdDpkYXRhLmtzO3ZhciBrZXlzPWRhdGFQcm9wLms7aWYoa2V5cy5sZW5ndGgpe3Byb3A9bmV3IEtleWZyYW1lZFNoYXBlUHJvcGVydHkoZWxlbSxkYXRhLHR5cGUpO31lbHNlIHtwcm9wPW5ldyBTaGFwZVByb3BlcnR5KGVsZW0sZGF0YSx0eXBlKTt9fWVsc2UgaWYodHlwZT09PTUpe3Byb3A9bmV3IFJlY3RTaGFwZVByb3BlcnR5KGVsZW0sZGF0YSk7fWVsc2UgaWYodHlwZT09PTYpe3Byb3A9bmV3IEVsbFNoYXBlUHJvcGVydHkoZWxlbSxkYXRhKTt9ZWxzZSBpZih0eXBlPT09Nyl7cHJvcD1uZXcgU3RhclNoYXBlUHJvcGVydHkoZWxlbSxkYXRhKTt9aWYocHJvcC5rKXtlbGVtLmFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTt9cmV0dXJuIHByb3A7fWZ1bmN0aW9uIGdldENvbnN0cnVjdG9yRnVuY3Rpb24oKXtyZXR1cm4gU2hhcGVQcm9wZXJ0eTt9ZnVuY3Rpb24gZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbigpe3JldHVybiBLZXlmcmFtZWRTaGFwZVByb3BlcnR5O312YXIgb2I9e307b2IuZ2V0U2hhcGVQcm9wPWdldFNoYXBlUHJvcDtvYi5nZXRDb25zdHJ1Y3RvckZ1bmN0aW9uPWdldENvbnN0cnVjdG9yRnVuY3Rpb247b2IuZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbj1nZXRLZXlmcmFtZWRDb25zdHJ1Y3RvckZ1bmN0aW9uO3JldHVybiBvYjt9KCk7LyogZ2xvYmFsIHNoYXBlQ29sbGVjdGlvblBvb2wsIGluaXRpYWxEZWZhdWx0RnJhbWUsIGV4dGVuZFByb3RvdHlwZSwgRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyICovIC8qIGV4cG9ydGVkIFNoYXBlTW9kaWZpZXJzICovdmFyIFNoYXBlTW9kaWZpZXJzPWZ1bmN0aW9uKCl7dmFyIG9iPXt9O3ZhciBtb2RpZmllcnM9e307b2IucmVnaXN0ZXJNb2RpZmllcj1yZWdpc3Rlck1vZGlmaWVyO29iLmdldE1vZGlmaWVyPWdldE1vZGlmaWVyO2Z1bmN0aW9uIHJlZ2lzdGVyTW9kaWZpZXIobm0sZmFjdG9yeSl7aWYoIW1vZGlmaWVyc1tubV0pe21vZGlmaWVyc1tubV09ZmFjdG9yeTt9fWZ1bmN0aW9uIGdldE1vZGlmaWVyKG5tLGVsZW0sZGF0YSl7cmV0dXJuIG5ldyBtb2RpZmllcnNbbm1dKGVsZW0sZGF0YSk7fXJldHVybiBvYjt9KCk7ZnVuY3Rpb24gU2hhcGVNb2RpZmllcigpe31TaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzPWZ1bmN0aW9uKCl7fTtTaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZVRvTW9kaWZpZXI9ZnVuY3Rpb24oKXt9O1NoYXBlTW9kaWZpZXIucHJvdG90eXBlLmFkZFNoYXBlPWZ1bmN0aW9uKGRhdGEpe2lmKCF0aGlzLmNsb3NlZCl7Ly8gQWRkaW5nIHNoYXBlIHRvIGR5bmFtaWMgcHJvcGVydGllcy4gSXQgY292ZXJzIHRoZSBjYXNlIHdoZXJlIGEgc2hhcGUgaGFzIG5vIGVmZmVjdHMgYXBwbGllZCwgdG8gcmVzZXQgaXQncyBfbWRmIHN0YXRlIG9uIGV2ZXJ5IHRpY2suXG5kYXRhLnNoLmNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkoZGF0YS5zaCk7dmFyIHNoYXBlRGF0YT17c2hhcGU6ZGF0YS5zaCxkYXRhOmRhdGEsbG9jYWxTaGFwZUNvbGxlY3Rpb246c2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKX07dGhpcy5zaGFwZXMucHVzaChzaGFwZURhdGEpO3RoaXMuYWRkU2hhcGVUb01vZGlmaWVyKHNoYXBlRGF0YSk7aWYodGhpcy5faXNBbmltYXRlZCl7ZGF0YS5zZXRBc0FuaW1hdGVkKCk7fX19O1NoYXBlTW9kaWZpZXIucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oZWxlbSxkYXRhKXt0aGlzLnNoYXBlcz1bXTt0aGlzLmVsZW09ZWxlbTt0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7dGhpcy5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzKGVsZW0sZGF0YSk7dGhpcy5mcmFtZUlkPWluaXRpYWxEZWZhdWx0RnJhbWU7dGhpcy5jbG9zZWQ9ZmFsc2U7dGhpcy5rPWZhbHNlO2lmKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKXt0aGlzLms9dHJ1ZTt9ZWxzZSB7dGhpcy5nZXRWYWx1ZSh0cnVlKTt9fTtTaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzS2V5cz1mdW5jdGlvbigpe2lmKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ9PT10aGlzLmZyYW1lSWQpe3JldHVybjt9dGhpcy5mcmFtZUlkPXRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7dGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTt9O2V4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSxTaGFwZU1vZGlmaWVyKTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBTaGFwZU1vZGlmaWVyLCBQcm9wZXJ0eUZhY3RvcnksIHNlZ21lbnRzTGVuZ3RoUG9vbCwgYmV6LCBzaGFwZVBvb2wsIFNoYXBlTW9kaWZpZXJzICovZnVuY3Rpb24gVHJpbU1vZGlmaWVyKCl7fWV4dGVuZFByb3RvdHlwZShbU2hhcGVNb2RpZmllcl0sVHJpbU1vZGlmaWVyKTtUcmltTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXM9ZnVuY3Rpb24oZWxlbSxkYXRhKXt0aGlzLnM9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnMsMCwwLjAxLHRoaXMpO3RoaXMuZT1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEuZSwwLDAuMDEsdGhpcyk7dGhpcy5vPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5vLDAsMCx0aGlzKTt0aGlzLnNWYWx1ZT0wO3RoaXMuZVZhbHVlPTA7dGhpcy5nZXRWYWx1ZT10aGlzLnByb2Nlc3NLZXlzO3RoaXMubT1kYXRhLm07dGhpcy5faXNBbmltYXRlZD0hIXRoaXMucy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RofHwhIXRoaXMuZS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RofHwhIXRoaXMuby5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO307VHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZVRvTW9kaWZpZXI9ZnVuY3Rpb24oc2hhcGVEYXRhKXtzaGFwZURhdGEucGF0aHNEYXRhPVtdO307VHJpbU1vZGlmaWVyLnByb3RvdHlwZS5jYWxjdWxhdGVTaGFwZUVkZ2VzPWZ1bmN0aW9uKHMsZSxzaGFwZUxlbmd0aCxhZGRlZExlbmd0aCx0b3RhbE1vZGlmaWVyTGVuZ3RoKXt2YXIgc2VnbWVudHM9W107aWYoZTw9MSl7c2VnbWVudHMucHVzaCh7czpzLGU6ZX0pO31lbHNlIGlmKHM+PTEpe3NlZ21lbnRzLnB1c2goe3M6cy0xLGU6ZS0xfSk7fWVsc2Uge3NlZ21lbnRzLnB1c2goe3M6cyxlOjF9KTtzZWdtZW50cy5wdXNoKHtzOjAsZTplLTF9KTt9dmFyIHNoYXBlU2VnbWVudHM9W107dmFyIGk7dmFyIGxlbj1zZWdtZW50cy5sZW5ndGg7dmFyIHNlZ21lbnRPYjtmb3IoaT0wO2k8bGVuO2krPTEpe3NlZ21lbnRPYj1zZWdtZW50c1tpXTtpZighKHNlZ21lbnRPYi5lKnRvdGFsTW9kaWZpZXJMZW5ndGg8YWRkZWRMZW5ndGh8fHNlZ21lbnRPYi5zKnRvdGFsTW9kaWZpZXJMZW5ndGg+YWRkZWRMZW5ndGgrc2hhcGVMZW5ndGgpKXt2YXIgc2hhcGVTO3ZhciBzaGFwZUU7aWYoc2VnbWVudE9iLnMqdG90YWxNb2RpZmllckxlbmd0aDw9YWRkZWRMZW5ndGgpe3NoYXBlUz0wO31lbHNlIHtzaGFwZVM9KHNlZ21lbnRPYi5zKnRvdGFsTW9kaWZpZXJMZW5ndGgtYWRkZWRMZW5ndGgpL3NoYXBlTGVuZ3RoO31pZihzZWdtZW50T2IuZSp0b3RhbE1vZGlmaWVyTGVuZ3RoPj1hZGRlZExlbmd0aCtzaGFwZUxlbmd0aCl7c2hhcGVFPTE7fWVsc2Uge3NoYXBlRT0oc2VnbWVudE9iLmUqdG90YWxNb2RpZmllckxlbmd0aC1hZGRlZExlbmd0aCkvc2hhcGVMZW5ndGg7fXNoYXBlU2VnbWVudHMucHVzaChbc2hhcGVTLHNoYXBlRV0pO319aWYoIXNoYXBlU2VnbWVudHMubGVuZ3RoKXtzaGFwZVNlZ21lbnRzLnB1c2goWzAsMF0pO31yZXR1cm4gc2hhcGVTZWdtZW50czt9O1RyaW1Nb2RpZmllci5wcm90b3R5cGUucmVsZWFzZVBhdGhzRGF0YT1mdW5jdGlvbihwYXRoc0RhdGEpe3ZhciBpO3ZhciBsZW49cGF0aHNEYXRhLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3NlZ21lbnRzTGVuZ3RoUG9vbC5yZWxlYXNlKHBhdGhzRGF0YVtpXSk7fXBhdGhzRGF0YS5sZW5ndGg9MDtyZXR1cm4gcGF0aHNEYXRhO307VHJpbU1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzPWZ1bmN0aW9uKF9pc0ZpcnN0RnJhbWUpe3ZhciBzO3ZhciBlO2lmKHRoaXMuX21kZnx8X2lzRmlyc3RGcmFtZSl7dmFyIG89dGhpcy5vLnYlMzYwLzM2MDtpZihvPDApe28rPTE7fWlmKHRoaXMucy52PjEpe3M9MStvO31lbHNlIGlmKHRoaXMucy52PDApe3M9MCtvO31lbHNlIHtzPXRoaXMucy52K287fWlmKHRoaXMuZS52PjEpe2U9MStvO31lbHNlIGlmKHRoaXMuZS52PDApe2U9MCtvO31lbHNlIHtlPXRoaXMuZS52K287fWlmKHM+ZSl7dmFyIF9zPXM7cz1lO2U9X3M7fXM9TWF0aC5yb3VuZChzKjEwMDAwKSowLjAwMDE7ZT1NYXRoLnJvdW5kKGUqMTAwMDApKjAuMDAwMTt0aGlzLnNWYWx1ZT1zO3RoaXMuZVZhbHVlPWU7fWVsc2Uge3M9dGhpcy5zVmFsdWU7ZT10aGlzLmVWYWx1ZTt9dmFyIHNoYXBlUGF0aHM7dmFyIGk7dmFyIGxlbj10aGlzLnNoYXBlcy5sZW5ndGg7dmFyIGo7dmFyIGpMZW47dmFyIHBhdGhzRGF0YTt2YXIgcGF0aERhdGE7dmFyIHRvdGFsU2hhcGVMZW5ndGg7dmFyIHRvdGFsTW9kaWZpZXJMZW5ndGg9MDtpZihlPT09cyl7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLnNoYXBlc1tpXS5sb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7dGhpcy5zaGFwZXNbaV0uc2hhcGUuX21kZj10cnVlO3RoaXMuc2hhcGVzW2ldLnNoYXBlLnBhdGhzPXRoaXMuc2hhcGVzW2ldLmxvY2FsU2hhcGVDb2xsZWN0aW9uO2lmKHRoaXMuX21kZil7dGhpcy5zaGFwZXNbaV0ucGF0aHNEYXRhLmxlbmd0aD0wO319fWVsc2UgaWYoIShlPT09MSYmcz09PTB8fGU9PT0wJiZzPT09MSkpe3ZhciBzZWdtZW50cz1bXTt2YXIgc2hhcGVEYXRhO3ZhciBsb2NhbFNoYXBlQ29sbGVjdGlvbjtmb3IoaT0wO2k8bGVuO2krPTEpe3NoYXBlRGF0YT10aGlzLnNoYXBlc1tpXTsvLyBpZiBzaGFwZSBoYXNuJ3QgY2hhbmdlZCBhbmQgdHJpbSBwcm9wZXJ0aWVzIGhhdmVuJ3QgY2hhbmdlZCwgY2FjaGVkIHByZXZpb3VzIHBhdGggY2FuIGJlIHVzZWRcbmlmKCFzaGFwZURhdGEuc2hhcGUuX21kZiYmIXRoaXMuX21kZiYmIV9pc0ZpcnN0RnJhbWUmJnRoaXMubSE9PTIpe3NoYXBlRGF0YS5zaGFwZS5wYXRocz1zaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247fWVsc2Uge3NoYXBlUGF0aHM9c2hhcGVEYXRhLnNoYXBlLnBhdGhzO2pMZW49c2hhcGVQYXRocy5fbGVuZ3RoO3RvdGFsU2hhcGVMZW5ndGg9MDtpZighc2hhcGVEYXRhLnNoYXBlLl9tZGYmJnNoYXBlRGF0YS5wYXRoc0RhdGEubGVuZ3RoKXt0b3RhbFNoYXBlTGVuZ3RoPXNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoO31lbHNlIHtwYXRoc0RhdGE9dGhpcy5yZWxlYXNlUGF0aHNEYXRhKHNoYXBlRGF0YS5wYXRoc0RhdGEpO2ZvcihqPTA7ajxqTGVuO2orPTEpe3BhdGhEYXRhPWJlei5nZXRTZWdtZW50c0xlbmd0aChzaGFwZVBhdGhzLnNoYXBlc1tqXSk7cGF0aHNEYXRhLnB1c2gocGF0aERhdGEpO3RvdGFsU2hhcGVMZW5ndGgrPXBhdGhEYXRhLnRvdGFsTGVuZ3RoO31zaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aD10b3RhbFNoYXBlTGVuZ3RoO3NoYXBlRGF0YS5wYXRoc0RhdGE9cGF0aHNEYXRhO310b3RhbE1vZGlmaWVyTGVuZ3RoKz10b3RhbFNoYXBlTGVuZ3RoO3NoYXBlRGF0YS5zaGFwZS5fbWRmPXRydWU7fX12YXIgc2hhcGVTPXM7dmFyIHNoYXBlRT1lO3ZhciBhZGRlZExlbmd0aD0wO3ZhciBlZGdlcztmb3IoaT1sZW4tMTtpPj0wO2ktPTEpe3NoYXBlRGF0YT10aGlzLnNoYXBlc1tpXTtpZihzaGFwZURhdGEuc2hhcGUuX21kZil7bG9jYWxTaGFwZUNvbGxlY3Rpb249c2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO2xvY2FsU2hhcGVDb2xsZWN0aW9uLnJlbGVhc2VTaGFwZXMoKTsvLyBpZiBtID09PSAyIG1lYW5zIHBhdGhzIGFyZSB0cmltbWVkIGluZGl2aWR1YWxseSBzbyBlZGdlcyBuZWVkIHRvIGJlIGZvdW5kIGZvciB0aGlzIHNwZWNpZmljIHNoYXBlIHJlbGF0aXZlIHRvIHdob2VsIGdyb3VwXG5pZih0aGlzLm09PT0yJiZsZW4+MSl7ZWRnZXM9dGhpcy5jYWxjdWxhdGVTaGFwZUVkZ2VzKHMsZSxzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCxhZGRlZExlbmd0aCx0b3RhbE1vZGlmaWVyTGVuZ3RoKTthZGRlZExlbmd0aCs9c2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGg7fWVsc2Uge2VkZ2VzPVtbc2hhcGVTLHNoYXBlRV1dO31qTGVuPWVkZ2VzLmxlbmd0aDtmb3Ioaj0wO2o8akxlbjtqKz0xKXtzaGFwZVM9ZWRnZXNbal1bMF07c2hhcGVFPWVkZ2VzW2pdWzFdO3NlZ21lbnRzLmxlbmd0aD0wO2lmKHNoYXBlRTw9MSl7c2VnbWVudHMucHVzaCh7czpzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCpzaGFwZVMsZTpzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCpzaGFwZUV9KTt9ZWxzZSBpZihzaGFwZVM+PTEpe3NlZ21lbnRzLnB1c2goe3M6c2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGgqKHNoYXBlUy0xKSxlOnNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoKihzaGFwZUUtMSl9KTt9ZWxzZSB7c2VnbWVudHMucHVzaCh7czpzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCpzaGFwZVMsZTpzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aH0pO3NlZ21lbnRzLnB1c2goe3M6MCxlOnNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoKihzaGFwZUUtMSl9KTt9dmFyIG5ld1NoYXBlc0RhdGE9dGhpcy5hZGRTaGFwZXMoc2hhcGVEYXRhLHNlZ21lbnRzWzBdKTtpZihzZWdtZW50c1swXS5zIT09c2VnbWVudHNbMF0uZSl7aWYoc2VnbWVudHMubGVuZ3RoPjEpe3ZhciBsYXN0U2hhcGVJbkNvbGxlY3Rpb249c2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlc1tzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aC0xXTtpZihsYXN0U2hhcGVJbkNvbGxlY3Rpb24uYyl7dmFyIGxhc3RTaGFwZT1uZXdTaGFwZXNEYXRhLnBvcCgpO3RoaXMuYWRkUGF0aHMobmV3U2hhcGVzRGF0YSxsb2NhbFNoYXBlQ29sbGVjdGlvbik7bmV3U2hhcGVzRGF0YT10aGlzLmFkZFNoYXBlcyhzaGFwZURhdGEsc2VnbWVudHNbMV0sbGFzdFNoYXBlKTt9ZWxzZSB7dGhpcy5hZGRQYXRocyhuZXdTaGFwZXNEYXRhLGxvY2FsU2hhcGVDb2xsZWN0aW9uKTtuZXdTaGFwZXNEYXRhPXRoaXMuYWRkU2hhcGVzKHNoYXBlRGF0YSxzZWdtZW50c1sxXSk7fX10aGlzLmFkZFBhdGhzKG5ld1NoYXBlc0RhdGEsbG9jYWxTaGFwZUNvbGxlY3Rpb24pO319c2hhcGVEYXRhLnNoYXBlLnBhdGhzPWxvY2FsU2hhcGVDb2xsZWN0aW9uO319fWVsc2UgaWYodGhpcy5fbWRmKXtmb3IoaT0wO2k8bGVuO2krPTEpey8vIFJlbGVhc2lnbiBUcmltIENhY2hlZCBwYXRocyBkYXRhIHdoZW4gbm8gdHJpbSBhcHBsaWVkIGluIGNhc2Ugc2hhcGVzIGFyZSBtb2RpZmllZCBpbmJldHdlZW4uXG4vLyBEb24ndCByZW1vdmUgdGhpcyBldmVuIGlmIGl0J3MgbG9zaW5nIGNhY2hlZCBpbmZvLlxudGhpcy5zaGFwZXNbaV0ucGF0aHNEYXRhLmxlbmd0aD0wO3RoaXMuc2hhcGVzW2ldLnNoYXBlLl9tZGY9dHJ1ZTt9fX07VHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRQYXRocz1mdW5jdGlvbihuZXdQYXRocyxsb2NhbFNoYXBlQ29sbGVjdGlvbil7dmFyIGk7dmFyIGxlbj1uZXdQYXRocy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZShuZXdQYXRoc1tpXSk7fX07VHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTZWdtZW50PWZ1bmN0aW9uKHB0MSxwdDIscHQzLHB0NCxzaGFwZVBhdGgscG9zLG5ld1NoYXBlKXtzaGFwZVBhdGguc2V0WFlBdChwdDJbMF0scHQyWzFdLCdvJyxwb3MpO3NoYXBlUGF0aC5zZXRYWUF0KHB0M1swXSxwdDNbMV0sJ2knLHBvcysxKTtpZihuZXdTaGFwZSl7c2hhcGVQYXRoLnNldFhZQXQocHQxWzBdLHB0MVsxXSwndicscG9zKTt9c2hhcGVQYXRoLnNldFhZQXQocHQ0WzBdLHB0NFsxXSwndicscG9zKzEpO307VHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTZWdtZW50RnJvbUFycmF5PWZ1bmN0aW9uKHBvaW50cyxzaGFwZVBhdGgscG9zLG5ld1NoYXBlKXtzaGFwZVBhdGguc2V0WFlBdChwb2ludHNbMV0scG9pbnRzWzVdLCdvJyxwb3MpO3NoYXBlUGF0aC5zZXRYWUF0KHBvaW50c1syXSxwb2ludHNbNl0sJ2knLHBvcysxKTtpZihuZXdTaGFwZSl7c2hhcGVQYXRoLnNldFhZQXQocG9pbnRzWzBdLHBvaW50c1s0XSwndicscG9zKTt9c2hhcGVQYXRoLnNldFhZQXQocG9pbnRzWzNdLHBvaW50c1s3XSwndicscG9zKzEpO307VHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZXM9ZnVuY3Rpb24oc2hhcGVEYXRhLHNoYXBlU2VnbWVudCxzaGFwZVBhdGgpe3ZhciBwYXRoc0RhdGE9c2hhcGVEYXRhLnBhdGhzRGF0YTt2YXIgc2hhcGVQYXRocz1zaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzO3ZhciBpO3ZhciBsZW49c2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7dmFyIGo7dmFyIGpMZW47dmFyIGFkZGVkTGVuZ3RoPTA7dmFyIGN1cnJlbnRMZW5ndGhEYXRhO3ZhciBzZWdtZW50Q291bnQ7dmFyIGxlbmd0aHM7dmFyIHNlZ21lbnQ7dmFyIHNoYXBlcz1bXTt2YXIgaW5pdFBvczt2YXIgbmV3U2hhcGU9dHJ1ZTtpZighc2hhcGVQYXRoKXtzaGFwZVBhdGg9c2hhcGVQb29sLm5ld0VsZW1lbnQoKTtzZWdtZW50Q291bnQ9MDtpbml0UG9zPTA7fWVsc2Uge3NlZ21lbnRDb3VudD1zaGFwZVBhdGguX2xlbmd0aDtpbml0UG9zPXNoYXBlUGF0aC5fbGVuZ3RoO31zaGFwZXMucHVzaChzaGFwZVBhdGgpO2ZvcihpPTA7aTxsZW47aSs9MSl7bGVuZ3Rocz1wYXRoc0RhdGFbaV0ubGVuZ3RocztzaGFwZVBhdGguYz1zaGFwZVBhdGhzW2ldLmM7akxlbj1zaGFwZVBhdGhzW2ldLmM/bGVuZ3Rocy5sZW5ndGg6bGVuZ3Rocy5sZW5ndGgrMTtmb3Ioaj0xO2o8akxlbjtqKz0xKXtjdXJyZW50TGVuZ3RoRGF0YT1sZW5ndGhzW2otMV07aWYoYWRkZWRMZW5ndGgrY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGg8c2hhcGVTZWdtZW50LnMpe2FkZGVkTGVuZ3RoKz1jdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aDtzaGFwZVBhdGguYz1mYWxzZTt9ZWxzZSBpZihhZGRlZExlbmd0aD5zaGFwZVNlZ21lbnQuZSl7c2hhcGVQYXRoLmM9ZmFsc2U7YnJlYWs7fWVsc2Uge2lmKHNoYXBlU2VnbWVudC5zPD1hZGRlZExlbmd0aCYmc2hhcGVTZWdtZW50LmU+PWFkZGVkTGVuZ3RoK2N1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoKXt0aGlzLmFkZFNlZ21lbnQoc2hhcGVQYXRoc1tpXS52W2otMV0sc2hhcGVQYXRoc1tpXS5vW2otMV0sc2hhcGVQYXRoc1tpXS5pW2pdLHNoYXBlUGF0aHNbaV0udltqXSxzaGFwZVBhdGgsc2VnbWVudENvdW50LG5ld1NoYXBlKTtuZXdTaGFwZT1mYWxzZTt9ZWxzZSB7c2VnbWVudD1iZXouZ2V0TmV3U2VnbWVudChzaGFwZVBhdGhzW2ldLnZbai0xXSxzaGFwZVBhdGhzW2ldLnZbal0sc2hhcGVQYXRoc1tpXS5vW2otMV0sc2hhcGVQYXRoc1tpXS5pW2pdLChzaGFwZVNlZ21lbnQucy1hZGRlZExlbmd0aCkvY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGgsKHNoYXBlU2VnbWVudC5lLWFkZGVkTGVuZ3RoKS9jdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aCxsZW5ndGhzW2otMV0pO3RoaXMuYWRkU2VnbWVudEZyb21BcnJheShzZWdtZW50LHNoYXBlUGF0aCxzZWdtZW50Q291bnQsbmV3U2hhcGUpOy8vIHRoaXMuYWRkU2VnbWVudChzZWdtZW50LnB0MSwgc2VnbWVudC5wdDMsIHNlZ21lbnQucHQ0LCBzZWdtZW50LnB0Miwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTtcbm5ld1NoYXBlPWZhbHNlO3NoYXBlUGF0aC5jPWZhbHNlO31hZGRlZExlbmd0aCs9Y3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGg7c2VnbWVudENvdW50Kz0xO319aWYoc2hhcGVQYXRoc1tpXS5jJiZsZW5ndGhzLmxlbmd0aCl7Y3VycmVudExlbmd0aERhdGE9bGVuZ3Roc1tqLTFdO2lmKGFkZGVkTGVuZ3RoPD1zaGFwZVNlZ21lbnQuZSl7dmFyIHNlZ21lbnRMZW5ndGg9bGVuZ3Roc1tqLTFdLmFkZGVkTGVuZ3RoO2lmKHNoYXBlU2VnbWVudC5zPD1hZGRlZExlbmd0aCYmc2hhcGVTZWdtZW50LmU+PWFkZGVkTGVuZ3RoK3NlZ21lbnRMZW5ndGgpe3RoaXMuYWRkU2VnbWVudChzaGFwZVBhdGhzW2ldLnZbai0xXSxzaGFwZVBhdGhzW2ldLm9bai0xXSxzaGFwZVBhdGhzW2ldLmlbMF0sc2hhcGVQYXRoc1tpXS52WzBdLHNoYXBlUGF0aCxzZWdtZW50Q291bnQsbmV3U2hhcGUpO25ld1NoYXBlPWZhbHNlO31lbHNlIHtzZWdtZW50PWJlei5nZXROZXdTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqLTFdLHNoYXBlUGF0aHNbaV0udlswXSxzaGFwZVBhdGhzW2ldLm9bai0xXSxzaGFwZVBhdGhzW2ldLmlbMF0sKHNoYXBlU2VnbWVudC5zLWFkZGVkTGVuZ3RoKS9zZWdtZW50TGVuZ3RoLChzaGFwZVNlZ21lbnQuZS1hZGRlZExlbmd0aCkvc2VnbWVudExlbmd0aCxsZW5ndGhzW2otMV0pO3RoaXMuYWRkU2VnbWVudEZyb21BcnJheShzZWdtZW50LHNoYXBlUGF0aCxzZWdtZW50Q291bnQsbmV3U2hhcGUpOy8vIHRoaXMuYWRkU2VnbWVudChzZWdtZW50LnB0MSwgc2VnbWVudC5wdDMsIHNlZ21lbnQucHQ0LCBzZWdtZW50LnB0Miwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTtcbm5ld1NoYXBlPWZhbHNlO3NoYXBlUGF0aC5jPWZhbHNlO319ZWxzZSB7c2hhcGVQYXRoLmM9ZmFsc2U7fWFkZGVkTGVuZ3RoKz1jdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aDtzZWdtZW50Q291bnQrPTE7fWlmKHNoYXBlUGF0aC5fbGVuZ3RoKXtzaGFwZVBhdGguc2V0WFlBdChzaGFwZVBhdGgudltpbml0UG9zXVswXSxzaGFwZVBhdGgudltpbml0UG9zXVsxXSwnaScsaW5pdFBvcyk7c2hhcGVQYXRoLnNldFhZQXQoc2hhcGVQYXRoLnZbc2hhcGVQYXRoLl9sZW5ndGgtMV1bMF0sc2hhcGVQYXRoLnZbc2hhcGVQYXRoLl9sZW5ndGgtMV1bMV0sJ28nLHNoYXBlUGF0aC5fbGVuZ3RoLTEpO31pZihhZGRlZExlbmd0aD5zaGFwZVNlZ21lbnQuZSl7YnJlYWs7fWlmKGk8bGVuLTEpe3NoYXBlUGF0aD1zaGFwZVBvb2wubmV3RWxlbWVudCgpO25ld1NoYXBlPXRydWU7c2hhcGVzLnB1c2goc2hhcGVQYXRoKTtzZWdtZW50Q291bnQ9MDt9fXJldHVybiBzaGFwZXM7fTtTaGFwZU1vZGlmaWVycy5yZWdpc3Rlck1vZGlmaWVyKCd0bScsVHJpbU1vZGlmaWVyKTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBTaGFwZU1vZGlmaWVyLCBQcm9wZXJ0eUZhY3RvcnksIHNoYXBlUG9vbCwgcm91bmRDb3JuZXIsIFNoYXBlTW9kaWZpZXJzICovZnVuY3Rpb24gUm91bmRDb3JuZXJzTW9kaWZpZXIoKXt9ZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSxSb3VuZENvcm5lcnNNb2RpZmllcik7Um91bmRDb3JuZXJzTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXM9ZnVuY3Rpb24oZWxlbSxkYXRhKXt0aGlzLmdldFZhbHVlPXRoaXMucHJvY2Vzc0tleXM7dGhpcy5yZD1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEuciwwLG51bGwsdGhpcyk7dGhpcy5faXNBbmltYXRlZD0hIXRoaXMucmQuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDt9O1JvdW5kQ29ybmVyc01vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzUGF0aD1mdW5jdGlvbihwYXRoLHJvdW5kKXt2YXIgY2xvbmVkUGF0aD1zaGFwZVBvb2wubmV3RWxlbWVudCgpO2Nsb25lZFBhdGguYz1wYXRoLmM7dmFyIGk7dmFyIGxlbj1wYXRoLl9sZW5ndGg7dmFyIGN1cnJlbnRWO3ZhciBjdXJyZW50STt2YXIgY3VycmVudE87dmFyIGNsb3NlclY7dmFyIGRpc3RhbmNlO3ZhciBuZXdQb3NQZXJjO3ZhciBpbmRleD0wO3ZhciB2WDt2YXIgdlk7dmFyIG9YO3ZhciBvWTt2YXIgaVg7dmFyIGlZO2ZvcihpPTA7aTxsZW47aSs9MSl7Y3VycmVudFY9cGF0aC52W2ldO2N1cnJlbnRPPXBhdGgub1tpXTtjdXJyZW50ST1wYXRoLmlbaV07aWYoY3VycmVudFZbMF09PT1jdXJyZW50T1swXSYmY3VycmVudFZbMV09PT1jdXJyZW50T1sxXSYmY3VycmVudFZbMF09PT1jdXJyZW50SVswXSYmY3VycmVudFZbMV09PT1jdXJyZW50SVsxXSl7aWYoKGk9PT0wfHxpPT09bGVuLTEpJiYhcGF0aC5jKXtjbG9uZWRQYXRoLnNldFRyaXBsZUF0KGN1cnJlbnRWWzBdLGN1cnJlbnRWWzFdLGN1cnJlbnRPWzBdLGN1cnJlbnRPWzFdLGN1cnJlbnRJWzBdLGN1cnJlbnRJWzFdLGluZGV4KTsvKiBjbG9uZWRQYXRoLnZbaW5kZXhdID0gY3VycmVudFY7XHJcbiAgICAgICAgICAgICAgICBjbG9uZWRQYXRoLm9baW5kZXhdID0gY3VycmVudE87XHJcbiAgICAgICAgICAgICAgICBjbG9uZWRQYXRoLmlbaW5kZXhdID0gY3VycmVudEk7ICovaW5kZXgrPTE7fWVsc2Uge2lmKGk9PT0wKXtjbG9zZXJWPXBhdGgudltsZW4tMV07fWVsc2Uge2Nsb3NlclY9cGF0aC52W2ktMV07fWRpc3RhbmNlPU1hdGguc3FydChNYXRoLnBvdyhjdXJyZW50VlswXS1jbG9zZXJWWzBdLDIpK01hdGgucG93KGN1cnJlbnRWWzFdLWNsb3NlclZbMV0sMikpO25ld1Bvc1BlcmM9ZGlzdGFuY2U/TWF0aC5taW4oZGlzdGFuY2UvMixyb3VuZCkvZGlzdGFuY2U6MDtpWD1jdXJyZW50VlswXSsoY2xvc2VyVlswXS1jdXJyZW50VlswXSkqbmV3UG9zUGVyYzt2WD1pWDtpWT1jdXJyZW50VlsxXS0oY3VycmVudFZbMV0tY2xvc2VyVlsxXSkqbmV3UG9zUGVyYzt2WT1pWTtvWD12WC0odlgtY3VycmVudFZbMF0pKnJvdW5kQ29ybmVyO29ZPXZZLSh2WS1jdXJyZW50VlsxXSkqcm91bmRDb3JuZXI7Y2xvbmVkUGF0aC5zZXRUcmlwbGVBdCh2WCx2WSxvWCxvWSxpWCxpWSxpbmRleCk7aW5kZXgrPTE7aWYoaT09PWxlbi0xKXtjbG9zZXJWPXBhdGgudlswXTt9ZWxzZSB7Y2xvc2VyVj1wYXRoLnZbaSsxXTt9ZGlzdGFuY2U9TWF0aC5zcXJ0KE1hdGgucG93KGN1cnJlbnRWWzBdLWNsb3NlclZbMF0sMikrTWF0aC5wb3coY3VycmVudFZbMV0tY2xvc2VyVlsxXSwyKSk7bmV3UG9zUGVyYz1kaXN0YW5jZT9NYXRoLm1pbihkaXN0YW5jZS8yLHJvdW5kKS9kaXN0YW5jZTowO29YPWN1cnJlbnRWWzBdKyhjbG9zZXJWWzBdLWN1cnJlbnRWWzBdKSpuZXdQb3NQZXJjO3ZYPW9YO29ZPWN1cnJlbnRWWzFdKyhjbG9zZXJWWzFdLWN1cnJlbnRWWzFdKSpuZXdQb3NQZXJjO3ZZPW9ZO2lYPXZYLSh2WC1jdXJyZW50VlswXSkqcm91bmRDb3JuZXI7aVk9dlktKHZZLWN1cnJlbnRWWzFdKSpyb3VuZENvcm5lcjtjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHZYLHZZLG9YLG9ZLGlYLGlZLGluZGV4KTtpbmRleCs9MTt9fWVsc2Uge2Nsb25lZFBhdGguc2V0VHJpcGxlQXQocGF0aC52W2ldWzBdLHBhdGgudltpXVsxXSxwYXRoLm9baV1bMF0scGF0aC5vW2ldWzFdLHBhdGguaVtpXVswXSxwYXRoLmlbaV1bMV0saW5kZXgpO2luZGV4Kz0xO319cmV0dXJuIGNsb25lZFBhdGg7fTtSb3VuZENvcm5lcnNNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcz1mdW5jdGlvbihfaXNGaXJzdEZyYW1lKXt2YXIgc2hhcGVQYXRoczt2YXIgaTt2YXIgbGVuPXRoaXMuc2hhcGVzLmxlbmd0aDt2YXIgajt2YXIgakxlbjt2YXIgcmQ9dGhpcy5yZC52O2lmKHJkIT09MCl7dmFyIHNoYXBlRGF0YTt2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247Zm9yKGk9MDtpPGxlbjtpKz0xKXtzaGFwZURhdGE9dGhpcy5zaGFwZXNbaV07bG9jYWxTaGFwZUNvbGxlY3Rpb249c2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO2lmKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmJiYhdGhpcy5fbWRmJiYhX2lzRmlyc3RGcmFtZSkpe2xvY2FsU2hhcGVDb2xsZWN0aW9uLnJlbGVhc2VTaGFwZXMoKTtzaGFwZURhdGEuc2hhcGUuX21kZj10cnVlO3NoYXBlUGF0aHM9c2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztqTGVuPXNoYXBlRGF0YS5zaGFwZS5wYXRocy5fbGVuZ3RoO2ZvcihqPTA7ajxqTGVuO2orPTEpe2xvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMucHJvY2Vzc1BhdGgoc2hhcGVQYXRoc1tqXSxyZCkpO319c2hhcGVEYXRhLnNoYXBlLnBhdGhzPXNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjt9fWlmKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCl7dGhpcy5fbWRmPWZhbHNlO319O1NoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ3JkJyxSb3VuZENvcm5lcnNNb2RpZmllcik7LyogZ2xvYmFsIGV4dGVuZFByb3RvdHlwZSwgU2hhcGVNb2RpZmllciwgUHJvcGVydHlGYWN0b3J5LCBzaGFwZVBvb2wsIFNoYXBlTW9kaWZpZXJzICovZnVuY3Rpb24gUHVja2VyQW5kQmxvYXRNb2RpZmllcigpe31leHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIpO1B1Y2tlckFuZEJsb2F0TW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXM9ZnVuY3Rpb24oZWxlbSxkYXRhKXt0aGlzLmdldFZhbHVlPXRoaXMucHJvY2Vzc0tleXM7dGhpcy5hbW91bnQ9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLmEsMCxudWxsLHRoaXMpO3RoaXMuX2lzQW5pbWF0ZWQ9ISF0aGlzLmFtb3VudC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO307UHVja2VyQW5kQmxvYXRNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1BhdGg9ZnVuY3Rpb24ocGF0aCxhbW91bnQpe3ZhciBwZXJjZW50PWFtb3VudC8xMDA7dmFyIGNlbnRlclBvaW50PVswLDBdO3ZhciBwYXRoTGVuZ3RoPXBhdGguX2xlbmd0aDt2YXIgaT0wO2ZvcihpPTA7aTxwYXRoTGVuZ3RoO2krPTEpe2NlbnRlclBvaW50WzBdKz1wYXRoLnZbaV1bMF07Y2VudGVyUG9pbnRbMV0rPXBhdGgudltpXVsxXTt9Y2VudGVyUG9pbnRbMF0vPXBhdGhMZW5ndGg7Y2VudGVyUG9pbnRbMV0vPXBhdGhMZW5ndGg7dmFyIGNsb25lZFBhdGg9c2hhcGVQb29sLm5ld0VsZW1lbnQoKTtjbG9uZWRQYXRoLmM9cGF0aC5jO3ZhciB2WDt2YXIgdlk7dmFyIG9YO3ZhciBvWTt2YXIgaVg7dmFyIGlZO2ZvcihpPTA7aTxwYXRoTGVuZ3RoO2krPTEpe3ZYPXBhdGgudltpXVswXSsoY2VudGVyUG9pbnRbMF0tcGF0aC52W2ldWzBdKSpwZXJjZW50O3ZZPXBhdGgudltpXVsxXSsoY2VudGVyUG9pbnRbMV0tcGF0aC52W2ldWzFdKSpwZXJjZW50O29YPXBhdGgub1tpXVswXSsoY2VudGVyUG9pbnRbMF0tcGF0aC5vW2ldWzBdKSotcGVyY2VudDtvWT1wYXRoLm9baV1bMV0rKGNlbnRlclBvaW50WzFdLXBhdGgub1tpXVsxXSkqLXBlcmNlbnQ7aVg9cGF0aC5pW2ldWzBdKyhjZW50ZXJQb2ludFswXS1wYXRoLmlbaV1bMF0pKi1wZXJjZW50O2lZPXBhdGguaVtpXVsxXSsoY2VudGVyUG9pbnRbMV0tcGF0aC5pW2ldWzFdKSotcGVyY2VudDtjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHZYLHZZLG9YLG9ZLGlYLGlZLGkpO31yZXR1cm4gY2xvbmVkUGF0aDt9O1B1Y2tlckFuZEJsb2F0TW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXM9ZnVuY3Rpb24oX2lzRmlyc3RGcmFtZSl7dmFyIHNoYXBlUGF0aHM7dmFyIGk7dmFyIGxlbj10aGlzLnNoYXBlcy5sZW5ndGg7dmFyIGo7dmFyIGpMZW47dmFyIGFtb3VudD10aGlzLmFtb3VudC52O2lmKGFtb3VudCE9PTApe3ZhciBzaGFwZURhdGE7dmFyIGxvY2FsU2hhcGVDb2xsZWN0aW9uO2ZvcihpPTA7aTxsZW47aSs9MSl7c2hhcGVEYXRhPXRoaXMuc2hhcGVzW2ldO2xvY2FsU2hhcGVDb2xsZWN0aW9uPXNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtpZighKCFzaGFwZURhdGEuc2hhcGUuX21kZiYmIXRoaXMuX21kZiYmIV9pc0ZpcnN0RnJhbWUpKXtsb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7c2hhcGVEYXRhLnNoYXBlLl9tZGY9dHJ1ZTtzaGFwZVBhdGhzPXNoYXBlRGF0YS5zaGFwZS5wYXRocy5zaGFwZXM7akxlbj1zaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aDtmb3Ioaj0wO2o8akxlbjtqKz0xKXtsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sYW1vdW50KSk7fX1zaGFwZURhdGEuc2hhcGUucGF0aHM9c2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO319aWYoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKXt0aGlzLl9tZGY9ZmFsc2U7fX07U2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigncGInLFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIpOy8qIGdsb2JhbCBleHRlbmRQcm90b3R5cGUsIFNoYXBlTW9kaWZpZXIsIFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeSwgUHJvcGVydHlGYWN0b3J5LCBNYXRyaXgsIFNoYXBlTW9kaWZpZXJzICovZnVuY3Rpb24gUmVwZWF0ZXJNb2RpZmllcigpe31leHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLFJlcGVhdGVyTW9kaWZpZXIpO1JlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXM9ZnVuY3Rpb24oZWxlbSxkYXRhKXt0aGlzLmdldFZhbHVlPXRoaXMucHJvY2Vzc0tleXM7dGhpcy5jPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5jLDAsbnVsbCx0aGlzKTt0aGlzLm89UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLm8sMCxudWxsLHRoaXMpO3RoaXMudHI9VHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sZGF0YS50cix0aGlzKTt0aGlzLnNvPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS50ci5zbywwLDAuMDEsdGhpcyk7dGhpcy5lbz1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEudHIuZW8sMCwwLjAxLHRoaXMpO3RoaXMuZGF0YT1kYXRhO2lmKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCl7dGhpcy5nZXRWYWx1ZSh0cnVlKTt9dGhpcy5faXNBbmltYXRlZD0hIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoO3RoaXMucE1hdHJpeD1uZXcgTWF0cml4KCk7dGhpcy5yTWF0cml4PW5ldyBNYXRyaXgoKTt0aGlzLnNNYXRyaXg9bmV3IE1hdHJpeCgpO3RoaXMudE1hdHJpeD1uZXcgTWF0cml4KCk7dGhpcy5tYXRyaXg9bmV3IE1hdHJpeCgpO307UmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuYXBwbHlUcmFuc2Zvcm1zPWZ1bmN0aW9uKHBNYXRyaXgsck1hdHJpeCxzTWF0cml4LHRyYW5zZm9ybSxwZXJjLGludil7dmFyIGRpcj1pbnY/LTE6MTt2YXIgc2NhbGVYPXRyYW5zZm9ybS5zLnZbMF0rKDEtdHJhbnNmb3JtLnMudlswXSkqKDEtcGVyYyk7dmFyIHNjYWxlWT10cmFuc2Zvcm0ucy52WzFdKygxLXRyYW5zZm9ybS5zLnZbMV0pKigxLXBlcmMpO3BNYXRyaXgudHJhbnNsYXRlKHRyYW5zZm9ybS5wLnZbMF0qZGlyKnBlcmMsdHJhbnNmb3JtLnAudlsxXSpkaXIqcGVyYyx0cmFuc2Zvcm0ucC52WzJdKTtyTWF0cml4LnRyYW5zbGF0ZSgtdHJhbnNmb3JtLmEudlswXSwtdHJhbnNmb3JtLmEudlsxXSx0cmFuc2Zvcm0uYS52WzJdKTtyTWF0cml4LnJvdGF0ZSgtdHJhbnNmb3JtLnIudipkaXIqcGVyYyk7ck1hdHJpeC50cmFuc2xhdGUodHJhbnNmb3JtLmEudlswXSx0cmFuc2Zvcm0uYS52WzFdLHRyYW5zZm9ybS5hLnZbMl0pO3NNYXRyaXgudHJhbnNsYXRlKC10cmFuc2Zvcm0uYS52WzBdLC10cmFuc2Zvcm0uYS52WzFdLHRyYW5zZm9ybS5hLnZbMl0pO3NNYXRyaXguc2NhbGUoaW52PzEvc2NhbGVYOnNjYWxlWCxpbnY/MS9zY2FsZVk6c2NhbGVZKTtzTWF0cml4LnRyYW5zbGF0ZSh0cmFuc2Zvcm0uYS52WzBdLHRyYW5zZm9ybS5hLnZbMV0sdHJhbnNmb3JtLmEudlsyXSk7fTtSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGVsZW0sYXJyLHBvcyxlbGVtc0RhdGEpe3RoaXMuZWxlbT1lbGVtO3RoaXMuYXJyPWFycjt0aGlzLnBvcz1wb3M7dGhpcy5lbGVtc0RhdGE9ZWxlbXNEYXRhO3RoaXMuX2N1cnJlbnRDb3BpZXM9MDt0aGlzLl9lbGVtZW50cz1bXTt0aGlzLl9ncm91cHM9W107dGhpcy5mcmFtZUlkPS0xO3RoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTt0aGlzLmluaXRNb2RpZmllclByb3BlcnRpZXMoZWxlbSxhcnJbcG9zXSk7d2hpbGUocG9zPjApe3Bvcy09MTsvLyB0aGlzLl9lbGVtZW50cy51bnNoaWZ0KGFyci5zcGxpY2UocG9zLDEpWzBdKTtcbnRoaXMuX2VsZW1lbnRzLnVuc2hpZnQoYXJyW3Bvc10pO31pZih0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCl7dGhpcy5rPXRydWU7fWVsc2Uge3RoaXMuZ2V0VmFsdWUodHJ1ZSk7fX07UmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUucmVzZXRFbGVtZW50cz1mdW5jdGlvbihlbGVtZW50cyl7dmFyIGk7dmFyIGxlbj1lbGVtZW50cy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtlbGVtZW50c1tpXS5fcHJvY2Vzc2VkPWZhbHNlO2lmKGVsZW1lbnRzW2ldLnR5PT09J2dyJyl7dGhpcy5yZXNldEVsZW1lbnRzKGVsZW1lbnRzW2ldLml0KTt9fX07UmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuY2xvbmVFbGVtZW50cz1mdW5jdGlvbihlbGVtZW50cyl7dmFyIG5ld0VsZW1lbnRzPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZWxlbWVudHMpKTt0aGlzLnJlc2V0RWxlbWVudHMobmV3RWxlbWVudHMpO3JldHVybiBuZXdFbGVtZW50czt9O1JlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLmNoYW5nZUdyb3VwUmVuZGVyPWZ1bmN0aW9uKGVsZW1lbnRzLHJlbmRlckZsYWcpe3ZhciBpO3ZhciBsZW49ZWxlbWVudHMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7ZWxlbWVudHNbaV0uX3JlbmRlcj1yZW5kZXJGbGFnO2lmKGVsZW1lbnRzW2ldLnR5PT09J2dyJyl7dGhpcy5jaGFuZ2VHcm91cFJlbmRlcihlbGVtZW50c1tpXS5pdCxyZW5kZXJGbGFnKTt9fX07UmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcz1mdW5jdGlvbihfaXNGaXJzdEZyYW1lKXt2YXIgaXRlbXM7dmFyIGl0ZW1zVHJhbnNmb3JtO3ZhciBpO3ZhciBkaXI7dmFyIGNvbnQ7dmFyIGhhc1JlbG9hZGVkPWZhbHNlO2lmKHRoaXMuX21kZnx8X2lzRmlyc3RGcmFtZSl7dmFyIGNvcGllcz1NYXRoLmNlaWwodGhpcy5jLnYpO2lmKHRoaXMuX2dyb3Vwcy5sZW5ndGg8Y29waWVzKXt3aGlsZSh0aGlzLl9ncm91cHMubGVuZ3RoPGNvcGllcyl7dmFyIGdyb3VwPXtpdDp0aGlzLmNsb25lRWxlbWVudHModGhpcy5fZWxlbWVudHMpLHR5Oidncid9O2dyb3VwLml0LnB1c2goe2E6e2E6MCxpeDoxLGs6WzAsMF19LG5tOidUcmFuc2Zvcm0nLG86e2E6MCxpeDo3LGs6MTAwfSxwOnthOjAsaXg6MixrOlswLDBdfSxyOnthOjEsaXg6NixrOlt7czowLGU6MCx0OjB9LHtzOjAsZTowLHQ6MX1dfSxzOnthOjAsaXg6MyxrOlsxMDAsMTAwXX0sc2E6e2E6MCxpeDo1LGs6MH0sc2s6e2E6MCxpeDo0LGs6MH0sdHk6J3RyJ30pO3RoaXMuYXJyLnNwbGljZSgwLDAsZ3JvdXApO3RoaXMuX2dyb3Vwcy5zcGxpY2UoMCwwLGdyb3VwKTt0aGlzLl9jdXJyZW50Q29waWVzKz0xO310aGlzLmVsZW0ucmVsb2FkU2hhcGVzKCk7aGFzUmVsb2FkZWQ9dHJ1ZTt9Y29udD0wO3ZhciByZW5kZXJGbGFnO2ZvcihpPTA7aTw9dGhpcy5fZ3JvdXBzLmxlbmd0aC0xO2krPTEpe3JlbmRlckZsYWc9Y29udDxjb3BpZXM7dGhpcy5fZ3JvdXBzW2ldLl9yZW5kZXI9cmVuZGVyRmxhZzt0aGlzLmNoYW5nZUdyb3VwUmVuZGVyKHRoaXMuX2dyb3Vwc1tpXS5pdCxyZW5kZXJGbGFnKTtpZighcmVuZGVyRmxhZyl7dmFyIGVsZW1zPXRoaXMuZWxlbXNEYXRhW2ldLml0O3ZhciB0cmFuc2Zvcm1EYXRhPWVsZW1zW2VsZW1zLmxlbmd0aC0xXTtpZih0cmFuc2Zvcm1EYXRhLnRyYW5zZm9ybS5vcC52IT09MCl7dHJhbnNmb3JtRGF0YS50cmFuc2Zvcm0ub3AuX21kZj10cnVlO3RyYW5zZm9ybURhdGEudHJhbnNmb3JtLm9wLnY9MDt9ZWxzZSB7dHJhbnNmb3JtRGF0YS50cmFuc2Zvcm0ub3AuX21kZj1mYWxzZTt9fWNvbnQrPTE7fXRoaXMuX2N1cnJlbnRDb3BpZXM9Y29waWVzOy8vLyAvXG52YXIgb2Zmc2V0PXRoaXMuby52O3ZhciBvZmZzZXRNb2R1bG89b2Zmc2V0JTE7dmFyIHJvdW5kT2Zmc2V0PW9mZnNldD4wP01hdGguZmxvb3Iob2Zmc2V0KTpNYXRoLmNlaWwob2Zmc2V0KTt2YXIgcFByb3BzPXRoaXMucE1hdHJpeC5wcm9wczt2YXIgclByb3BzPXRoaXMuck1hdHJpeC5wcm9wczt2YXIgc1Byb3BzPXRoaXMuc01hdHJpeC5wcm9wczt0aGlzLnBNYXRyaXgucmVzZXQoKTt0aGlzLnJNYXRyaXgucmVzZXQoKTt0aGlzLnNNYXRyaXgucmVzZXQoKTt0aGlzLnRNYXRyaXgucmVzZXQoKTt0aGlzLm1hdHJpeC5yZXNldCgpO3ZhciBpdGVyYXRpb249MDtpZihvZmZzZXQ+MCl7d2hpbGUoaXRlcmF0aW9uPHJvdW5kT2Zmc2V0KXt0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0aGlzLnBNYXRyaXgsdGhpcy5yTWF0cml4LHRoaXMuc01hdHJpeCx0aGlzLnRyLDEsZmFsc2UpO2l0ZXJhdGlvbis9MTt9aWYob2Zmc2V0TW9kdWxvKXt0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0aGlzLnBNYXRyaXgsdGhpcy5yTWF0cml4LHRoaXMuc01hdHJpeCx0aGlzLnRyLG9mZnNldE1vZHVsbyxmYWxzZSk7aXRlcmF0aW9uKz1vZmZzZXRNb2R1bG87fX1lbHNlIGlmKG9mZnNldDwwKXt3aGlsZShpdGVyYXRpb24+cm91bmRPZmZzZXQpe3RoaXMuYXBwbHlUcmFuc2Zvcm1zKHRoaXMucE1hdHJpeCx0aGlzLnJNYXRyaXgsdGhpcy5zTWF0cml4LHRoaXMudHIsMSx0cnVlKTtpdGVyYXRpb24tPTE7fWlmKG9mZnNldE1vZHVsbyl7dGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LHRoaXMuck1hdHJpeCx0aGlzLnNNYXRyaXgsdGhpcy50ciwtb2Zmc2V0TW9kdWxvLHRydWUpO2l0ZXJhdGlvbi09b2Zmc2V0TW9kdWxvO319aT10aGlzLmRhdGEubT09PTE/MDp0aGlzLl9jdXJyZW50Q29waWVzLTE7ZGlyPXRoaXMuZGF0YS5tPT09MT8xOi0xO2NvbnQ9dGhpcy5fY3VycmVudENvcGllczt2YXIgajt2YXIgakxlbjt3aGlsZShjb250KXtpdGVtcz10aGlzLmVsZW1zRGF0YVtpXS5pdDtpdGVtc1RyYW5zZm9ybT1pdGVtc1tpdGVtcy5sZW5ndGgtMV0udHJhbnNmb3JtLm1Qcm9wcy52LnByb3BzO2pMZW49aXRlbXNUcmFuc2Zvcm0ubGVuZ3RoO2l0ZW1zW2l0ZW1zLmxlbmd0aC0xXS50cmFuc2Zvcm0ubVByb3BzLl9tZGY9dHJ1ZTtpdGVtc1tpdGVtcy5sZW5ndGgtMV0udHJhbnNmb3JtLm9wLl9tZGY9dHJ1ZTtpdGVtc1tpdGVtcy5sZW5ndGgtMV0udHJhbnNmb3JtLm9wLnY9dGhpcy5fY3VycmVudENvcGllcz09PTE/dGhpcy5zby52OnRoaXMuc28udisodGhpcy5lby52LXRoaXMuc28udikqKGkvKHRoaXMuX2N1cnJlbnRDb3BpZXMtMSkpO2lmKGl0ZXJhdGlvbiE9PTApe2lmKGkhPT0wJiZkaXI9PT0xfHxpIT09dGhpcy5fY3VycmVudENvcGllcy0xJiZkaXI9PT0tMSl7dGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LHRoaXMuck1hdHJpeCx0aGlzLnNNYXRyaXgsdGhpcy50ciwxLGZhbHNlKTt9dGhpcy5tYXRyaXgudHJhbnNmb3JtKHJQcm9wc1swXSxyUHJvcHNbMV0sclByb3BzWzJdLHJQcm9wc1szXSxyUHJvcHNbNF0sclByb3BzWzVdLHJQcm9wc1s2XSxyUHJvcHNbN10sclByb3BzWzhdLHJQcm9wc1s5XSxyUHJvcHNbMTBdLHJQcm9wc1sxMV0sclByb3BzWzEyXSxyUHJvcHNbMTNdLHJQcm9wc1sxNF0sclByb3BzWzE1XSk7dGhpcy5tYXRyaXgudHJhbnNmb3JtKHNQcm9wc1swXSxzUHJvcHNbMV0sc1Byb3BzWzJdLHNQcm9wc1szXSxzUHJvcHNbNF0sc1Byb3BzWzVdLHNQcm9wc1s2XSxzUHJvcHNbN10sc1Byb3BzWzhdLHNQcm9wc1s5XSxzUHJvcHNbMTBdLHNQcm9wc1sxMV0sc1Byb3BzWzEyXSxzUHJvcHNbMTNdLHNQcm9wc1sxNF0sc1Byb3BzWzE1XSk7dGhpcy5tYXRyaXgudHJhbnNmb3JtKHBQcm9wc1swXSxwUHJvcHNbMV0scFByb3BzWzJdLHBQcm9wc1szXSxwUHJvcHNbNF0scFByb3BzWzVdLHBQcm9wc1s2XSxwUHJvcHNbN10scFByb3BzWzhdLHBQcm9wc1s5XSxwUHJvcHNbMTBdLHBQcm9wc1sxMV0scFByb3BzWzEyXSxwUHJvcHNbMTNdLHBQcm9wc1sxNF0scFByb3BzWzE1XSk7Zm9yKGo9MDtqPGpMZW47ais9MSl7aXRlbXNUcmFuc2Zvcm1bal09dGhpcy5tYXRyaXgucHJvcHNbal07fXRoaXMubWF0cml4LnJlc2V0KCk7fWVsc2Uge3RoaXMubWF0cml4LnJlc2V0KCk7Zm9yKGo9MDtqPGpMZW47ais9MSl7aXRlbXNUcmFuc2Zvcm1bal09dGhpcy5tYXRyaXgucHJvcHNbal07fX1pdGVyYXRpb24rPTE7Y29udC09MTtpKz1kaXI7fX1lbHNlIHtjb250PXRoaXMuX2N1cnJlbnRDb3BpZXM7aT0wO2Rpcj0xO3doaWxlKGNvbnQpe2l0ZW1zPXRoaXMuZWxlbXNEYXRhW2ldLml0O2l0ZW1zVHJhbnNmb3JtPWl0ZW1zW2l0ZW1zLmxlbmd0aC0xXS50cmFuc2Zvcm0ubVByb3BzLnYucHJvcHM7aXRlbXNbaXRlbXMubGVuZ3RoLTFdLnRyYW5zZm9ybS5tUHJvcHMuX21kZj1mYWxzZTtpdGVtc1tpdGVtcy5sZW5ndGgtMV0udHJhbnNmb3JtLm9wLl9tZGY9ZmFsc2U7Y29udC09MTtpKz1kaXI7fX1yZXR1cm4gaGFzUmVsb2FkZWQ7fTtSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZT1mdW5jdGlvbigpe307U2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigncnAnLFJlcGVhdGVyTW9kaWZpZXIpOy8qIGdsb2JhbCBjcmVhdGVTaXplZEFycmF5LCBzaGFwZVBvb2wgKi9mdW5jdGlvbiBTaGFwZUNvbGxlY3Rpb24oKXt0aGlzLl9sZW5ndGg9MDt0aGlzLl9tYXhMZW5ndGg9NDt0aGlzLnNoYXBlcz1jcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCk7fVNoYXBlQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkU2hhcGU9ZnVuY3Rpb24oc2hhcGVEYXRhKXtpZih0aGlzLl9sZW5ndGg9PT10aGlzLl9tYXhMZW5ndGgpe3RoaXMuc2hhcGVzPXRoaXMuc2hhcGVzLmNvbmNhdChjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCkpO3RoaXMuX21heExlbmd0aCo9Mjt9dGhpcy5zaGFwZXNbdGhpcy5fbGVuZ3RoXT1zaGFwZURhdGE7dGhpcy5fbGVuZ3RoKz0xO307U2hhcGVDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWxlYXNlU2hhcGVzPWZ1bmN0aW9uKCl7dmFyIGk7Zm9yKGk9MDtpPHRoaXMuX2xlbmd0aDtpKz0xKXtzaGFwZVBvb2wucmVsZWFzZSh0aGlzLnNoYXBlc1tpXSk7fXRoaXMuX2xlbmd0aD0wO307LyogZ2xvYmFsIGNyZWF0ZVNpemVkQXJyYXksIGNyZWF0ZVR5cGVkQXJyYXksIFByb3BlcnR5RmFjdG9yeSwgZXh0ZW5kUHJvdG90eXBlLCBEeW5hbWljUHJvcGVydHlDb250YWluZXIgKi9mdW5jdGlvbiBEYXNoUHJvcGVydHkoZWxlbSxkYXRhLHJlbmRlcmVyLGNvbnRhaW5lcil7dGhpcy5lbGVtPWVsZW07dGhpcy5mcmFtZUlkPS0xO3RoaXMuZGF0YVByb3BzPWNyZWF0ZVNpemVkQXJyYXkoZGF0YS5sZW5ndGgpO3RoaXMucmVuZGVyZXI9cmVuZGVyZXI7dGhpcy5rPWZhbHNlO3RoaXMuZGFzaFN0cj0nJzt0aGlzLmRhc2hBcnJheT1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxkYXRhLmxlbmd0aD9kYXRhLmxlbmd0aC0xOjApO3RoaXMuZGFzaG9mZnNldD1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywxKTt0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoY29udGFpbmVyKTt2YXIgaTt2YXIgbGVuPWRhdGEubGVuZ3RofHwwO3ZhciBwcm9wO2ZvcihpPTA7aTxsZW47aSs9MSl7cHJvcD1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGFbaV0udiwwLDAsdGhpcyk7dGhpcy5rPXByb3Aua3x8dGhpcy5rO3RoaXMuZGF0YVByb3BzW2ldPXtuOmRhdGFbaV0ubixwOnByb3B9O31pZighdGhpcy5rKXt0aGlzLmdldFZhbHVlKHRydWUpO310aGlzLl9pc0FuaW1hdGVkPXRoaXMuazt9RGFzaFByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZT1mdW5jdGlvbihmb3JjZVJlbmRlcil7aWYodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZD09PXRoaXMuZnJhbWVJZCYmIWZvcmNlUmVuZGVyKXtyZXR1cm47fXRoaXMuZnJhbWVJZD10aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO3RoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7dGhpcy5fbWRmPXRoaXMuX21kZnx8Zm9yY2VSZW5kZXI7aWYodGhpcy5fbWRmKXt2YXIgaT0wO3ZhciBsZW49dGhpcy5kYXRhUHJvcHMubGVuZ3RoO2lmKHRoaXMucmVuZGVyZXI9PT0nc3ZnJyl7dGhpcy5kYXNoU3RyPScnO31mb3IoaT0wO2k8bGVuO2krPTEpe2lmKHRoaXMuZGF0YVByb3BzW2ldLm4hPT0nbycpe2lmKHRoaXMucmVuZGVyZXI9PT0nc3ZnJyl7dGhpcy5kYXNoU3RyKz0nICcrdGhpcy5kYXRhUHJvcHNbaV0ucC52O31lbHNlIHt0aGlzLmRhc2hBcnJheVtpXT10aGlzLmRhdGFQcm9wc1tpXS5wLnY7fX1lbHNlIHt0aGlzLmRhc2hvZmZzZXRbMF09dGhpcy5kYXRhUHJvcHNbaV0ucC52O319fX07ZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLERhc2hQcm9wZXJ0eSk7LyogZ2xvYmFsIGNyZWF0ZVR5cGVkQXJyYXksIFByb3BlcnR5RmFjdG9yeSwgZXh0ZW5kUHJvdG90eXBlLCBEeW5hbWljUHJvcGVydHlDb250YWluZXIgKi9mdW5jdGlvbiBHcmFkaWVudFByb3BlcnR5KGVsZW0sZGF0YSxjb250YWluZXIpe3RoaXMuZGF0YT1kYXRhO3RoaXMuYz1jcmVhdGVUeXBlZEFycmF5KCd1aW50OGMnLGRhdGEucCo0KTt2YXIgY0xlbmd0aD1kYXRhLmsua1swXS5zP2RhdGEuay5rWzBdLnMubGVuZ3RoLWRhdGEucCo0OmRhdGEuay5rLmxlbmd0aC1kYXRhLnAqNDt0aGlzLm89Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsY0xlbmd0aCk7dGhpcy5fY21kZj1mYWxzZTt0aGlzLl9vbWRmPWZhbHNlO3RoaXMuX2NvbGxhcHNhYmxlPXRoaXMuY2hlY2tDb2xsYXBzYWJsZSgpO3RoaXMuX2hhc09wYWNpdHk9Y0xlbmd0aDt0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoY29udGFpbmVyKTt0aGlzLnByb3A9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLmssMSxudWxsLHRoaXMpO3RoaXMuaz10aGlzLnByb3Auazt0aGlzLmdldFZhbHVlKHRydWUpO31HcmFkaWVudFByb3BlcnR5LnByb3RvdHlwZS5jb21wYXJlUG9pbnRzPWZ1bmN0aW9uKHZhbHVlcyxwb2ludHMpe3ZhciBpPTA7dmFyIGxlbj10aGlzLm8ubGVuZ3RoLzI7dmFyIGRpZmY7d2hpbGUoaTxsZW4pe2RpZmY9TWF0aC5hYnModmFsdWVzW2kqNF0tdmFsdWVzW3BvaW50cyo0K2kqMl0pO2lmKGRpZmY+MC4wMSl7cmV0dXJuIGZhbHNlO31pKz0xO31yZXR1cm4gdHJ1ZTt9O0dyYWRpZW50UHJvcGVydHkucHJvdG90eXBlLmNoZWNrQ29sbGFwc2FibGU9ZnVuY3Rpb24oKXtpZih0aGlzLm8ubGVuZ3RoLzIhPT10aGlzLmMubGVuZ3RoLzQpe3JldHVybiBmYWxzZTt9aWYodGhpcy5kYXRhLmsua1swXS5zKXt2YXIgaT0wO3ZhciBsZW49dGhpcy5kYXRhLmsuay5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKCF0aGlzLmNvbXBhcmVQb2ludHModGhpcy5kYXRhLmsua1tpXS5zLHRoaXMuZGF0YS5wKSl7cmV0dXJuIGZhbHNlO31pKz0xO319ZWxzZSBpZighdGhpcy5jb21wYXJlUG9pbnRzKHRoaXMuZGF0YS5rLmssdGhpcy5kYXRhLnApKXtyZXR1cm4gZmFsc2U7fXJldHVybiB0cnVlO307R3JhZGllbnRQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWU9ZnVuY3Rpb24oZm9yY2VSZW5kZXIpe3RoaXMucHJvcC5nZXRWYWx1ZSgpO3RoaXMuX21kZj1mYWxzZTt0aGlzLl9jbWRmPWZhbHNlO3RoaXMuX29tZGY9ZmFsc2U7aWYodGhpcy5wcm9wLl9tZGZ8fGZvcmNlUmVuZGVyKXt2YXIgaTt2YXIgbGVuPXRoaXMuZGF0YS5wKjQ7dmFyIG11bHQ7dmFyIHZhbDtmb3IoaT0wO2k8bGVuO2krPTEpe211bHQ9aSU0PT09MD8xMDA6MjU1O3ZhbD1NYXRoLnJvdW5kKHRoaXMucHJvcC52W2ldKm11bHQpO2lmKHRoaXMuY1tpXSE9PXZhbCl7dGhpcy5jW2ldPXZhbDt0aGlzLl9jbWRmPSFmb3JjZVJlbmRlcjt9fWlmKHRoaXMuby5sZW5ndGgpe2xlbj10aGlzLnByb3Audi5sZW5ndGg7Zm9yKGk9dGhpcy5kYXRhLnAqNDtpPGxlbjtpKz0xKXttdWx0PWklMj09PTA/MTAwOjE7dmFsPWklMj09PTA/TWF0aC5yb3VuZCh0aGlzLnByb3AudltpXSoxMDApOnRoaXMucHJvcC52W2ldO2lmKHRoaXMub1tpLXRoaXMuZGF0YS5wKjRdIT09dmFsKXt0aGlzLm9baS10aGlzLmRhdGEucCo0XT12YWw7dGhpcy5fb21kZj0hZm9yY2VSZW5kZXI7fX19dGhpcy5fbWRmPSFmb3JjZVJlbmRlcjt9fTtleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sR3JhZGllbnRQcm9wZXJ0eSk7LyogZXhwb3J0ZWQgYnVpbGRTaGFwZVN0cmluZyAqL3ZhciBidWlsZFNoYXBlU3RyaW5nPWZ1bmN0aW9uIGJ1aWxkU2hhcGVTdHJpbmcocGF0aE5vZGVzLGxlbmd0aCxjbG9zZWQsbWF0KXtpZihsZW5ndGg9PT0wKXtyZXR1cm4gJyc7fXZhciBfbz1wYXRoTm9kZXMubzt2YXIgX2k9cGF0aE5vZGVzLmk7dmFyIF92PXBhdGhOb2Rlcy52O3ZhciBpO3ZhciBzaGFwZVN0cmluZz0nIE0nK21hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfdlswXVswXSxfdlswXVsxXSk7Zm9yKGk9MTtpPGxlbmd0aDtpKz0xKXtzaGFwZVN0cmluZys9JyBDJyttYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX29baS0xXVswXSxfb1tpLTFdWzFdKSsnICcrbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF9pW2ldWzBdLF9pW2ldWzFdKSsnICcrbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF92W2ldWzBdLF92W2ldWzFdKTt9aWYoY2xvc2VkJiZsZW5ndGgpe3NoYXBlU3RyaW5nKz0nIEMnK21hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfb1tpLTFdWzBdLF9vW2ktMV1bMV0pKycgJyttYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX2lbMF1bMF0sX2lbMF1bMV0pKycgJyttYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX3ZbMF1bMF0sX3ZbMF1bMV0pO3NoYXBlU3RyaW5nKz0neic7fXJldHVybiBzaGFwZVN0cmluZzt9Oy8qIGdsb2JhbCBIb3dsICovIC8qIGV4cG9ydGVkIGF1ZGlvQ29udHJvbGxlckZhY3RvcnkgKi92YXIgYXVkaW9Db250cm9sbGVyRmFjdG9yeT1mdW5jdGlvbigpe2Z1bmN0aW9uIEF1ZGlvQ29udHJvbGxlcihhdWRpb0ZhY3Rvcnkpe3RoaXMuYXVkaW9zPVtdO3RoaXMuYXVkaW9GYWN0b3J5PWF1ZGlvRmFjdG9yeTt0aGlzLl92b2x1bWU9MTt0aGlzLl9pc011dGVkPWZhbHNlO31BdWRpb0NvbnRyb2xsZXIucHJvdG90eXBlPXthZGRBdWRpbzpmdW5jdGlvbiBhZGRBdWRpbyhhdWRpbyl7dGhpcy5hdWRpb3MucHVzaChhdWRpbyk7fSxwYXVzZTpmdW5jdGlvbiBwYXVzZSgpe3ZhciBpO3ZhciBsZW49dGhpcy5hdWRpb3MubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7dGhpcy5hdWRpb3NbaV0ucGF1c2UoKTt9fSxyZXN1bWU6ZnVuY3Rpb24gcmVzdW1lKCl7dmFyIGk7dmFyIGxlbj10aGlzLmF1ZGlvcy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLmF1ZGlvc1tpXS5yZXN1bWUoKTt9fSxzZXRSYXRlOmZ1bmN0aW9uIHNldFJhdGUocmF0ZVZhbHVlKXt2YXIgaTt2YXIgbGVuPXRoaXMuYXVkaW9zLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMuYXVkaW9zW2ldLnNldFJhdGUocmF0ZVZhbHVlKTt9fSxjcmVhdGVBdWRpbzpmdW5jdGlvbiBjcmVhdGVBdWRpbyhhc3NldFBhdGgpe2lmKHRoaXMuYXVkaW9GYWN0b3J5KXtyZXR1cm4gdGhpcy5hdWRpb0ZhY3RvcnkoYXNzZXRQYXRoKTt9aWYoSG93bCl7cmV0dXJuIG5ldyBIb3dsKHtzcmM6W2Fzc2V0UGF0aF19KTt9cmV0dXJuIHtpc1BsYXlpbmc6ZmFsc2UscGxheTpmdW5jdGlvbiBwbGF5KCl7dGhpcy5pc1BsYXlpbmc9dHJ1ZTt9LHNlZWs6ZnVuY3Rpb24gc2Vlaygpe3RoaXMuaXNQbGF5aW5nPWZhbHNlO30scGxheWluZzpmdW5jdGlvbiBwbGF5aW5nKCl7fSxyYXRlOmZ1bmN0aW9uIHJhdGUoKXt9LHNldFZvbHVtZTpmdW5jdGlvbiBzZXRWb2x1bWUoKXt9fTt9LHNldEF1ZGlvRmFjdG9yeTpmdW5jdGlvbiBzZXRBdWRpb0ZhY3RvcnkoYXVkaW9GYWN0b3J5KXt0aGlzLmF1ZGlvRmFjdG9yeT1hdWRpb0ZhY3Rvcnk7fSxzZXRWb2x1bWU6ZnVuY3Rpb24gc2V0Vm9sdW1lKHZhbHVlKXt0aGlzLl92b2x1bWU9dmFsdWU7dGhpcy5fdXBkYXRlVm9sdW1lKCk7fSxtdXRlOmZ1bmN0aW9uIG11dGUoKXt0aGlzLl9pc011dGVkPXRydWU7dGhpcy5fdXBkYXRlVm9sdW1lKCk7fSx1bm11dGU6ZnVuY3Rpb24gdW5tdXRlKCl7dGhpcy5faXNNdXRlZD1mYWxzZTt0aGlzLl91cGRhdGVWb2x1bWUoKTt9LGdldFZvbHVtZTpmdW5jdGlvbiBnZXRWb2x1bWUoKXtyZXR1cm4gdGhpcy5fdm9sdW1lO30sX3VwZGF0ZVZvbHVtZTpmdW5jdGlvbiBfdXBkYXRlVm9sdW1lKCl7dmFyIGk7dmFyIGxlbj10aGlzLmF1ZGlvcy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLmF1ZGlvc1tpXS52b2x1bWUodGhpcy5fdm9sdW1lKih0aGlzLl9pc011dGVkPzA6MSkpO319fTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEF1ZGlvQ29udHJvbGxlcigpO307fSgpOy8qIGdsb2JhbCBjcmVhdGVUYWcsIGNyZWF0ZU5TLCBpc1NhZmFyaSAqLyAvKiBleHBvcnRlZCBJbWFnZVByZWxvYWRlciAqL3ZhciBJbWFnZVByZWxvYWRlcj1mdW5jdGlvbigpe3ZhciBwcm94eUltYWdlPWZ1bmN0aW9uKCl7dmFyIGNhbnZhcz1jcmVhdGVUYWcoJ2NhbnZhcycpO2NhbnZhcy53aWR0aD0xO2NhbnZhcy5oZWlnaHQ9MTt2YXIgY3R4PWNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO2N0eC5maWxsU3R5bGU9J3JnYmEoMCwwLDAsMCknO2N0eC5maWxsUmVjdCgwLDAsMSwxKTtyZXR1cm4gY2FudmFzO30oKTtmdW5jdGlvbiBpbWFnZUxvYWRlZCgpe3RoaXMubG9hZGVkQXNzZXRzKz0xO2lmKHRoaXMubG9hZGVkQXNzZXRzPT09dGhpcy50b3RhbEltYWdlcyl7aWYodGhpcy5pbWFnZXNMb2FkZWRDYil7dGhpcy5pbWFnZXNMb2FkZWRDYihudWxsKTt9fX1mdW5jdGlvbiBnZXRBc3NldHNQYXRoKGFzc2V0RGF0YSxhc3NldHNQYXRoLG9yaWdpbmFsUGF0aCl7dmFyIHBhdGg9Jyc7aWYoYXNzZXREYXRhLmUpe3BhdGg9YXNzZXREYXRhLnA7fWVsc2UgaWYoYXNzZXRzUGF0aCl7dmFyIGltYWdlUGF0aD1hc3NldERhdGEucDtpZihpbWFnZVBhdGguaW5kZXhPZignaW1hZ2VzLycpIT09LTEpe2ltYWdlUGF0aD1pbWFnZVBhdGguc3BsaXQoJy8nKVsxXTt9cGF0aD1hc3NldHNQYXRoK2ltYWdlUGF0aDt9ZWxzZSB7cGF0aD1vcmlnaW5hbFBhdGg7cGF0aCs9YXNzZXREYXRhLnU/YXNzZXREYXRhLnU6Jyc7cGF0aCs9YXNzZXREYXRhLnA7fXJldHVybiBwYXRoO31mdW5jdGlvbiB0ZXN0SW1hZ2VMb2FkZWQoaW1nKXt2YXIgX2NvdW50PTA7dmFyIGludGVydmFsSWQ9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXt2YXIgYm94PWltZy5nZXRCQm94KCk7aWYoYm94LndpZHRofHxfY291bnQ+NTAwKXt0aGlzLl9pbWFnZUxvYWRlZCgpO2NsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7fV9jb3VudCs9MTt9LmJpbmQodGhpcyksNTApO31mdW5jdGlvbiBjcmVhdGVJbWFnZURhdGEoYXNzZXREYXRhKXt2YXIgcGF0aD1nZXRBc3NldHNQYXRoKGFzc2V0RGF0YSx0aGlzLmFzc2V0c1BhdGgsdGhpcy5wYXRoKTt2YXIgaW1nPWNyZWF0ZU5TKCdpbWFnZScpO2lmKGlzU2FmYXJpKXt0aGlzLnRlc3RJbWFnZUxvYWRlZChpbWcpO31lbHNlIHtpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsdGhpcy5faW1hZ2VMb2FkZWQsZmFsc2UpO31pbWcuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLGZ1bmN0aW9uKCl7b2IuaW1nPXByb3h5SW1hZ2U7dGhpcy5faW1hZ2VMb2FkZWQoKTt9LmJpbmQodGhpcyksZmFsc2UpO2ltZy5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsJ2hyZWYnLHBhdGgpO2lmKHRoaXMuX2VsZW1lbnRIZWxwZXIuYXBwZW5kKXt0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZChpbWcpO31lbHNlIHt0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZENoaWxkKGltZyk7fXZhciBvYj17aW1nOmltZyxhc3NldERhdGE6YXNzZXREYXRhfTtyZXR1cm4gb2I7fWZ1bmN0aW9uIGNyZWF0ZUltZ0RhdGEoYXNzZXREYXRhKXt2YXIgcGF0aD1nZXRBc3NldHNQYXRoKGFzc2V0RGF0YSx0aGlzLmFzc2V0c1BhdGgsdGhpcy5wYXRoKTt2YXIgaW1nPWNyZWF0ZVRhZygnaW1nJyk7aW1nLmNyb3NzT3JpZ2luPSdhbm9ueW1vdXMnO2ltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJyx0aGlzLl9pbWFnZUxvYWRlZCxmYWxzZSk7aW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJyxmdW5jdGlvbigpe29iLmltZz1wcm94eUltYWdlO3RoaXMuX2ltYWdlTG9hZGVkKCk7fS5iaW5kKHRoaXMpLGZhbHNlKTtpbWcuc3JjPXBhdGg7dmFyIG9iPXtpbWc6aW1nLGFzc2V0RGF0YTphc3NldERhdGF9O3JldHVybiBvYjt9ZnVuY3Rpb24gbG9hZEFzc2V0cyhhc3NldHMsY2Ipe3RoaXMuaW1hZ2VzTG9hZGVkQ2I9Y2I7dmFyIGk7dmFyIGxlbj1hc3NldHMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoIWFzc2V0c1tpXS5sYXllcnMpe3RoaXMudG90YWxJbWFnZXMrPTE7dGhpcy5pbWFnZXMucHVzaCh0aGlzLl9jcmVhdGVJbWFnZURhdGEoYXNzZXRzW2ldKSk7fX19ZnVuY3Rpb24gc2V0UGF0aChwYXRoKXt0aGlzLnBhdGg9cGF0aHx8Jyc7fWZ1bmN0aW9uIHNldEFzc2V0c1BhdGgocGF0aCl7dGhpcy5hc3NldHNQYXRoPXBhdGh8fCcnO31mdW5jdGlvbiBnZXRJbWFnZShhc3NldERhdGEpe3ZhciBpPTA7dmFyIGxlbj10aGlzLmltYWdlcy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKHRoaXMuaW1hZ2VzW2ldLmFzc2V0RGF0YT09PWFzc2V0RGF0YSl7cmV0dXJuIHRoaXMuaW1hZ2VzW2ldLmltZzt9aSs9MTt9cmV0dXJuIG51bGw7fWZ1bmN0aW9uIGRlc3Ryb3koKXt0aGlzLmltYWdlc0xvYWRlZENiPW51bGw7dGhpcy5pbWFnZXMubGVuZ3RoPTA7fWZ1bmN0aW9uIGxvYWRlZCgpe3JldHVybiB0aGlzLnRvdGFsSW1hZ2VzPT09dGhpcy5sb2FkZWRBc3NldHM7fWZ1bmN0aW9uIHNldENhY2hlVHlwZSh0eXBlLGVsZW1lbnRIZWxwZXIpe2lmKHR5cGU9PT0nc3ZnJyl7dGhpcy5fZWxlbWVudEhlbHBlcj1lbGVtZW50SGVscGVyO3RoaXMuX2NyZWF0ZUltYWdlRGF0YT10aGlzLmNyZWF0ZUltYWdlRGF0YS5iaW5kKHRoaXMpO31lbHNlIHt0aGlzLl9jcmVhdGVJbWFnZURhdGE9dGhpcy5jcmVhdGVJbWdEYXRhLmJpbmQodGhpcyk7fX1mdW5jdGlvbiBJbWFnZVByZWxvYWRlckZhY3RvcnkoKXt0aGlzLl9pbWFnZUxvYWRlZD1pbWFnZUxvYWRlZC5iaW5kKHRoaXMpO3RoaXMudGVzdEltYWdlTG9hZGVkPXRlc3RJbWFnZUxvYWRlZC5iaW5kKHRoaXMpO3RoaXMuYXNzZXRzUGF0aD0nJzt0aGlzLnBhdGg9Jyc7dGhpcy50b3RhbEltYWdlcz0wO3RoaXMubG9hZGVkQXNzZXRzPTA7dGhpcy5pbWFnZXNMb2FkZWRDYj1udWxsO3RoaXMuaW1hZ2VzPVtdO31JbWFnZVByZWxvYWRlckZhY3RvcnkucHJvdG90eXBlPXtsb2FkQXNzZXRzOmxvYWRBc3NldHMsc2V0QXNzZXRzUGF0aDpzZXRBc3NldHNQYXRoLHNldFBhdGg6c2V0UGF0aCxsb2FkZWQ6bG9hZGVkLGRlc3Ryb3k6ZGVzdHJveSxnZXRJbWFnZTpnZXRJbWFnZSxjcmVhdGVJbWdEYXRhOmNyZWF0ZUltZ0RhdGEsY3JlYXRlSW1hZ2VEYXRhOmNyZWF0ZUltYWdlRGF0YSxpbWFnZUxvYWRlZDppbWFnZUxvYWRlZCxzZXRDYWNoZVR5cGU6c2V0Q2FjaGVUeXBlfTtyZXR1cm4gSW1hZ2VQcmVsb2FkZXJGYWN0b3J5O30oKTsvKiBleHBvcnRlZCBmZWF0dXJlU3VwcG9ydCAqL3ZhciBmZWF0dXJlU3VwcG9ydD1mdW5jdGlvbigpe3ZhciBvYj17bWFza1R5cGU6dHJ1ZX07aWYoL01TSUUgMTAvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpfHwvTVNJRSA5L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KXx8L3J2OjExLjAvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpfHwvRWRnZVxcL1xcZC4vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtvYi5tYXNrVHlwZT1mYWxzZTt9cmV0dXJuIG9iO30oKTsvKiBnbG9iYWwgY3JlYXRlTlMgKi8gLyogZXhwb3J0ZWQgZmlsdGVyc0ZhY3RvcnkgKi92YXIgZmlsdGVyc0ZhY3Rvcnk9ZnVuY3Rpb24oKXt2YXIgb2I9e307b2IuY3JlYXRlRmlsdGVyPWNyZWF0ZUZpbHRlcjtvYi5jcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyPWNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXI7ZnVuY3Rpb24gY3JlYXRlRmlsdGVyKGZpbElkLHNraXBDb29yZGluYXRlcyl7dmFyIGZpbD1jcmVhdGVOUygnZmlsdGVyJyk7ZmlsLnNldEF0dHJpYnV0ZSgnaWQnLGZpbElkKTtpZihza2lwQ29vcmRpbmF0ZXMhPT10cnVlKXtmaWwuc2V0QXR0cmlidXRlKCdmaWx0ZXJVbml0cycsJ29iamVjdEJvdW5kaW5nQm94Jyk7ZmlsLnNldEF0dHJpYnV0ZSgneCcsJzAlJyk7ZmlsLnNldEF0dHJpYnV0ZSgneScsJzAlJyk7ZmlsLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCcxMDAlJyk7ZmlsLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywnMTAwJScpO31yZXR1cm4gZmlsO31mdW5jdGlvbiBjcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyKCl7dmFyIGZlQ29sb3JNYXRyaXg9Y3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsJ21hdHJpeCcpO2ZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCdzUkdCJyk7ZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsJzAgMCAwIDEgMCAgMCAwIDAgMSAwICAwIDAgMCAxIDAgIDAgMCAwIDEgMScpO3JldHVybiBmZUNvbG9yTWF0cml4O31yZXR1cm4gb2I7fSgpOy8qIGV4cG9ydGVkIGFzc2V0TG9hZGVyICovdmFyIGFzc2V0TG9hZGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZm9ybWF0UmVzcG9uc2UoeGhyKXtpZih4aHIucmVzcG9uc2UmJnR5cGVvZiB4aHIucmVzcG9uc2U9PT0nb2JqZWN0Jyl7cmV0dXJuIHhoci5yZXNwb25zZTt9aWYoeGhyLnJlc3BvbnNlJiZ0eXBlb2YgeGhyLnJlc3BvbnNlPT09J3N0cmluZycpe3JldHVybiBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7fWlmKHhoci5yZXNwb25zZVRleHQpe3JldHVybiBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO31yZXR1cm4gbnVsbDt9ZnVuY3Rpb24gbG9hZEFzc2V0KHBhdGgsY2FsbGJhY2ssZXJyb3JDYWxsYmFjayl7dmFyIHJlc3BvbnNlO3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0KCk7Ly8gc2V0IHJlc3BvbnNlVHlwZSBhZnRlciBjYWxsaW5nIG9wZW4gb3IgSUUgd2lsbCBicmVhay5cbnRyeXsvLyBUaGlzIGNyYXNoZXMgb24gQW5kcm9pZCBXZWJWaWV3IHByaW9yIHRvIEtpdEthdFxueGhyLnJlc3BvbnNlVHlwZT0nanNvbic7fWNhdGNoKGVycil7fS8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbnhoci5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZih4aHIucmVhZHlTdGF0ZT09PTQpe2lmKHhoci5zdGF0dXM9PT0yMDApe3Jlc3BvbnNlPWZvcm1hdFJlc3BvbnNlKHhocik7Y2FsbGJhY2socmVzcG9uc2UpO31lbHNlIHt0cnl7cmVzcG9uc2U9Zm9ybWF0UmVzcG9uc2UoeGhyKTtjYWxsYmFjayhyZXNwb25zZSk7fWNhdGNoKGVycil7aWYoZXJyb3JDYWxsYmFjayl7ZXJyb3JDYWxsYmFjayhlcnIpO319fX19O3hoci5vcGVuKCdHRVQnLHBhdGgsdHJ1ZSk7eGhyLnNlbmQoKTt9cmV0dXJuIHtsb2FkOmxvYWRBc3NldH07fSgpOy8qIGdsb2JhbCBjcmVhdGVTaXplZEFycmF5LCBQcm9wZXJ0eUZhY3RvcnksIFRleHRBbmltYXRvckRhdGFQcm9wZXJ0eSwgYmV6LCBhZGRIdWVUb1JHQixcclxuICBhZGRTYXR1cmF0aW9uVG9SR0IsIGFkZEJyaWdodG5lc3NUb1JHQiwgTGV0dGVyUHJvcHMsIE1hdHJpeCwgZXh0ZW5kUHJvdG90eXBlLCBEeW5hbWljUHJvcGVydHlDb250YWluZXIgKi9mdW5jdGlvbiBUZXh0QW5pbWF0b3JQcm9wZXJ0eSh0ZXh0RGF0YSxyZW5kZXJUeXBlLGVsZW0pe3RoaXMuX2lzRmlyc3RGcmFtZT10cnVlO3RoaXMuX2hhc01hc2tlZFBhdGg9ZmFsc2U7dGhpcy5fZnJhbWVJZD0tMTt0aGlzLl90ZXh0RGF0YT10ZXh0RGF0YTt0aGlzLl9yZW5kZXJUeXBlPXJlbmRlclR5cGU7dGhpcy5fZWxlbT1lbGVtO3RoaXMuX2FuaW1hdG9yc0RhdGE9Y3JlYXRlU2l6ZWRBcnJheSh0aGlzLl90ZXh0RGF0YS5hLmxlbmd0aCk7dGhpcy5fcGF0aERhdGE9e307dGhpcy5fbW9yZU9wdGlvbnM9e2FsaWdubWVudDp7fX07dGhpcy5yZW5kZXJlZExldHRlcnM9W107dGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWc9ZmFsc2U7dGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO31UZXh0QW5pbWF0b3JQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoUHJvcGVydGllcz1mdW5jdGlvbigpe3ZhciBpO3ZhciBsZW49dGhpcy5fdGV4dERhdGEuYS5sZW5ndGg7dmFyIGFuaW1hdG9yUHJvcHM7dmFyIGdldFByb3A9UHJvcGVydHlGYWN0b3J5LmdldFByb3A7Zm9yKGk9MDtpPGxlbjtpKz0xKXthbmltYXRvclByb3BzPXRoaXMuX3RleHREYXRhLmFbaV07dGhpcy5fYW5pbWF0b3JzRGF0YVtpXT1uZXcgVGV4dEFuaW1hdG9yRGF0YVByb3BlcnR5KHRoaXMuX2VsZW0sYW5pbWF0b3JQcm9wcyx0aGlzKTt9aWYodGhpcy5fdGV4dERhdGEucCYmJ20naW4gdGhpcy5fdGV4dERhdGEucCl7dGhpcy5fcGF0aERhdGE9e2Y6Z2V0UHJvcCh0aGlzLl9lbGVtLHRoaXMuX3RleHREYXRhLnAuZiwwLDAsdGhpcyksbDpnZXRQcm9wKHRoaXMuX2VsZW0sdGhpcy5fdGV4dERhdGEucC5sLDAsMCx0aGlzKSxyOnRoaXMuX3RleHREYXRhLnAucixtOnRoaXMuX2VsZW0ubWFza01hbmFnZXIuZ2V0TWFza1Byb3BlcnR5KHRoaXMuX3RleHREYXRhLnAubSl9O3RoaXMuX2hhc01hc2tlZFBhdGg9dHJ1ZTt9ZWxzZSB7dGhpcy5faGFzTWFza2VkUGF0aD1mYWxzZTt9dGhpcy5fbW9yZU9wdGlvbnMuYWxpZ25tZW50PWdldFByb3AodGhpcy5fZWxlbSx0aGlzLl90ZXh0RGF0YS5tLmEsMSwwLHRoaXMpO307VGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLmdldE1lYXN1cmVzPWZ1bmN0aW9uKGRvY3VtZW50RGF0YSxsZXR0ZXJzQ2hhbmdlZEZsYWcpe3RoaXMubGV0dGVyc0NoYW5nZWRGbGFnPWxldHRlcnNDaGFuZ2VkRmxhZztpZighdGhpcy5fbWRmJiYhdGhpcy5faXNGaXJzdEZyYW1lJiYhbGV0dGVyc0NoYW5nZWRGbGFnJiYoIXRoaXMuX2hhc01hc2tlZFBhdGh8fCF0aGlzLl9wYXRoRGF0YS5tLl9tZGYpKXtyZXR1cm47fXRoaXMuX2lzRmlyc3RGcmFtZT1mYWxzZTt2YXIgYWxpZ25tZW50PXRoaXMuX21vcmVPcHRpb25zLmFsaWdubWVudC52O3ZhciBhbmltYXRvcnM9dGhpcy5fYW5pbWF0b3JzRGF0YTt2YXIgdGV4dERhdGE9dGhpcy5fdGV4dERhdGE7dmFyIG1hdHJpeEhlbHBlcj10aGlzLm1IZWxwZXI7dmFyIHJlbmRlclR5cGU9dGhpcy5fcmVuZGVyVHlwZTt2YXIgcmVuZGVyZWRMZXR0ZXJzQ291bnQ9dGhpcy5yZW5kZXJlZExldHRlcnMubGVuZ3RoO3ZhciB4UG9zO3ZhciB5UG9zO3ZhciBpO3ZhciBsZW47dmFyIGxldHRlcnM9ZG9jdW1lbnREYXRhLmw7dmFyIHBhdGhJbmZvO3ZhciBjdXJyZW50TGVuZ3RoO3ZhciBjdXJyZW50UG9pbnQ7dmFyIHNlZ21lbnRMZW5ndGg7dmFyIGZsYWc7dmFyIHBvaW50SW5kO3ZhciBzZWdtZW50SW5kO3ZhciBwcmV2UG9pbnQ7dmFyIHBvaW50czt2YXIgc2VnbWVudHM7dmFyIHBhcnRpYWxMZW5ndGg7dmFyIHRvdGFsTGVuZ3RoO3ZhciBwZXJjO3ZhciB0YW5BbmdsZTt2YXIgbWFzaztpZih0aGlzLl9oYXNNYXNrZWRQYXRoKXttYXNrPXRoaXMuX3BhdGhEYXRhLm07aWYoIXRoaXMuX3BhdGhEYXRhLm58fHRoaXMuX3BhdGhEYXRhLl9tZGYpe3ZhciBwYXRocz1tYXNrLnY7aWYodGhpcy5fcGF0aERhdGEucil7cGF0aHM9cGF0aHMucmV2ZXJzZSgpO30vLyBUT0RPOiByZWxlYXNlIGJlemllciBkYXRhIGNhY2hlZCBmcm9tIHByZXZpb3VzIHBhdGhJbmZvOiB0aGlzLl9wYXRoRGF0YS5waVxucGF0aEluZm89e3RMZW5ndGg6MCxzZWdtZW50czpbXX07bGVuPXBhdGhzLl9sZW5ndGgtMTt2YXIgYmV6aWVyRGF0YTt0b3RhbExlbmd0aD0wO2ZvcihpPTA7aTxsZW47aSs9MSl7YmV6aWVyRGF0YT1iZXouYnVpbGRCZXppZXJEYXRhKHBhdGhzLnZbaV0scGF0aHMudltpKzFdLFtwYXRocy5vW2ldWzBdLXBhdGhzLnZbaV1bMF0scGF0aHMub1tpXVsxXS1wYXRocy52W2ldWzFdXSxbcGF0aHMuaVtpKzFdWzBdLXBhdGhzLnZbaSsxXVswXSxwYXRocy5pW2krMV1bMV0tcGF0aHMudltpKzFdWzFdXSk7cGF0aEluZm8udExlbmd0aCs9YmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO3BhdGhJbmZvLnNlZ21lbnRzLnB1c2goYmV6aWVyRGF0YSk7dG90YWxMZW5ndGgrPWJlemllckRhdGEuc2VnbWVudExlbmd0aDt9aT1sZW47aWYobWFzay52LmMpe2JlemllckRhdGE9YmV6LmJ1aWxkQmV6aWVyRGF0YShwYXRocy52W2ldLHBhdGhzLnZbMF0sW3BhdGhzLm9baV1bMF0tcGF0aHMudltpXVswXSxwYXRocy5vW2ldWzFdLXBhdGhzLnZbaV1bMV1dLFtwYXRocy5pWzBdWzBdLXBhdGhzLnZbMF1bMF0scGF0aHMuaVswXVsxXS1wYXRocy52WzBdWzFdXSk7cGF0aEluZm8udExlbmd0aCs9YmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO3BhdGhJbmZvLnNlZ21lbnRzLnB1c2goYmV6aWVyRGF0YSk7dG90YWxMZW5ndGgrPWJlemllckRhdGEuc2VnbWVudExlbmd0aDt9dGhpcy5fcGF0aERhdGEucGk9cGF0aEluZm87fXBhdGhJbmZvPXRoaXMuX3BhdGhEYXRhLnBpO2N1cnJlbnRMZW5ndGg9dGhpcy5fcGF0aERhdGEuZi52O3NlZ21lbnRJbmQ9MDtwb2ludEluZD0xO3NlZ21lbnRMZW5ndGg9MDtmbGFnPXRydWU7c2VnbWVudHM9cGF0aEluZm8uc2VnbWVudHM7aWYoY3VycmVudExlbmd0aDwwJiZtYXNrLnYuYyl7aWYocGF0aEluZm8udExlbmd0aDxNYXRoLmFicyhjdXJyZW50TGVuZ3RoKSl7Y3VycmVudExlbmd0aD0tTWF0aC5hYnMoY3VycmVudExlbmd0aCklcGF0aEluZm8udExlbmd0aDt9c2VnbWVudEluZD1zZWdtZW50cy5sZW5ndGgtMTtwb2ludHM9c2VnbWVudHNbc2VnbWVudEluZF0ucG9pbnRzO3BvaW50SW5kPXBvaW50cy5sZW5ndGgtMTt3aGlsZShjdXJyZW50TGVuZ3RoPDApe2N1cnJlbnRMZW5ndGgrPXBvaW50c1twb2ludEluZF0ucGFydGlhbExlbmd0aDtwb2ludEluZC09MTtpZihwb2ludEluZDwwKXtzZWdtZW50SW5kLT0xO3BvaW50cz1zZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7cG9pbnRJbmQ9cG9pbnRzLmxlbmd0aC0xO319fXBvaW50cz1zZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7cHJldlBvaW50PXBvaW50c1twb2ludEluZC0xXTtjdXJyZW50UG9pbnQ9cG9pbnRzW3BvaW50SW5kXTtwYXJ0aWFsTGVuZ3RoPWN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO31sZW49bGV0dGVycy5sZW5ndGg7eFBvcz0wO3lQb3M9MDt2YXIgeU9mZj1kb2N1bWVudERhdGEuZmluYWxTaXplKjEuMiowLjcxNDt2YXIgZmlyc3RMaW5lPXRydWU7dmFyIGFuaW1hdG9yUHJvcHM7dmFyIGFuaW1hdG9yU2VsZWN0b3I7dmFyIGo7dmFyIGpMZW47dmFyIGxldHRlclZhbHVlO2pMZW49YW5pbWF0b3JzLmxlbmd0aDt2YXIgbXVsdDt2YXIgaW5kPS0xO3ZhciBvZmZmO3ZhciB4UGF0aFBvczt2YXIgeVBhdGhQb3M7dmFyIGluaXRQYXRoUG9zPWN1cnJlbnRMZW5ndGg7dmFyIGluaXRTZWdtZW50SW5kPXNlZ21lbnRJbmQ7dmFyIGluaXRQb2ludEluZD1wb2ludEluZDt2YXIgY3VycmVudExpbmU9LTE7dmFyIGVsZW1PcGFjaXR5O3ZhciBzYzt2YXIgc3c7dmFyIGZjO3ZhciBrO3ZhciBsZXR0ZXJTdzt2YXIgbGV0dGVyU2M7dmFyIGxldHRlckZjO3ZhciBsZXR0ZXJNPScnO3ZhciBsZXR0ZXJQPXRoaXMuZGVmYXVsdFByb3BzQXJyYXk7dmFyIGxldHRlck87Ly9cbmlmKGRvY3VtZW50RGF0YS5qPT09Mnx8ZG9jdW1lbnREYXRhLmo9PT0xKXt2YXIgYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0PTA7dmFyIGFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0PTA7dmFyIGp1c3RpZnlPZmZzZXRNdWx0PWRvY3VtZW50RGF0YS5qPT09Mj8tMC41Oi0xO3ZhciBsYXN0SW5kZXg9MDt2YXIgaXNOZXdMaW5lPXRydWU7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZihsZXR0ZXJzW2ldLm4pe2lmKGFuaW1hdG9ySnVzdGlmeU9mZnNldCl7YW5pbWF0b3JKdXN0aWZ5T2Zmc2V0Kz1hbmltYXRvckZpcnN0Q2hhck9mZnNldDt9d2hpbGUobGFzdEluZGV4PGkpe2xldHRlcnNbbGFzdEluZGV4XS5hbmltYXRvckp1c3RpZnlPZmZzZXQ9YW5pbWF0b3JKdXN0aWZ5T2Zmc2V0O2xhc3RJbmRleCs9MTt9YW5pbWF0b3JKdXN0aWZ5T2Zmc2V0PTA7aXNOZXdMaW5lPXRydWU7fWVsc2Uge2ZvcihqPTA7ajxqTGVuO2orPTEpe2FuaW1hdG9yUHJvcHM9YW5pbWF0b3JzW2pdLmE7aWYoYW5pbWF0b3JQcm9wcy50LnByb3BUeXBlKXtpZihpc05ld0xpbmUmJmRvY3VtZW50RGF0YS5qPT09Mil7YW5pbWF0b3JGaXJzdENoYXJPZmZzZXQrPWFuaW1hdG9yUHJvcHMudC52Kmp1c3RpZnlPZmZzZXRNdWx0O31hbmltYXRvclNlbGVjdG9yPWFuaW1hdG9yc1tqXS5zO211bHQ9YW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtpZihtdWx0Lmxlbmd0aCl7YW5pbWF0b3JKdXN0aWZ5T2Zmc2V0Kz1hbmltYXRvclByb3BzLnQudiptdWx0WzBdKmp1c3RpZnlPZmZzZXRNdWx0O31lbHNlIHthbmltYXRvckp1c3RpZnlPZmZzZXQrPWFuaW1hdG9yUHJvcHMudC52Km11bHQqanVzdGlmeU9mZnNldE11bHQ7fX19aXNOZXdMaW5lPWZhbHNlO319aWYoYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0KXthbmltYXRvckp1c3RpZnlPZmZzZXQrPWFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0O313aGlsZShsYXN0SW5kZXg8aSl7bGV0dGVyc1tsYXN0SW5kZXhdLmFuaW1hdG9ySnVzdGlmeU9mZnNldD1hbmltYXRvckp1c3RpZnlPZmZzZXQ7bGFzdEluZGV4Kz0xO319Ly9cbmZvcihpPTA7aTxsZW47aSs9MSl7bWF0cml4SGVscGVyLnJlc2V0KCk7ZWxlbU9wYWNpdHk9MTtpZihsZXR0ZXJzW2ldLm4pe3hQb3M9MDt5UG9zKz1kb2N1bWVudERhdGEueU9mZnNldDt5UG9zKz1maXJzdExpbmU/MTowO2N1cnJlbnRMZW5ndGg9aW5pdFBhdGhQb3M7Zmlyc3RMaW5lPWZhbHNlO2lmKHRoaXMuX2hhc01hc2tlZFBhdGgpe3NlZ21lbnRJbmQ9aW5pdFNlZ21lbnRJbmQ7cG9pbnRJbmQ9aW5pdFBvaW50SW5kO3BvaW50cz1zZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7cHJldlBvaW50PXBvaW50c1twb2ludEluZC0xXTtjdXJyZW50UG9pbnQ9cG9pbnRzW3BvaW50SW5kXTtwYXJ0aWFsTGVuZ3RoPWN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO3NlZ21lbnRMZW5ndGg9MDt9bGV0dGVyTT0nJztsZXR0ZXJGYz0nJztsZXR0ZXJTdz0nJztsZXR0ZXJPPScnO2xldHRlclA9dGhpcy5kZWZhdWx0UHJvcHNBcnJheTt9ZWxzZSB7aWYodGhpcy5faGFzTWFza2VkUGF0aCl7aWYoY3VycmVudExpbmUhPT1sZXR0ZXJzW2ldLmxpbmUpe3N3aXRjaChkb2N1bWVudERhdGEuail7Y2FzZSAxOmN1cnJlbnRMZW5ndGgrPXRvdGFsTGVuZ3RoLWRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xldHRlcnNbaV0ubGluZV07YnJlYWs7Y2FzZSAyOmN1cnJlbnRMZW5ndGgrPSh0b3RhbExlbmd0aC1kb2N1bWVudERhdGEubGluZVdpZHRoc1tsZXR0ZXJzW2ldLmxpbmVdKS8yO2JyZWFrO2RlZmF1bHQ6YnJlYWs7fWN1cnJlbnRMaW5lPWxldHRlcnNbaV0ubGluZTt9aWYoaW5kIT09bGV0dGVyc1tpXS5pbmQpe2lmKGxldHRlcnNbaW5kXSl7Y3VycmVudExlbmd0aCs9bGV0dGVyc1tpbmRdLmV4dHJhO31jdXJyZW50TGVuZ3RoKz1sZXR0ZXJzW2ldLmFuLzI7aW5kPWxldHRlcnNbaV0uaW5kO31jdXJyZW50TGVuZ3RoKz1hbGlnbm1lbnRbMF0qbGV0dGVyc1tpXS5hbiowLjAwNTt2YXIgYW5pbWF0b3JPZmZzZXQ9MDtmb3Ioaj0wO2o8akxlbjtqKz0xKXthbmltYXRvclByb3BzPWFuaW1hdG9yc1tqXS5hO2lmKGFuaW1hdG9yUHJvcHMucC5wcm9wVHlwZSl7YW5pbWF0b3JTZWxlY3Rvcj1hbmltYXRvcnNbal0uczttdWx0PWFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSx0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7aWYobXVsdC5sZW5ndGgpe2FuaW1hdG9yT2Zmc2V0Kz1hbmltYXRvclByb3BzLnAudlswXSptdWx0WzBdO31lbHNlIHthbmltYXRvck9mZnNldCs9YW5pbWF0b3JQcm9wcy5wLnZbMF0qbXVsdDt9fWlmKGFuaW1hdG9yUHJvcHMuYS5wcm9wVHlwZSl7YW5pbWF0b3JTZWxlY3Rvcj1hbmltYXRvcnNbal0uczttdWx0PWFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSx0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7aWYobXVsdC5sZW5ndGgpe2FuaW1hdG9yT2Zmc2V0Kz1hbmltYXRvclByb3BzLmEudlswXSptdWx0WzBdO31lbHNlIHthbmltYXRvck9mZnNldCs9YW5pbWF0b3JQcm9wcy5hLnZbMF0qbXVsdDt9fX1mbGFnPXRydWU7d2hpbGUoZmxhZyl7aWYoc2VnbWVudExlbmd0aCtwYXJ0aWFsTGVuZ3RoPj1jdXJyZW50TGVuZ3RoK2FuaW1hdG9yT2Zmc2V0fHwhcG9pbnRzKXtwZXJjPShjdXJyZW50TGVuZ3RoK2FuaW1hdG9yT2Zmc2V0LXNlZ21lbnRMZW5ndGgpL2N1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO3hQYXRoUG9zPXByZXZQb2ludC5wb2ludFswXSsoY3VycmVudFBvaW50LnBvaW50WzBdLXByZXZQb2ludC5wb2ludFswXSkqcGVyYzt5UGF0aFBvcz1wcmV2UG9pbnQucG9pbnRbMV0rKGN1cnJlbnRQb2ludC5wb2ludFsxXS1wcmV2UG9pbnQucG9pbnRbMV0pKnBlcmM7bWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYWxpZ25tZW50WzBdKmxldHRlcnNbaV0uYW4qMC4wMDUsLShhbGlnbm1lbnRbMV0qeU9mZikqMC4wMSk7ZmxhZz1mYWxzZTt9ZWxzZSBpZihwb2ludHMpe3NlZ21lbnRMZW5ndGgrPWN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO3BvaW50SW5kKz0xO2lmKHBvaW50SW5kPj1wb2ludHMubGVuZ3RoKXtwb2ludEluZD0wO3NlZ21lbnRJbmQrPTE7aWYoIXNlZ21lbnRzW3NlZ21lbnRJbmRdKXtpZihtYXNrLnYuYyl7cG9pbnRJbmQ9MDtzZWdtZW50SW5kPTA7cG9pbnRzPXNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50czt9ZWxzZSB7c2VnbWVudExlbmd0aC09Y3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7cG9pbnRzPW51bGw7fX1lbHNlIHtwb2ludHM9c2VnbWVudHNbc2VnbWVudEluZF0ucG9pbnRzO319aWYocG9pbnRzKXtwcmV2UG9pbnQ9Y3VycmVudFBvaW50O2N1cnJlbnRQb2ludD1wb2ludHNbcG9pbnRJbmRdO3BhcnRpYWxMZW5ndGg9Y3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7fX19b2ZmZj1sZXR0ZXJzW2ldLmFuLzItbGV0dGVyc1tpXS5hZGQ7bWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtb2ZmZiwwLDApO31lbHNlIHtvZmZmPWxldHRlcnNbaV0uYW4vMi1sZXR0ZXJzW2ldLmFkZDttYXRyaXhIZWxwZXIudHJhbnNsYXRlKC1vZmZmLDAsMCk7Ly8gR3JvdXBpbmcgYWxpZ25tZW50XG5tYXRyaXhIZWxwZXIudHJhbnNsYXRlKC1hbGlnbm1lbnRbMF0qbGV0dGVyc1tpXS5hbiowLjAwNSwtYWxpZ25tZW50WzFdKnlPZmYqMC4wMSwwKTt9Zm9yKGo9MDtqPGpMZW47ais9MSl7YW5pbWF0b3JQcm9wcz1hbmltYXRvcnNbal0uYTtpZihhbmltYXRvclByb3BzLnQucHJvcFR5cGUpe2FuaW1hdG9yU2VsZWN0b3I9YW5pbWF0b3JzW2pdLnM7bXVsdD1hbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpOy8vIFRoaXMgY29uZGl0aW9uIGlzIHRvIHByZXZlbnQgYXBwbHlpbmcgdHJhY2tpbmcgdG8gZmlyc3QgY2hhcmFjdGVyIGluIGVhY2ggbGluZS4gTWlnaHQgYmUgYmV0dGVyIHRvIHVzZSBhIGJvb2xlYW4gXCJpc05ld0xpbmVcIlxuaWYoeFBvcyE9PTB8fGRvY3VtZW50RGF0YS5qIT09MCl7aWYodGhpcy5faGFzTWFza2VkUGF0aCl7aWYobXVsdC5sZW5ndGgpe2N1cnJlbnRMZW5ndGgrPWFuaW1hdG9yUHJvcHMudC52Km11bHRbMF07fWVsc2Uge2N1cnJlbnRMZW5ndGgrPWFuaW1hdG9yUHJvcHMudC52Km11bHQ7fX1lbHNlIGlmKG11bHQubGVuZ3RoKXt4UG9zKz1hbmltYXRvclByb3BzLnQudiptdWx0WzBdO31lbHNlIHt4UG9zKz1hbmltYXRvclByb3BzLnQudiptdWx0O319fX1pZihkb2N1bWVudERhdGEuc3Ryb2tlV2lkdGhBbmltKXtzdz1kb2N1bWVudERhdGEuc3d8fDA7fWlmKGRvY3VtZW50RGF0YS5zdHJva2VDb2xvckFuaW0pe2lmKGRvY3VtZW50RGF0YS5zYyl7c2M9W2RvY3VtZW50RGF0YS5zY1swXSxkb2N1bWVudERhdGEuc2NbMV0sZG9jdW1lbnREYXRhLnNjWzJdXTt9ZWxzZSB7c2M9WzAsMCwwXTt9fWlmKGRvY3VtZW50RGF0YS5maWxsQ29sb3JBbmltJiZkb2N1bWVudERhdGEuZmMpe2ZjPVtkb2N1bWVudERhdGEuZmNbMF0sZG9jdW1lbnREYXRhLmZjWzFdLGRvY3VtZW50RGF0YS5mY1syXV07fWZvcihqPTA7ajxqTGVuO2orPTEpe2FuaW1hdG9yUHJvcHM9YW5pbWF0b3JzW2pdLmE7aWYoYW5pbWF0b3JQcm9wcy5hLnByb3BUeXBlKXthbmltYXRvclNlbGVjdG9yPWFuaW1hdG9yc1tqXS5zO211bHQ9YW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtpZihtdWx0Lmxlbmd0aCl7bWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYW5pbWF0b3JQcm9wcy5hLnZbMF0qbXVsdFswXSwtYW5pbWF0b3JQcm9wcy5hLnZbMV0qbXVsdFsxXSxhbmltYXRvclByb3BzLmEudlsyXSptdWx0WzJdKTt9ZWxzZSB7bWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYW5pbWF0b3JQcm9wcy5hLnZbMF0qbXVsdCwtYW5pbWF0b3JQcm9wcy5hLnZbMV0qbXVsdCxhbmltYXRvclByb3BzLmEudlsyXSptdWx0KTt9fX1mb3Ioaj0wO2o8akxlbjtqKz0xKXthbmltYXRvclByb3BzPWFuaW1hdG9yc1tqXS5hO2lmKGFuaW1hdG9yUHJvcHMucy5wcm9wVHlwZSl7YW5pbWF0b3JTZWxlY3Rvcj1hbmltYXRvcnNbal0uczttdWx0PWFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSx0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7aWYobXVsdC5sZW5ndGgpe21hdHJpeEhlbHBlci5zY2FsZSgxKyhhbmltYXRvclByb3BzLnMudlswXS0xKSptdWx0WzBdLDErKGFuaW1hdG9yUHJvcHMucy52WzFdLTEpKm11bHRbMV0sMSk7fWVsc2Uge21hdHJpeEhlbHBlci5zY2FsZSgxKyhhbmltYXRvclByb3BzLnMudlswXS0xKSptdWx0LDErKGFuaW1hdG9yUHJvcHMucy52WzFdLTEpKm11bHQsMSk7fX19Zm9yKGo9MDtqPGpMZW47ais9MSl7YW5pbWF0b3JQcm9wcz1hbmltYXRvcnNbal0uYTthbmltYXRvclNlbGVjdG9yPWFuaW1hdG9yc1tqXS5zO211bHQ9YW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtpZihhbmltYXRvclByb3BzLnNrLnByb3BUeXBlKXtpZihtdWx0Lmxlbmd0aCl7bWF0cml4SGVscGVyLnNrZXdGcm9tQXhpcygtYW5pbWF0b3JQcm9wcy5zay52Km11bHRbMF0sYW5pbWF0b3JQcm9wcy5zYS52Km11bHRbMV0pO31lbHNlIHttYXRyaXhIZWxwZXIuc2tld0Zyb21BeGlzKC1hbmltYXRvclByb3BzLnNrLnYqbXVsdCxhbmltYXRvclByb3BzLnNhLnYqbXVsdCk7fX1pZihhbmltYXRvclByb3BzLnIucHJvcFR5cGUpe2lmKG11bHQubGVuZ3RoKXttYXRyaXhIZWxwZXIucm90YXRlWigtYW5pbWF0b3JQcm9wcy5yLnYqbXVsdFsyXSk7fWVsc2Uge21hdHJpeEhlbHBlci5yb3RhdGVaKC1hbmltYXRvclByb3BzLnIudiptdWx0KTt9fWlmKGFuaW1hdG9yUHJvcHMucnkucHJvcFR5cGUpe2lmKG11bHQubGVuZ3RoKXttYXRyaXhIZWxwZXIucm90YXRlWShhbmltYXRvclByb3BzLnJ5LnYqbXVsdFsxXSk7fWVsc2Uge21hdHJpeEhlbHBlci5yb3RhdGVZKGFuaW1hdG9yUHJvcHMucnkudiptdWx0KTt9fWlmKGFuaW1hdG9yUHJvcHMucngucHJvcFR5cGUpe2lmKG11bHQubGVuZ3RoKXttYXRyaXhIZWxwZXIucm90YXRlWChhbmltYXRvclByb3BzLnJ4LnYqbXVsdFswXSk7fWVsc2Uge21hdHJpeEhlbHBlci5yb3RhdGVYKGFuaW1hdG9yUHJvcHMucngudiptdWx0KTt9fWlmKGFuaW1hdG9yUHJvcHMuby5wcm9wVHlwZSl7aWYobXVsdC5sZW5ndGgpe2VsZW1PcGFjaXR5Kz0oYW5pbWF0b3JQcm9wcy5vLnYqbXVsdFswXS1lbGVtT3BhY2l0eSkqbXVsdFswXTt9ZWxzZSB7ZWxlbU9wYWNpdHkrPShhbmltYXRvclByb3BzLm8udiptdWx0LWVsZW1PcGFjaXR5KSptdWx0O319aWYoZG9jdW1lbnREYXRhLnN0cm9rZVdpZHRoQW5pbSYmYW5pbWF0b3JQcm9wcy5zdy5wcm9wVHlwZSl7aWYobXVsdC5sZW5ndGgpe3N3Kz1hbmltYXRvclByb3BzLnN3LnYqbXVsdFswXTt9ZWxzZSB7c3crPWFuaW1hdG9yUHJvcHMuc3cudiptdWx0O319aWYoZG9jdW1lbnREYXRhLnN0cm9rZUNvbG9yQW5pbSYmYW5pbWF0b3JQcm9wcy5zYy5wcm9wVHlwZSl7Zm9yKGs9MDtrPDM7ays9MSl7aWYobXVsdC5sZW5ndGgpe3NjW2tdKz0oYW5pbWF0b3JQcm9wcy5zYy52W2tdLXNjW2tdKSptdWx0WzBdO31lbHNlIHtzY1trXSs9KGFuaW1hdG9yUHJvcHMuc2MudltrXS1zY1trXSkqbXVsdDt9fX1pZihkb2N1bWVudERhdGEuZmlsbENvbG9yQW5pbSYmZG9jdW1lbnREYXRhLmZjKXtpZihhbmltYXRvclByb3BzLmZjLnByb3BUeXBlKXtmb3Ioaz0wO2s8MztrKz0xKXtpZihtdWx0Lmxlbmd0aCl7ZmNba10rPShhbmltYXRvclByb3BzLmZjLnZba10tZmNba10pKm11bHRbMF07fWVsc2Uge2ZjW2tdKz0oYW5pbWF0b3JQcm9wcy5mYy52W2tdLWZjW2tdKSptdWx0O319fWlmKGFuaW1hdG9yUHJvcHMuZmgucHJvcFR5cGUpe2lmKG11bHQubGVuZ3RoKXtmYz1hZGRIdWVUb1JHQihmYyxhbmltYXRvclByb3BzLmZoLnYqbXVsdFswXSk7fWVsc2Uge2ZjPWFkZEh1ZVRvUkdCKGZjLGFuaW1hdG9yUHJvcHMuZmgudiptdWx0KTt9fWlmKGFuaW1hdG9yUHJvcHMuZnMucHJvcFR5cGUpe2lmKG11bHQubGVuZ3RoKXtmYz1hZGRTYXR1cmF0aW9uVG9SR0IoZmMsYW5pbWF0b3JQcm9wcy5mcy52Km11bHRbMF0pO31lbHNlIHtmYz1hZGRTYXR1cmF0aW9uVG9SR0IoZmMsYW5pbWF0b3JQcm9wcy5mcy52Km11bHQpO319aWYoYW5pbWF0b3JQcm9wcy5mYi5wcm9wVHlwZSl7aWYobXVsdC5sZW5ndGgpe2ZjPWFkZEJyaWdodG5lc3NUb1JHQihmYyxhbmltYXRvclByb3BzLmZiLnYqbXVsdFswXSk7fWVsc2Uge2ZjPWFkZEJyaWdodG5lc3NUb1JHQihmYyxhbmltYXRvclByb3BzLmZiLnYqbXVsdCk7fX19fWZvcihqPTA7ajxqTGVuO2orPTEpe2FuaW1hdG9yUHJvcHM9YW5pbWF0b3JzW2pdLmE7aWYoYW5pbWF0b3JQcm9wcy5wLnByb3BUeXBlKXthbmltYXRvclNlbGVjdG9yPWFuaW1hdG9yc1tqXS5zO211bHQ9YW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtpZih0aGlzLl9oYXNNYXNrZWRQYXRoKXtpZihtdWx0Lmxlbmd0aCl7bWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLGFuaW1hdG9yUHJvcHMucC52WzFdKm11bHRbMF0sLWFuaW1hdG9yUHJvcHMucC52WzJdKm11bHRbMV0pO31lbHNlIHttYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsYW5pbWF0b3JQcm9wcy5wLnZbMV0qbXVsdCwtYW5pbWF0b3JQcm9wcy5wLnZbMl0qbXVsdCk7fX1lbHNlIGlmKG11bHQubGVuZ3RoKXttYXRyaXhIZWxwZXIudHJhbnNsYXRlKGFuaW1hdG9yUHJvcHMucC52WzBdKm11bHRbMF0sYW5pbWF0b3JQcm9wcy5wLnZbMV0qbXVsdFsxXSwtYW5pbWF0b3JQcm9wcy5wLnZbMl0qbXVsdFsyXSk7fWVsc2Uge21hdHJpeEhlbHBlci50cmFuc2xhdGUoYW5pbWF0b3JQcm9wcy5wLnZbMF0qbXVsdCxhbmltYXRvclByb3BzLnAudlsxXSptdWx0LC1hbmltYXRvclByb3BzLnAudlsyXSptdWx0KTt9fX1pZihkb2N1bWVudERhdGEuc3Ryb2tlV2lkdGhBbmltKXtsZXR0ZXJTdz1zdzwwPzA6c3c7fWlmKGRvY3VtZW50RGF0YS5zdHJva2VDb2xvckFuaW0pe2xldHRlclNjPSdyZ2IoJytNYXRoLnJvdW5kKHNjWzBdKjI1NSkrJywnK01hdGgucm91bmQoc2NbMV0qMjU1KSsnLCcrTWF0aC5yb3VuZChzY1syXSoyNTUpKycpJzt9aWYoZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0mJmRvY3VtZW50RGF0YS5mYyl7bGV0dGVyRmM9J3JnYignK01hdGgucm91bmQoZmNbMF0qMjU1KSsnLCcrTWF0aC5yb3VuZChmY1sxXSoyNTUpKycsJytNYXRoLnJvdW5kKGZjWzJdKjI1NSkrJyknO31pZih0aGlzLl9oYXNNYXNrZWRQYXRoKXttYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsLWRvY3VtZW50RGF0YS5scyk7bWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLGFsaWdubWVudFsxXSp5T2ZmKjAuMDEreVBvcywwKTtpZih0ZXh0RGF0YS5wLnApe3RhbkFuZ2xlPShjdXJyZW50UG9pbnQucG9pbnRbMV0tcHJldlBvaW50LnBvaW50WzFdKS8oY3VycmVudFBvaW50LnBvaW50WzBdLXByZXZQb2ludC5wb2ludFswXSk7dmFyIHJvdD1NYXRoLmF0YW4odGFuQW5nbGUpKjE4MC9NYXRoLlBJO2lmKGN1cnJlbnRQb2ludC5wb2ludFswXTxwcmV2UG9pbnQucG9pbnRbMF0pe3JvdCs9MTgwO31tYXRyaXhIZWxwZXIucm90YXRlKC1yb3QqTWF0aC5QSS8xODApO31tYXRyaXhIZWxwZXIudHJhbnNsYXRlKHhQYXRoUG9zLHlQYXRoUG9zLDApO2N1cnJlbnRMZW5ndGgtPWFsaWdubWVudFswXSpsZXR0ZXJzW2ldLmFuKjAuMDA1O2lmKGxldHRlcnNbaSsxXSYmaW5kIT09bGV0dGVyc1tpKzFdLmluZCl7Y3VycmVudExlbmd0aCs9bGV0dGVyc1tpXS5hbi8yO2N1cnJlbnRMZW5ndGgrPWRvY3VtZW50RGF0YS50ciowLjAwMSpkb2N1bWVudERhdGEuZmluYWxTaXplO319ZWxzZSB7bWF0cml4SGVscGVyLnRyYW5zbGF0ZSh4UG9zLHlQb3MsMCk7aWYoZG9jdW1lbnREYXRhLnBzKXsvLyBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5wc1swXSxkb2N1bWVudERhdGEucHNbMV0sMCk7XG5tYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5wc1swXSxkb2N1bWVudERhdGEucHNbMV0rZG9jdW1lbnREYXRhLmFzY2VudCwwKTt9c3dpdGNoKGRvY3VtZW50RGF0YS5qKXtjYXNlIDE6bWF0cml4SGVscGVyLnRyYW5zbGF0ZShsZXR0ZXJzW2ldLmFuaW1hdG9ySnVzdGlmeU9mZnNldCtkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldCsoZG9jdW1lbnREYXRhLmJveFdpZHRoLWRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xldHRlcnNbaV0ubGluZV0pLDAsMCk7YnJlYWs7Y2FzZSAyOm1hdHJpeEhlbHBlci50cmFuc2xhdGUobGV0dGVyc1tpXS5hbmltYXRvckp1c3RpZnlPZmZzZXQrZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQrKGRvY3VtZW50RGF0YS5ib3hXaWR0aC1kb2N1bWVudERhdGEubGluZVdpZHRoc1tsZXR0ZXJzW2ldLmxpbmVdKS8yLDAsMCk7YnJlYWs7ZGVmYXVsdDpicmVhazt9bWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLC1kb2N1bWVudERhdGEubHMpO21hdHJpeEhlbHBlci50cmFuc2xhdGUob2ZmZiwwLDApO21hdHJpeEhlbHBlci50cmFuc2xhdGUoYWxpZ25tZW50WzBdKmxldHRlcnNbaV0uYW4qMC4wMDUsYWxpZ25tZW50WzFdKnlPZmYqMC4wMSwwKTt4UG9zKz1sZXR0ZXJzW2ldLmwrZG9jdW1lbnREYXRhLnRyKjAuMDAxKmRvY3VtZW50RGF0YS5maW5hbFNpemU7fWlmKHJlbmRlclR5cGU9PT0naHRtbCcpe2xldHRlck09bWF0cml4SGVscGVyLnRvQ1NTKCk7fWVsc2UgaWYocmVuZGVyVHlwZT09PSdzdmcnKXtsZXR0ZXJNPW1hdHJpeEhlbHBlci50bzJkQ1NTKCk7fWVsc2Uge2xldHRlclA9W21hdHJpeEhlbHBlci5wcm9wc1swXSxtYXRyaXhIZWxwZXIucHJvcHNbMV0sbWF0cml4SGVscGVyLnByb3BzWzJdLG1hdHJpeEhlbHBlci5wcm9wc1szXSxtYXRyaXhIZWxwZXIucHJvcHNbNF0sbWF0cml4SGVscGVyLnByb3BzWzVdLG1hdHJpeEhlbHBlci5wcm9wc1s2XSxtYXRyaXhIZWxwZXIucHJvcHNbN10sbWF0cml4SGVscGVyLnByb3BzWzhdLG1hdHJpeEhlbHBlci5wcm9wc1s5XSxtYXRyaXhIZWxwZXIucHJvcHNbMTBdLG1hdHJpeEhlbHBlci5wcm9wc1sxMV0sbWF0cml4SGVscGVyLnByb3BzWzEyXSxtYXRyaXhIZWxwZXIucHJvcHNbMTNdLG1hdHJpeEhlbHBlci5wcm9wc1sxNF0sbWF0cml4SGVscGVyLnByb3BzWzE1XV07fWxldHRlck89ZWxlbU9wYWNpdHk7fWlmKHJlbmRlcmVkTGV0dGVyc0NvdW50PD1pKXtsZXR0ZXJWYWx1ZT1uZXcgTGV0dGVyUHJvcHMobGV0dGVyTyxsZXR0ZXJTdyxsZXR0ZXJTYyxsZXR0ZXJGYyxsZXR0ZXJNLGxldHRlclApO3RoaXMucmVuZGVyZWRMZXR0ZXJzLnB1c2gobGV0dGVyVmFsdWUpO3JlbmRlcmVkTGV0dGVyc0NvdW50Kz0xO3RoaXMubGV0dGVyc0NoYW5nZWRGbGFnPXRydWU7fWVsc2Uge2xldHRlclZhbHVlPXRoaXMucmVuZGVyZWRMZXR0ZXJzW2ldO3RoaXMubGV0dGVyc0NoYW5nZWRGbGFnPWxldHRlclZhbHVlLnVwZGF0ZShsZXR0ZXJPLGxldHRlclN3LGxldHRlclNjLGxldHRlckZjLGxldHRlck0sbGV0dGVyUCl8fHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnO319fTtUZXh0QW5pbWF0b3JQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWU9ZnVuY3Rpb24oKXtpZih0aGlzLl9lbGVtLmdsb2JhbERhdGEuZnJhbWVJZD09PXRoaXMuX2ZyYW1lSWQpe3JldHVybjt9dGhpcy5fZnJhbWVJZD10aGlzLl9lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDt0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO307VGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLm1IZWxwZXI9bmV3IE1hdHJpeCgpO1RleHRBbmltYXRvclByb3BlcnR5LnByb3RvdHlwZS5kZWZhdWx0UHJvcHNBcnJheT1bXTtleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sVGV4dEFuaW1hdG9yUHJvcGVydHkpOy8qIGdsb2JhbCBQcm9wZXJ0eUZhY3RvcnksIGRlZ1RvUmFkcywgVGV4dFNlbGVjdG9yUHJvcCAqLyAvKiBleHBvcnRlZCBUZXh0QW5pbWF0b3JEYXRhUHJvcGVydHkgKi9mdW5jdGlvbiBUZXh0QW5pbWF0b3JEYXRhUHJvcGVydHkoZWxlbSxhbmltYXRvclByb3BzLGNvbnRhaW5lcil7dmFyIGRlZmF1bHREYXRhPXtwcm9wVHlwZTpmYWxzZX07dmFyIGdldFByb3A9UHJvcGVydHlGYWN0b3J5LmdldFByb3A7dmFyIHRleHRBbmltYXRvckFuaW1hdGFibGVzPWFuaW1hdG9yUHJvcHMuYTt0aGlzLmE9e3I6dGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucj9nZXRQcm9wKGVsZW0sdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuciwwLGRlZ1RvUmFkcyxjb250YWluZXIpOmRlZmF1bHREYXRhLHJ4OnRleHRBbmltYXRvckFuaW1hdGFibGVzLnJ4P2dldFByb3AoZWxlbSx0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5yeCwwLGRlZ1RvUmFkcyxjb250YWluZXIpOmRlZmF1bHREYXRhLHJ5OnRleHRBbmltYXRvckFuaW1hdGFibGVzLnJ5P2dldFByb3AoZWxlbSx0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5yeSwwLGRlZ1RvUmFkcyxjb250YWluZXIpOmRlZmF1bHREYXRhLHNrOnRleHRBbmltYXRvckFuaW1hdGFibGVzLnNrP2dldFByb3AoZWxlbSx0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zaywwLGRlZ1RvUmFkcyxjb250YWluZXIpOmRlZmF1bHREYXRhLHNhOnRleHRBbmltYXRvckFuaW1hdGFibGVzLnNhP2dldFByb3AoZWxlbSx0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zYSwwLGRlZ1RvUmFkcyxjb250YWluZXIpOmRlZmF1bHREYXRhLHM6dGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucz9nZXRQcm9wKGVsZW0sdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucywxLDAuMDEsY29udGFpbmVyKTpkZWZhdWx0RGF0YSxhOnRleHRBbmltYXRvckFuaW1hdGFibGVzLmE/Z2V0UHJvcChlbGVtLHRleHRBbmltYXRvckFuaW1hdGFibGVzLmEsMSwwLGNvbnRhaW5lcik6ZGVmYXVsdERhdGEsbzp0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5vP2dldFByb3AoZWxlbSx0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5vLDAsMC4wMSxjb250YWluZXIpOmRlZmF1bHREYXRhLHA6dGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucD9nZXRQcm9wKGVsZW0sdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucCwxLDAsY29udGFpbmVyKTpkZWZhdWx0RGF0YSxzdzp0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zdz9nZXRQcm9wKGVsZW0sdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc3csMCwwLGNvbnRhaW5lcik6ZGVmYXVsdERhdGEsc2M6dGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2M/Z2V0UHJvcChlbGVtLHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNjLDEsMCxjb250YWluZXIpOmRlZmF1bHREYXRhLGZjOnRleHRBbmltYXRvckFuaW1hdGFibGVzLmZjP2dldFByb3AoZWxlbSx0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5mYywxLDAsY29udGFpbmVyKTpkZWZhdWx0RGF0YSxmaDp0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5maD9nZXRQcm9wKGVsZW0sdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmgsMCwwLGNvbnRhaW5lcik6ZGVmYXVsdERhdGEsZnM6dGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZnM/Z2V0UHJvcChlbGVtLHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZzLDAsMC4wMSxjb250YWluZXIpOmRlZmF1bHREYXRhLGZiOnRleHRBbmltYXRvckFuaW1hdGFibGVzLmZiP2dldFByb3AoZWxlbSx0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5mYiwwLDAuMDEsY29udGFpbmVyKTpkZWZhdWx0RGF0YSx0OnRleHRBbmltYXRvckFuaW1hdGFibGVzLnQ/Z2V0UHJvcChlbGVtLHRleHRBbmltYXRvckFuaW1hdGFibGVzLnQsMCwwLGNvbnRhaW5lcik6ZGVmYXVsdERhdGF9O3RoaXMucz1UZXh0U2VsZWN0b3JQcm9wLmdldFRleHRTZWxlY3RvclByb3AoZWxlbSxhbmltYXRvclByb3BzLnMsY29udGFpbmVyKTt0aGlzLnMudD1hbmltYXRvclByb3BzLnMudDt9ZnVuY3Rpb24gTGV0dGVyUHJvcHMobyxzdyxzYyxmYyxtLHApe3RoaXMubz1vO3RoaXMuc3c9c3c7dGhpcy5zYz1zYzt0aGlzLmZjPWZjO3RoaXMubT1tO3RoaXMucD1wO3RoaXMuX21kZj17bzp0cnVlLHN3OiEhc3csc2M6ISFzYyxmYzohIWZjLG06dHJ1ZSxwOnRydWV9O31MZXR0ZXJQcm9wcy5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKG8sc3csc2MsZmMsbSxwKXt0aGlzLl9tZGYubz1mYWxzZTt0aGlzLl9tZGYuc3c9ZmFsc2U7dGhpcy5fbWRmLnNjPWZhbHNlO3RoaXMuX21kZi5mYz1mYWxzZTt0aGlzLl9tZGYubT1mYWxzZTt0aGlzLl9tZGYucD1mYWxzZTt2YXIgdXBkYXRlZD1mYWxzZTtpZih0aGlzLm8hPT1vKXt0aGlzLm89bzt0aGlzLl9tZGYubz10cnVlO3VwZGF0ZWQ9dHJ1ZTt9aWYodGhpcy5zdyE9PXN3KXt0aGlzLnN3PXN3O3RoaXMuX21kZi5zdz10cnVlO3VwZGF0ZWQ9dHJ1ZTt9aWYodGhpcy5zYyE9PXNjKXt0aGlzLnNjPXNjO3RoaXMuX21kZi5zYz10cnVlO3VwZGF0ZWQ9dHJ1ZTt9aWYodGhpcy5mYyE9PWZjKXt0aGlzLmZjPWZjO3RoaXMuX21kZi5mYz10cnVlO3VwZGF0ZWQ9dHJ1ZTt9aWYodGhpcy5tIT09bSl7dGhpcy5tPW07dGhpcy5fbWRmLm09dHJ1ZTt1cGRhdGVkPXRydWU7fWlmKHAubGVuZ3RoJiYodGhpcy5wWzBdIT09cFswXXx8dGhpcy5wWzFdIT09cFsxXXx8dGhpcy5wWzRdIT09cFs0XXx8dGhpcy5wWzVdIT09cFs1XXx8dGhpcy5wWzEyXSE9PXBbMTJdfHx0aGlzLnBbMTNdIT09cFsxM10pKXt0aGlzLnA9cDt0aGlzLl9tZGYucD10cnVlO3VwZGF0ZWQ9dHJ1ZTt9cmV0dXJuIHVwZGF0ZWQ7fTsvKiBnbG9iYWwgRm9udE1hbmFnZXIsIGluaXRpYWxEZWZhdWx0RnJhbWUsIGdldEZvbnRQcm9wZXJ0aWVzICovIC8qIGV4cG9ydGVkIFRleHRQcm9wZXJ0eSAqL2Z1bmN0aW9uIFRleHRQcm9wZXJ0eShlbGVtLGRhdGEpe3RoaXMuX2ZyYW1lSWQ9aW5pdGlhbERlZmF1bHRGcmFtZTt0aGlzLnB2PScnO3RoaXMudj0nJzt0aGlzLmtmPWZhbHNlO3RoaXMuX2lzRmlyc3RGcmFtZT10cnVlO3RoaXMuX21kZj1mYWxzZTt0aGlzLmRhdGE9ZGF0YTt0aGlzLmVsZW09ZWxlbTt0aGlzLmNvbXA9dGhpcy5lbGVtLmNvbXA7dGhpcy5rZXlzSW5kZXg9MDt0aGlzLmNhblJlc2l6ZT1mYWxzZTt0aGlzLm1pbmltdW1Gb250U2l6ZT0xO3RoaXMuZWZmZWN0c1NlcXVlbmNlPVtdO3RoaXMuY3VycmVudERhdGE9e2FzY2VudDowLGJveFdpZHRoOnRoaXMuZGVmYXVsdEJveFdpZHRoLGY6JycsZlN0eWxlOicnLGZXZWlnaHQ6JycsZmM6JycsajonJyxqdXN0aWZ5T2Zmc2V0OicnLGw6W10sbGg6MCxsaW5lV2lkdGhzOltdLGxzOicnLG9mOicnLHM6Jycsc2M6Jycsc3c6MCx0OjAsdHI6MCxzejowLHBzOm51bGwsZmlsbENvbG9yQW5pbTpmYWxzZSxzdHJva2VDb2xvckFuaW06ZmFsc2Usc3Ryb2tlV2lkdGhBbmltOmZhbHNlLHlPZmZzZXQ6MCxmaW5hbFNpemU6MCxmaW5hbFRleHQ6W10sZmluYWxMaW5lSGVpZ2h0OjAsX19jb21wbGV0ZTpmYWxzZX07dGhpcy5jb3B5RGF0YSh0aGlzLmN1cnJlbnREYXRhLHRoaXMuZGF0YS5kLmtbMF0ucyk7aWYoIXRoaXMuc2VhcmNoUHJvcGVydHkoKSl7dGhpcy5jb21wbGV0ZVRleHREYXRhKHRoaXMuY3VycmVudERhdGEpO319VGV4dFByb3BlcnR5LnByb3RvdHlwZS5kZWZhdWx0Qm94V2lkdGg9WzAsMF07VGV4dFByb3BlcnR5LnByb3RvdHlwZS5jb3B5RGF0YT1mdW5jdGlvbihvYmosZGF0YSl7Zm9yKHZhciBzIGluIGRhdGEpe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLHMpKXtvYmpbc109ZGF0YVtzXTt9fXJldHVybiBvYmo7fTtUZXh0UHJvcGVydHkucHJvdG90eXBlLnNldEN1cnJlbnREYXRhPWZ1bmN0aW9uKGRhdGEpe2lmKCFkYXRhLl9fY29tcGxldGUpe3RoaXMuY29tcGxldGVUZXh0RGF0YShkYXRhKTt9dGhpcy5jdXJyZW50RGF0YT1kYXRhO3RoaXMuY3VycmVudERhdGEuYm94V2lkdGg9dGhpcy5jdXJyZW50RGF0YS5ib3hXaWR0aHx8dGhpcy5kZWZhdWx0Qm94V2lkdGg7dGhpcy5fbWRmPXRydWU7fTtUZXh0UHJvcGVydHkucHJvdG90eXBlLnNlYXJjaFByb3BlcnR5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VhcmNoS2V5ZnJhbWVzKCk7fTtUZXh0UHJvcGVydHkucHJvdG90eXBlLnNlYXJjaEtleWZyYW1lcz1mdW5jdGlvbigpe3RoaXMua2Y9dGhpcy5kYXRhLmQuay5sZW5ndGg+MTtpZih0aGlzLmtmKXt0aGlzLmFkZEVmZmVjdCh0aGlzLmdldEtleWZyYW1lVmFsdWUuYmluZCh0aGlzKSk7fXJldHVybiB0aGlzLmtmO307VGV4dFByb3BlcnR5LnByb3RvdHlwZS5hZGRFZmZlY3Q9ZnVuY3Rpb24oZWZmZWN0RnVuY3Rpb24pe3RoaXMuZWZmZWN0c1NlcXVlbmNlLnB1c2goZWZmZWN0RnVuY3Rpb24pO3RoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7fTtUZXh0UHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlPWZ1bmN0aW9uKF9maW5hbFZhbHVlKXtpZigodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZD09PXRoaXMuZnJhbWVJZHx8IXRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkmJiFfZmluYWxWYWx1ZSl7cmV0dXJuO310aGlzLmN1cnJlbnREYXRhLnQ9dGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0ucy50O3ZhciBjdXJyZW50VmFsdWU9dGhpcy5jdXJyZW50RGF0YTt2YXIgY3VycmVudEluZGV4PXRoaXMua2V5c0luZGV4O2lmKHRoaXMubG9jayl7dGhpcy5zZXRDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnREYXRhKTtyZXR1cm47fXRoaXMubG9jaz10cnVlO3RoaXMuX21kZj1mYWxzZTt2YXIgaTt2YXIgbGVuPXRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDt2YXIgZmluYWxWYWx1ZT1fZmluYWxWYWx1ZXx8dGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0ucztmb3IoaT0wO2k8bGVuO2krPTEpey8vIENoZWNraW5nIGlmIGluZGV4IGNoYW5nZWQgdG8gcHJldmVudCBjcmVhdGluZyBhIG5ldyBvYmplY3QgZXZlcnkgdGltZSB0aGUgZXhwcmVzc2lvbiB1cGRhdGVzLlxuaWYoY3VycmVudEluZGV4IT09dGhpcy5rZXlzSW5kZXgpe2ZpbmFsVmFsdWU9dGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0oZmluYWxWYWx1ZSxmaW5hbFZhbHVlLnQpO31lbHNlIHtmaW5hbFZhbHVlPXRoaXMuZWZmZWN0c1NlcXVlbmNlW2ldKHRoaXMuY3VycmVudERhdGEsZmluYWxWYWx1ZS50KTt9fWlmKGN1cnJlbnRWYWx1ZSE9PWZpbmFsVmFsdWUpe3RoaXMuc2V0Q3VycmVudERhdGEoZmluYWxWYWx1ZSk7fXRoaXMudj10aGlzLmN1cnJlbnREYXRhO3RoaXMucHY9dGhpcy52O3RoaXMubG9jaz1mYWxzZTt0aGlzLmZyYW1lSWQ9dGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDt9O1RleHRQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0S2V5ZnJhbWVWYWx1ZT1mdW5jdGlvbigpe3ZhciB0ZXh0S2V5cz10aGlzLmRhdGEuZC5rO3ZhciBmcmFtZU51bT10aGlzLmVsZW0uY29tcC5yZW5kZXJlZEZyYW1lO3ZhciBpPTA7dmFyIGxlbj10ZXh0S2V5cy5sZW5ndGg7d2hpbGUoaTw9bGVuLTEpe2lmKGk9PT1sZW4tMXx8dGV4dEtleXNbaSsxXS50PmZyYW1lTnVtKXticmVhazt9aSs9MTt9aWYodGhpcy5rZXlzSW5kZXghPT1pKXt0aGlzLmtleXNJbmRleD1pO31yZXR1cm4gdGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0uczt9O1RleHRQcm9wZXJ0eS5wcm90b3R5cGUuYnVpbGRGaW5hbFRleHQ9ZnVuY3Rpb24odGV4dCl7dmFyIGNvbWJpbmVkQ2hhcmFjdGVycz1Gb250TWFuYWdlci5nZXRDb21iaW5lZENoYXJhY3RlckNvZGVzKCk7dmFyIGNoYXJhY3RlcnNBcnJheT1bXTt2YXIgaT0wO3ZhciBsZW49dGV4dC5sZW5ndGg7dmFyIGNoYXJDb2RlO3doaWxlKGk8bGVuKXtjaGFyQ29kZT10ZXh0LmNoYXJDb2RlQXQoaSk7aWYoY29tYmluZWRDaGFyYWN0ZXJzLmluZGV4T2YoY2hhckNvZGUpIT09LTEpe2NoYXJhY3RlcnNBcnJheVtjaGFyYWN0ZXJzQXJyYXkubGVuZ3RoLTFdKz10ZXh0LmNoYXJBdChpKTt9ZWxzZSBpZihjaGFyQ29kZT49MHhEODAwJiZjaGFyQ29kZTw9MHhEQkZGKXtjaGFyQ29kZT10ZXh0LmNoYXJDb2RlQXQoaSsxKTtpZihjaGFyQ29kZT49MHhEQzAwJiZjaGFyQ29kZTw9MHhERkZGKXtjaGFyYWN0ZXJzQXJyYXkucHVzaCh0ZXh0LnN1YnN0cihpLDIpKTtpKz0xO31lbHNlIHtjaGFyYWN0ZXJzQXJyYXkucHVzaCh0ZXh0LmNoYXJBdChpKSk7fX1lbHNlIHtjaGFyYWN0ZXJzQXJyYXkucHVzaCh0ZXh0LmNoYXJBdChpKSk7fWkrPTE7fXJldHVybiBjaGFyYWN0ZXJzQXJyYXk7fTtUZXh0UHJvcGVydHkucHJvdG90eXBlLmNvbXBsZXRlVGV4dERhdGE9ZnVuY3Rpb24oZG9jdW1lbnREYXRhKXtkb2N1bWVudERhdGEuX19jb21wbGV0ZT10cnVlO3ZhciBmb250TWFuYWdlcj10aGlzLmVsZW0uZ2xvYmFsRGF0YS5mb250TWFuYWdlcjt2YXIgZGF0YT10aGlzLmRhdGE7dmFyIGxldHRlcnM9W107dmFyIGk7dmFyIGxlbjt2YXIgbmV3TGluZUZsYWc7dmFyIGluZGV4PTA7dmFyIHZhbDt2YXIgYW5jaG9yR3JvdXBpbmc9ZGF0YS5tLmc7dmFyIGN1cnJlbnRTaXplPTA7dmFyIGN1cnJlbnRQb3M9MDt2YXIgY3VycmVudExpbmU9MDt2YXIgbGluZVdpZHRocz1bXTt2YXIgbGluZVdpZHRoPTA7dmFyIG1heExpbmVXaWR0aD0wO3ZhciBqO3ZhciBqTGVuO3ZhciBmb250RGF0YT1mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKTt2YXIgY2hhckRhdGE7dmFyIGNMZW5ndGg9MDt2YXIgZm9udFByb3BzPWdldEZvbnRQcm9wZXJ0aWVzKGZvbnREYXRhKTtkb2N1bWVudERhdGEuZldlaWdodD1mb250UHJvcHMud2VpZ2h0O2RvY3VtZW50RGF0YS5mU3R5bGU9Zm9udFByb3BzLnN0eWxlO2RvY3VtZW50RGF0YS5maW5hbFNpemU9ZG9jdW1lbnREYXRhLnM7ZG9jdW1lbnREYXRhLmZpbmFsVGV4dD10aGlzLmJ1aWxkRmluYWxUZXh0KGRvY3VtZW50RGF0YS50KTtsZW49ZG9jdW1lbnREYXRhLmZpbmFsVGV4dC5sZW5ndGg7ZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodD1kb2N1bWVudERhdGEubGg7dmFyIHRyYWNraW5nT2Zmc2V0PWRvY3VtZW50RGF0YS50ci8xMDAwKmRvY3VtZW50RGF0YS5maW5hbFNpemU7dmFyIGNoYXJDb2RlO2lmKGRvY3VtZW50RGF0YS5zeil7dmFyIGZsYWc9dHJ1ZTt2YXIgYm94V2lkdGg9ZG9jdW1lbnREYXRhLnN6WzBdO3ZhciBib3hIZWlnaHQ9ZG9jdW1lbnREYXRhLnN6WzFdO3ZhciBjdXJyZW50SGVpZ2h0O3ZhciBmaW5hbFRleHQ7d2hpbGUoZmxhZyl7ZmluYWxUZXh0PXRoaXMuYnVpbGRGaW5hbFRleHQoZG9jdW1lbnREYXRhLnQpO2N1cnJlbnRIZWlnaHQ9MDtsaW5lV2lkdGg9MDtsZW49ZmluYWxUZXh0Lmxlbmd0aDt0cmFja2luZ09mZnNldD1kb2N1bWVudERhdGEudHIvMTAwMCpkb2N1bWVudERhdGEuZmluYWxTaXplO3ZhciBsYXN0U3BhY2VJbmRleD0tMTtmb3IoaT0wO2k8bGVuO2krPTEpe2NoYXJDb2RlPWZpbmFsVGV4dFtpXS5jaGFyQ29kZUF0KDApO25ld0xpbmVGbGFnPWZhbHNlO2lmKGZpbmFsVGV4dFtpXT09PScgJyl7bGFzdFNwYWNlSW5kZXg9aTt9ZWxzZSBpZihjaGFyQ29kZT09PTEzfHxjaGFyQ29kZT09PTMpe2xpbmVXaWR0aD0wO25ld0xpbmVGbGFnPXRydWU7Y3VycmVudEhlaWdodCs9ZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodHx8ZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSoxLjI7fWlmKGZvbnRNYW5hZ2VyLmNoYXJzKXtjaGFyRGF0YT1mb250TWFuYWdlci5nZXRDaGFyRGF0YShmaW5hbFRleHRbaV0sZm9udERhdGEuZlN0eWxlLGZvbnREYXRhLmZGYW1pbHkpO2NMZW5ndGg9bmV3TGluZUZsYWc/MDpjaGFyRGF0YS53KmRvY3VtZW50RGF0YS5maW5hbFNpemUvMTAwO31lbHNlIHsvLyB0Q2FudmFzSGVscGVyLmZvbnQgPSBkb2N1bWVudERhdGEucyArICdweCAnKyBmb250RGF0YS5mRmFtaWx5O1xuY0xlbmd0aD1mb250TWFuYWdlci5tZWFzdXJlVGV4dChmaW5hbFRleHRbaV0sZG9jdW1lbnREYXRhLmYsZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7fWlmKGxpbmVXaWR0aCtjTGVuZ3RoPmJveFdpZHRoJiZmaW5hbFRleHRbaV0hPT0nICcpe2lmKGxhc3RTcGFjZUluZGV4PT09LTEpe2xlbis9MTt9ZWxzZSB7aT1sYXN0U3BhY2VJbmRleDt9Y3VycmVudEhlaWdodCs9ZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodHx8ZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSoxLjI7ZmluYWxUZXh0LnNwbGljZShpLGxhc3RTcGFjZUluZGV4PT09aT8xOjAsJ1xccicpOy8vIGZpbmFsVGV4dCA9IGZpbmFsVGV4dC5zdWJzdHIoMCxpKSArIFwiXFxyXCIgKyBmaW5hbFRleHQuc3Vic3RyKGkgPT09IGxhc3RTcGFjZUluZGV4ID8gaSArIDEgOiBpKTtcbmxhc3RTcGFjZUluZGV4PS0xO2xpbmVXaWR0aD0wO31lbHNlIHtsaW5lV2lkdGgrPWNMZW5ndGg7bGluZVdpZHRoKz10cmFja2luZ09mZnNldDt9fWN1cnJlbnRIZWlnaHQrPWZvbnREYXRhLmFzY2VudCpkb2N1bWVudERhdGEuZmluYWxTaXplLzEwMDtpZih0aGlzLmNhblJlc2l6ZSYmZG9jdW1lbnREYXRhLmZpbmFsU2l6ZT50aGlzLm1pbmltdW1Gb250U2l6ZSYmYm94SGVpZ2h0PGN1cnJlbnRIZWlnaHQpe2RvY3VtZW50RGF0YS5maW5hbFNpemUtPTE7ZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodD1kb2N1bWVudERhdGEuZmluYWxTaXplKmRvY3VtZW50RGF0YS5saC9kb2N1bWVudERhdGEuczt9ZWxzZSB7ZG9jdW1lbnREYXRhLmZpbmFsVGV4dD1maW5hbFRleHQ7bGVuPWRvY3VtZW50RGF0YS5maW5hbFRleHQubGVuZ3RoO2ZsYWc9ZmFsc2U7fX19bGluZVdpZHRoPS10cmFja2luZ09mZnNldDtjTGVuZ3RoPTA7dmFyIHVuY29sbGFwc2VkU3BhY2VzPTA7dmFyIGN1cnJlbnRDaGFyO2ZvcihpPTA7aTxsZW47aSs9MSl7bmV3TGluZUZsYWc9ZmFsc2U7Y3VycmVudENoYXI9ZG9jdW1lbnREYXRhLmZpbmFsVGV4dFtpXTtjaGFyQ29kZT1jdXJyZW50Q2hhci5jaGFyQ29kZUF0KDApO2lmKGNoYXJDb2RlPT09MTN8fGNoYXJDb2RlPT09Myl7dW5jb2xsYXBzZWRTcGFjZXM9MDtsaW5lV2lkdGhzLnB1c2gobGluZVdpZHRoKTttYXhMaW5lV2lkdGg9bGluZVdpZHRoPm1heExpbmVXaWR0aD9saW5lV2lkdGg6bWF4TGluZVdpZHRoO2xpbmVXaWR0aD0tMip0cmFja2luZ09mZnNldDt2YWw9Jyc7bmV3TGluZUZsYWc9dHJ1ZTtjdXJyZW50TGluZSs9MTt9ZWxzZSB7dmFsPWN1cnJlbnRDaGFyO31pZihmb250TWFuYWdlci5jaGFycyl7Y2hhckRhdGE9Zm9udE1hbmFnZXIuZ2V0Q2hhckRhdGEoY3VycmVudENoYXIsZm9udERhdGEuZlN0eWxlLGZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHkpO2NMZW5ndGg9bmV3TGluZUZsYWc/MDpjaGFyRGF0YS53KmRvY3VtZW50RGF0YS5maW5hbFNpemUvMTAwO31lbHNlIHsvLyB2YXIgY2hhcldpZHRoID0gZm9udE1hbmFnZXIubWVhc3VyZVRleHQodmFsLCBkb2N1bWVudERhdGEuZiwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4vLyB0Q2FudmFzSGVscGVyLmZvbnQgPSBkb2N1bWVudERhdGEuZmluYWxTaXplICsgJ3B4ICcrIGZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHk7XG5jTGVuZ3RoPWZvbnRNYW5hZ2VyLm1lYXN1cmVUZXh0KHZhbCxkb2N1bWVudERhdGEuZixkb2N1bWVudERhdGEuZmluYWxTaXplKTt9Ly9cbmlmKGN1cnJlbnRDaGFyPT09JyAnKXt1bmNvbGxhcHNlZFNwYWNlcys9Y0xlbmd0aCt0cmFja2luZ09mZnNldDt9ZWxzZSB7bGluZVdpZHRoKz1jTGVuZ3RoK3RyYWNraW5nT2Zmc2V0K3VuY29sbGFwc2VkU3BhY2VzO3VuY29sbGFwc2VkU3BhY2VzPTA7fWxldHRlcnMucHVzaCh7bDpjTGVuZ3RoLGFuOmNMZW5ndGgsYWRkOmN1cnJlbnRTaXplLG46bmV3TGluZUZsYWcsYW5JbmRleGVzOltdLHZhbDp2YWwsbGluZTpjdXJyZW50TGluZSxhbmltYXRvckp1c3RpZnlPZmZzZXQ6MH0pO2lmKGFuY2hvckdyb3VwaW5nPT0yKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuY3VycmVudFNpemUrPWNMZW5ndGg7aWYodmFsPT09Jyd8fHZhbD09PScgJ3x8aT09PWxlbi0xKXtpZih2YWw9PT0nJ3x8dmFsPT09JyAnKXtjdXJyZW50U2l6ZS09Y0xlbmd0aDt9d2hpbGUoY3VycmVudFBvczw9aSl7bGV0dGVyc1tjdXJyZW50UG9zXS5hbj1jdXJyZW50U2l6ZTtsZXR0ZXJzW2N1cnJlbnRQb3NdLmluZD1pbmRleDtsZXR0ZXJzW2N1cnJlbnRQb3NdLmV4dHJhPWNMZW5ndGg7Y3VycmVudFBvcys9MTt9aW5kZXgrPTE7Y3VycmVudFNpemU9MDt9fWVsc2UgaWYoYW5jaG9yR3JvdXBpbmc9PTMpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5jdXJyZW50U2l6ZSs9Y0xlbmd0aDtpZih2YWw9PT0nJ3x8aT09PWxlbi0xKXtpZih2YWw9PT0nJyl7Y3VycmVudFNpemUtPWNMZW5ndGg7fXdoaWxlKGN1cnJlbnRQb3M8PWkpe2xldHRlcnNbY3VycmVudFBvc10uYW49Y3VycmVudFNpemU7bGV0dGVyc1tjdXJyZW50UG9zXS5pbmQ9aW5kZXg7bGV0dGVyc1tjdXJyZW50UG9zXS5leHRyYT1jTGVuZ3RoO2N1cnJlbnRQb3MrPTE7fWN1cnJlbnRTaXplPTA7aW5kZXgrPTE7fX1lbHNlIHtsZXR0ZXJzW2luZGV4XS5pbmQ9aW5kZXg7bGV0dGVyc1tpbmRleF0uZXh0cmE9MDtpbmRleCs9MTt9fWRvY3VtZW50RGF0YS5sPWxldHRlcnM7bWF4TGluZVdpZHRoPWxpbmVXaWR0aD5tYXhMaW5lV2lkdGg/bGluZVdpZHRoOm1heExpbmVXaWR0aDtsaW5lV2lkdGhzLnB1c2gobGluZVdpZHRoKTtpZihkb2N1bWVudERhdGEuc3ope2RvY3VtZW50RGF0YS5ib3hXaWR0aD1kb2N1bWVudERhdGEuc3pbMF07ZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQ9MDt9ZWxzZSB7ZG9jdW1lbnREYXRhLmJveFdpZHRoPW1heExpbmVXaWR0aDtzd2l0Y2goZG9jdW1lbnREYXRhLmope2Nhc2UgMTpkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldD0tZG9jdW1lbnREYXRhLmJveFdpZHRoO2JyZWFrO2Nhc2UgMjpkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldD0tZG9jdW1lbnREYXRhLmJveFdpZHRoLzI7YnJlYWs7ZGVmYXVsdDpkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldD0wO319ZG9jdW1lbnREYXRhLmxpbmVXaWR0aHM9bGluZVdpZHRoczt2YXIgYW5pbWF0b3JzPWRhdGEuYTt2YXIgYW5pbWF0b3JEYXRhO3ZhciBsZXR0ZXJEYXRhO2pMZW49YW5pbWF0b3JzLmxlbmd0aDt2YXIgYmFzZWQ7dmFyIGluZDt2YXIgaW5kZXhlcz1bXTtmb3Ioaj0wO2o8akxlbjtqKz0xKXthbmltYXRvckRhdGE9YW5pbWF0b3JzW2pdO2lmKGFuaW1hdG9yRGF0YS5hLnNjKXtkb2N1bWVudERhdGEuc3Ryb2tlQ29sb3JBbmltPXRydWU7fWlmKGFuaW1hdG9yRGF0YS5hLnN3KXtkb2N1bWVudERhdGEuc3Ryb2tlV2lkdGhBbmltPXRydWU7fWlmKGFuaW1hdG9yRGF0YS5hLmZjfHxhbmltYXRvckRhdGEuYS5maHx8YW5pbWF0b3JEYXRhLmEuZnN8fGFuaW1hdG9yRGF0YS5hLmZiKXtkb2N1bWVudERhdGEuZmlsbENvbG9yQW5pbT10cnVlO31pbmQ9MDtiYXNlZD1hbmltYXRvckRhdGEucy5iO2ZvcihpPTA7aTxsZW47aSs9MSl7bGV0dGVyRGF0YT1sZXR0ZXJzW2ldO2xldHRlckRhdGEuYW5JbmRleGVzW2pdPWluZDtpZihiYXNlZD09MSYmbGV0dGVyRGF0YS52YWwhPT0nJ3x8YmFzZWQ9PTImJmxldHRlckRhdGEudmFsIT09JycmJmxldHRlckRhdGEudmFsIT09JyAnfHxiYXNlZD09MyYmKGxldHRlckRhdGEubnx8bGV0dGVyRGF0YS52YWw9PScgJ3x8aT09bGVuLTEpfHxiYXNlZD09NCYmKGxldHRlckRhdGEubnx8aT09bGVuLTEpKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuaWYoYW5pbWF0b3JEYXRhLnMucm49PT0xKXtpbmRleGVzLnB1c2goaW5kKTt9aW5kKz0xO319ZGF0YS5hW2pdLnMudG90YWxDaGFycz1pbmQ7dmFyIGN1cnJlbnRJbmQ9LTE7dmFyIG5ld0luZDtpZihhbmltYXRvckRhdGEucy5ybj09PTEpe2ZvcihpPTA7aTxsZW47aSs9MSl7bGV0dGVyRGF0YT1sZXR0ZXJzW2ldO2lmKGN1cnJlbnRJbmQhPWxldHRlckRhdGEuYW5JbmRleGVzW2pdKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuY3VycmVudEluZD1sZXR0ZXJEYXRhLmFuSW5kZXhlc1tqXTtuZXdJbmQ9aW5kZXhlcy5zcGxpY2UoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmluZGV4ZXMubGVuZ3RoKSwxKVswXTt9bGV0dGVyRGF0YS5hbkluZGV4ZXNbal09bmV3SW5kO319fWRvY3VtZW50RGF0YS55T2Zmc2V0PWRvY3VtZW50RGF0YS5maW5hbExpbmVIZWlnaHR8fGRvY3VtZW50RGF0YS5maW5hbFNpemUqMS4yO2RvY3VtZW50RGF0YS5scz1kb2N1bWVudERhdGEubHN8fDA7ZG9jdW1lbnREYXRhLmFzY2VudD1mb250RGF0YS5hc2NlbnQqZG9jdW1lbnREYXRhLmZpbmFsU2l6ZS8xMDA7fTtUZXh0UHJvcGVydHkucHJvdG90eXBlLnVwZGF0ZURvY3VtZW50RGF0YT1mdW5jdGlvbihuZXdEYXRhLGluZGV4KXtpbmRleD1pbmRleD09PXVuZGVmaW5lZD90aGlzLmtleXNJbmRleDppbmRleDt2YXIgZERhdGE9dGhpcy5jb3B5RGF0YSh7fSx0aGlzLmRhdGEuZC5rW2luZGV4XS5zKTtkRGF0YT10aGlzLmNvcHlEYXRhKGREYXRhLG5ld0RhdGEpO3RoaXMuZGF0YS5kLmtbaW5kZXhdLnM9ZERhdGE7dGhpcy5yZWNhbGN1bGF0ZShpbmRleCk7dGhpcy5lbGVtLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTt9O1RleHRQcm9wZXJ0eS5wcm90b3R5cGUucmVjYWxjdWxhdGU9ZnVuY3Rpb24oaW5kZXgpe3ZhciBkRGF0YT10aGlzLmRhdGEuZC5rW2luZGV4XS5zO2REYXRhLl9fY29tcGxldGU9ZmFsc2U7dGhpcy5rZXlzSW5kZXg9MDt0aGlzLl9pc0ZpcnN0RnJhbWU9dHJ1ZTt0aGlzLmdldFZhbHVlKGREYXRhKTt9O1RleHRQcm9wZXJ0eS5wcm90b3R5cGUuY2FuUmVzaXplRm9udD1mdW5jdGlvbihfY2FuUmVzaXplKXt0aGlzLmNhblJlc2l6ZT1fY2FuUmVzaXplO3RoaXMucmVjYWxjdWxhdGUodGhpcy5rZXlzSW5kZXgpO3RoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7fTtUZXh0UHJvcGVydHkucHJvdG90eXBlLnNldE1pbmltdW1Gb250U2l6ZT1mdW5jdGlvbihfZm9udFZhbHVlKXt0aGlzLm1pbmltdW1Gb250U2l6ZT1NYXRoLmZsb29yKF9mb250VmFsdWUpfHwxO3RoaXMucmVjYWxjdWxhdGUodGhpcy5rZXlzSW5kZXgpO3RoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7fTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBCZXppZXJGYWN0b3J5LCBQcm9wZXJ0eUZhY3RvcnksIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lciAqLyAvKiBleHBvcnRlZCBUZXh0U2VsZWN0b3JQcm9wICovdmFyIFRleHRTZWxlY3RvclByb3A9ZnVuY3Rpb24oKXt2YXIgbWF4PU1hdGgubWF4O3ZhciBtaW49TWF0aC5taW47dmFyIGZsb29yPU1hdGguZmxvb3I7ZnVuY3Rpb24gVGV4dFNlbGVjdG9yUHJvcEZhY3RvcnkoZWxlbSxkYXRhKXt0aGlzLl9jdXJyZW50VGV4dExlbmd0aD0tMTt0aGlzLms9ZmFsc2U7dGhpcy5kYXRhPWRhdGE7dGhpcy5lbGVtPWVsZW07dGhpcy5jb21wPWVsZW0uY29tcDt0aGlzLmZpbmFsUz0wO3RoaXMuZmluYWxFPTA7dGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO3RoaXMucz1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEuc3x8e2s6MH0sMCwwLHRoaXMpO2lmKCdlJ2luIGRhdGEpe3RoaXMuZT1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEuZSwwLDAsdGhpcyk7fWVsc2Uge3RoaXMuZT17djoxMDB9O310aGlzLm89UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLm98fHtrOjB9LDAsMCx0aGlzKTt0aGlzLnhlPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS54ZXx8e2s6MH0sMCwwLHRoaXMpO3RoaXMubmU9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLm5lfHx7azowfSwwLDAsdGhpcyk7dGhpcy5hPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5hLDAsMC4wMSx0aGlzKTtpZighdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpe3RoaXMuZ2V0VmFsdWUoKTt9fVRleHRTZWxlY3RvclByb3BGYWN0b3J5LnByb3RvdHlwZT17Z2V0TXVsdDpmdW5jdGlvbiBnZXRNdWx0KGluZCl7aWYodGhpcy5fY3VycmVudFRleHRMZW5ndGghPT10aGlzLmVsZW0udGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLmwubGVuZ3RoKXt0aGlzLmdldFZhbHVlKCk7fS8vIHZhciBlYXNlciA9IGJlei5nZXRFYXNpbmdDdXJ2ZSh0aGlzLm5lLnYvMTAwLDAsMS10aGlzLnhlLnYvMTAwLDEpO1xudmFyIHgxPTA7dmFyIHkxPTA7dmFyIHgyPTE7dmFyIHkyPTE7aWYodGhpcy5uZS52PjApe3gxPXRoaXMubmUudi8xMDAuMDt9ZWxzZSB7eTE9LXRoaXMubmUudi8xMDAuMDt9aWYodGhpcy54ZS52PjApe3gyPTEuMC10aGlzLnhlLnYvMTAwLjA7fWVsc2Uge3kyPTEuMCt0aGlzLnhlLnYvMTAwLjA7fXZhciBlYXNlcj1CZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyh4MSx5MSx4Mix5MikuZ2V0O3ZhciBtdWx0PTA7dmFyIHM9dGhpcy5maW5hbFM7dmFyIGU9dGhpcy5maW5hbEU7dmFyIHR5cGU9dGhpcy5kYXRhLnNoO2lmKHR5cGU9PT0yKXtpZihlPT09cyl7bXVsdD1pbmQ+PWU/MTowO31lbHNlIHttdWx0PW1heCgwLG1pbigwLjUvKGUtcykrKGluZC1zKS8oZS1zKSwxKSk7fW11bHQ9ZWFzZXIobXVsdCk7fWVsc2UgaWYodHlwZT09PTMpe2lmKGU9PT1zKXttdWx0PWluZD49ZT8wOjE7fWVsc2Uge211bHQ9MS1tYXgoMCxtaW4oMC41LyhlLXMpKyhpbmQtcykvKGUtcyksMSkpO31tdWx0PWVhc2VyKG11bHQpO31lbHNlIGlmKHR5cGU9PT00KXtpZihlPT09cyl7bXVsdD0wO31lbHNlIHttdWx0PW1heCgwLG1pbigwLjUvKGUtcykrKGluZC1zKS8oZS1zKSwxKSk7aWYobXVsdDwwLjUpe211bHQqPTI7fWVsc2Uge211bHQ9MS0yKihtdWx0LTAuNSk7fX1tdWx0PWVhc2VyKG11bHQpO31lbHNlIGlmKHR5cGU9PT01KXtpZihlPT09cyl7bXVsdD0wO31lbHNlIHt2YXIgdG90PWUtczsvKiBpbmQgKz0gMC41O1xyXG4gICAgICAgICAgICAgICAgICAgIG11bHQgPSAtNC8odG90KnRvdCkqKGluZCppbmQpKyg0L3RvdCkqaW5kOyAqL2luZD1taW4obWF4KDAsaW5kKzAuNS1zKSxlLXMpO3ZhciB4PS10b3QvMitpbmQ7dmFyIGE9dG90LzI7bXVsdD1NYXRoLnNxcnQoMS14KngvKGEqYSkpO31tdWx0PWVhc2VyKG11bHQpO31lbHNlIGlmKHR5cGU9PT02KXtpZihlPT09cyl7bXVsdD0wO31lbHNlIHtpbmQ9bWluKG1heCgwLGluZCswLjUtcyksZS1zKTttdWx0PSgxK01hdGguY29zKE1hdGguUEkrTWF0aC5QSSoyKmluZC8oZS1zKSkpLzI7Ly8gZXNsaW50LWRpc2FibGUtbGluZVxufW11bHQ9ZWFzZXIobXVsdCk7fWVsc2Uge2lmKGluZD49Zmxvb3Iocykpe2lmKGluZC1zPDApe211bHQ9bWF4KDAsbWluKG1pbihlLDEpLShzLWluZCksMSkpO31lbHNlIHttdWx0PW1heCgwLG1pbihlLWluZCwxKSk7fX1tdWx0PWVhc2VyKG11bHQpO31yZXR1cm4gbXVsdCp0aGlzLmEudjt9LGdldFZhbHVlOmZ1bmN0aW9uIGdldFZhbHVlKG5ld0NoYXJzRmxhZyl7dGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTt0aGlzLl9tZGY9bmV3Q2hhcnNGbGFnfHx0aGlzLl9tZGY7dGhpcy5fY3VycmVudFRleHRMZW5ndGg9dGhpcy5lbGVtLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sLmxlbmd0aHx8MDtpZihuZXdDaGFyc0ZsYWcmJnRoaXMuZGF0YS5yPT09Mil7dGhpcy5lLnY9dGhpcy5fY3VycmVudFRleHRMZW5ndGg7fXZhciBkaXZpc29yPXRoaXMuZGF0YS5yPT09Mj8xOjEwMC90aGlzLmRhdGEudG90YWxDaGFyczt2YXIgbz10aGlzLm8udi9kaXZpc29yO3ZhciBzPXRoaXMucy52L2Rpdmlzb3Irbzt2YXIgZT10aGlzLmUudi9kaXZpc29yK287aWYocz5lKXt2YXIgX3M9cztzPWU7ZT1fczt9dGhpcy5maW5hbFM9czt0aGlzLmZpbmFsRT1lO319O2V4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSxUZXh0U2VsZWN0b3JQcm9wRmFjdG9yeSk7ZnVuY3Rpb24gZ2V0VGV4dFNlbGVjdG9yUHJvcChlbGVtLGRhdGEsYXJyKXtyZXR1cm4gbmV3IFRleHRTZWxlY3RvclByb3BGYWN0b3J5KGVsZW0sZGF0YSxhcnIpO31yZXR1cm4ge2dldFRleHRTZWxlY3RvclByb3A6Z2V0VGV4dFNlbGVjdG9yUHJvcH07fSgpOy8qIGdsb2JhbCBjcmVhdGVTaXplZEFycmF5LCBwb29saW5nICovIC8qIGV4cG9ydGVkIHBvb2xGYWN0b3J5ICovdmFyIHBvb2xGYWN0b3J5PWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGluaXRpYWxMZW5ndGgsX2NyZWF0ZSxfcmVsZWFzZSl7dmFyIF9sZW5ndGg9MDt2YXIgX21heExlbmd0aD1pbml0aWFsTGVuZ3RoO3ZhciBwb29sPWNyZWF0ZVNpemVkQXJyYXkoX21heExlbmd0aCk7dmFyIG9iPXtuZXdFbGVtZW50Om5ld0VsZW1lbnQscmVsZWFzZTpyZWxlYXNlfTtmdW5jdGlvbiBuZXdFbGVtZW50KCl7dmFyIGVsZW1lbnQ7aWYoX2xlbmd0aCl7X2xlbmd0aC09MTtlbGVtZW50PXBvb2xbX2xlbmd0aF07fWVsc2Uge2VsZW1lbnQ9X2NyZWF0ZSgpO31yZXR1cm4gZWxlbWVudDt9ZnVuY3Rpb24gcmVsZWFzZShlbGVtZW50KXtpZihfbGVuZ3RoPT09X21heExlbmd0aCl7cG9vbD1wb29saW5nLmRvdWJsZShwb29sKTtfbWF4TGVuZ3RoKj0yO31pZihfcmVsZWFzZSl7X3JlbGVhc2UoZWxlbWVudCk7fXBvb2xbX2xlbmd0aF09ZWxlbWVudDtfbGVuZ3RoKz0xO31yZXR1cm4gb2I7fTt9KCk7LyogZ2xvYmFsIGNyZWF0ZVNpemVkQXJyYXkgKi8gLyogZXhwb3J0ZWQgcG9vbGluZyAqL3ZhciBwb29saW5nPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZG91YmxlKGFycil7cmV0dXJuIGFyci5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheShhcnIubGVuZ3RoKSk7fXJldHVybiB7ZG91YmxlOmRvdWJsZX07fSgpOy8qIGdsb2JhbCBjcmVhdGVUeXBlZEFycmF5LCBwb29sRmFjdG9yeSAqLyAvKiBleHBvcnRlZCBwb2ludFBvb2wgKi92YXIgcG9pbnRQb29sPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gY3JlYXRlKCl7cmV0dXJuIGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLDIpO31yZXR1cm4gcG9vbEZhY3RvcnkoOCxjcmVhdGUpO30oKTsvKiBnbG9iYWwgU2hhcGVQYXRoLCBwb2ludFBvb2wsIHBvb2xGYWN0b3J5ICovIC8qIGV4cG9ydGVkIHNoYXBlUG9vbCAqL3ZhciBzaGFwZVBvb2w9ZnVuY3Rpb24oKXtmdW5jdGlvbiBjcmVhdGUoKXtyZXR1cm4gbmV3IFNoYXBlUGF0aCgpO31mdW5jdGlvbiByZWxlYXNlKHNoYXBlUGF0aCl7dmFyIGxlbj1zaGFwZVBhdGguX2xlbmd0aDt2YXIgaTtmb3IoaT0wO2k8bGVuO2krPTEpe3BvaW50UG9vbC5yZWxlYXNlKHNoYXBlUGF0aC52W2ldKTtwb2ludFBvb2wucmVsZWFzZShzaGFwZVBhdGguaVtpXSk7cG9pbnRQb29sLnJlbGVhc2Uoc2hhcGVQYXRoLm9baV0pO3NoYXBlUGF0aC52W2ldPW51bGw7c2hhcGVQYXRoLmlbaV09bnVsbDtzaGFwZVBhdGgub1tpXT1udWxsO31zaGFwZVBhdGguX2xlbmd0aD0wO3NoYXBlUGF0aC5jPWZhbHNlO31mdW5jdGlvbiBjbG9uZShzaGFwZSl7dmFyIGNsb25lZD1mYWN0b3J5Lm5ld0VsZW1lbnQoKTt2YXIgaTt2YXIgbGVuPXNoYXBlLl9sZW5ndGg9PT11bmRlZmluZWQ/c2hhcGUudi5sZW5ndGg6c2hhcGUuX2xlbmd0aDtjbG9uZWQuc2V0TGVuZ3RoKGxlbik7Y2xvbmVkLmM9c2hhcGUuYztmb3IoaT0wO2k8bGVuO2krPTEpe2Nsb25lZC5zZXRUcmlwbGVBdChzaGFwZS52W2ldWzBdLHNoYXBlLnZbaV1bMV0sc2hhcGUub1tpXVswXSxzaGFwZS5vW2ldWzFdLHNoYXBlLmlbaV1bMF0sc2hhcGUuaVtpXVsxXSxpKTt9cmV0dXJuIGNsb25lZDt9dmFyIGZhY3Rvcnk9cG9vbEZhY3RvcnkoNCxjcmVhdGUscmVsZWFzZSk7ZmFjdG9yeS5jbG9uZT1jbG9uZTtyZXR1cm4gZmFjdG9yeTt9KCk7LyogZ2xvYmFsIGNyZWF0ZVNpemVkQXJyYXksIFNoYXBlQ29sbGVjdGlvbiwgc2hhcGVQb29sLCBwb29saW5nICovIC8qIGV4cG9ydGVkIHNoYXBlQ29sbGVjdGlvblBvb2wgKi92YXIgc2hhcGVDb2xsZWN0aW9uUG9vbD1mdW5jdGlvbigpe3ZhciBvYj17bmV3U2hhcGVDb2xsZWN0aW9uOm5ld1NoYXBlQ29sbGVjdGlvbixyZWxlYXNlOnJlbGVhc2V9O3ZhciBfbGVuZ3RoPTA7dmFyIF9tYXhMZW5ndGg9NDt2YXIgcG9vbD1jcmVhdGVTaXplZEFycmF5KF9tYXhMZW5ndGgpO2Z1bmN0aW9uIG5ld1NoYXBlQ29sbGVjdGlvbigpe3ZhciBzaGFwZUNvbGxlY3Rpb247aWYoX2xlbmd0aCl7X2xlbmd0aC09MTtzaGFwZUNvbGxlY3Rpb249cG9vbFtfbGVuZ3RoXTt9ZWxzZSB7c2hhcGVDb2xsZWN0aW9uPW5ldyBTaGFwZUNvbGxlY3Rpb24oKTt9cmV0dXJuIHNoYXBlQ29sbGVjdGlvbjt9ZnVuY3Rpb24gcmVsZWFzZShzaGFwZUNvbGxlY3Rpb24pe3ZhciBpO3ZhciBsZW49c2hhcGVDb2xsZWN0aW9uLl9sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtzaGFwZVBvb2wucmVsZWFzZShzaGFwZUNvbGxlY3Rpb24uc2hhcGVzW2ldKTt9c2hhcGVDb2xsZWN0aW9uLl9sZW5ndGg9MDtpZihfbGVuZ3RoPT09X21heExlbmd0aCl7cG9vbD1wb29saW5nLmRvdWJsZShwb29sKTtfbWF4TGVuZ3RoKj0yO31wb29sW19sZW5ndGhdPXNoYXBlQ29sbGVjdGlvbjtfbGVuZ3RoKz0xO31yZXR1cm4gb2I7fSgpOy8qIGdsb2JhbCBwb29sRmFjdG9yeSwgYmV6aWVyTGVuZ3RoUG9vbCAqLyAvKiBleHBvcnRlZCBzZWdtZW50c0xlbmd0aFBvb2wgKi92YXIgc2VnbWVudHNMZW5ndGhQb29sPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gY3JlYXRlKCl7cmV0dXJuIHtsZW5ndGhzOltdLHRvdGFsTGVuZ3RoOjB9O31mdW5jdGlvbiByZWxlYXNlKGVsZW1lbnQpe3ZhciBpO3ZhciBsZW49ZWxlbWVudC5sZW5ndGhzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe2Jlemllckxlbmd0aFBvb2wucmVsZWFzZShlbGVtZW50Lmxlbmd0aHNbaV0pO31lbGVtZW50Lmxlbmd0aHMubGVuZ3RoPTA7fXJldHVybiBwb29sRmFjdG9yeSg4LGNyZWF0ZSxyZWxlYXNlKTt9KCk7LyogZ2xvYmFsIGNyZWF0ZVR5cGVkQXJyYXksIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzLCBwb29sRmFjdG9yeSAqLyAvKiBleHBvcnRlZCBiZXppZXJMZW5ndGhQb29sICovdmFyIGJlemllckxlbmd0aFBvb2w9ZnVuY3Rpb24oKXtmdW5jdGlvbiBjcmVhdGUoKXtyZXR1cm4ge2FkZGVkTGVuZ3RoOjAscGVyY2VudHM6Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsZGVmYXVsdEN1cnZlU2VnbWVudHMpLGxlbmd0aHM6Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsZGVmYXVsdEN1cnZlU2VnbWVudHMpfTt9cmV0dXJuIHBvb2xGYWN0b3J5KDgsY3JlYXRlKTt9KCk7LyogZXhwb3J0ZWQgbWFya2VyUGFyc2VyICovdmFyIG1hcmtlclBhcnNlcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHBhcnNlUGF5bG9hZExpbmVzKHBheWxvYWQpe3ZhciBsaW5lcz1wYXlsb2FkLnNwbGl0KCdcXHJcXG4nKTt2YXIga2V5cz17fTt2YXIgbGluZTt2YXIga2V5c0NvdW50PTA7Zm9yKHZhciBpPTA7aTxsaW5lcy5sZW5ndGg7aSs9MSl7bGluZT1saW5lc1tpXS5zcGxpdCgnOicpO2lmKGxpbmUubGVuZ3RoPT09Mil7a2V5c1tsaW5lWzBdXT1saW5lWzFdLnRyaW0oKTtrZXlzQ291bnQrPTE7fX1pZihrZXlzQ291bnQ9PT0wKXt0aHJvdyBuZXcgRXJyb3IoKTt9cmV0dXJuIGtleXM7fXJldHVybiBmdW5jdGlvbihfbWFya2Vycyl7dmFyIG1hcmtlcnM9W107Zm9yKHZhciBpPTA7aTxfbWFya2Vycy5sZW5ndGg7aSs9MSl7dmFyIF9tYXJrZXI9X21hcmtlcnNbaV07dmFyIG1hcmtlckRhdGE9e3RpbWU6X21hcmtlci50bSxkdXJhdGlvbjpfbWFya2VyLmRyfTt0cnl7bWFya2VyRGF0YS5wYXlsb2FkPUpTT04ucGFyc2UoX21hcmtlcnNbaV0uY20pO31jYXRjaChfKXt0cnl7bWFya2VyRGF0YS5wYXlsb2FkPXBhcnNlUGF5bG9hZExpbmVzKF9tYXJrZXJzW2ldLmNtKTt9Y2F0Y2goX18pe21hcmtlckRhdGEucGF5bG9hZD17bmFtZTpfbWFya2Vyc1tpXX07fX1tYXJrZXJzLnB1c2gobWFya2VyRGF0YSk7fXJldHVybiBtYXJrZXJzO307fSgpOy8qIGdsb2JhbCBBdWRpb0VsZW1lbnQsIEZvbnRNYW5hZ2VyICovZnVuY3Rpb24gQmFzZVJlbmRlcmVyKCl7fUJhc2VSZW5kZXJlci5wcm90b3R5cGUuY2hlY2tMYXllcnM9ZnVuY3Rpb24obnVtKXt2YXIgaTt2YXIgbGVuPXRoaXMubGF5ZXJzLmxlbmd0aDt2YXIgZGF0YTt0aGlzLmNvbXBsZXRlTGF5ZXJzPXRydWU7Zm9yKGk9bGVuLTE7aT49MDtpLT0xKXtpZighdGhpcy5lbGVtZW50c1tpXSl7ZGF0YT10aGlzLmxheWVyc1tpXTtpZihkYXRhLmlwLWRhdGEuc3Q8PW51bS10aGlzLmxheWVyc1tpXS5zdCYmZGF0YS5vcC1kYXRhLnN0Pm51bS10aGlzLmxheWVyc1tpXS5zdCl7dGhpcy5idWlsZEl0ZW0oaSk7fX10aGlzLmNvbXBsZXRlTGF5ZXJzPXRoaXMuZWxlbWVudHNbaV0/dGhpcy5jb21wbGV0ZUxheWVyczpmYWxzZTt9dGhpcy5jaGVja1BlbmRpbmdFbGVtZW50cygpO307QmFzZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVJdGVtPWZ1bmN0aW9uKGxheWVyKXtzd2l0Y2gobGF5ZXIudHkpe2Nhc2UgMjpyZXR1cm4gdGhpcy5jcmVhdGVJbWFnZShsYXllcik7Y2FzZSAwOnJldHVybiB0aGlzLmNyZWF0ZUNvbXAobGF5ZXIpO2Nhc2UgMTpyZXR1cm4gdGhpcy5jcmVhdGVTb2xpZChsYXllcik7Y2FzZSAzOnJldHVybiB0aGlzLmNyZWF0ZU51bGwobGF5ZXIpO2Nhc2UgNDpyZXR1cm4gdGhpcy5jcmVhdGVTaGFwZShsYXllcik7Y2FzZSA1OnJldHVybiB0aGlzLmNyZWF0ZVRleHQobGF5ZXIpO2Nhc2UgNjpyZXR1cm4gdGhpcy5jcmVhdGVBdWRpbyhsYXllcik7Y2FzZSAxMzpyZXR1cm4gdGhpcy5jcmVhdGVDYW1lcmEobGF5ZXIpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuY3JlYXRlTnVsbChsYXllcik7fX07QmFzZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVDYW1lcmE9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoJ1lvdVxcJ3JlIHVzaW5nIGEgM2QgY2FtZXJhLiBUcnkgdGhlIGh0bWwgcmVuZGVyZXIuJyk7fTtCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUF1ZGlvPWZ1bmN0aW9uKGRhdGEpe3JldHVybiBuZXcgQXVkaW9FbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO307QmFzZVJlbmRlcmVyLnByb3RvdHlwZS5idWlsZEFsbEl0ZW1zPWZ1bmN0aW9uKCl7dmFyIGk7dmFyIGxlbj10aGlzLmxheWVycy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLmJ1aWxkSXRlbShpKTt9dGhpcy5jaGVja1BlbmRpbmdFbGVtZW50cygpO307QmFzZVJlbmRlcmVyLnByb3RvdHlwZS5pbmNsdWRlTGF5ZXJzPWZ1bmN0aW9uKG5ld0xheWVycyl7dGhpcy5jb21wbGV0ZUxheWVycz1mYWxzZTt2YXIgaTt2YXIgbGVuPW5ld0xheWVycy5sZW5ndGg7dmFyIGo7dmFyIGpMZW49dGhpcy5sYXllcnMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7aj0wO3doaWxlKGo8akxlbil7aWYodGhpcy5sYXllcnNbal0uaWQ9PT1uZXdMYXllcnNbaV0uaWQpe3RoaXMubGF5ZXJzW2pdPW5ld0xheWVyc1tpXTticmVhazt9ais9MTt9fX07QmFzZVJlbmRlcmVyLnByb3RvdHlwZS5zZXRQcm9qZWN0SW50ZXJmYWNlPWZ1bmN0aW9uKHBJbnRlcmZhY2Upe3RoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlPXBJbnRlcmZhY2U7fTtCYXNlUmVuZGVyZXIucHJvdG90eXBlLmluaXRJdGVtcz1mdW5jdGlvbigpe2lmKCF0aGlzLmdsb2JhbERhdGEucHJvZ3Jlc3NpdmVMb2FkKXt0aGlzLmJ1aWxkQWxsSXRlbXMoKTt9fTtCYXNlUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkRWxlbWVudFBhcmVudGluZz1mdW5jdGlvbihlbGVtZW50LHBhcmVudE5hbWUsaGllcmFyY2h5KXt2YXIgZWxlbWVudHM9dGhpcy5lbGVtZW50czt2YXIgbGF5ZXJzPXRoaXMubGF5ZXJzO3ZhciBpPTA7dmFyIGxlbj1sYXllcnMubGVuZ3RoO3doaWxlKGk8bGVuKXtpZihsYXllcnNbaV0uaW5kPT1wYXJlbnROYW1lKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuaWYoIWVsZW1lbnRzW2ldfHxlbGVtZW50c1tpXT09PXRydWUpe3RoaXMuYnVpbGRJdGVtKGkpO3RoaXMuYWRkUGVuZGluZ0VsZW1lbnQoZWxlbWVudCk7fWVsc2Uge2hpZXJhcmNoeS5wdXNoKGVsZW1lbnRzW2ldKTtlbGVtZW50c1tpXS5zZXRBc1BhcmVudCgpO2lmKGxheWVyc1tpXS5wYXJlbnQhPT11bmRlZmluZWQpe3RoaXMuYnVpbGRFbGVtZW50UGFyZW50aW5nKGVsZW1lbnQsbGF5ZXJzW2ldLnBhcmVudCxoaWVyYXJjaHkpO31lbHNlIHtlbGVtZW50LnNldEhpZXJhcmNoeShoaWVyYXJjaHkpO319fWkrPTE7fX07QmFzZVJlbmRlcmVyLnByb3RvdHlwZS5hZGRQZW5kaW5nRWxlbWVudD1mdW5jdGlvbihlbGVtZW50KXt0aGlzLnBlbmRpbmdFbGVtZW50cy5wdXNoKGVsZW1lbnQpO307QmFzZVJlbmRlcmVyLnByb3RvdHlwZS5zZWFyY2hFeHRyYUNvbXBvc2l0aW9ucz1mdW5jdGlvbihhc3NldHMpe3ZhciBpO3ZhciBsZW49YXNzZXRzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKGFzc2V0c1tpXS54dCl7dmFyIGNvbXA9dGhpcy5jcmVhdGVDb21wKGFzc2V0c1tpXSk7Y29tcC5pbml0RXhwcmVzc2lvbnMoKTt0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5yZWdpc3RlckNvbXBvc2l0aW9uKGNvbXApO319fTtCYXNlUmVuZGVyZXIucHJvdG90eXBlLnNldHVwR2xvYmFsRGF0YT1mdW5jdGlvbihhbmltRGF0YSxmb250c0NvbnRhaW5lcil7dGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyPW5ldyBGb250TWFuYWdlcigpO3RoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRDaGFycyhhbmltRGF0YS5jaGFycyk7dGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmFkZEZvbnRzKGFuaW1EYXRhLmZvbnRzLGZvbnRzQ29udGFpbmVyKTt0aGlzLmdsb2JhbERhdGEuZ2V0QXNzZXREYXRhPXRoaXMuYW5pbWF0aW9uSXRlbS5nZXRBc3NldERhdGEuYmluZCh0aGlzLmFuaW1hdGlvbkl0ZW0pO3RoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldHNQYXRoPXRoaXMuYW5pbWF0aW9uSXRlbS5nZXRBc3NldHNQYXRoLmJpbmQodGhpcy5hbmltYXRpb25JdGVtKTt0aGlzLmdsb2JhbERhdGEuaW1hZ2VMb2FkZXI9dGhpcy5hbmltYXRpb25JdGVtLmltYWdlUHJlbG9hZGVyO3RoaXMuZ2xvYmFsRGF0YS5hdWRpb0NvbnRyb2xsZXI9dGhpcy5hbmltYXRpb25JdGVtLmF1ZGlvQ29udHJvbGxlcjt0aGlzLmdsb2JhbERhdGEuZnJhbWVJZD0wO3RoaXMuZ2xvYmFsRGF0YS5mcmFtZVJhdGU9YW5pbURhdGEuZnI7dGhpcy5nbG9iYWxEYXRhLm5tPWFuaW1EYXRhLm5tO3RoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZT17dzphbmltRGF0YS53LGg6YW5pbURhdGEuaH07fTsvKiBnbG9iYWwgY3JlYXRlRWxlbWVudElELCBleHRlbmRQcm90b3R5cGUsIEJhc2VSZW5kZXJlciwgTnVsbEVsZW1lbnQsIFNWR1NoYXBlRWxlbWVudCwgU1ZHVGV4dExvdHRpZUVsZW1lbnQsXHJcbklJbWFnZUVsZW1lbnQsIFNWR0NvbXBFbGVtZW50LCBJU29saWRFbGVtZW50LCBjcmVhdGVOUywgbG9jYXRpb25IcmVmLCBjcmVhdGVTaXplZEFycmF5LCBleHByZXNzaW9uc1BsdWdpbiAqL2Z1bmN0aW9uIFNWR1JlbmRlcmVyKGFuaW1hdGlvbkl0ZW0sY29uZmlnKXt0aGlzLmFuaW1hdGlvbkl0ZW09YW5pbWF0aW9uSXRlbTt0aGlzLmxheWVycz1udWxsO3RoaXMucmVuZGVyZWRGcmFtZT0tMTt0aGlzLnN2Z0VsZW1lbnQ9Y3JlYXRlTlMoJ3N2ZycpO3ZhciBhcmlhTGFiZWw9Jyc7aWYoY29uZmlnJiZjb25maWcudGl0bGUpe3ZhciB0aXRsZUVsZW1lbnQ9Y3JlYXRlTlMoJ3RpdGxlJyk7dmFyIHRpdGxlSWQ9Y3JlYXRlRWxlbWVudElEKCk7dGl0bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLHRpdGxlSWQpO3RpdGxlRWxlbWVudC50ZXh0Q29udGVudD1jb25maWcudGl0bGU7dGhpcy5zdmdFbGVtZW50LmFwcGVuZENoaWxkKHRpdGxlRWxlbWVudCk7YXJpYUxhYmVsKz10aXRsZUlkO31pZihjb25maWcmJmNvbmZpZy5kZXNjcmlwdGlvbil7dmFyIGRlc2NFbGVtZW50PWNyZWF0ZU5TKCdkZXNjJyk7dmFyIGRlc2NJZD1jcmVhdGVFbGVtZW50SUQoKTtkZXNjRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJyxkZXNjSWQpO2Rlc2NFbGVtZW50LnRleHRDb250ZW50PWNvbmZpZy5kZXNjcmlwdGlvbjt0aGlzLnN2Z0VsZW1lbnQuYXBwZW5kQ2hpbGQoZGVzY0VsZW1lbnQpO2FyaWFMYWJlbCs9JyAnK2Rlc2NJZDt9aWYoYXJpYUxhYmVsKXt0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLGFyaWFMYWJlbCk7fXZhciBkZWZzPWNyZWF0ZU5TKCdkZWZzJyk7dGhpcy5zdmdFbGVtZW50LmFwcGVuZENoaWxkKGRlZnMpO3ZhciBtYXNrRWxlbWVudD1jcmVhdGVOUygnZycpO3RoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7dGhpcy5sYXllckVsZW1lbnQ9bWFza0VsZW1lbnQ7dGhpcy5yZW5kZXJDb25maWc9e3ByZXNlcnZlQXNwZWN0UmF0aW86Y29uZmlnJiZjb25maWcucHJlc2VydmVBc3BlY3RSYXRpb3x8J3hNaWRZTWlkIG1lZXQnLGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzpjb25maWcmJmNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW98fCd4TWlkWU1pZCBzbGljZScscHJvZ3Jlc3NpdmVMb2FkOmNvbmZpZyYmY29uZmlnLnByb2dyZXNzaXZlTG9hZHx8ZmFsc2UsaGlkZU9uVHJhbnNwYXJlbnQ6IShjb25maWcmJmNvbmZpZy5oaWRlT25UcmFuc3BhcmVudD09PWZhbHNlKSx2aWV3Qm94T25seTpjb25maWcmJmNvbmZpZy52aWV3Qm94T25seXx8ZmFsc2Usdmlld0JveFNpemU6Y29uZmlnJiZjb25maWcudmlld0JveFNpemV8fGZhbHNlLGNsYXNzTmFtZTpjb25maWcmJmNvbmZpZy5jbGFzc05hbWV8fCcnLGlkOmNvbmZpZyYmY29uZmlnLmlkfHwnJyxmb2N1c2FibGU6Y29uZmlnJiZjb25maWcuZm9jdXNhYmxlLGZpbHRlclNpemU6e3dpZHRoOmNvbmZpZyYmY29uZmlnLmZpbHRlclNpemUmJmNvbmZpZy5maWx0ZXJTaXplLndpZHRofHwnMTAwJScsaGVpZ2h0OmNvbmZpZyYmY29uZmlnLmZpbHRlclNpemUmJmNvbmZpZy5maWx0ZXJTaXplLmhlaWdodHx8JzEwMCUnLHg6Y29uZmlnJiZjb25maWcuZmlsdGVyU2l6ZSYmY29uZmlnLmZpbHRlclNpemUueHx8JzAlJyx5OmNvbmZpZyYmY29uZmlnLmZpbHRlclNpemUmJmNvbmZpZy5maWx0ZXJTaXplLnl8fCcwJSd9fTt0aGlzLmdsb2JhbERhdGE9e19tZGY6ZmFsc2UsZnJhbWVOdW06LTEsZGVmczpkZWZzLHJlbmRlckNvbmZpZzp0aGlzLnJlbmRlckNvbmZpZ307dGhpcy5lbGVtZW50cz1bXTt0aGlzLnBlbmRpbmdFbGVtZW50cz1bXTt0aGlzLmRlc3Ryb3llZD1mYWxzZTt0aGlzLnJlbmRlcmVyVHlwZT0nc3ZnJzt9ZXh0ZW5kUHJvdG90eXBlKFtCYXNlUmVuZGVyZXJdLFNWR1JlbmRlcmVyKTtTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlTnVsbD1mdW5jdGlvbihkYXRhKXtyZXR1cm4gbmV3IE51bGxFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO307U1ZHUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVNoYXBlPWZ1bmN0aW9uKGRhdGEpe3JldHVybiBuZXcgU1ZHU2hhcGVFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO307U1ZHUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVRleHQ9ZnVuY3Rpb24oZGF0YSl7cmV0dXJuIG5ldyBTVkdUZXh0TG90dGllRWxlbWVudChkYXRhLHRoaXMuZ2xvYmFsRGF0YSx0aGlzKTt9O1NWR1JlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVJbWFnZT1mdW5jdGlvbihkYXRhKXtyZXR1cm4gbmV3IElJbWFnZUVsZW1lbnQoZGF0YSx0aGlzLmdsb2JhbERhdGEsdGhpcyk7fTtTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ29tcD1mdW5jdGlvbihkYXRhKXtyZXR1cm4gbmV3IFNWR0NvbXBFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO307U1ZHUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVNvbGlkPWZ1bmN0aW9uKGRhdGEpe3JldHVybiBuZXcgSVNvbGlkRWxlbWVudChkYXRhLHRoaXMuZ2xvYmFsRGF0YSx0aGlzKTt9O1NWR1JlbmRlcmVyLnByb3RvdHlwZS5jb25maWdBbmltYXRpb249ZnVuY3Rpb24oYW5pbURhdGEpe3RoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3htbG5zJywnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKTtpZih0aGlzLnJlbmRlckNvbmZpZy52aWV3Qm94U2l6ZSl7dGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsdGhpcy5yZW5kZXJDb25maWcudmlld0JveFNpemUpO31lbHNlIHt0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywnMCAwICcrYW5pbURhdGEudysnICcrYW5pbURhdGEuaCk7fWlmKCF0aGlzLnJlbmRlckNvbmZpZy52aWV3Qm94T25seSl7dGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLGFuaW1EYXRhLncpO3RoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsYW5pbURhdGEuaCk7dGhpcy5zdmdFbGVtZW50LnN0eWxlLndpZHRoPScxMDAlJzt0aGlzLnN2Z0VsZW1lbnQuc3R5bGUuaGVpZ2h0PScxMDAlJzt0aGlzLnN2Z0VsZW1lbnQuc3R5bGUudHJhbnNmb3JtPSd0cmFuc2xhdGUzZCgwLDAsMCknO31pZih0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpe3RoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJyx0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO31pZih0aGlzLnJlbmRlckNvbmZpZy5pZCl7dGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLHRoaXMucmVuZGVyQ29uZmlnLmlkKTt9aWYodGhpcy5yZW5kZXJDb25maWcuZm9jdXNhYmxlIT09dW5kZWZpbmVkKXt0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLHRoaXMucmVuZGVyQ29uZmlnLmZvY3VzYWJsZSk7fXRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLHRoaXMucmVuZGVyQ29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW8pOy8vIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCknO1xuLy8gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUubW96VHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtJ10gPSBcIjBweCAwcHggMHB4XCI7XG50aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnN2Z0VsZW1lbnQpOy8vIE1hc2sgYW5pbWF0aW9uXG52YXIgZGVmcz10aGlzLmdsb2JhbERhdGEuZGVmczt0aGlzLnNldHVwR2xvYmFsRGF0YShhbmltRGF0YSxkZWZzKTt0aGlzLmdsb2JhbERhdGEucHJvZ3Jlc3NpdmVMb2FkPXRoaXMucmVuZGVyQ29uZmlnLnByb2dyZXNzaXZlTG9hZDt0aGlzLmRhdGE9YW5pbURhdGE7dmFyIG1hc2tFbGVtZW50PWNyZWF0ZU5TKCdjbGlwUGF0aCcpO3ZhciByZWN0PWNyZWF0ZU5TKCdyZWN0Jyk7cmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJyxhbmltRGF0YS53KTtyZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JyxhbmltRGF0YS5oKTtyZWN0LnNldEF0dHJpYnV0ZSgneCcsMCk7cmVjdC5zZXRBdHRyaWJ1dGUoJ3knLDApO3ZhciBtYXNrSWQ9Y3JlYXRlRWxlbWVudElEKCk7bWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsbWFza0lkKTttYXNrRWxlbWVudC5hcHBlbmRDaGlsZChyZWN0KTt0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsaXAtcGF0aCcsJ3VybCgnK2xvY2F0aW9uSHJlZisnIycrbWFza0lkKycpJyk7ZGVmcy5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7dGhpcy5sYXllcnM9YW5pbURhdGEubGF5ZXJzO3RoaXMuZWxlbWVudHM9Y3JlYXRlU2l6ZWRBcnJheShhbmltRGF0YS5sYXllcnMubGVuZ3RoKTt9O1NWR1JlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7aWYodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpe3RoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLmlubmVyVGV4dD0nJzt9dGhpcy5sYXllckVsZW1lbnQ9bnVsbDt0aGlzLmdsb2JhbERhdGEuZGVmcz1udWxsO3ZhciBpO3ZhciBsZW49dGhpcy5sYXllcnM/dGhpcy5sYXllcnMubGVuZ3RoOjA7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZih0aGlzLmVsZW1lbnRzW2ldKXt0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3koKTt9fXRoaXMuZWxlbWVudHMubGVuZ3RoPTA7dGhpcy5kZXN0cm95ZWQ9dHJ1ZTt0aGlzLmFuaW1hdGlvbkl0ZW09bnVsbDt9O1NWR1JlbmRlcmVyLnByb3RvdHlwZS51cGRhdGVDb250YWluZXJTaXplPWZ1bmN0aW9uKCl7fTtTVkdSZW5kZXJlci5wcm90b3R5cGUuYnVpbGRJdGVtPWZ1bmN0aW9uKHBvcyl7dmFyIGVsZW1lbnRzPXRoaXMuZWxlbWVudHM7aWYoZWxlbWVudHNbcG9zXXx8dGhpcy5sYXllcnNbcG9zXS50eT09PTk5KXtyZXR1cm47fWVsZW1lbnRzW3Bvc109dHJ1ZTt2YXIgZWxlbWVudD10aGlzLmNyZWF0ZUl0ZW0odGhpcy5sYXllcnNbcG9zXSk7ZWxlbWVudHNbcG9zXT1lbGVtZW50O2lmKGV4cHJlc3Npb25zUGx1Z2luKXtpZih0aGlzLmxheWVyc1twb3NdLnR5PT09MCl7dGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UucmVnaXN0ZXJDb21wb3NpdGlvbihlbGVtZW50KTt9ZWxlbWVudC5pbml0RXhwcmVzc2lvbnMoKTt9dGhpcy5hcHBlbmRFbGVtZW50SW5Qb3MoZWxlbWVudCxwb3MpO2lmKHRoaXMubGF5ZXJzW3Bvc10udHQpe2lmKCF0aGlzLmVsZW1lbnRzW3Bvcy0xXXx8dGhpcy5lbGVtZW50c1twb3MtMV09PT10cnVlKXt0aGlzLmJ1aWxkSXRlbShwb3MtMSk7dGhpcy5hZGRQZW5kaW5nRWxlbWVudChlbGVtZW50KTt9ZWxzZSB7ZWxlbWVudC5zZXRNYXR0ZShlbGVtZW50c1twb3MtMV0ubGF5ZXJJZCk7fX19O1NWR1JlbmRlcmVyLnByb3RvdHlwZS5jaGVja1BlbmRpbmdFbGVtZW50cz1mdW5jdGlvbigpe3doaWxlKHRoaXMucGVuZGluZ0VsZW1lbnRzLmxlbmd0aCl7dmFyIGVsZW1lbnQ9dGhpcy5wZW5kaW5nRWxlbWVudHMucG9wKCk7ZWxlbWVudC5jaGVja1BhcmVudGluZygpO2lmKGVsZW1lbnQuZGF0YS50dCl7dmFyIGk9MDt2YXIgbGVuPXRoaXMuZWxlbWVudHMubGVuZ3RoO3doaWxlKGk8bGVuKXtpZih0aGlzLmVsZW1lbnRzW2ldPT09ZWxlbWVudCl7ZWxlbWVudC5zZXRNYXR0ZSh0aGlzLmVsZW1lbnRzW2ktMV0ubGF5ZXJJZCk7YnJlYWs7fWkrPTE7fX19fTtTVkdSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyRnJhbWU9ZnVuY3Rpb24obnVtKXtpZih0aGlzLnJlbmRlcmVkRnJhbWU9PT1udW18fHRoaXMuZGVzdHJveWVkKXtyZXR1cm47fWlmKG51bT09PW51bGwpe251bT10aGlzLnJlbmRlcmVkRnJhbWU7fWVsc2Uge3RoaXMucmVuZGVyZWRGcmFtZT1udW07fS8vIGNvbnNvbGUubG9nKCctLS0tLS0tJyk7XG4vLyBjb25zb2xlLmxvZygnRlJBTUUgJyxudW0pO1xudGhpcy5nbG9iYWxEYXRhLmZyYW1lTnVtPW51bTt0aGlzLmdsb2JhbERhdGEuZnJhbWVJZCs9MTt0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5jdXJyZW50RnJhbWU9bnVtO3RoaXMuZ2xvYmFsRGF0YS5fbWRmPWZhbHNlO3ZhciBpO3ZhciBsZW49dGhpcy5sYXllcnMubGVuZ3RoO2lmKCF0aGlzLmNvbXBsZXRlTGF5ZXJzKXt0aGlzLmNoZWNrTGF5ZXJzKG51bSk7fWZvcihpPWxlbi0xO2k+PTA7aS09MSl7aWYodGhpcy5jb21wbGV0ZUxheWVyc3x8dGhpcy5lbGVtZW50c1tpXSl7dGhpcy5lbGVtZW50c1tpXS5wcmVwYXJlRnJhbWUobnVtLXRoaXMubGF5ZXJzW2ldLnN0KTt9fWlmKHRoaXMuZ2xvYmFsRGF0YS5fbWRmKXtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKHRoaXMuY29tcGxldGVMYXllcnN8fHRoaXMuZWxlbWVudHNbaV0pe3RoaXMuZWxlbWVudHNbaV0ucmVuZGVyRnJhbWUoKTt9fX19O1NWR1JlbmRlcmVyLnByb3RvdHlwZS5hcHBlbmRFbGVtZW50SW5Qb3M9ZnVuY3Rpb24oZWxlbWVudCxwb3Mpe3ZhciBuZXdFbGVtZW50PWVsZW1lbnQuZ2V0QmFzZUVsZW1lbnQoKTtpZighbmV3RWxlbWVudCl7cmV0dXJuO312YXIgaT0wO3ZhciBuZXh0RWxlbWVudDt3aGlsZShpPHBvcyl7aWYodGhpcy5lbGVtZW50c1tpXSYmdGhpcy5lbGVtZW50c1tpXSE9PXRydWUmJnRoaXMuZWxlbWVudHNbaV0uZ2V0QmFzZUVsZW1lbnQoKSl7bmV4dEVsZW1lbnQ9dGhpcy5lbGVtZW50c1tpXS5nZXRCYXNlRWxlbWVudCgpO31pKz0xO31pZihuZXh0RWxlbWVudCl7dGhpcy5sYXllckVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5ld0VsZW1lbnQsbmV4dEVsZW1lbnQpO31lbHNlIHt0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTt9fTtTVkdSZW5kZXJlci5wcm90b3R5cGUuaGlkZT1mdW5jdGlvbigpe3RoaXMubGF5ZXJFbGVtZW50LnN0eWxlLmRpc3BsYXk9J25vbmUnO307U1ZHUmVuZGVyZXIucHJvdG90eXBlLnNob3c9ZnVuY3Rpb24oKXt0aGlzLmxheWVyRWxlbWVudC5zdHlsZS5kaXNwbGF5PSdibG9jayc7fTsvKiBnbG9iYWwgQ1ZDb250ZXh0RGF0YSwgTWF0cml4LCBleHRlbmRQcm90b3R5cGUsIEJhc2VSZW5kZXJlciwgQ1ZTaGFwZUVsZW1lbnQsIENWVGV4dEVsZW1lbnQsXHJcbkNWSW1hZ2VFbGVtZW50LCBDVkNvbXBFbGVtZW50LCBDVlNvbGlkRWxlbWVudCwgU1ZHUmVuZGVyZXIsIGNyZWF0ZVRhZywgY3JlYXRlU2l6ZWRBcnJheSAqL2Z1bmN0aW9uIENhbnZhc1JlbmRlcmVyKGFuaW1hdGlvbkl0ZW0sY29uZmlnKXt0aGlzLmFuaW1hdGlvbkl0ZW09YW5pbWF0aW9uSXRlbTt0aGlzLnJlbmRlckNvbmZpZz17Y2xlYXJDYW52YXM6Y29uZmlnJiZjb25maWcuY2xlYXJDYW52YXMhPT11bmRlZmluZWQ/Y29uZmlnLmNsZWFyQ2FudmFzOnRydWUsY29udGV4dDpjb25maWcmJmNvbmZpZy5jb250ZXh0fHxudWxsLHByb2dyZXNzaXZlTG9hZDpjb25maWcmJmNvbmZpZy5wcm9ncmVzc2l2ZUxvYWR8fGZhbHNlLHByZXNlcnZlQXNwZWN0UmF0aW86Y29uZmlnJiZjb25maWcucHJlc2VydmVBc3BlY3RSYXRpb3x8J3hNaWRZTWlkIG1lZXQnLGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzpjb25maWcmJmNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW98fCd4TWlkWU1pZCBzbGljZScsY2xhc3NOYW1lOmNvbmZpZyYmY29uZmlnLmNsYXNzTmFtZXx8JycsaWQ6Y29uZmlnJiZjb25maWcuaWR8fCcnfTt0aGlzLnJlbmRlckNvbmZpZy5kcHI9Y29uZmlnJiZjb25maWcuZHByfHwxO2lmKHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyKXt0aGlzLnJlbmRlckNvbmZpZy5kcHI9Y29uZmlnJiZjb25maWcuZHByfHx3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MTt9dGhpcy5yZW5kZXJlZEZyYW1lPS0xO3RoaXMuZ2xvYmFsRGF0YT17ZnJhbWVOdW06LTEsX21kZjpmYWxzZSxyZW5kZXJDb25maWc6dGhpcy5yZW5kZXJDb25maWcsY3VycmVudEdsb2JhbEFscGhhOi0xfTt0aGlzLmNvbnRleHREYXRhPW5ldyBDVkNvbnRleHREYXRhKCk7dGhpcy5lbGVtZW50cz1bXTt0aGlzLnBlbmRpbmdFbGVtZW50cz1bXTt0aGlzLnRyYW5zZm9ybU1hdD1uZXcgTWF0cml4KCk7dGhpcy5jb21wbGV0ZUxheWVycz1mYWxzZTt0aGlzLnJlbmRlcmVyVHlwZT0nY2FudmFzJzt9ZXh0ZW5kUHJvdG90eXBlKFtCYXNlUmVuZGVyZXJdLENhbnZhc1JlbmRlcmVyKTtDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlU2hhcGU9ZnVuY3Rpb24oZGF0YSl7cmV0dXJuIG5ldyBDVlNoYXBlRWxlbWVudChkYXRhLHRoaXMuZ2xvYmFsRGF0YSx0aGlzKTt9O0NhbnZhc1JlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVUZXh0PWZ1bmN0aW9uKGRhdGEpe3JldHVybiBuZXcgQ1ZUZXh0RWxlbWVudChkYXRhLHRoaXMuZ2xvYmFsRGF0YSx0aGlzKTt9O0NhbnZhc1JlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVJbWFnZT1mdW5jdGlvbihkYXRhKXtyZXR1cm4gbmV3IENWSW1hZ2VFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO307Q2FudmFzUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUNvbXA9ZnVuY3Rpb24oZGF0YSl7cmV0dXJuIG5ldyBDVkNvbXBFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO307Q2FudmFzUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVNvbGlkPWZ1bmN0aW9uKGRhdGEpe3JldHVybiBuZXcgQ1ZTb2xpZEVsZW1lbnQoZGF0YSx0aGlzLmdsb2JhbERhdGEsdGhpcyk7fTtDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlTnVsbD1TVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlTnVsbDtDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuY3R4VHJhbnNmb3JtPWZ1bmN0aW9uKHByb3BzKXtpZihwcm9wc1swXT09PTEmJnByb3BzWzFdPT09MCYmcHJvcHNbNF09PT0wJiZwcm9wc1s1XT09PTEmJnByb3BzWzEyXT09PTAmJnByb3BzWzEzXT09PTApe3JldHVybjt9aWYoIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzKXt0aGlzLmNhbnZhc0NvbnRleHQudHJhbnNmb3JtKHByb3BzWzBdLHByb3BzWzFdLHByb3BzWzRdLHByb3BzWzVdLHByb3BzWzEyXSxwcm9wc1sxM10pO3JldHVybjt9dGhpcy50cmFuc2Zvcm1NYXQuY2xvbmVGcm9tUHJvcHMocHJvcHMpO3ZhciBjUHJvcHM9dGhpcy5jb250ZXh0RGF0YS5jVHIucHJvcHM7dGhpcy50cmFuc2Zvcm1NYXQudHJhbnNmb3JtKGNQcm9wc1swXSxjUHJvcHNbMV0sY1Byb3BzWzJdLGNQcm9wc1szXSxjUHJvcHNbNF0sY1Byb3BzWzVdLGNQcm9wc1s2XSxjUHJvcHNbN10sY1Byb3BzWzhdLGNQcm9wc1s5XSxjUHJvcHNbMTBdLGNQcm9wc1sxMV0sY1Byb3BzWzEyXSxjUHJvcHNbMTNdLGNQcm9wc1sxNF0sY1Byb3BzWzE1XSk7Ly8gdGhpcy5jb250ZXh0RGF0YS5jVHIudHJhbnNmb3JtKHByb3BzWzBdLHByb3BzWzFdLHByb3BzWzJdLHByb3BzWzNdLHByb3BzWzRdLHByb3BzWzVdLHByb3BzWzZdLHByb3BzWzddLHByb3BzWzhdLHByb3BzWzldLHByb3BzWzEwXSxwcm9wc1sxMV0scHJvcHNbMTJdLHByb3BzWzEzXSxwcm9wc1sxNF0scHJvcHNbMTVdKTtcbnRoaXMuY29udGV4dERhdGEuY1RyLmNsb25lRnJvbVByb3BzKHRoaXMudHJhbnNmb3JtTWF0LnByb3BzKTt2YXIgdHJQcm9wcz10aGlzLmNvbnRleHREYXRhLmNUci5wcm9wczt0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKHRyUHJvcHNbMF0sdHJQcm9wc1sxXSx0clByb3BzWzRdLHRyUHJvcHNbNV0sdHJQcm9wc1sxMl0sdHJQcm9wc1sxM10pO307Q2FudmFzUmVuZGVyZXIucHJvdG90eXBlLmN0eE9wYWNpdHk9ZnVuY3Rpb24ob3Apey8qIGlmKG9wID09PSAxKXtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9ICovaWYoIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzKXt0aGlzLmNhbnZhc0NvbnRleHQuZ2xvYmFsQWxwaGEqPW9wPDA/MDpvcDt0aGlzLmdsb2JhbERhdGEuY3VycmVudEdsb2JhbEFscGhhPXRoaXMuY29udGV4dERhdGEuY087cmV0dXJuO310aGlzLmNvbnRleHREYXRhLmNPKj1vcDwwPzA6b3A7aWYodGhpcy5nbG9iYWxEYXRhLmN1cnJlbnRHbG9iYWxBbHBoYSE9PXRoaXMuY29udGV4dERhdGEuY08pe3RoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxBbHBoYT10aGlzLmNvbnRleHREYXRhLmNPO3RoaXMuZ2xvYmFsRGF0YS5jdXJyZW50R2xvYmFsQWxwaGE9dGhpcy5jb250ZXh0RGF0YS5jTzt9fTtDYW52YXNSZW5kZXJlci5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMpe3RoaXMuY2FudmFzQ29udGV4dC5yZXN0b3JlKCk7cmV0dXJuO310aGlzLmNvbnRleHREYXRhLnJlc2V0KCk7fTtDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbihhY3Rpb25GbGFnKXtpZighdGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMpe3RoaXMuY2FudmFzQ29udGV4dC5zYXZlKCk7cmV0dXJuO31pZihhY3Rpb25GbGFnKXt0aGlzLmNhbnZhc0NvbnRleHQuc2F2ZSgpO312YXIgcHJvcHM9dGhpcy5jb250ZXh0RGF0YS5jVHIucHJvcHM7aWYodGhpcy5jb250ZXh0RGF0YS5fbGVuZ3RoPD10aGlzLmNvbnRleHREYXRhLmNBcnJQb3Mpe3RoaXMuY29udGV4dERhdGEuZHVwbGljYXRlKCk7fXZhciBpO3ZhciBhcnI9dGhpcy5jb250ZXh0RGF0YS5zYXZlZFt0aGlzLmNvbnRleHREYXRhLmNBcnJQb3NdO2ZvcihpPTA7aTwxNjtpKz0xKXthcnJbaV09cHJvcHNbaV07fXRoaXMuY29udGV4dERhdGEuc2F2ZWRPcFt0aGlzLmNvbnRleHREYXRhLmNBcnJQb3NdPXRoaXMuY29udGV4dERhdGEuY087dGhpcy5jb250ZXh0RGF0YS5jQXJyUG9zKz0xO307Q2FudmFzUmVuZGVyZXIucHJvdG90eXBlLnJlc3RvcmU9ZnVuY3Rpb24oYWN0aW9uRmxhZyl7aWYoIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzKXt0aGlzLmNhbnZhc0NvbnRleHQucmVzdG9yZSgpO3JldHVybjt9aWYoYWN0aW9uRmxhZyl7dGhpcy5jYW52YXNDb250ZXh0LnJlc3RvcmUoKTt0aGlzLmdsb2JhbERhdGEuYmxlbmRNb2RlPSdzb3VyY2Utb3Zlcic7fXRoaXMuY29udGV4dERhdGEuY0FyclBvcy09MTt2YXIgcG9wcGVkPXRoaXMuY29udGV4dERhdGEuc2F2ZWRbdGhpcy5jb250ZXh0RGF0YS5jQXJyUG9zXTt2YXIgaTt2YXIgYXJyPXRoaXMuY29udGV4dERhdGEuY1RyLnByb3BzO2ZvcihpPTA7aTwxNjtpKz0xKXthcnJbaV09cG9wcGVkW2ldO310aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKHBvcHBlZFswXSxwb3BwZWRbMV0scG9wcGVkWzRdLHBvcHBlZFs1XSxwb3BwZWRbMTJdLHBvcHBlZFsxM10pO3BvcHBlZD10aGlzLmNvbnRleHREYXRhLnNhdmVkT3BbdGhpcy5jb250ZXh0RGF0YS5jQXJyUG9zXTt0aGlzLmNvbnRleHREYXRhLmNPPXBvcHBlZDtpZih0aGlzLmdsb2JhbERhdGEuY3VycmVudEdsb2JhbEFscGhhIT09cG9wcGVkKXt0aGlzLmNhbnZhc0NvbnRleHQuZ2xvYmFsQWxwaGE9cG9wcGVkO3RoaXMuZ2xvYmFsRGF0YS5jdXJyZW50R2xvYmFsQWxwaGE9cG9wcGVkO319O0NhbnZhc1JlbmRlcmVyLnByb3RvdHlwZS5jb25maWdBbmltYXRpb249ZnVuY3Rpb24oYW5pbURhdGEpe2lmKHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyKXt0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyPWNyZWF0ZVRhZygnY2FudmFzJyk7dmFyIGNvbnRhaW5lclN0eWxlPXRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuc3R5bGU7Y29udGFpbmVyU3R5bGUud2lkdGg9JzEwMCUnO2NvbnRhaW5lclN0eWxlLmhlaWdodD0nMTAwJSc7dmFyIG9yaWdpbj0nMHB4IDBweCAwcHgnO2NvbnRhaW5lclN0eWxlLnRyYW5zZm9ybU9yaWdpbj1vcmlnaW47Y29udGFpbmVyU3R5bGUubW96VHJhbnNmb3JtT3JpZ2luPW9yaWdpbjtjb250YWluZXJTdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW49b3JpZ2luO2NvbnRhaW5lclN0eWxlWyctd2Via2l0LXRyYW5zZm9ybSddPW9yaWdpbjt0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyKTt0aGlzLmNhbnZhc0NvbnRleHQ9dGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5nZXRDb250ZXh0KCcyZCcpO2lmKHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSl7dGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJyx0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO31pZih0aGlzLnJlbmRlckNvbmZpZy5pZCl7dGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJyx0aGlzLnJlbmRlckNvbmZpZy5pZCk7fX1lbHNlIHt0aGlzLmNhbnZhc0NvbnRleHQ9dGhpcy5yZW5kZXJDb25maWcuY29udGV4dDt9dGhpcy5kYXRhPWFuaW1EYXRhO3RoaXMubGF5ZXJzPWFuaW1EYXRhLmxheWVyczt0aGlzLnRyYW5zZm9ybUNhbnZhcz17dzphbmltRGF0YS53LGg6YW5pbURhdGEuaCxzeDowLHN5OjAsdHg6MCx0eTowfTt0aGlzLnNldHVwR2xvYmFsRGF0YShhbmltRGF0YSxkb2N1bWVudC5ib2R5KTt0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dD10aGlzLmNhbnZhc0NvbnRleHQ7dGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyPXRoaXM7dGhpcy5nbG9iYWxEYXRhLmlzRGFzaGVkPWZhbHNlO3RoaXMuZ2xvYmFsRGF0YS5wcm9ncmVzc2l2ZUxvYWQ9dGhpcy5yZW5kZXJDb25maWcucHJvZ3Jlc3NpdmVMb2FkO3RoaXMuZ2xvYmFsRGF0YS50cmFuc2Zvcm1DYW52YXM9dGhpcy50cmFuc2Zvcm1DYW52YXM7dGhpcy5lbGVtZW50cz1jcmVhdGVTaXplZEFycmF5KGFuaW1EYXRhLmxheWVycy5sZW5ndGgpO3RoaXMudXBkYXRlQ29udGFpbmVyU2l6ZSgpO307Q2FudmFzUmVuZGVyZXIucHJvdG90eXBlLnVwZGF0ZUNvbnRhaW5lclNpemU9ZnVuY3Rpb24oKXt0aGlzLnJlc2V0KCk7dmFyIGVsZW1lbnRXaWR0aDt2YXIgZWxlbWVudEhlaWdodDtpZih0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlciYmdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lcil7ZWxlbWVudFdpZHRoPXRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLm9mZnNldFdpZHRoO2VsZW1lbnRIZWlnaHQ9dGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIub2Zmc2V0SGVpZ2h0O3RoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuc2V0QXR0cmlidXRlKCd3aWR0aCcsZWxlbWVudFdpZHRoKnRoaXMucmVuZGVyQ29uZmlnLmRwcik7dGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsZWxlbWVudEhlaWdodCp0aGlzLnJlbmRlckNvbmZpZy5kcHIpO31lbHNlIHtlbGVtZW50V2lkdGg9dGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy53aWR0aCp0aGlzLnJlbmRlckNvbmZpZy5kcHI7ZWxlbWVudEhlaWdodD10aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCp0aGlzLnJlbmRlckNvbmZpZy5kcHI7fXZhciBlbGVtZW50UmVsO3ZhciBhbmltYXRpb25SZWw7aWYodGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpby5pbmRleE9mKCdtZWV0JykhPT0tMXx8dGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpby5pbmRleE9mKCdzbGljZScpIT09LTEpe3ZhciBwYXI9dGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpby5zcGxpdCgnICcpO3ZhciBmaWxsVHlwZT1wYXJbMV18fCdtZWV0Jzt2YXIgcG9zPXBhclswXXx8J3hNaWRZTWlkJzt2YXIgeFBvcz1wb3Muc3Vic3RyKDAsNCk7dmFyIHlQb3M9cG9zLnN1YnN0cig0KTtlbGVtZW50UmVsPWVsZW1lbnRXaWR0aC9lbGVtZW50SGVpZ2h0O2FuaW1hdGlvblJlbD10aGlzLnRyYW5zZm9ybUNhbnZhcy53L3RoaXMudHJhbnNmb3JtQ2FudmFzLmg7aWYoYW5pbWF0aW9uUmVsPmVsZW1lbnRSZWwmJmZpbGxUeXBlPT09J21lZXQnfHxhbmltYXRpb25SZWw8ZWxlbWVudFJlbCYmZmlsbFR5cGU9PT0nc2xpY2UnKXt0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeD1lbGVtZW50V2lkdGgvKHRoaXMudHJhbnNmb3JtQ2FudmFzLncvdGhpcy5yZW5kZXJDb25maWcuZHByKTt0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeT1lbGVtZW50V2lkdGgvKHRoaXMudHJhbnNmb3JtQ2FudmFzLncvdGhpcy5yZW5kZXJDb25maWcuZHByKTt9ZWxzZSB7dGhpcy50cmFuc2Zvcm1DYW52YXMuc3g9ZWxlbWVudEhlaWdodC8odGhpcy50cmFuc2Zvcm1DYW52YXMuaC90aGlzLnJlbmRlckNvbmZpZy5kcHIpO3RoaXMudHJhbnNmb3JtQ2FudmFzLnN5PWVsZW1lbnRIZWlnaHQvKHRoaXMudHJhbnNmb3JtQ2FudmFzLmgvdGhpcy5yZW5kZXJDb25maWcuZHByKTt9aWYoeFBvcz09PSd4TWlkJyYmKGFuaW1hdGlvblJlbDxlbGVtZW50UmVsJiZmaWxsVHlwZT09PSdtZWV0J3x8YW5pbWF0aW9uUmVsPmVsZW1lbnRSZWwmJmZpbGxUeXBlPT09J3NsaWNlJykpe3RoaXMudHJhbnNmb3JtQ2FudmFzLnR4PShlbGVtZW50V2lkdGgtdGhpcy50cmFuc2Zvcm1DYW52YXMudyooZWxlbWVudEhlaWdodC90aGlzLnRyYW5zZm9ybUNhbnZhcy5oKSkvMip0aGlzLnJlbmRlckNvbmZpZy5kcHI7fWVsc2UgaWYoeFBvcz09PSd4TWF4JyYmKGFuaW1hdGlvblJlbDxlbGVtZW50UmVsJiZmaWxsVHlwZT09PSdtZWV0J3x8YW5pbWF0aW9uUmVsPmVsZW1lbnRSZWwmJmZpbGxUeXBlPT09J3NsaWNlJykpe3RoaXMudHJhbnNmb3JtQ2FudmFzLnR4PShlbGVtZW50V2lkdGgtdGhpcy50cmFuc2Zvcm1DYW52YXMudyooZWxlbWVudEhlaWdodC90aGlzLnRyYW5zZm9ybUNhbnZhcy5oKSkqdGhpcy5yZW5kZXJDb25maWcuZHByO31lbHNlIHt0aGlzLnRyYW5zZm9ybUNhbnZhcy50eD0wO31pZih5UG9zPT09J1lNaWQnJiYoYW5pbWF0aW9uUmVsPmVsZW1lbnRSZWwmJmZpbGxUeXBlPT09J21lZXQnfHxhbmltYXRpb25SZWw8ZWxlbWVudFJlbCYmZmlsbFR5cGU9PT0nc2xpY2UnKSl7dGhpcy50cmFuc2Zvcm1DYW52YXMudHk9KGVsZW1lbnRIZWlnaHQtdGhpcy50cmFuc2Zvcm1DYW52YXMuaCooZWxlbWVudFdpZHRoL3RoaXMudHJhbnNmb3JtQ2FudmFzLncpKS8yKnRoaXMucmVuZGVyQ29uZmlnLmRwcjt9ZWxzZSBpZih5UG9zPT09J1lNYXgnJiYoYW5pbWF0aW9uUmVsPmVsZW1lbnRSZWwmJmZpbGxUeXBlPT09J21lZXQnfHxhbmltYXRpb25SZWw8ZWxlbWVudFJlbCYmZmlsbFR5cGU9PT0nc2xpY2UnKSl7dGhpcy50cmFuc2Zvcm1DYW52YXMudHk9KGVsZW1lbnRIZWlnaHQtdGhpcy50cmFuc2Zvcm1DYW52YXMuaCooZWxlbWVudFdpZHRoL3RoaXMudHJhbnNmb3JtQ2FudmFzLncpKSp0aGlzLnJlbmRlckNvbmZpZy5kcHI7fWVsc2Uge3RoaXMudHJhbnNmb3JtQ2FudmFzLnR5PTA7fX1lbHNlIGlmKHRoaXMucmVuZGVyQ29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW89PT0nbm9uZScpe3RoaXMudHJhbnNmb3JtQ2FudmFzLnN4PWVsZW1lbnRXaWR0aC8odGhpcy50cmFuc2Zvcm1DYW52YXMudy90aGlzLnJlbmRlckNvbmZpZy5kcHIpO3RoaXMudHJhbnNmb3JtQ2FudmFzLnN5PWVsZW1lbnRIZWlnaHQvKHRoaXMudHJhbnNmb3JtQ2FudmFzLmgvdGhpcy5yZW5kZXJDb25maWcuZHByKTt0aGlzLnRyYW5zZm9ybUNhbnZhcy50eD0wO3RoaXMudHJhbnNmb3JtQ2FudmFzLnR5PTA7fWVsc2Uge3RoaXMudHJhbnNmb3JtQ2FudmFzLnN4PXRoaXMucmVuZGVyQ29uZmlnLmRwcjt0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeT10aGlzLnJlbmRlckNvbmZpZy5kcHI7dGhpcy50cmFuc2Zvcm1DYW52YXMudHg9MDt0aGlzLnRyYW5zZm9ybUNhbnZhcy50eT0wO310aGlzLnRyYW5zZm9ybUNhbnZhcy5wcm9wcz1bdGhpcy50cmFuc2Zvcm1DYW52YXMuc3gsMCwwLDAsMCx0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeSwwLDAsMCwwLDEsMCx0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCx0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSwwLDFdOy8qIHZhciBpLCBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcclxuICAgIGZvcihpPTA7aTxsZW47aSs9MSl7XHJcbiAgICAgICAgaWYodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldLmRhdGEudHkgPT09IDApe1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLnJlc2l6ZSh0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzKTtcclxuICAgICAgICB9XHJcbiAgICB9ICovdGhpcy5jdHhUcmFuc2Zvcm0odGhpcy50cmFuc2Zvcm1DYW52YXMucHJvcHMpO3RoaXMuY2FudmFzQ29udGV4dC5iZWdpblBhdGgoKTt0aGlzLmNhbnZhc0NvbnRleHQucmVjdCgwLDAsdGhpcy50cmFuc2Zvcm1DYW52YXMudyx0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKTt0aGlzLmNhbnZhc0NvbnRleHQuY2xvc2VQYXRoKCk7dGhpcy5jYW52YXNDb250ZXh0LmNsaXAoKTt0aGlzLnJlbmRlckZyYW1lKHRoaXMucmVuZGVyZWRGcmFtZSx0cnVlKTt9O0NhbnZhc1JlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7aWYodGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMmJnRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyKXt0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5pbm5lclRleHQ9Jyc7fXZhciBpO3ZhciBsZW49dGhpcy5sYXllcnM/dGhpcy5sYXllcnMubGVuZ3RoOjA7Zm9yKGk9bGVuLTE7aT49MDtpLT0xKXtpZih0aGlzLmVsZW1lbnRzW2ldKXt0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3koKTt9fXRoaXMuZWxlbWVudHMubGVuZ3RoPTA7dGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQ9bnVsbDt0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyPW51bGw7dGhpcy5kZXN0cm95ZWQ9dHJ1ZTt9O0NhbnZhc1JlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbihudW0sZm9yY2VSZW5kZXIpe2lmKHRoaXMucmVuZGVyZWRGcmFtZT09PW51bSYmdGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXM9PT10cnVlJiYhZm9yY2VSZW5kZXJ8fHRoaXMuZGVzdHJveWVkfHxudW09PT0tMSl7cmV0dXJuO310aGlzLnJlbmRlcmVkRnJhbWU9bnVtO3RoaXMuZ2xvYmFsRGF0YS5mcmFtZU51bT1udW0tdGhpcy5hbmltYXRpb25JdGVtLl9pc0ZpcnN0RnJhbWU7dGhpcy5nbG9iYWxEYXRhLmZyYW1lSWQrPTE7dGhpcy5nbG9iYWxEYXRhLl9tZGY9IXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzfHxmb3JjZVJlbmRlcjt0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5jdXJyZW50RnJhbWU9bnVtOy8vIGNvbnNvbGUubG9nKCctLS0tLS0tLScpO1xuLy8gY29uc29sZS5sb2coJ05FVzogJyxudW0pO1xudmFyIGk7dmFyIGxlbj10aGlzLmxheWVycy5sZW5ndGg7aWYoIXRoaXMuY29tcGxldGVMYXllcnMpe3RoaXMuY2hlY2tMYXllcnMobnVtKTt9Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZih0aGlzLmNvbXBsZXRlTGF5ZXJzfHx0aGlzLmVsZW1lbnRzW2ldKXt0aGlzLmVsZW1lbnRzW2ldLnByZXBhcmVGcmFtZShudW0tdGhpcy5sYXllcnNbaV0uc3QpO319aWYodGhpcy5nbG9iYWxEYXRhLl9tZGYpe2lmKHRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzPT09dHJ1ZSl7dGhpcy5jYW52YXNDb250ZXh0LmNsZWFyUmVjdCgwLDAsdGhpcy50cmFuc2Zvcm1DYW52YXMudyx0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKTt9ZWxzZSB7dGhpcy5zYXZlKCk7fWZvcihpPWxlbi0xO2k+PTA7aS09MSl7aWYodGhpcy5jb21wbGV0ZUxheWVyc3x8dGhpcy5lbGVtZW50c1tpXSl7dGhpcy5lbGVtZW50c1tpXS5yZW5kZXJGcmFtZSgpO319aWYodGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMhPT10cnVlKXt0aGlzLnJlc3RvcmUoKTt9fX07Q2FudmFzUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkSXRlbT1mdW5jdGlvbihwb3Mpe3ZhciBlbGVtZW50cz10aGlzLmVsZW1lbnRzO2lmKGVsZW1lbnRzW3Bvc118fHRoaXMubGF5ZXJzW3Bvc10udHk9PT05OSl7cmV0dXJuO312YXIgZWxlbWVudD10aGlzLmNyZWF0ZUl0ZW0odGhpcy5sYXllcnNbcG9zXSx0aGlzLHRoaXMuZ2xvYmFsRGF0YSk7ZWxlbWVudHNbcG9zXT1lbGVtZW50O2VsZW1lbnQuaW5pdEV4cHJlc3Npb25zKCk7LyogaWYodGhpcy5sYXllcnNbcG9zXS50eSA9PT0gMCl7XHJcbiAgICAgICAgZWxlbWVudC5yZXNpemUodGhpcy5nbG9iYWxEYXRhLnRyYW5zZm9ybUNhbnZhcyk7XHJcbiAgICB9ICovfTtDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuY2hlY2tQZW5kaW5nRWxlbWVudHM9ZnVuY3Rpb24oKXt3aGlsZSh0aGlzLnBlbmRpbmdFbGVtZW50cy5sZW5ndGgpe3ZhciBlbGVtZW50PXRoaXMucGVuZGluZ0VsZW1lbnRzLnBvcCgpO2VsZW1lbnQuY2hlY2tQYXJlbnRpbmcoKTt9fTtDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuaGlkZT1mdW5jdGlvbigpe3RoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuc3R5bGUuZGlzcGxheT0nbm9uZSc7fTtDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuc2hvdz1mdW5jdGlvbigpe3RoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuc3R5bGUuZGlzcGxheT0nYmxvY2snO307LyogZ2xvYmFsIGV4dGVuZFByb3RvdHlwZSwgQmFzZVJlbmRlcmVyLCBTVkdSZW5kZXJlciwgU1ZHU2hhcGVFbGVtZW50LCBIU2hhcGVFbGVtZW50LCBTVkdUZXh0TG90dGllRWxlbWVudCxcclxuSFRleHRFbGVtZW50LCBIQ2FtZXJhRWxlbWVudCwgSUltYWdlRWxlbWVudCwgSEltYWdlRWxlbWVudCwgU1ZHQ29tcEVsZW1lbnQsIEhDb21wRWxlbWVudCwgSVNvbGlkRWxlbWVudCxcclxuSFNvbGlkRWxlbWVudCwgc3R5bGVEaXYsIGNyZWF0ZVRhZywgY3JlYXRlTlMgKi9mdW5jdGlvbiBIeWJyaWRSZW5kZXJlcihhbmltYXRpb25JdGVtLGNvbmZpZyl7dGhpcy5hbmltYXRpb25JdGVtPWFuaW1hdGlvbkl0ZW07dGhpcy5sYXllcnM9bnVsbDt0aGlzLnJlbmRlcmVkRnJhbWU9LTE7dGhpcy5yZW5kZXJDb25maWc9e2NsYXNzTmFtZTpjb25maWcmJmNvbmZpZy5jbGFzc05hbWV8fCcnLGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzpjb25maWcmJmNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW98fCd4TWlkWU1pZCBzbGljZScsaGlkZU9uVHJhbnNwYXJlbnQ6IShjb25maWcmJmNvbmZpZy5oaWRlT25UcmFuc3BhcmVudD09PWZhbHNlKSxmaWx0ZXJTaXplOnt3aWR0aDpjb25maWcmJmNvbmZpZy5maWx0ZXJTaXplJiZjb25maWcuZmlsdGVyU2l6ZS53aWR0aHx8JzQwMCUnLGhlaWdodDpjb25maWcmJmNvbmZpZy5maWx0ZXJTaXplJiZjb25maWcuZmlsdGVyU2l6ZS5oZWlnaHR8fCc0MDAlJyx4OmNvbmZpZyYmY29uZmlnLmZpbHRlclNpemUmJmNvbmZpZy5maWx0ZXJTaXplLnh8fCctMTAwJScseTpjb25maWcmJmNvbmZpZy5maWx0ZXJTaXplJiZjb25maWcuZmlsdGVyU2l6ZS55fHwnLTEwMCUnfX07dGhpcy5nbG9iYWxEYXRhPXtfbWRmOmZhbHNlLGZyYW1lTnVtOi0xLHJlbmRlckNvbmZpZzp0aGlzLnJlbmRlckNvbmZpZ307dGhpcy5wZW5kaW5nRWxlbWVudHM9W107dGhpcy5lbGVtZW50cz1bXTt0aGlzLnRocmVlREVsZW1lbnRzPVtdO3RoaXMuZGVzdHJveWVkPWZhbHNlO3RoaXMuY2FtZXJhPW51bGw7dGhpcy5zdXBwb3J0czNkPXRydWU7dGhpcy5yZW5kZXJlclR5cGU9J2h0bWwnO31leHRlbmRQcm90b3R5cGUoW0Jhc2VSZW5kZXJlcl0sSHlicmlkUmVuZGVyZXIpO0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5idWlsZEl0ZW09U1ZHUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkSXRlbTtIeWJyaWRSZW5kZXJlci5wcm90b3R5cGUuY2hlY2tQZW5kaW5nRWxlbWVudHM9ZnVuY3Rpb24oKXt3aGlsZSh0aGlzLnBlbmRpbmdFbGVtZW50cy5sZW5ndGgpe3ZhciBlbGVtZW50PXRoaXMucGVuZGluZ0VsZW1lbnRzLnBvcCgpO2VsZW1lbnQuY2hlY2tQYXJlbnRpbmcoKTt9fTtIeWJyaWRSZW5kZXJlci5wcm90b3R5cGUuYXBwZW5kRWxlbWVudEluUG9zPWZ1bmN0aW9uKGVsZW1lbnQscG9zKXt2YXIgbmV3RE9NRWxlbWVudD1lbGVtZW50LmdldEJhc2VFbGVtZW50KCk7aWYoIW5ld0RPTUVsZW1lbnQpe3JldHVybjt9dmFyIGxheWVyPXRoaXMubGF5ZXJzW3Bvc107aWYoIWxheWVyLmRkZHx8IXRoaXMuc3VwcG9ydHMzZCl7aWYodGhpcy50aHJlZURFbGVtZW50cyl7dGhpcy5hZGRUbzNkQ29udGFpbmVyKG5ld0RPTUVsZW1lbnQscG9zKTt9ZWxzZSB7dmFyIGk9MDt2YXIgbmV4dERPTUVsZW1lbnQ7dmFyIG5leHRMYXllcjt2YXIgdG1wRE9NRWxlbWVudDt3aGlsZShpPHBvcyl7aWYodGhpcy5lbGVtZW50c1tpXSYmdGhpcy5lbGVtZW50c1tpXSE9PXRydWUmJnRoaXMuZWxlbWVudHNbaV0uZ2V0QmFzZUVsZW1lbnQpe25leHRMYXllcj10aGlzLmVsZW1lbnRzW2ldO3RtcERPTUVsZW1lbnQ9dGhpcy5sYXllcnNbaV0uZGRkP3RoaXMuZ2V0VGhyZWVEQ29udGFpbmVyQnlQb3MoaSk6bmV4dExheWVyLmdldEJhc2VFbGVtZW50KCk7bmV4dERPTUVsZW1lbnQ9dG1wRE9NRWxlbWVudHx8bmV4dERPTUVsZW1lbnQ7fWkrPTE7fWlmKG5leHRET01FbGVtZW50KXtpZighbGF5ZXIuZGRkfHwhdGhpcy5zdXBwb3J0czNkKXt0aGlzLmxheWVyRWxlbWVudC5pbnNlcnRCZWZvcmUobmV3RE9NRWxlbWVudCxuZXh0RE9NRWxlbWVudCk7fX1lbHNlIGlmKCFsYXllci5kZGR8fCF0aGlzLnN1cHBvcnRzM2Qpe3RoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKG5ld0RPTUVsZW1lbnQpO319fWVsc2Uge3RoaXMuYWRkVG8zZENvbnRhaW5lcihuZXdET01FbGVtZW50LHBvcyk7fX07SHlicmlkUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVNoYXBlPWZ1bmN0aW9uKGRhdGEpe2lmKCF0aGlzLnN1cHBvcnRzM2Qpe3JldHVybiBuZXcgU1ZHU2hhcGVFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO31yZXR1cm4gbmV3IEhTaGFwZUVsZW1lbnQoZGF0YSx0aGlzLmdsb2JhbERhdGEsdGhpcyk7fTtIeWJyaWRSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlVGV4dD1mdW5jdGlvbihkYXRhKXtpZighdGhpcy5zdXBwb3J0czNkKXtyZXR1cm4gbmV3IFNWR1RleHRMb3R0aWVFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO31yZXR1cm4gbmV3IEhUZXh0RWxlbWVudChkYXRhLHRoaXMuZ2xvYmFsRGF0YSx0aGlzKTt9O0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVDYW1lcmE9ZnVuY3Rpb24oZGF0YSl7dGhpcy5jYW1lcmE9bmV3IEhDYW1lcmFFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO3JldHVybiB0aGlzLmNhbWVyYTt9O0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVJbWFnZT1mdW5jdGlvbihkYXRhKXtpZighdGhpcy5zdXBwb3J0czNkKXtyZXR1cm4gbmV3IElJbWFnZUVsZW1lbnQoZGF0YSx0aGlzLmdsb2JhbERhdGEsdGhpcyk7fXJldHVybiBuZXcgSEltYWdlRWxlbWVudChkYXRhLHRoaXMuZ2xvYmFsRGF0YSx0aGlzKTt9O0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVDb21wPWZ1bmN0aW9uKGRhdGEpe2lmKCF0aGlzLnN1cHBvcnRzM2Qpe3JldHVybiBuZXcgU1ZHQ29tcEVsZW1lbnQoZGF0YSx0aGlzLmdsb2JhbERhdGEsdGhpcyk7fXJldHVybiBuZXcgSENvbXBFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO307SHlicmlkUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVNvbGlkPWZ1bmN0aW9uKGRhdGEpe2lmKCF0aGlzLnN1cHBvcnRzM2Qpe3JldHVybiBuZXcgSVNvbGlkRWxlbWVudChkYXRhLHRoaXMuZ2xvYmFsRGF0YSx0aGlzKTt9cmV0dXJuIG5ldyBIU29saWRFbGVtZW50KGRhdGEsdGhpcy5nbG9iYWxEYXRhLHRoaXMpO307SHlicmlkUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZU51bGw9U1ZHUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZU51bGw7SHlicmlkUmVuZGVyZXIucHJvdG90eXBlLmdldFRocmVlRENvbnRhaW5lckJ5UG9zPWZ1bmN0aW9uKHBvcyl7dmFyIGk9MDt2YXIgbGVuPXRoaXMudGhyZWVERWxlbWVudHMubGVuZ3RoO3doaWxlKGk8bGVuKXtpZih0aGlzLnRocmVlREVsZW1lbnRzW2ldLnN0YXJ0UG9zPD1wb3MmJnRoaXMudGhyZWVERWxlbWVudHNbaV0uZW5kUG9zPj1wb3Mpe3JldHVybiB0aGlzLnRocmVlREVsZW1lbnRzW2ldLnBlcnNwZWN0aXZlRWxlbTt9aSs9MTt9cmV0dXJuIG51bGw7fTtIeWJyaWRSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlVGhyZWVEQ29udGFpbmVyPWZ1bmN0aW9uKHBvcyx0eXBlKXt2YXIgcGVyc3BlY3RpdmVFbGVtPWNyZWF0ZVRhZygnZGl2Jyk7dmFyIHN0eWxlO3ZhciBjb250YWluZXJTdHlsZTtzdHlsZURpdihwZXJzcGVjdGl2ZUVsZW0pO3ZhciBjb250YWluZXI9Y3JlYXRlVGFnKCdkaXYnKTtzdHlsZURpdihjb250YWluZXIpO2lmKHR5cGU9PT0nM2QnKXtzdHlsZT1wZXJzcGVjdGl2ZUVsZW0uc3R5bGU7c3R5bGUud2lkdGg9dGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLncrJ3B4JztzdHlsZS5oZWlnaHQ9dGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmgrJ3B4Jzt2YXIgY2VudGVyPSc1MCUgNTAlJztzdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW49Y2VudGVyO3N0eWxlLm1velRyYW5zZm9ybU9yaWdpbj1jZW50ZXI7c3R5bGUudHJhbnNmb3JtT3JpZ2luPWNlbnRlcjtjb250YWluZXJTdHlsZT1jb250YWluZXIuc3R5bGU7dmFyIG1hdHJpeD0nbWF0cml4M2QoMSwwLDAsMCwwLDEsMCwwLDAsMCwxLDAsMCwwLDAsMSknO2NvbnRhaW5lclN0eWxlLnRyYW5zZm9ybT1tYXRyaXg7Y29udGFpbmVyU3R5bGUud2Via2l0VHJhbnNmb3JtPW1hdHJpeDt9cGVyc3BlY3RpdmVFbGVtLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7Ly8gdGhpcy5yZXNpemVyRWxlbS5hcHBlbmRDaGlsZChwZXJzcGVjdGl2ZUVsZW0pO1xudmFyIHRocmVlRENvbnRhaW5lckRhdGE9e2NvbnRhaW5lcjpjb250YWluZXIscGVyc3BlY3RpdmVFbGVtOnBlcnNwZWN0aXZlRWxlbSxzdGFydFBvczpwb3MsZW5kUG9zOnBvcyx0eXBlOnR5cGV9O3RoaXMudGhyZWVERWxlbWVudHMucHVzaCh0aHJlZURDb250YWluZXJEYXRhKTtyZXR1cm4gdGhyZWVEQ29udGFpbmVyRGF0YTt9O0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5idWlsZDNkQ29udGFpbmVycz1mdW5jdGlvbigpe3ZhciBpO3ZhciBsZW49dGhpcy5sYXllcnMubGVuZ3RoO3ZhciBsYXN0VGhyZWVEQ29udGFpbmVyRGF0YTt2YXIgY3VycmVudENvbnRhaW5lcj0nJztmb3IoaT0wO2k8bGVuO2krPTEpe2lmKHRoaXMubGF5ZXJzW2ldLmRkZCYmdGhpcy5sYXllcnNbaV0udHkhPT0zKXtpZihjdXJyZW50Q29udGFpbmVyIT09JzNkJyl7Y3VycmVudENvbnRhaW5lcj0nM2QnO2xhc3RUaHJlZURDb250YWluZXJEYXRhPXRoaXMuY3JlYXRlVGhyZWVEQ29udGFpbmVyKGksJzNkJyk7fWxhc3RUaHJlZURDb250YWluZXJEYXRhLmVuZFBvcz1NYXRoLm1heChsYXN0VGhyZWVEQ29udGFpbmVyRGF0YS5lbmRQb3MsaSk7fWVsc2Uge2lmKGN1cnJlbnRDb250YWluZXIhPT0nMmQnKXtjdXJyZW50Q29udGFpbmVyPScyZCc7bGFzdFRocmVlRENvbnRhaW5lckRhdGE9dGhpcy5jcmVhdGVUaHJlZURDb250YWluZXIoaSwnMmQnKTt9bGFzdFRocmVlRENvbnRhaW5lckRhdGEuZW5kUG9zPU1hdGgubWF4KGxhc3RUaHJlZURDb250YWluZXJEYXRhLmVuZFBvcyxpKTt9fWxlbj10aGlzLnRocmVlREVsZW1lbnRzLmxlbmd0aDtmb3IoaT1sZW4tMTtpPj0wO2ktPTEpe3RoaXMucmVzaXplckVsZW0uYXBwZW5kQ2hpbGQodGhpcy50aHJlZURFbGVtZW50c1tpXS5wZXJzcGVjdGl2ZUVsZW0pO319O0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5hZGRUbzNkQ29udGFpbmVyPWZ1bmN0aW9uKGVsZW0scG9zKXt2YXIgaT0wO3ZhciBsZW49dGhpcy50aHJlZURFbGVtZW50cy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKHBvczw9dGhpcy50aHJlZURFbGVtZW50c1tpXS5lbmRQb3Mpe3ZhciBqPXRoaXMudGhyZWVERWxlbWVudHNbaV0uc3RhcnRQb3M7dmFyIG5leHRFbGVtZW50O3doaWxlKGo8cG9zKXtpZih0aGlzLmVsZW1lbnRzW2pdJiZ0aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KXtuZXh0RWxlbWVudD10aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KCk7fWorPTE7fWlmKG5leHRFbGVtZW50KXt0aGlzLnRocmVlREVsZW1lbnRzW2ldLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUoZWxlbSxuZXh0RWxlbWVudCk7fWVsc2Uge3RoaXMudGhyZWVERWxlbWVudHNbaV0uY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW0pO31icmVhazt9aSs9MTt9fTtIeWJyaWRSZW5kZXJlci5wcm90b3R5cGUuY29uZmlnQW5pbWF0aW9uPWZ1bmN0aW9uKGFuaW1EYXRhKXt2YXIgcmVzaXplckVsZW09Y3JlYXRlVGFnKCdkaXYnKTt2YXIgd3JhcHBlcj10aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcjt2YXIgc3R5bGU9cmVzaXplckVsZW0uc3R5bGU7c3R5bGUud2lkdGg9YW5pbURhdGEudysncHgnO3N0eWxlLmhlaWdodD1hbmltRGF0YS5oKydweCc7dGhpcy5yZXNpemVyRWxlbT1yZXNpemVyRWxlbTtzdHlsZURpdihyZXNpemVyRWxlbSk7c3R5bGUudHJhbnNmb3JtU3R5bGU9J2ZsYXQnO3N0eWxlLm1velRyYW5zZm9ybVN0eWxlPSdmbGF0JztzdHlsZS53ZWJraXRUcmFuc2Zvcm1TdHlsZT0nZmxhdCc7aWYodGhpcy5yZW5kZXJDb25maWcuY2xhc3NOYW1lKXtyZXNpemVyRWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJyx0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO313cmFwcGVyLmFwcGVuZENoaWxkKHJlc2l6ZXJFbGVtKTtzdHlsZS5vdmVyZmxvdz0naGlkZGVuJzt2YXIgc3ZnPWNyZWF0ZU5TKCdzdmcnKTtzdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsJzEnKTtzdmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCcxJyk7c3R5bGVEaXYoc3ZnKTt0aGlzLnJlc2l6ZXJFbGVtLmFwcGVuZENoaWxkKHN2Zyk7dmFyIGRlZnM9Y3JlYXRlTlMoJ2RlZnMnKTtzdmcuYXBwZW5kQ2hpbGQoZGVmcyk7dGhpcy5kYXRhPWFuaW1EYXRhOy8vIE1hc2sgYW5pbWF0aW9uXG50aGlzLnNldHVwR2xvYmFsRGF0YShhbmltRGF0YSxzdmcpO3RoaXMuZ2xvYmFsRGF0YS5kZWZzPWRlZnM7dGhpcy5sYXllcnM9YW5pbURhdGEubGF5ZXJzO3RoaXMubGF5ZXJFbGVtZW50PXRoaXMucmVzaXplckVsZW07dGhpcy5idWlsZDNkQ29udGFpbmVycygpO3RoaXMudXBkYXRlQ29udGFpbmVyU2l6ZSgpO307SHlicmlkUmVuZGVyZXIucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXtpZih0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcil7dGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuaW5uZXJUZXh0PScnO310aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyPW51bGw7dGhpcy5nbG9iYWxEYXRhLmRlZnM9bnVsbDt2YXIgaTt2YXIgbGVuPXRoaXMubGF5ZXJzP3RoaXMubGF5ZXJzLmxlbmd0aDowO2ZvcihpPTA7aTxsZW47aSs9MSl7dGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KCk7fXRoaXMuZWxlbWVudHMubGVuZ3RoPTA7dGhpcy5kZXN0cm95ZWQ9dHJ1ZTt0aGlzLmFuaW1hdGlvbkl0ZW09bnVsbDt9O0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS51cGRhdGVDb250YWluZXJTaXplPWZ1bmN0aW9uKCl7dmFyIGVsZW1lbnRXaWR0aD10aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRXaWR0aDt2YXIgZWxlbWVudEhlaWdodD10aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRIZWlnaHQ7dmFyIGVsZW1lbnRSZWw9ZWxlbWVudFdpZHRoL2VsZW1lbnRIZWlnaHQ7dmFyIGFuaW1hdGlvblJlbD10aGlzLmdsb2JhbERhdGEuY29tcFNpemUudy90aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDt2YXIgc3g7dmFyIHN5O3ZhciB0eDt2YXIgdHk7aWYoYW5pbWF0aW9uUmVsPmVsZW1lbnRSZWwpe3N4PWVsZW1lbnRXaWR0aC90aGlzLmdsb2JhbERhdGEuY29tcFNpemUudztzeT1lbGVtZW50V2lkdGgvdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7dHg9MDt0eT0oZWxlbWVudEhlaWdodC10aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaCooZWxlbWVudFdpZHRoL3RoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53KSkvMjt9ZWxzZSB7c3g9ZWxlbWVudEhlaWdodC90aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDtzeT1lbGVtZW50SGVpZ2h0L3RoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO3R4PShlbGVtZW50V2lkdGgtdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLncqKGVsZW1lbnRIZWlnaHQvdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmgpKS8yO3R5PTA7fXZhciBzdHlsZT10aGlzLnJlc2l6ZXJFbGVtLnN0eWxlO3N0eWxlLndlYmtpdFRyYW5zZm9ybT0nbWF0cml4M2QoJytzeCsnLDAsMCwwLDAsJytzeSsnLDAsMCwwLDAsMSwwLCcrdHgrJywnK3R5KycsMCwxKSc7c3R5bGUudHJhbnNmb3JtPXN0eWxlLndlYmtpdFRyYW5zZm9ybTt9O0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZT1TVkdSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyRnJhbWU7SHlicmlkUmVuZGVyZXIucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oKXt0aGlzLnJlc2l6ZXJFbGVtLnN0eWxlLmRpc3BsYXk9J25vbmUnO307SHlicmlkUmVuZGVyZXIucHJvdG90eXBlLnNob3c9ZnVuY3Rpb24oKXt0aGlzLnJlc2l6ZXJFbGVtLnN0eWxlLmRpc3BsYXk9J2Jsb2NrJzt9O0h5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5pbml0SXRlbXM9ZnVuY3Rpb24oKXt0aGlzLmJ1aWxkQWxsSXRlbXMoKTtpZih0aGlzLmNhbWVyYSl7dGhpcy5jYW1lcmEuc2V0dXAoKTt9ZWxzZSB7dmFyIGNXaWR0aD10aGlzLmdsb2JhbERhdGEuY29tcFNpemUudzt2YXIgY0hlaWdodD10aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDt2YXIgaTt2YXIgbGVuPXRoaXMudGhyZWVERWxlbWVudHMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7dmFyIHN0eWxlPXRoaXMudGhyZWVERWxlbWVudHNbaV0ucGVyc3BlY3RpdmVFbGVtLnN0eWxlO3N0eWxlLndlYmtpdFBlcnNwZWN0aXZlPU1hdGguc3FydChNYXRoLnBvdyhjV2lkdGgsMikrTWF0aC5wb3coY0hlaWdodCwyKSkrJ3B4JztzdHlsZS5wZXJzcGVjdGl2ZT1zdHlsZS53ZWJraXRQZXJzcGVjdGl2ZTt9fX07SHlicmlkUmVuZGVyZXIucHJvdG90eXBlLnNlYXJjaEV4dHJhQ29tcG9zaXRpb25zPWZ1bmN0aW9uKGFzc2V0cyl7dmFyIGk7dmFyIGxlbj1hc3NldHMubGVuZ3RoO3ZhciBmbG9hdGluZ0NvbnRhaW5lcj1jcmVhdGVUYWcoJ2RpdicpO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoYXNzZXRzW2ldLnh0KXt2YXIgY29tcD10aGlzLmNyZWF0ZUNvbXAoYXNzZXRzW2ldLGZsb2F0aW5nQ29udGFpbmVyLHRoaXMuZ2xvYmFsRGF0YS5jb21wLG51bGwpO2NvbXAuaW5pdEV4cHJlc3Npb25zKCk7dGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UucmVnaXN0ZXJDb21wb3NpdGlvbihjb21wKTt9fX07LyogZ2xvYmFsIGNyZWF0ZVNpemVkQXJyYXksIGNyZWF0ZUVsZW1lbnRJRCwgUHJvcGVydHlGYWN0b3J5LCBTaGFwZVByb3BlcnR5RmFjdG9yeSwgY3JlYXRlTlMsIGxvY2F0aW9uSHJlZiAqL2Z1bmN0aW9uIE1hc2tFbGVtZW50KGRhdGEsZWxlbWVudCxnbG9iYWxEYXRhKXt0aGlzLmRhdGE9ZGF0YTt0aGlzLmVsZW1lbnQ9ZWxlbWVudDt0aGlzLmdsb2JhbERhdGE9Z2xvYmFsRGF0YTt0aGlzLnN0b3JlZERhdGE9W107dGhpcy5tYXNrc1Byb3BlcnRpZXM9dGhpcy5kYXRhLm1hc2tzUHJvcGVydGllc3x8W107dGhpcy5tYXNrRWxlbWVudD1udWxsO3ZhciBkZWZzPXRoaXMuZ2xvYmFsRGF0YS5kZWZzO3ZhciBpO3ZhciBsZW49dGhpcy5tYXNrc1Byb3BlcnRpZXM/dGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoOjA7dGhpcy52aWV3RGF0YT1jcmVhdGVTaXplZEFycmF5KGxlbik7dGhpcy5zb2xpZFBhdGg9Jyc7dmFyIHBhdGg7dmFyIHByb3BlcnRpZXM9dGhpcy5tYXNrc1Byb3BlcnRpZXM7dmFyIGNvdW50PTA7dmFyIGN1cnJlbnRNYXNrcz1bXTt2YXIgajt2YXIgakxlbjt2YXIgbGF5ZXJJZD1jcmVhdGVFbGVtZW50SUQoKTt2YXIgcmVjdDt2YXIgZXhwYW5zb3I7dmFyIGZlTW9ycGg7dmFyIHg7dmFyIG1hc2tUeXBlPSdjbGlwUGF0aCc7dmFyIG1hc2tSZWY9J2NsaXAtcGF0aCc7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZihwcm9wZXJ0aWVzW2ldLm1vZGUhPT0nYScmJnByb3BlcnRpZXNbaV0ubW9kZSE9PSduJ3x8cHJvcGVydGllc1tpXS5pbnZ8fHByb3BlcnRpZXNbaV0uby5rIT09MTAwfHxwcm9wZXJ0aWVzW2ldLm8ueCl7bWFza1R5cGU9J21hc2snO21hc2tSZWY9J21hc2snO31pZigocHJvcGVydGllc1tpXS5tb2RlPT09J3MnfHxwcm9wZXJ0aWVzW2ldLm1vZGU9PT0naScpJiZjb3VudD09PTApe3JlY3Q9Y3JlYXRlTlMoJ3JlY3QnKTtyZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsJyNmZmZmZmYnKTtyZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLHRoaXMuZWxlbWVudC5jb21wLmRhdGEud3x8MCk7cmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsdGhpcy5lbGVtZW50LmNvbXAuZGF0YS5ofHwwKTtjdXJyZW50TWFza3MucHVzaChyZWN0KTt9ZWxzZSB7cmVjdD1udWxsO31wYXRoPWNyZWF0ZU5TKCdwYXRoJyk7aWYocHJvcGVydGllc1tpXS5tb2RlPT09J24nKXsvLyBUT0RPIG1vdmUgdGhpcyB0byBhIGZhY3Rvcnkgb3IgdG8gYSBjb25zdHJ1Y3RvclxudGhpcy52aWV3RGF0YVtpXT17b3A6UHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcy5lbGVtZW50LHByb3BlcnRpZXNbaV0ubywwLDAuMDEsdGhpcy5lbGVtZW50KSxwcm9wOlNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLmVsZW1lbnQscHJvcGVydGllc1tpXSwzKSxlbGVtOnBhdGgsbGFzdFBhdGg6Jyd9O2RlZnMuYXBwZW5kQ2hpbGQocGF0aCk7fWVsc2Uge2NvdW50Kz0xO3BhdGguc2V0QXR0cmlidXRlKCdmaWxsJyxwcm9wZXJ0aWVzW2ldLm1vZGU9PT0ncyc/JyMwMDAwMDAnOicjZmZmZmZmJyk7cGF0aC5zZXRBdHRyaWJ1dGUoJ2NsaXAtcnVsZScsJ25vbnplcm8nKTt2YXIgZmlsdGVySUQ7aWYocHJvcGVydGllc1tpXS54LmshPT0wKXttYXNrVHlwZT0nbWFzayc7bWFza1JlZj0nbWFzayc7eD1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLmVsZW1lbnQscHJvcGVydGllc1tpXS54LDAsbnVsbCx0aGlzLmVsZW1lbnQpO2ZpbHRlcklEPWNyZWF0ZUVsZW1lbnRJRCgpO2V4cGFuc29yPWNyZWF0ZU5TKCdmaWx0ZXInKTtleHBhbnNvci5zZXRBdHRyaWJ1dGUoJ2lkJyxmaWx0ZXJJRCk7ZmVNb3JwaD1jcmVhdGVOUygnZmVNb3JwaG9sb2d5Jyk7ZmVNb3JwaC5zZXRBdHRyaWJ1dGUoJ29wZXJhdG9yJywnZXJvZGUnKTtmZU1vcnBoLnNldEF0dHJpYnV0ZSgnaW4nLCdTb3VyY2VHcmFwaGljJyk7ZmVNb3JwaC5zZXRBdHRyaWJ1dGUoJ3JhZGl1cycsJzAnKTtleHBhbnNvci5hcHBlbmRDaGlsZChmZU1vcnBoKTtkZWZzLmFwcGVuZENoaWxkKGV4cGFuc29yKTtwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJyxwcm9wZXJ0aWVzW2ldLm1vZGU9PT0ncyc/JyMwMDAwMDAnOicjZmZmZmZmJyk7fWVsc2Uge2ZlTW9ycGg9bnVsbDt4PW51bGw7fS8vIFRPRE8gbW92ZSB0aGlzIHRvIGEgZmFjdG9yeSBvciB0byBhIGNvbnN0cnVjdG9yXG50aGlzLnN0b3JlZERhdGFbaV09e2VsZW06cGF0aCx4OngsZXhwYW46ZmVNb3JwaCxsYXN0UGF0aDonJyxsYXN0T3BlcmF0b3I6JycsZmlsdGVySWQ6ZmlsdGVySUQsbGFzdFJhZGl1czowfTtpZihwcm9wZXJ0aWVzW2ldLm1vZGU9PT0naScpe2pMZW49Y3VycmVudE1hc2tzLmxlbmd0aDt2YXIgZz1jcmVhdGVOUygnZycpO2ZvcihqPTA7ajxqTGVuO2orPTEpe2cuYXBwZW5kQ2hpbGQoY3VycmVudE1hc2tzW2pdKTt9dmFyIG1hc2s9Y3JlYXRlTlMoJ21hc2snKTttYXNrLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywnYWxwaGEnKTttYXNrLnNldEF0dHJpYnV0ZSgnaWQnLGxheWVySWQrJ18nK2NvdW50KTttYXNrLmFwcGVuZENoaWxkKHBhdGgpO2RlZnMuYXBwZW5kQ2hpbGQobWFzayk7Zy5zZXRBdHRyaWJ1dGUoJ21hc2snLCd1cmwoJytsb2NhdGlvbkhyZWYrJyMnK2xheWVySWQrJ18nK2NvdW50KycpJyk7Y3VycmVudE1hc2tzLmxlbmd0aD0wO2N1cnJlbnRNYXNrcy5wdXNoKGcpO31lbHNlIHtjdXJyZW50TWFza3MucHVzaChwYXRoKTt9aWYocHJvcGVydGllc1tpXS5pbnYmJiF0aGlzLnNvbGlkUGF0aCl7dGhpcy5zb2xpZFBhdGg9dGhpcy5jcmVhdGVMYXllclNvbGlkUGF0aCgpO30vLyBUT0RPIG1vdmUgdGhpcyB0byBhIGZhY3Rvcnkgb3IgdG8gYSBjb25zdHJ1Y3RvclxudGhpcy52aWV3RGF0YVtpXT17ZWxlbTpwYXRoLGxhc3RQYXRoOicnLG9wOlByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMuZWxlbWVudCxwcm9wZXJ0aWVzW2ldLm8sMCwwLjAxLHRoaXMuZWxlbWVudCkscHJvcDpTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRTaGFwZVByb3AodGhpcy5lbGVtZW50LHByb3BlcnRpZXNbaV0sMyksaW52UmVjdDpyZWN0fTtpZighdGhpcy52aWV3RGF0YVtpXS5wcm9wLmspe3RoaXMuZHJhd1BhdGgocHJvcGVydGllc1tpXSx0aGlzLnZpZXdEYXRhW2ldLnByb3Audix0aGlzLnZpZXdEYXRhW2ldKTt9fX10aGlzLm1hc2tFbGVtZW50PWNyZWF0ZU5TKG1hc2tUeXBlKTtsZW49Y3VycmVudE1hc2tzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMubWFza0VsZW1lbnQuYXBwZW5kQ2hpbGQoY3VycmVudE1hc2tzW2ldKTt9aWYoY291bnQ+MCl7dGhpcy5tYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJyxsYXllcklkKTt0aGlzLmVsZW1lbnQubWFza2VkRWxlbWVudC5zZXRBdHRyaWJ1dGUobWFza1JlZiwndXJsKCcrbG9jYXRpb25IcmVmKycjJytsYXllcklkKycpJyk7ZGVmcy5hcHBlbmRDaGlsZCh0aGlzLm1hc2tFbGVtZW50KTt9aWYodGhpcy52aWV3RGF0YS5sZW5ndGgpe3RoaXMuZWxlbWVudC5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO319TWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tQcm9wZXJ0eT1mdW5jdGlvbihwb3Mpe3JldHVybiB0aGlzLnZpZXdEYXRhW3Bvc10ucHJvcDt9O01hc2tFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbihpc0ZpcnN0RnJhbWUpe3ZhciBmaW5hbE1hdD10aGlzLmVsZW1lbnQuZmluYWxUcmFuc2Zvcm0ubWF0O3ZhciBpO3ZhciBsZW49dGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYodGhpcy52aWV3RGF0YVtpXS5wcm9wLl9tZGZ8fGlzRmlyc3RGcmFtZSl7dGhpcy5kcmF3UGF0aCh0aGlzLm1hc2tzUHJvcGVydGllc1tpXSx0aGlzLnZpZXdEYXRhW2ldLnByb3Audix0aGlzLnZpZXdEYXRhW2ldKTt9aWYodGhpcy52aWV3RGF0YVtpXS5vcC5fbWRmfHxpc0ZpcnN0RnJhbWUpe3RoaXMudmlld0RhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsdGhpcy52aWV3RGF0YVtpXS5vcC52KTt9aWYodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0ubW9kZSE9PSduJyl7aWYodGhpcy52aWV3RGF0YVtpXS5pbnZSZWN0JiYodGhpcy5lbGVtZW50LmZpbmFsVHJhbnNmb3JtLm1Qcm9wLl9tZGZ8fGlzRmlyc3RGcmFtZSkpe3RoaXMudmlld0RhdGFbaV0uaW52UmVjdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsZmluYWxNYXQuZ2V0SW52ZXJzZU1hdHJpeCgpLnRvMmRDU1MoKSk7fWlmKHRoaXMuc3RvcmVkRGF0YVtpXS54JiYodGhpcy5zdG9yZWREYXRhW2ldLnguX21kZnx8aXNGaXJzdEZyYW1lKSl7dmFyIGZlTW9ycGg9dGhpcy5zdG9yZWREYXRhW2ldLmV4cGFuO2lmKHRoaXMuc3RvcmVkRGF0YVtpXS54LnY8MCl7aWYodGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciE9PSdlcm9kZScpe3RoaXMuc3RvcmVkRGF0YVtpXS5sYXN0T3BlcmF0b3I9J2Vyb2RlJzt0aGlzLnN0b3JlZERhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsJ3VybCgnK2xvY2F0aW9uSHJlZisnIycrdGhpcy5zdG9yZWREYXRhW2ldLmZpbHRlcklkKycpJyk7fWZlTW9ycGguc2V0QXR0cmlidXRlKCdyYWRpdXMnLC10aGlzLnN0b3JlZERhdGFbaV0ueC52KTt9ZWxzZSB7aWYodGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciE9PSdkaWxhdGUnKXt0aGlzLnN0b3JlZERhdGFbaV0ubGFzdE9wZXJhdG9yPSdkaWxhdGUnO3RoaXMuc3RvcmVkRGF0YVtpXS5lbGVtLnNldEF0dHJpYnV0ZSgnZmlsdGVyJyxudWxsKTt9dGhpcy5zdG9yZWREYXRhW2ldLmVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLHRoaXMuc3RvcmVkRGF0YVtpXS54LnYqMik7fX19fX07TWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tlbGVtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFza0VsZW1lbnQ7fTtNYXNrRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlTGF5ZXJTb2xpZFBhdGg9ZnVuY3Rpb24oKXt2YXIgcGF0aD0nTTAsMCAnO3BhdGgrPScgaCcrdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7cGF0aCs9JyB2Jyt0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDtwYXRoKz0nIGgtJyt0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudztwYXRoKz0nIHYtJyt0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaCsnICc7cmV0dXJuIHBhdGg7fTtNYXNrRWxlbWVudC5wcm90b3R5cGUuZHJhd1BhdGg9ZnVuY3Rpb24ocGF0aERhdGEscGF0aE5vZGVzLHZpZXdEYXRhKXt2YXIgcGF0aFN0cmluZz0nIE0nK3BhdGhOb2Rlcy52WzBdWzBdKycsJytwYXRoTm9kZXMudlswXVsxXTt2YXIgaTt2YXIgbGVuO2xlbj1wYXRoTm9kZXMuX2xlbmd0aDtmb3IoaT0xO2k8bGVuO2krPTEpey8vIHBhdGhTdHJpbmcgKz0gXCIgQ1wiK3BhdGhOb2Rlcy5vW2ktMV1bMF0rJywnK3BhdGhOb2Rlcy5vW2ktMV1bMV0gKyBcIiBcIitwYXRoTm9kZXMuaVtpXVswXSsnLCcrcGF0aE5vZGVzLmlbaV1bMV0gKyBcIiBcIitwYXRoTm9kZXMudltpXVswXSsnLCcrcGF0aE5vZGVzLnZbaV1bMV07XG5wYXRoU3RyaW5nKz0nIEMnK3BhdGhOb2Rlcy5vW2ktMV1bMF0rJywnK3BhdGhOb2Rlcy5vW2ktMV1bMV0rJyAnK3BhdGhOb2Rlcy5pW2ldWzBdKycsJytwYXRoTm9kZXMuaVtpXVsxXSsnICcrcGF0aE5vZGVzLnZbaV1bMF0rJywnK3BhdGhOb2Rlcy52W2ldWzFdO30vLyBwYXRoU3RyaW5nICs9IFwiIENcIitwYXRoTm9kZXMub1tpLTFdWzBdKycsJytwYXRoTm9kZXMub1tpLTFdWzFdICsgXCIgXCIrcGF0aE5vZGVzLmlbMF1bMF0rJywnK3BhdGhOb2Rlcy5pWzBdWzFdICsgXCIgXCIrcGF0aE5vZGVzLnZbMF1bMF0rJywnK3BhdGhOb2Rlcy52WzBdWzFdO1xuaWYocGF0aE5vZGVzLmMmJmxlbj4xKXtwYXRoU3RyaW5nKz0nIEMnK3BhdGhOb2Rlcy5vW2ktMV1bMF0rJywnK3BhdGhOb2Rlcy5vW2ktMV1bMV0rJyAnK3BhdGhOb2Rlcy5pWzBdWzBdKycsJytwYXRoTm9kZXMuaVswXVsxXSsnICcrcGF0aE5vZGVzLnZbMF1bMF0rJywnK3BhdGhOb2Rlcy52WzBdWzFdO30vLyBwYXRoTm9kZXMuX19yZW5kZXJlZFN0cmluZyA9IHBhdGhTdHJpbmc7XG5pZih2aWV3RGF0YS5sYXN0UGF0aCE9PXBhdGhTdHJpbmcpe3ZhciBwYXRoU2hhcGVWYWx1ZT0nJztpZih2aWV3RGF0YS5lbGVtKXtpZihwYXRoTm9kZXMuYyl7cGF0aFNoYXBlVmFsdWU9cGF0aERhdGEuaW52P3RoaXMuc29saWRQYXRoK3BhdGhTdHJpbmc6cGF0aFN0cmluZzt9dmlld0RhdGEuZWxlbS5zZXRBdHRyaWJ1dGUoJ2QnLHBhdGhTaGFwZVZhbHVlKTt9dmlld0RhdGEubGFzdFBhdGg9cGF0aFN0cmluZzt9fTtNYXNrRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudD1udWxsO3RoaXMuZ2xvYmFsRGF0YT1udWxsO3RoaXMubWFza0VsZW1lbnQ9bnVsbDt0aGlzLmRhdGE9bnVsbDt0aGlzLm1hc2tzUHJvcGVydGllcz1udWxsO307LyoqXHJcbiAqIEBmaWxlXHJcbiAqIEhhbmRsZXMgQUUncyBsYXllciBwYXJlbnRpbmcgcHJvcGVydHkuXHJcbiAqXHJcbiAqL2Z1bmN0aW9uIEhpZXJhcmNoeUVsZW1lbnQoKXt9SGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGU9ey8qKlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBJbml0aWFsaXplcyBoaWVyYXJjaHkgcHJvcGVydGllc1xyXG4gICAgICpcclxuICAgICAqL2luaXRIaWVyYXJjaHk6ZnVuY3Rpb24gaW5pdEhpZXJhcmNoeSgpey8vIGVsZW1lbnQncyBwYXJlbnQgbGlzdFxudGhpcy5oaWVyYXJjaHk9W107Ly8gaWYgZWxlbWVudCBpcyBwYXJlbnQgb2YgYW5vdGhlciBsYXllciBfaXNQYXJlbnQgd2lsbCBiZSB0cnVlXG50aGlzLl9pc1BhcmVudD1mYWxzZTt0aGlzLmNoZWNrUGFyZW50aW5nKCk7fSwvKipcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogU2V0cyBsYXllcidzIGhpZXJhcmNoeS5cclxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGhpZXJhcmNoXHJcbiAgICAgKiBsYXllcidzIHBhcmVudCBsaXN0XHJcbiAgICAgKlxyXG4gICAgICovc2V0SGllcmFyY2h5OmZ1bmN0aW9uIHNldEhpZXJhcmNoeShoaWVyYXJjaHkpe3RoaXMuaGllcmFyY2h5PWhpZXJhcmNoeTt9LC8qKlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBTZXRzIGxheWVyIGFzIHBhcmVudC5cclxuICAgICAqXHJcbiAgICAgKi9zZXRBc1BhcmVudDpmdW5jdGlvbiBzZXRBc1BhcmVudCgpe3RoaXMuX2lzUGFyZW50PXRydWU7fSwvKipcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogU2VhcmNoZXMgbGF5ZXIncyBwYXJlbnRpbmcgY2hhaW5cclxuICAgICAqXHJcbiAgICAgKi9jaGVja1BhcmVudGluZzpmdW5jdGlvbiBjaGVja1BhcmVudGluZygpe2lmKHRoaXMuZGF0YS5wYXJlbnQhPT11bmRlZmluZWQpe3RoaXMuY29tcC5idWlsZEVsZW1lbnRQYXJlbnRpbmcodGhpcyx0aGlzLmRhdGEucGFyZW50LFtdKTt9fX07LyoqXHJcbiAqIEBmaWxlXHJcbiAqIEhhbmRsZXMgZWxlbWVudCdzIGxheWVyIGZyYW1lIHVwZGF0ZS5cclxuICogQ2hlY2tzIGxheWVyIGluIHBvaW50IGFuZCBvdXQgcG9pbnRcclxuICpcclxuICovZnVuY3Rpb24gRnJhbWVFbGVtZW50KCl7fUZyYW1lRWxlbWVudC5wcm90b3R5cGU9ey8qKlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBJbml0aWFsaXplcyBmcmFtZSByZWxhdGVkIHByb3BlcnRpZXMuXHJcbiAgICAgKlxyXG4gICAgICovaW5pdEZyYW1lOmZ1bmN0aW9uIGluaXRGcmFtZSgpey8vIHNldCB0byB0cnVlIHdoZW4gaW5wb2ludCBpcyByZW5kZXJlZFxudGhpcy5faXNGaXJzdEZyYW1lPWZhbHNlOy8vIGxpc3Qgb2YgYW5pbWF0ZWQgcHJvcGVydGllc1xudGhpcy5keW5hbWljUHJvcGVydGllcz1bXTsvLyBJZiBsYXllciBoYXMgYmVlbiBtb2RpZmllZCBpbiBjdXJyZW50IHRpY2sgdGhpcyB3aWxsIGJlIHRydWVcbnRoaXMuX21kZj1mYWxzZTt9LC8qKlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBDYWxjdWxhdGVzIGFsbCBkeW5hbWljIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1cclxuICAgICAqIGN1cnJlbnQgZnJhbWUgbnVtYmVyIGluIExheWVyJ3MgdGltZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1Zpc2libGVcclxuICAgICAqIGlmIGxheWVycyBpcyBjdXJyZW50bHkgaW4gcmFuZ2VcclxuICAgICAqXHJcbiAgICAgKi9wcmVwYXJlUHJvcGVydGllczpmdW5jdGlvbiBwcmVwYXJlUHJvcGVydGllcyhudW0saXNWaXNpYmxlKXt2YXIgaTt2YXIgbGVuPXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoaXNWaXNpYmxlfHx0aGlzLl9pc1BhcmVudCYmdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5wcm9wVHlwZT09PSd0cmFuc2Zvcm0nKXt0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLmdldFZhbHVlKCk7aWYodGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5fbWRmKXt0aGlzLmdsb2JhbERhdGEuX21kZj10cnVlO3RoaXMuX21kZj10cnVlO319fX0sYWRkRHluYW1pY1Byb3BlcnR5OmZ1bmN0aW9uIGFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKXtpZih0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCk9PT0tMSl7dGhpcy5keW5hbWljUHJvcGVydGllcy5wdXNoKHByb3ApO319fTsvKiBnbG9iYWwgVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LCBNYXRyaXggKi9mdW5jdGlvbiBUcmFuc2Zvcm1FbGVtZW50KCl7fVRyYW5zZm9ybUVsZW1lbnQucHJvdG90eXBlPXtpbml0VHJhbnNmb3JtOmZ1bmN0aW9uIGluaXRUcmFuc2Zvcm0oKXt0aGlzLmZpbmFsVHJhbnNmb3JtPXttUHJvcDp0aGlzLmRhdGEua3M/VHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KHRoaXMsdGhpcy5kYXRhLmtzLHRoaXMpOntvOjB9LF9tYXRNZGY6ZmFsc2UsX29wTWRmOmZhbHNlLG1hdDpuZXcgTWF0cml4KCl9O2lmKHRoaXMuZGF0YS5hbyl7dGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5hdXRvT3JpZW50ZWQ9dHJ1ZTt9Ly8gVE9ETzogY2hlY2sgVFlQRSAxMTogR3VpZGVkIGVsZW1lbnRzXG5pZih0aGlzLmRhdGEudHkhPT0xMSl7Ly8gdGhpcy5jcmVhdGVFbGVtZW50cygpO1xufX0scmVuZGVyVHJhbnNmb3JtOmZ1bmN0aW9uIHJlbmRlclRyYW5zZm9ybSgpe3RoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmPXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Auby5fbWRmfHx0aGlzLl9pc0ZpcnN0RnJhbWU7dGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmPXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AuX21kZnx8dGhpcy5faXNGaXJzdEZyYW1lO2lmKHRoaXMuaGllcmFyY2h5KXt2YXIgbWF0O3ZhciBmaW5hbE1hdD10aGlzLmZpbmFsVHJhbnNmb3JtLm1hdDt2YXIgaT0wO3ZhciBsZW49dGhpcy5oaWVyYXJjaHkubGVuZ3RoOy8vIENoZWNraW5nIGlmIGFueSBvZiB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cmljZXMgaW4gdGhlIGhpZXJhcmNoeSBjaGFpbiBoYXMgY2hhbmdlZC5cbmlmKCF0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYpe3doaWxlKGk8bGVuKXtpZih0aGlzLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5fbWRmKXt0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGY9dHJ1ZTticmVhazt9aSs9MTt9fWlmKHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZil7bWF0PXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Audi5wcm9wcztmaW5hbE1hdC5jbG9uZUZyb21Qcm9wcyhtYXQpO2ZvcihpPTA7aTxsZW47aSs9MSl7bWF0PXRoaXMuaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnYucHJvcHM7ZmluYWxNYXQudHJhbnNmb3JtKG1hdFswXSxtYXRbMV0sbWF0WzJdLG1hdFszXSxtYXRbNF0sbWF0WzVdLG1hdFs2XSxtYXRbN10sbWF0WzhdLG1hdFs5XSxtYXRbMTBdLG1hdFsxMV0sbWF0WzEyXSxtYXRbMTNdLG1hdFsxNF0sbWF0WzE1XSk7fX19fSxnbG9iYWxUb0xvY2FsOmZ1bmN0aW9uIGdsb2JhbFRvTG9jYWwocHQpe3ZhciB0cmFuc2Zvcm1zPVtdO3RyYW5zZm9ybXMucHVzaCh0aGlzLmZpbmFsVHJhbnNmb3JtKTt2YXIgZmxhZz10cnVlO3ZhciBjb21wPXRoaXMuY29tcDt3aGlsZShmbGFnKXtpZihjb21wLmZpbmFsVHJhbnNmb3JtKXtpZihjb21wLmRhdGEuaGFzTWFzayl7dHJhbnNmb3Jtcy5zcGxpY2UoMCwwLGNvbXAuZmluYWxUcmFuc2Zvcm0pO31jb21wPWNvbXAuY29tcDt9ZWxzZSB7ZmxhZz1mYWxzZTt9fXZhciBpO3ZhciBsZW49dHJhbnNmb3Jtcy5sZW5ndGg7dmFyIHB0TmV3O2ZvcihpPTA7aTxsZW47aSs9MSl7cHROZXc9dHJhbnNmb3Jtc1tpXS5tYXQuYXBwbHlUb1BvaW50QXJyYXkoMCwwLDApOy8vIHB0TmV3ID0gdHJhbnNmb3Jtc1tpXS5tYXQuYXBwbHlUb1BvaW50QXJyYXkocHRbMF0scHRbMV0scHRbMl0pO1xucHQ9W3B0WzBdLXB0TmV3WzBdLHB0WzFdLXB0TmV3WzFdLDBdO31yZXR1cm4gcHQ7fSxtSGVscGVyOm5ldyBNYXRyaXgoKX07ZnVuY3Rpb24gUmVuZGVyYWJsZUVsZW1lbnQoKXt9UmVuZGVyYWJsZUVsZW1lbnQucHJvdG90eXBlPXtpbml0UmVuZGVyYWJsZTpmdW5jdGlvbiBpbml0UmVuZGVyYWJsZSgpey8vIGxheWVyJ3MgdmlzaWJpbGl0eSByZWxhdGVkIHRvIGlucG9pbnQgYW5kIG91dHBvaW50LiBSZW5hbWUgaXNWaXNpYmxlIHRvIGlzSW5SYW5nZVxudGhpcy5pc0luUmFuZ2U9ZmFsc2U7Ly8gbGF5ZXIncyBkaXNwbGF5IHN0YXRlXG50aGlzLmhpZGRlbj1mYWxzZTsvLyBJZiBsYXllcidzIHRyYW5zcGFyZW5jeSBlcXVhbHMgMCwgaXQgY2FuIGJlIGhpZGRlblxudGhpcy5pc1RyYW5zcGFyZW50PWZhbHNlOy8vIGxpc3Qgb2YgYW5pbWF0ZWQgY29tcG9uZW50c1xudGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cz1bXTt9LGFkZFJlbmRlcmFibGVDb21wb25lbnQ6ZnVuY3Rpb24gYWRkUmVuZGVyYWJsZUNvbXBvbmVudChjb21wb25lbnQpe2lmKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpPT09LTEpe3RoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO319LHJlbW92ZVJlbmRlcmFibGVDb21wb25lbnQ6ZnVuY3Rpb24gcmVtb3ZlUmVuZGVyYWJsZUNvbXBvbmVudChjb21wb25lbnQpe2lmKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpIT09LTEpe3RoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuc3BsaWNlKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpLDEpO319LHByZXBhcmVSZW5kZXJhYmxlRnJhbWU6ZnVuY3Rpb24gcHJlcGFyZVJlbmRlcmFibGVGcmFtZShudW0pe3RoaXMuY2hlY2tMYXllckxpbWl0cyhudW0pO30sY2hlY2tUcmFuc3BhcmVuY3k6ZnVuY3Rpb24gY2hlY2tUcmFuc3BhcmVuY3koKXtpZih0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8udjw9MCl7aWYoIXRoaXMuaXNUcmFuc3BhcmVudCYmdGhpcy5nbG9iYWxEYXRhLnJlbmRlckNvbmZpZy5oaWRlT25UcmFuc3BhcmVudCl7dGhpcy5pc1RyYW5zcGFyZW50PXRydWU7dGhpcy5oaWRlKCk7fX1lbHNlIGlmKHRoaXMuaXNUcmFuc3BhcmVudCl7dGhpcy5pc1RyYW5zcGFyZW50PWZhbHNlO3RoaXMuc2hvdygpO319LC8qKlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBJbml0aWFsaXplcyBmcmFtZSByZWxhdGVkIHByb3BlcnRpZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bVxyXG4gICAgICogY3VycmVudCBmcmFtZSBudW1iZXIgaW4gTGF5ZXIncyB0aW1lXHJcbiAgICAgKlxyXG4gICAgICovY2hlY2tMYXllckxpbWl0czpmdW5jdGlvbiBjaGVja0xheWVyTGltaXRzKG51bSl7aWYodGhpcy5kYXRhLmlwLXRoaXMuZGF0YS5zdDw9bnVtJiZ0aGlzLmRhdGEub3AtdGhpcy5kYXRhLnN0Pm51bSl7aWYodGhpcy5pc0luUmFuZ2UhPT10cnVlKXt0aGlzLmdsb2JhbERhdGEuX21kZj10cnVlO3RoaXMuX21kZj10cnVlO3RoaXMuaXNJblJhbmdlPXRydWU7dGhpcy5zaG93KCk7fX1lbHNlIGlmKHRoaXMuaXNJblJhbmdlIT09ZmFsc2Upe3RoaXMuZ2xvYmFsRGF0YS5fbWRmPXRydWU7dGhpcy5pc0luUmFuZ2U9ZmFsc2U7dGhpcy5oaWRlKCk7fX0scmVuZGVyUmVuZGVyYWJsZTpmdW5jdGlvbiByZW5kZXJSZW5kZXJhYmxlKCl7dmFyIGk7dmFyIGxlbj10aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMucmVuZGVyYWJsZUNvbXBvbmVudHNbaV0ucmVuZGVyRnJhbWUodGhpcy5faXNGaXJzdEZyYW1lKTt9LyogdGhpcy5tYXNrTWFuYWdlci5yZW5kZXJGcmFtZSh0aGlzLmZpbmFsVHJhbnNmb3JtLm1hdCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIucmVuZGVyRnJhbWUodGhpcy5faXNGaXJzdEZyYW1lKTsgKi99LHNvdXJjZVJlY3RBdFRpbWU6ZnVuY3Rpb24gc291cmNlUmVjdEF0VGltZSgpe3JldHVybiB7dG9wOjAsbGVmdDowLHdpZHRoOjEwMCxoZWlnaHQ6MTAwfTt9LGdldExheWVyU2l6ZTpmdW5jdGlvbiBnZXRMYXllclNpemUoKXtpZih0aGlzLmRhdGEudHk9PT01KXtyZXR1cm4ge3c6dGhpcy5kYXRhLnRleHREYXRhLndpZHRoLGg6dGhpcy5kYXRhLnRleHREYXRhLmhlaWdodH07fXJldHVybiB7dzp0aGlzLmRhdGEud2lkdGgsaDp0aGlzLmRhdGEuaGVpZ2h0fTt9fTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBSZW5kZXJhYmxlRWxlbWVudCwgY3JlYXRlUHJveHlGdW5jdGlvbiAqL2Z1bmN0aW9uIFJlbmRlcmFibGVET01FbGVtZW50KCl7fShmdW5jdGlvbigpe3ZhciBfcHJvdG90eXBlPXtpbml0RWxlbWVudDpmdW5jdGlvbiBpbml0RWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7dGhpcy5pbml0RnJhbWUoKTt0aGlzLmluaXRCYXNlRGF0YShkYXRhLGdsb2JhbERhdGEsY29tcCk7dGhpcy5pbml0VHJhbnNmb3JtKGRhdGEsZ2xvYmFsRGF0YSxjb21wKTt0aGlzLmluaXRIaWVyYXJjaHkoKTt0aGlzLmluaXRSZW5kZXJhYmxlKCk7dGhpcy5pbml0UmVuZGVyZXJFbGVtZW50KCk7dGhpcy5jcmVhdGVDb250YWluZXJFbGVtZW50cygpO3RoaXMuY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKTt0aGlzLmNyZWF0ZUNvbnRlbnQoKTt0aGlzLmhpZGUoKTt9LGhpZGU6ZnVuY3Rpb24gaGlkZSgpe2lmKCF0aGlzLmhpZGRlbiYmKCF0aGlzLmlzSW5SYW5nZXx8dGhpcy5pc1RyYW5zcGFyZW50KSl7dmFyIGVsZW09dGhpcy5iYXNlRWxlbWVudHx8dGhpcy5sYXllckVsZW1lbnQ7ZWxlbS5zdHlsZS5kaXNwbGF5PSdub25lJzt0aGlzLmhpZGRlbj10cnVlO319LHNob3c6ZnVuY3Rpb24gc2hvdygpe2lmKHRoaXMuaXNJblJhbmdlJiYhdGhpcy5pc1RyYW5zcGFyZW50KXtpZighdGhpcy5kYXRhLmhkKXt2YXIgZWxlbT10aGlzLmJhc2VFbGVtZW50fHx0aGlzLmxheWVyRWxlbWVudDtlbGVtLnN0eWxlLmRpc3BsYXk9J2Jsb2NrJzt9dGhpcy5oaWRkZW49ZmFsc2U7dGhpcy5faXNGaXJzdEZyYW1lPXRydWU7fX0scmVuZGVyRnJhbWU6ZnVuY3Rpb24gcmVuZGVyRnJhbWUoKXsvLyBJZiBpdCBpcyBleHBvcnRlZCBhcyBoaWRkZW4gKGRhdGEuaGQgPT09IHRydWUpIG5vIG5lZWQgdG8gcmVuZGVyXG4vLyBJZiBpdCBpcyBub3QgdmlzaWJsZSBubyBuZWVkIHRvIHJlbmRlclxuaWYodGhpcy5kYXRhLmhkfHx0aGlzLmhpZGRlbil7cmV0dXJuO310aGlzLnJlbmRlclRyYW5zZm9ybSgpO3RoaXMucmVuZGVyUmVuZGVyYWJsZSgpO3RoaXMucmVuZGVyRWxlbWVudCgpO3RoaXMucmVuZGVySW5uZXJDb250ZW50KCk7aWYodGhpcy5faXNGaXJzdEZyYW1lKXt0aGlzLl9pc0ZpcnN0RnJhbWU9ZmFsc2U7fX0scmVuZGVySW5uZXJDb250ZW50OmZ1bmN0aW9uIHJlbmRlcklubmVyQ29udGVudCgpe30scHJlcGFyZUZyYW1lOmZ1bmN0aW9uIHByZXBhcmVGcmFtZShudW0pe3RoaXMuX21kZj1mYWxzZTt0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKTt0aGlzLnByZXBhcmVQcm9wZXJ0aWVzKG51bSx0aGlzLmlzSW5SYW5nZSk7dGhpcy5jaGVja1RyYW5zcGFyZW5jeSgpO30sZGVzdHJveTpmdW5jdGlvbiBkZXN0cm95KCl7dGhpcy5pbm5lckVsZW09bnVsbDt0aGlzLmRlc3Ryb3lCYXNlRWxlbWVudCgpO319O2V4dGVuZFByb3RvdHlwZShbUmVuZGVyYWJsZUVsZW1lbnQsY3JlYXRlUHJveHlGdW5jdGlvbihfcHJvdG90eXBlKV0sUmVuZGVyYWJsZURPTUVsZW1lbnQpO30pKCk7LyogZXhwb3J0ZWQgUHJvY2Vzc2VkRWxlbWVudCAqL2Z1bmN0aW9uIFByb2Nlc3NlZEVsZW1lbnQoZWxlbWVudCxwb3NpdGlvbil7dGhpcy5lbGVtPWVsZW1lbnQ7dGhpcy5wb3M9cG9zaXRpb247fS8qIGdsb2JhbCBjcmVhdGVOUyAqL2Z1bmN0aW9uIFNWR1N0eWxlRGF0YShkYXRhLGxldmVsKXt0aGlzLmRhdGE9ZGF0YTt0aGlzLnR5cGU9ZGF0YS50eTt0aGlzLmQ9Jyc7dGhpcy5sdmw9bGV2ZWw7dGhpcy5fbWRmPWZhbHNlO3RoaXMuY2xvc2VkPWRhdGEuaGQ9PT10cnVlO3RoaXMucEVsZW09Y3JlYXRlTlMoJ3BhdGgnKTt0aGlzLm1zRWxlbT1udWxsO31TVkdTdHlsZURhdGEucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5kPScnO3RoaXMuX21kZj1mYWxzZTt9O2Z1bmN0aW9uIFNWR1NoYXBlRGF0YSh0cmFuc2Zvcm1lcnMsbGV2ZWwsc2hhcGUpe3RoaXMuY2FjaGVzPVtdO3RoaXMuc3R5bGVzPVtdO3RoaXMudHJhbnNmb3JtZXJzPXRyYW5zZm9ybWVyczt0aGlzLmxTdHI9Jyc7dGhpcy5zaD1zaGFwZTt0aGlzLmx2bD1sZXZlbDsvLyBUT0RPIGZpbmQgaWYgdGhlcmUgYXJlIHNvbWUgY2FzZXMgd2hlcmUgX2lzQW5pbWF0ZWQgY2FuIGJlIGZhbHNlLlxuLy8gRm9yIG5vdywgc2luY2Ugc2hhcGVzIGFkZCB1cCB3aXRoIG90aGVyIHNoYXBlcy4gVGhleSBoYXZlIHRvIGJlIGNhbGN1bGF0ZWQgZXZlcnkgdGltZS5cbi8vIE9uZSB3YXkgb2YgZmluZGluZyBvdXQgaXMgY2hlY2tpbmcgaWYgYWxsIHN0eWxlcyBhc3NvY2lhdGVkIHRvIHRoaXMgc2hhcGUgZGVwZW5kIG9ubHkgb2YgdGhpcyBzaGFwZVxudGhpcy5faXNBbmltYXRlZD0hIXNoYXBlLms7Ly8gVE9ETzogY29tbWVudGluZyB0aGlzIGZvciBub3cgc2luY2UgYWxsIHNoYXBlcyBhcmUgYW5pbWF0ZWRcbnZhciBpPTA7dmFyIGxlbj10cmFuc2Zvcm1lcnMubGVuZ3RoO3doaWxlKGk8bGVuKXtpZih0cmFuc2Zvcm1lcnNbaV0ubVByb3BzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCl7dGhpcy5faXNBbmltYXRlZD10cnVlO2JyZWFrO31pKz0xO319U1ZHU2hhcGVEYXRhLnByb3RvdHlwZS5zZXRBc0FuaW1hdGVkPWZ1bmN0aW9uKCl7dGhpcy5faXNBbmltYXRlZD10cnVlO307LyogZXhwb3J0ZWQgU1ZHVHJhbnNmb3JtRGF0YSAqL2Z1bmN0aW9uIFNWR1RyYW5zZm9ybURhdGEobVByb3BzLG9wLGNvbnRhaW5lcil7dGhpcy50cmFuc2Zvcm09e21Qcm9wczptUHJvcHMsb3A6b3AsY29udGFpbmVyOmNvbnRhaW5lcn07dGhpcy5lbGVtZW50cz1bXTt0aGlzLl9pc0FuaW1hdGVkPXRoaXMudHJhbnNmb3JtLm1Qcm9wcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGh8fHRoaXMudHJhbnNmb3JtLm9wLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7fS8qIGdsb2JhbCBEYXNoUHJvcGVydHksIFByb3BlcnR5RmFjdG9yeSwgZXh0ZW5kUHJvdG90eXBlLCBEeW5hbWljUHJvcGVydHlDb250YWluZXIgKi9mdW5jdGlvbiBTVkdTdHJva2VTdHlsZURhdGEoZWxlbSxkYXRhLHN0eWxlT2Ipe3RoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTt0aGlzLmdldFZhbHVlPXRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO3RoaXMubz1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEubywwLDAuMDEsdGhpcyk7dGhpcy53PVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS53LDAsbnVsbCx0aGlzKTt0aGlzLmQ9bmV3IERhc2hQcm9wZXJ0eShlbGVtLGRhdGEuZHx8e30sJ3N2ZycsdGhpcyk7dGhpcy5jPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5jLDEsMjU1LHRoaXMpO3RoaXMuc3R5bGU9c3R5bGVPYjt0aGlzLl9pc0FuaW1hdGVkPSEhdGhpcy5faXNBbmltYXRlZDt9ZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLFNWR1N0cm9rZVN0eWxlRGF0YSk7LyogZ2xvYmFsIFByb3BlcnR5RmFjdG9yeSwgZXh0ZW5kUHJvdG90eXBlLCBEeW5hbWljUHJvcGVydHlDb250YWluZXIgKi9mdW5jdGlvbiBTVkdGaWxsU3R5bGVEYXRhKGVsZW0sZGF0YSxzdHlsZU9iKXt0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7dGhpcy5nZXRWYWx1ZT10aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllczt0aGlzLm89UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLm8sMCwwLjAxLHRoaXMpO3RoaXMuYz1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEuYywxLDI1NSx0aGlzKTt0aGlzLnN0eWxlPXN0eWxlT2I7fWV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSxTVkdGaWxsU3R5bGVEYXRhKTsvKiBnbG9iYWwgUHJvcGVydHlGYWN0b3J5LCBkZWdUb1JhZHMsIEdyYWRpZW50UHJvcGVydHksIGNyZWF0ZUVsZW1lbnRJRCwgY3JlYXRlTlMsIGxvY2F0aW9uSHJlZixcclxuZXh0ZW5kUHJvdG90eXBlLCBEeW5hbWljUHJvcGVydHlDb250YWluZXIgKi9mdW5jdGlvbiBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEoZWxlbSxkYXRhLHN0eWxlT2Ipe3RoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTt0aGlzLmdldFZhbHVlPXRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO3RoaXMuaW5pdEdyYWRpZW50RGF0YShlbGVtLGRhdGEsc3R5bGVPYik7fVNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YS5wcm90b3R5cGUuaW5pdEdyYWRpZW50RGF0YT1mdW5jdGlvbihlbGVtLGRhdGEsc3R5bGVPYil7dGhpcy5vPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5vLDAsMC4wMSx0aGlzKTt0aGlzLnM9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnMsMSxudWxsLHRoaXMpO3RoaXMuZT1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEuZSwxLG51bGwsdGhpcyk7dGhpcy5oPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5ofHx7azowfSwwLDAuMDEsdGhpcyk7dGhpcy5hPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS5hfHx7azowfSwwLGRlZ1RvUmFkcyx0aGlzKTt0aGlzLmc9bmV3IEdyYWRpZW50UHJvcGVydHkoZWxlbSxkYXRhLmcsdGhpcyk7dGhpcy5zdHlsZT1zdHlsZU9iO3RoaXMuc3RvcHM9W107dGhpcy5zZXRHcmFkaWVudERhdGEoc3R5bGVPYi5wRWxlbSxkYXRhKTt0aGlzLnNldEdyYWRpZW50T3BhY2l0eShkYXRhLHN0eWxlT2IpO3RoaXMuX2lzQW5pbWF0ZWQ9ISF0aGlzLl9pc0FuaW1hdGVkO307U1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLnByb3RvdHlwZS5zZXRHcmFkaWVudERhdGE9ZnVuY3Rpb24ocGF0aEVsZW1lbnQsZGF0YSl7dmFyIGdyYWRpZW50SWQ9Y3JlYXRlRWxlbWVudElEKCk7dmFyIGdmaWxsPWNyZWF0ZU5TKGRhdGEudD09PTE/J2xpbmVhckdyYWRpZW50JzoncmFkaWFsR3JhZGllbnQnKTtnZmlsbC5zZXRBdHRyaWJ1dGUoJ2lkJyxncmFkaWVudElkKTtnZmlsbC5zZXRBdHRyaWJ1dGUoJ3NwcmVhZE1ldGhvZCcsJ3BhZCcpO2dmaWxsLnNldEF0dHJpYnV0ZSgnZ3JhZGllbnRVbml0cycsJ3VzZXJTcGFjZU9uVXNlJyk7dmFyIHN0b3BzPVtdO3ZhciBzdG9wO3ZhciBqO3ZhciBqTGVuO2pMZW49ZGF0YS5nLnAqNDtmb3Ioaj0wO2o8akxlbjtqKz00KXtzdG9wPWNyZWF0ZU5TKCdzdG9wJyk7Z2ZpbGwuYXBwZW5kQ2hpbGQoc3RvcCk7c3RvcHMucHVzaChzdG9wKTt9cGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKGRhdGEudHk9PT0nZ2YnPydmaWxsJzonc3Ryb2tlJywndXJsKCcrbG9jYXRpb25IcmVmKycjJytncmFkaWVudElkKycpJyk7dGhpcy5nZj1nZmlsbDt0aGlzLmNzdD1zdG9wczt9O1NWR0dyYWRpZW50RmlsbFN0eWxlRGF0YS5wcm90b3R5cGUuc2V0R3JhZGllbnRPcGFjaXR5PWZ1bmN0aW9uKGRhdGEsc3R5bGVPYil7aWYodGhpcy5nLl9oYXNPcGFjaXR5JiYhdGhpcy5nLl9jb2xsYXBzYWJsZSl7dmFyIHN0b3A7dmFyIGo7dmFyIGpMZW47dmFyIG1hc2s9Y3JlYXRlTlMoJ21hc2snKTt2YXIgbWFza0VsZW1lbnQ9Y3JlYXRlTlMoJ3BhdGgnKTttYXNrLmFwcGVuZENoaWxkKG1hc2tFbGVtZW50KTt2YXIgb3BhY2l0eUlkPWNyZWF0ZUVsZW1lbnRJRCgpO3ZhciBtYXNrSWQ9Y3JlYXRlRWxlbWVudElEKCk7bWFzay5zZXRBdHRyaWJ1dGUoJ2lkJyxtYXNrSWQpO3ZhciBvcEZpbGw9Y3JlYXRlTlMoZGF0YS50PT09MT8nbGluZWFyR3JhZGllbnQnOidyYWRpYWxHcmFkaWVudCcpO29wRmlsbC5zZXRBdHRyaWJ1dGUoJ2lkJyxvcGFjaXR5SWQpO29wRmlsbC5zZXRBdHRyaWJ1dGUoJ3NwcmVhZE1ldGhvZCcsJ3BhZCcpO29wRmlsbC5zZXRBdHRyaWJ1dGUoJ2dyYWRpZW50VW5pdHMnLCd1c2VyU3BhY2VPblVzZScpO2pMZW49ZGF0YS5nLmsua1swXS5zP2RhdGEuZy5rLmtbMF0ucy5sZW5ndGg6ZGF0YS5nLmsuay5sZW5ndGg7dmFyIHN0b3BzPXRoaXMuc3RvcHM7Zm9yKGo9ZGF0YS5nLnAqNDtqPGpMZW47ais9Mil7c3RvcD1jcmVhdGVOUygnc3RvcCcpO3N0b3Auc2V0QXR0cmlidXRlKCdzdG9wLWNvbG9yJywncmdiKDI1NSwyNTUsMjU1KScpO29wRmlsbC5hcHBlbmRDaGlsZChzdG9wKTtzdG9wcy5wdXNoKHN0b3ApO31tYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoZGF0YS50eT09PSdnZic/J2ZpbGwnOidzdHJva2UnLCd1cmwoJytsb2NhdGlvbkhyZWYrJyMnK29wYWNpdHlJZCsnKScpO3RoaXMub2Y9b3BGaWxsO3RoaXMubXM9bWFzazt0aGlzLm9zdD1zdG9wczt0aGlzLm1hc2tJZD1tYXNrSWQ7c3R5bGVPYi5tc0VsZW09bWFza0VsZW1lbnQ7fX07ZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YSk7LyogZ2xvYmFsIFByb3BlcnR5RmFjdG9yeSwgRGFzaFByb3BlcnR5LCBleHRlbmRQcm90b3R5cGUsIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YSwgRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyICovZnVuY3Rpb24gU1ZHR3JhZGllbnRTdHJva2VTdHlsZURhdGEoZWxlbSxkYXRhLHN0eWxlT2Ipe3RoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTt0aGlzLmdldFZhbHVlPXRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO3RoaXMudz1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEudywwLG51bGwsdGhpcyk7dGhpcy5kPW5ldyBEYXNoUHJvcGVydHkoZWxlbSxkYXRhLmR8fHt9LCdzdmcnLHRoaXMpO3RoaXMuaW5pdEdyYWRpZW50RGF0YShlbGVtLGRhdGEsc3R5bGVPYik7dGhpcy5faXNBbmltYXRlZD0hIXRoaXMuX2lzQW5pbWF0ZWQ7fWV4dGVuZFByb3RvdHlwZShbU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sU1ZHR3JhZGllbnRTdHJva2VTdHlsZURhdGEpOy8qIGdsb2JhbCBjcmVhdGVOUyAqLyAvKiBleHBvcnRlZCBTaGFwZUdyb3VwRGF0YSAqL2Z1bmN0aW9uIFNoYXBlR3JvdXBEYXRhKCl7dGhpcy5pdD1bXTt0aGlzLnByZXZWaWV3RGF0YT1bXTt0aGlzLmdyPWNyZWF0ZU5TKCdnJyk7fS8qIGdsb2JhbCBNYXRyaXgsIGJ1aWxkU2hhcGVTdHJpbmcsIGJtRmxvb3IgKi8gLyogZXhwb3J0ZWQgU1ZHRWxlbWVudHNSZW5kZXJlciAqL3ZhciBTVkdFbGVtZW50c1JlbmRlcmVyPWZ1bmN0aW9uKCl7dmFyIF9pZGVudGl0eU1hdHJpeD1uZXcgTWF0cml4KCk7dmFyIF9tYXRyaXhIZWxwZXI9bmV3IE1hdHJpeCgpO3ZhciBvYj17Y3JlYXRlUmVuZGVyRnVuY3Rpb246Y3JlYXRlUmVuZGVyRnVuY3Rpb259O2Z1bmN0aW9uIGNyZWF0ZVJlbmRlckZ1bmN0aW9uKGRhdGEpe3N3aXRjaChkYXRhLnR5KXtjYXNlJ2ZsJzpyZXR1cm4gcmVuZGVyRmlsbDtjYXNlJ2dmJzpyZXR1cm4gcmVuZGVyR3JhZGllbnQ7Y2FzZSdncyc6cmV0dXJuIHJlbmRlckdyYWRpZW50U3Ryb2tlO2Nhc2Unc3QnOnJldHVybiByZW5kZXJTdHJva2U7Y2FzZSdzaCc6Y2FzZSdlbCc6Y2FzZSdyYyc6Y2FzZSdzcic6cmV0dXJuIHJlbmRlclBhdGg7Y2FzZSd0cic6cmV0dXJuIHJlbmRlckNvbnRlbnRUcmFuc2Zvcm07ZGVmYXVsdDpyZXR1cm4gbnVsbDt9fWZ1bmN0aW9uIHJlbmRlckNvbnRlbnRUcmFuc2Zvcm0oc3R5bGVEYXRhLGl0ZW1EYXRhLGlzRmlyc3RGcmFtZSl7aWYoaXNGaXJzdEZyYW1lfHxpdGVtRGF0YS50cmFuc2Zvcm0ub3AuX21kZil7aXRlbURhdGEudHJhbnNmb3JtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLGl0ZW1EYXRhLnRyYW5zZm9ybS5vcC52KTt9aWYoaXNGaXJzdEZyYW1lfHxpdGVtRGF0YS50cmFuc2Zvcm0ubVByb3BzLl9tZGYpe2l0ZW1EYXRhLnRyYW5zZm9ybS5jb250YWluZXIuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLGl0ZW1EYXRhLnRyYW5zZm9ybS5tUHJvcHMudi50bzJkQ1NTKCkpO319ZnVuY3Rpb24gcmVuZGVyUGF0aChzdHlsZURhdGEsaXRlbURhdGEsaXNGaXJzdEZyYW1lKXt2YXIgajt2YXIgakxlbjt2YXIgcGF0aFN0cmluZ1RyYW5zZm9ybWVkO3ZhciByZWRyYXc7dmFyIHBhdGhOb2Rlczt2YXIgbDt2YXIgbExlbj1pdGVtRGF0YS5zdHlsZXMubGVuZ3RoO3ZhciBsdmw9aXRlbURhdGEubHZsO3ZhciBwYXRoczt2YXIgbWF0O3ZhciBwcm9wczt2YXIgaXRlcmF0aW9uczt2YXIgaztmb3IobD0wO2w8bExlbjtsKz0xKXtyZWRyYXc9aXRlbURhdGEuc2guX21kZnx8aXNGaXJzdEZyYW1lO2lmKGl0ZW1EYXRhLnN0eWxlc1tsXS5sdmw8bHZsKXttYXQ9X21hdHJpeEhlbHBlci5yZXNldCgpO2l0ZXJhdGlvbnM9bHZsLWl0ZW1EYXRhLnN0eWxlc1tsXS5sdmw7az1pdGVtRGF0YS50cmFuc2Zvcm1lcnMubGVuZ3RoLTE7d2hpbGUoIXJlZHJhdyYmaXRlcmF0aW9ucz4wKXtyZWRyYXc9aXRlbURhdGEudHJhbnNmb3JtZXJzW2tdLm1Qcm9wcy5fbWRmfHxyZWRyYXc7aXRlcmF0aW9ucy09MTtrLT0xO31pZihyZWRyYXcpe2l0ZXJhdGlvbnM9bHZsLWl0ZW1EYXRhLnN0eWxlc1tsXS5sdmw7az1pdGVtRGF0YS50cmFuc2Zvcm1lcnMubGVuZ3RoLTE7d2hpbGUoaXRlcmF0aW9ucz4wKXtwcm9wcz1pdGVtRGF0YS50cmFuc2Zvcm1lcnNba10ubVByb3BzLnYucHJvcHM7bWF0LnRyYW5zZm9ybShwcm9wc1swXSxwcm9wc1sxXSxwcm9wc1syXSxwcm9wc1szXSxwcm9wc1s0XSxwcm9wc1s1XSxwcm9wc1s2XSxwcm9wc1s3XSxwcm9wc1s4XSxwcm9wc1s5XSxwcm9wc1sxMF0scHJvcHNbMTFdLHByb3BzWzEyXSxwcm9wc1sxM10scHJvcHNbMTRdLHByb3BzWzE1XSk7aXRlcmF0aW9ucy09MTtrLT0xO319fWVsc2Uge21hdD1faWRlbnRpdHlNYXRyaXg7fXBhdGhzPWl0ZW1EYXRhLnNoLnBhdGhzO2pMZW49cGF0aHMuX2xlbmd0aDtpZihyZWRyYXcpe3BhdGhTdHJpbmdUcmFuc2Zvcm1lZD0nJztmb3Ioaj0wO2o8akxlbjtqKz0xKXtwYXRoTm9kZXM9cGF0aHMuc2hhcGVzW2pdO2lmKHBhdGhOb2RlcyYmcGF0aE5vZGVzLl9sZW5ndGgpe3BhdGhTdHJpbmdUcmFuc2Zvcm1lZCs9YnVpbGRTaGFwZVN0cmluZyhwYXRoTm9kZXMscGF0aE5vZGVzLl9sZW5ndGgscGF0aE5vZGVzLmMsbWF0KTt9fWl0ZW1EYXRhLmNhY2hlc1tsXT1wYXRoU3RyaW5nVHJhbnNmb3JtZWQ7fWVsc2Uge3BhdGhTdHJpbmdUcmFuc2Zvcm1lZD1pdGVtRGF0YS5jYWNoZXNbbF07fWl0ZW1EYXRhLnN0eWxlc1tsXS5kKz1zdHlsZURhdGEuaGQ9PT10cnVlPycnOnBhdGhTdHJpbmdUcmFuc2Zvcm1lZDtpdGVtRGF0YS5zdHlsZXNbbF0uX21kZj1yZWRyYXd8fGl0ZW1EYXRhLnN0eWxlc1tsXS5fbWRmO319ZnVuY3Rpb24gcmVuZGVyRmlsbChzdHlsZURhdGEsaXRlbURhdGEsaXNGaXJzdEZyYW1lKXt2YXIgc3R5bGVFbGVtPWl0ZW1EYXRhLnN0eWxlO2lmKGl0ZW1EYXRhLmMuX21kZnx8aXNGaXJzdEZyYW1lKXtzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdmaWxsJywncmdiKCcrYm1GbG9vcihpdGVtRGF0YS5jLnZbMF0pKycsJytibUZsb29yKGl0ZW1EYXRhLmMudlsxXSkrJywnK2JtRmxvb3IoaXRlbURhdGEuYy52WzJdKSsnKScpO31pZihpdGVtRGF0YS5vLl9tZGZ8fGlzRmlyc3RGcmFtZSl7c3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JyxpdGVtRGF0YS5vLnYpO319ZnVuY3Rpb24gcmVuZGVyR3JhZGllbnRTdHJva2Uoc3R5bGVEYXRhLGl0ZW1EYXRhLGlzRmlyc3RGcmFtZSl7cmVuZGVyR3JhZGllbnQoc3R5bGVEYXRhLGl0ZW1EYXRhLGlzRmlyc3RGcmFtZSk7cmVuZGVyU3Ryb2tlKHN0eWxlRGF0YSxpdGVtRGF0YSxpc0ZpcnN0RnJhbWUpO31mdW5jdGlvbiByZW5kZXJHcmFkaWVudChzdHlsZURhdGEsaXRlbURhdGEsaXNGaXJzdEZyYW1lKXt2YXIgZ2ZpbGw9aXRlbURhdGEuZ2Y7dmFyIGhhc09wYWNpdHk9aXRlbURhdGEuZy5faGFzT3BhY2l0eTt2YXIgcHQxPWl0ZW1EYXRhLnMudjt2YXIgcHQyPWl0ZW1EYXRhLmUudjtpZihpdGVtRGF0YS5vLl9tZGZ8fGlzRmlyc3RGcmFtZSl7dmFyIGF0dHI9c3R5bGVEYXRhLnR5PT09J2dmJz8nZmlsbC1vcGFjaXR5Jzonc3Ryb2tlLW9wYWNpdHknO2l0ZW1EYXRhLnN0eWxlLnBFbGVtLnNldEF0dHJpYnV0ZShhdHRyLGl0ZW1EYXRhLm8udik7fWlmKGl0ZW1EYXRhLnMuX21kZnx8aXNGaXJzdEZyYW1lKXt2YXIgYXR0cjE9c3R5bGVEYXRhLnQ9PT0xPyd4MSc6J2N4Jzt2YXIgYXR0cjI9YXR0cjE9PT0neDEnPyd5MSc6J2N5JztnZmlsbC5zZXRBdHRyaWJ1dGUoYXR0cjEscHQxWzBdKTtnZmlsbC5zZXRBdHRyaWJ1dGUoYXR0cjIscHQxWzFdKTtpZihoYXNPcGFjaXR5JiYhaXRlbURhdGEuZy5fY29sbGFwc2FibGUpe2l0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZShhdHRyMSxwdDFbMF0pO2l0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZShhdHRyMixwdDFbMV0pO319dmFyIHN0b3BzO3ZhciBpO3ZhciBsZW47dmFyIHN0b3A7aWYoaXRlbURhdGEuZy5fY21kZnx8aXNGaXJzdEZyYW1lKXtzdG9wcz1pdGVtRGF0YS5jc3Q7dmFyIGNWYWx1ZXM9aXRlbURhdGEuZy5jO2xlbj1zdG9wcy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtzdG9wPXN0b3BzW2ldO3N0b3Auc2V0QXR0cmlidXRlKCdvZmZzZXQnLGNWYWx1ZXNbaSo0XSsnJScpO3N0b3Auc2V0QXR0cmlidXRlKCdzdG9wLWNvbG9yJywncmdiKCcrY1ZhbHVlc1tpKjQrMV0rJywnK2NWYWx1ZXNbaSo0KzJdKycsJytjVmFsdWVzW2kqNCszXSsnKScpO319aWYoaGFzT3BhY2l0eSYmKGl0ZW1EYXRhLmcuX29tZGZ8fGlzRmlyc3RGcmFtZSkpe3ZhciBvVmFsdWVzPWl0ZW1EYXRhLmcubztpZihpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSl7c3RvcHM9aXRlbURhdGEuY3N0O31lbHNlIHtzdG9wcz1pdGVtRGF0YS5vc3Q7fWxlbj1zdG9wcy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtzdG9wPXN0b3BzW2ldO2lmKCFpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSl7c3RvcC5zZXRBdHRyaWJ1dGUoJ29mZnNldCcsb1ZhbHVlc1tpKjJdKyclJyk7fXN0b3Auc2V0QXR0cmlidXRlKCdzdG9wLW9wYWNpdHknLG9WYWx1ZXNbaSoyKzFdKTt9fWlmKHN0eWxlRGF0YS50PT09MSl7aWYoaXRlbURhdGEuZS5fbWRmfHxpc0ZpcnN0RnJhbWUpe2dmaWxsLnNldEF0dHJpYnV0ZSgneDInLHB0MlswXSk7Z2ZpbGwuc2V0QXR0cmlidXRlKCd5MicscHQyWzFdKTtpZihoYXNPcGFjaXR5JiYhaXRlbURhdGEuZy5fY29sbGFwc2FibGUpe2l0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZSgneDInLHB0MlswXSk7aXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKCd5MicscHQyWzFdKTt9fX1lbHNlIHt2YXIgcmFkO2lmKGl0ZW1EYXRhLnMuX21kZnx8aXRlbURhdGEuZS5fbWRmfHxpc0ZpcnN0RnJhbWUpe3JhZD1NYXRoLnNxcnQoTWF0aC5wb3cocHQxWzBdLXB0MlswXSwyKStNYXRoLnBvdyhwdDFbMV0tcHQyWzFdLDIpKTtnZmlsbC5zZXRBdHRyaWJ1dGUoJ3InLHJhZCk7aWYoaGFzT3BhY2l0eSYmIWl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKXtpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ3InLHJhZCk7fX1pZihpdGVtRGF0YS5lLl9tZGZ8fGl0ZW1EYXRhLmguX21kZnx8aXRlbURhdGEuYS5fbWRmfHxpc0ZpcnN0RnJhbWUpe2lmKCFyYWQpe3JhZD1NYXRoLnNxcnQoTWF0aC5wb3cocHQxWzBdLXB0MlswXSwyKStNYXRoLnBvdyhwdDFbMV0tcHQyWzFdLDIpKTt9dmFyIGFuZz1NYXRoLmF0YW4yKHB0MlsxXS1wdDFbMV0scHQyWzBdLXB0MVswXSk7dmFyIHBlcmNlbnQ9aXRlbURhdGEuaC52O2lmKHBlcmNlbnQ+PTEpe3BlcmNlbnQ9MC45OTt9ZWxzZSBpZihwZXJjZW50PD0tMSl7cGVyY2VudD0tMC45OTt9dmFyIGRpc3Q9cmFkKnBlcmNlbnQ7dmFyIHg9TWF0aC5jb3MoYW5nK2l0ZW1EYXRhLmEudikqZGlzdCtwdDFbMF07dmFyIHk9TWF0aC5zaW4oYW5nK2l0ZW1EYXRhLmEudikqZGlzdCtwdDFbMV07Z2ZpbGwuc2V0QXR0cmlidXRlKCdmeCcseCk7Z2ZpbGwuc2V0QXR0cmlidXRlKCdmeScseSk7aWYoaGFzT3BhY2l0eSYmIWl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKXtpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ2Z4Jyx4KTtpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ2Z5Jyx5KTt9fS8vIGdmaWxsLnNldEF0dHJpYnV0ZSgnZnknLCcyMDAnKTtcbn19ZnVuY3Rpb24gcmVuZGVyU3Ryb2tlKHN0eWxlRGF0YSxpdGVtRGF0YSxpc0ZpcnN0RnJhbWUpe3ZhciBzdHlsZUVsZW09aXRlbURhdGEuc3R5bGU7dmFyIGQ9aXRlbURhdGEuZDtpZihkJiYoZC5fbWRmfHxpc0ZpcnN0RnJhbWUpJiZkLmRhc2hTdHIpe3N0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLGQuZGFzaFN0cik7c3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnLGQuZGFzaG9mZnNldFswXSk7fWlmKGl0ZW1EYXRhLmMmJihpdGVtRGF0YS5jLl9tZGZ8fGlzRmlyc3RGcmFtZSkpe3N0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsJ3JnYignK2JtRmxvb3IoaXRlbURhdGEuYy52WzBdKSsnLCcrYm1GbG9vcihpdGVtRGF0YS5jLnZbMV0pKycsJytibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkrJyknKTt9aWYoaXRlbURhdGEuby5fbWRmfHxpc0ZpcnN0RnJhbWUpe3N0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1vcGFjaXR5JyxpdGVtRGF0YS5vLnYpO31pZihpdGVtRGF0YS53Ll9tZGZ8fGlzRmlyc3RGcmFtZSl7c3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJyxpdGVtRGF0YS53LnYpO2lmKHN0eWxlRWxlbS5tc0VsZW0pe3N0eWxlRWxlbS5tc0VsZW0uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLGl0ZW1EYXRhLncudik7fX19cmV0dXJuIG9iO30oKTsvKiBnbG9iYWwgTWF0cml4ICovZnVuY3Rpb24gU2hhcGVUcmFuc2Zvcm1NYW5hZ2VyKCl7dGhpcy5zZXF1ZW5jZXM9e307dGhpcy5zZXF1ZW5jZUxpc3Q9W107dGhpcy50cmFuc2Zvcm1fa2V5X2NvdW50PTA7fVNoYXBlVHJhbnNmb3JtTWFuYWdlci5wcm90b3R5cGU9e2FkZFRyYW5zZm9ybVNlcXVlbmNlOmZ1bmN0aW9uIGFkZFRyYW5zZm9ybVNlcXVlbmNlKHRyYW5zZm9ybXMpe3ZhciBpO3ZhciBsZW49dHJhbnNmb3Jtcy5sZW5ndGg7dmFyIGtleT0nXyc7Zm9yKGk9MDtpPGxlbjtpKz0xKXtrZXkrPXRyYW5zZm9ybXNbaV0udHJhbnNmb3JtLmtleSsnXyc7fXZhciBzZXF1ZW5jZT10aGlzLnNlcXVlbmNlc1trZXldO2lmKCFzZXF1ZW5jZSl7c2VxdWVuY2U9e3RyYW5zZm9ybXM6W10uY29uY2F0KHRyYW5zZm9ybXMpLGZpbmFsVHJhbnNmb3JtOm5ldyBNYXRyaXgoKSxfbWRmOmZhbHNlfTt0aGlzLnNlcXVlbmNlc1trZXldPXNlcXVlbmNlO3RoaXMuc2VxdWVuY2VMaXN0LnB1c2goc2VxdWVuY2UpO31yZXR1cm4gc2VxdWVuY2U7fSxwcm9jZXNzU2VxdWVuY2U6ZnVuY3Rpb24gcHJvY2Vzc1NlcXVlbmNlKHNlcXVlbmNlLGlzRmlyc3RGcmFtZSl7dmFyIGk9MDt2YXIgbGVuPXNlcXVlbmNlLnRyYW5zZm9ybXMubGVuZ3RoO3ZhciBfbWRmPWlzRmlyc3RGcmFtZTt3aGlsZShpPGxlbiYmIWlzRmlyc3RGcmFtZSl7aWYoc2VxdWVuY2UudHJhbnNmb3Jtc1tpXS50cmFuc2Zvcm0ubVByb3BzLl9tZGYpe19tZGY9dHJ1ZTticmVhazt9aSs9MTt9aWYoX21kZil7dmFyIHByb3BzO3NlcXVlbmNlLmZpbmFsVHJhbnNmb3JtLnJlc2V0KCk7Zm9yKGk9bGVuLTE7aT49MDtpLT0xKXtwcm9wcz1zZXF1ZW5jZS50cmFuc2Zvcm1zW2ldLnRyYW5zZm9ybS5tUHJvcHMudi5wcm9wcztzZXF1ZW5jZS5maW5hbFRyYW5zZm9ybS50cmFuc2Zvcm0ocHJvcHNbMF0scHJvcHNbMV0scHJvcHNbMl0scHJvcHNbM10scHJvcHNbNF0scHJvcHNbNV0scHJvcHNbNl0scHJvcHNbN10scHJvcHNbOF0scHJvcHNbOV0scHJvcHNbMTBdLHByb3BzWzExXSxwcm9wc1sxMl0scHJvcHNbMTNdLHByb3BzWzE0XSxwcm9wc1sxNV0pO319c2VxdWVuY2UuX21kZj1fbWRmO30scHJvY2Vzc1NlcXVlbmNlczpmdW5jdGlvbiBwcm9jZXNzU2VxdWVuY2VzKGlzRmlyc3RGcmFtZSl7dmFyIGk7dmFyIGxlbj10aGlzLnNlcXVlbmNlTGlzdC5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLnByb2Nlc3NTZXF1ZW5jZSh0aGlzLnNlcXVlbmNlTGlzdFtpXSxpc0ZpcnN0RnJhbWUpO319LGdldE5ld0tleTpmdW5jdGlvbiBnZXROZXdLZXkoKXt0aGlzLnRyYW5zZm9ybV9rZXlfY291bnQrPTE7cmV0dXJuICdfJyt0aGlzLnRyYW5zZm9ybV9rZXlfY291bnQ7fX07LyogZ2xvYmFsIFNoYXBlUHJvcGVydHlGYWN0b3J5LCBTVkdTaGFwZURhdGEgKi9mdW5jdGlvbiBDVlNoYXBlRGF0YShlbGVtZW50LGRhdGEsc3R5bGVzLHRyYW5zZm9ybXNNYW5hZ2VyKXt0aGlzLnN0eWxlZFNoYXBlcz1bXTt0aGlzLnRyPVswLDAsMCwwLDAsMF07dmFyIHR5PTQ7aWYoZGF0YS50eT09PSdyYycpe3R5PTU7fWVsc2UgaWYoZGF0YS50eT09PSdlbCcpe3R5PTY7fWVsc2UgaWYoZGF0YS50eT09PSdzcicpe3R5PTc7fXRoaXMuc2g9U2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wKGVsZW1lbnQsZGF0YSx0eSxlbGVtZW50KTt2YXIgaTt2YXIgbGVuPXN0eWxlcy5sZW5ndGg7dmFyIHN0eWxlZFNoYXBlO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoIXN0eWxlc1tpXS5jbG9zZWQpe3N0eWxlZFNoYXBlPXt0cmFuc2Zvcm1zOnRyYW5zZm9ybXNNYW5hZ2VyLmFkZFRyYW5zZm9ybVNlcXVlbmNlKHN0eWxlc1tpXS50cmFuc2Zvcm1zKSx0ck5vZGVzOltdfTt0aGlzLnN0eWxlZFNoYXBlcy5wdXNoKHN0eWxlZFNoYXBlKTtzdHlsZXNbaV0uZWxlbWVudHMucHVzaChzdHlsZWRTaGFwZSk7fX19Q1ZTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQ9U1ZHU2hhcGVEYXRhLnByb3RvdHlwZS5zZXRBc0FuaW1hdGVkOy8qIGdsb2JhbCBMYXllckV4cHJlc3Npb25JbnRlcmZhY2UsIEVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlLCBDb21wRXhwcmVzc2lvbkludGVyZmFjZSwgU2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlLFxyXG5UZXh0RXhwcmVzc2lvbkludGVyZmFjZSwgZ2V0QmxlbmRNb2RlLGNyZWF0ZUVsZW1lbnRJRCwgRWZmZWN0c01hbmFnZXIgKi9mdW5jdGlvbiBCYXNlRWxlbWVudCgpe31CYXNlRWxlbWVudC5wcm90b3R5cGU9e2NoZWNrTWFza3M6ZnVuY3Rpb24gY2hlY2tNYXNrcygpe2lmKCF0aGlzLmRhdGEuaGFzTWFzayl7cmV0dXJuIGZhbHNlO312YXIgaT0wO3ZhciBsZW49dGhpcy5kYXRhLm1hc2tzUHJvcGVydGllcy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKHRoaXMuZGF0YS5tYXNrc1Byb3BlcnRpZXNbaV0ubW9kZSE9PSduJyYmdGhpcy5kYXRhLm1hc2tzUHJvcGVydGllc1tpXS5jbCE9PWZhbHNlKXtyZXR1cm4gdHJ1ZTt9aSs9MTt9cmV0dXJuIGZhbHNlO30saW5pdEV4cHJlc3Npb25zOmZ1bmN0aW9uIGluaXRFeHByZXNzaW9ucygpe3RoaXMubGF5ZXJJbnRlcmZhY2U9TGF5ZXJFeHByZXNzaW9uSW50ZXJmYWNlKHRoaXMpO2lmKHRoaXMuZGF0YS5oYXNNYXNrJiZ0aGlzLm1hc2tNYW5hZ2VyKXt0aGlzLmxheWVySW50ZXJmYWNlLnJlZ2lzdGVyTWFza0ludGVyZmFjZSh0aGlzLm1hc2tNYW5hZ2VyKTt9dmFyIGVmZmVjdHNJbnRlcmZhY2U9RWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UuY3JlYXRlRWZmZWN0c0ludGVyZmFjZSh0aGlzLHRoaXMubGF5ZXJJbnRlcmZhY2UpO3RoaXMubGF5ZXJJbnRlcmZhY2UucmVnaXN0ZXJFZmZlY3RzSW50ZXJmYWNlKGVmZmVjdHNJbnRlcmZhY2UpO2lmKHRoaXMuZGF0YS50eT09PTB8fHRoaXMuZGF0YS54dCl7dGhpcy5jb21wSW50ZXJmYWNlPUNvbXBFeHByZXNzaW9uSW50ZXJmYWNlKHRoaXMpO31lbHNlIGlmKHRoaXMuZGF0YS50eT09PTQpe3RoaXMubGF5ZXJJbnRlcmZhY2Uuc2hhcGVJbnRlcmZhY2U9U2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlKHRoaXMuc2hhcGVzRGF0YSx0aGlzLml0ZW1zRGF0YSx0aGlzLmxheWVySW50ZXJmYWNlKTt0aGlzLmxheWVySW50ZXJmYWNlLmNvbnRlbnQ9dGhpcy5sYXllckludGVyZmFjZS5zaGFwZUludGVyZmFjZTt9ZWxzZSBpZih0aGlzLmRhdGEudHk9PT01KXt0aGlzLmxheWVySW50ZXJmYWNlLnRleHRJbnRlcmZhY2U9VGV4dEV4cHJlc3Npb25JbnRlcmZhY2UodGhpcyk7dGhpcy5sYXllckludGVyZmFjZS50ZXh0PXRoaXMubGF5ZXJJbnRlcmZhY2UudGV4dEludGVyZmFjZTt9fSxzZXRCbGVuZE1vZGU6ZnVuY3Rpb24gc2V0QmxlbmRNb2RlKCl7dmFyIGJsZW5kTW9kZVZhbHVlPWdldEJsZW5kTW9kZSh0aGlzLmRhdGEuYm0pO3ZhciBlbGVtPXRoaXMuYmFzZUVsZW1lbnR8fHRoaXMubGF5ZXJFbGVtZW50O2VsZW0uc3R5bGVbJ21peC1ibGVuZC1tb2RlJ109YmxlbmRNb2RlVmFsdWU7fSxpbml0QmFzZURhdGE6ZnVuY3Rpb24gaW5pdEJhc2VEYXRhKGRhdGEsZ2xvYmFsRGF0YSxjb21wKXt0aGlzLmdsb2JhbERhdGE9Z2xvYmFsRGF0YTt0aGlzLmNvbXA9Y29tcDt0aGlzLmRhdGE9ZGF0YTt0aGlzLmxheWVySWQ9Y3JlYXRlRWxlbWVudElEKCk7Ly8gU3RyZXRjaCBmYWN0b3IgZm9yIG9sZCBhbmltYXRpb25zIG1pc3NpbmcgdGhpcyBwcm9wZXJ0eS5cbmlmKCF0aGlzLmRhdGEuc3Ipe3RoaXMuZGF0YS5zcj0xO30vLyBlZmZlY3RzIG1hbmFnZXJcbnRoaXMuZWZmZWN0c01hbmFnZXI9bmV3IEVmZmVjdHNNYW5hZ2VyKHRoaXMuZGF0YSx0aGlzLHRoaXMuZHluYW1pY1Byb3BlcnRpZXMpO30sZ2V0VHlwZTpmdW5jdGlvbiBnZXRUeXBlKCl7cmV0dXJuIHRoaXMudHlwZTt9LHNvdXJjZVJlY3RBdFRpbWU6ZnVuY3Rpb24gc291cmNlUmVjdEF0VGltZSgpe319Oy8qIGdsb2JhbCBleHRlbmRQcm90b3R5cGUsIEJhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQgKi9mdW5jdGlvbiBOdWxsRWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7dGhpcy5pbml0RnJhbWUoKTt0aGlzLmluaXRCYXNlRGF0YShkYXRhLGdsb2JhbERhdGEsY29tcCk7dGhpcy5pbml0RnJhbWUoKTt0aGlzLmluaXRUcmFuc2Zvcm0oZGF0YSxnbG9iYWxEYXRhLGNvbXApO3RoaXMuaW5pdEhpZXJhcmNoeSgpO31OdWxsRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lPWZ1bmN0aW9uKG51bSl7dGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sdHJ1ZSk7fTtOdWxsRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWU9ZnVuY3Rpb24oKXt9O051bGxFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiBudWxsO307TnVsbEVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt9O051bGxFbGVtZW50LnByb3RvdHlwZS5zb3VyY2VSZWN0QXRUaW1lPWZ1bmN0aW9uKCl7fTtOdWxsRWxlbWVudC5wcm90b3R5cGUuaGlkZT1mdW5jdGlvbigpe307ZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCxUcmFuc2Zvcm1FbGVtZW50LEhpZXJhcmNoeUVsZW1lbnQsRnJhbWVFbGVtZW50XSxOdWxsRWxlbWVudCk7LyogZ2xvYmFsIGZpbHRlcnNGYWN0b3J5LCBmZWF0dXJlU3VwcG9ydCwgZmlsdGVyc0ZhY3RvcnksIGNyZWF0ZUVsZW1lbnRJRCwgY3JlYXRlTlMsIE1hc2tFbGVtZW50LCBTVkdFZmZlY3RzLCBsb2NhdGlvbkhyZWYgKi9mdW5jdGlvbiBTVkdCYXNlRWxlbWVudCgpe31TVkdCYXNlRWxlbWVudC5wcm90b3R5cGU9e2luaXRSZW5kZXJlckVsZW1lbnQ6ZnVuY3Rpb24gaW5pdFJlbmRlcmVyRWxlbWVudCgpe3RoaXMubGF5ZXJFbGVtZW50PWNyZWF0ZU5TKCdnJyk7fSxjcmVhdGVDb250YWluZXJFbGVtZW50czpmdW5jdGlvbiBjcmVhdGVDb250YWluZXJFbGVtZW50cygpe3RoaXMubWF0dGVFbGVtZW50PWNyZWF0ZU5TKCdnJyk7dGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQ9dGhpcy5sYXllckVsZW1lbnQ7dGhpcy5tYXNrZWRFbGVtZW50PXRoaXMubGF5ZXJFbGVtZW50O3RoaXMuX3NpemVDaGFuZ2VkPWZhbHNlO3ZhciBsYXllckVsZW1lbnRQYXJlbnQ9bnVsbDsvLyBJZiB0aGlzIGxheWVyIGFjdHMgYXMgYSBtYXNrIGZvciB0aGUgZm9sbG93aW5nIGxheWVyXG52YXIgZmlsSWQ7dmFyIGZpbDt2YXIgZ2c7aWYodGhpcy5kYXRhLnRkKXtpZih0aGlzLmRhdGEudGQ9PTN8fHRoaXMuZGF0YS50ZD09MSl7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbnZhciBtYXNrZXI9Y3JlYXRlTlMoJ21hc2snKTttYXNrZXIuc2V0QXR0cmlidXRlKCdpZCcsdGhpcy5sYXllcklkKTttYXNrZXIuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLHRoaXMuZGF0YS50ZD09Mz8nbHVtaW5hbmNlJzonYWxwaGEnKTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxubWFza2VyLmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTtsYXllckVsZW1lbnRQYXJlbnQ9bWFza2VyO3RoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKG1hc2tlcik7Ly8gVGhpcyBpcyBvbmx5IGZvciBJRSBhbmQgRWRnZSB3aGVuIG1hc2sgaWYgb2YgdHlwZSBhbHBoYVxuaWYoIWZlYXR1cmVTdXBwb3J0Lm1hc2tUeXBlJiZ0aGlzLmRhdGEudGQ9PTEpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5tYXNrZXIuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCdsdW1pbmFuY2UnKTtmaWxJZD1jcmVhdGVFbGVtZW50SUQoKTtmaWw9ZmlsdGVyc0ZhY3RvcnkuY3JlYXRlRmlsdGVyKGZpbElkKTt0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChmaWwpO2ZpbC5hcHBlbmRDaGlsZChmaWx0ZXJzRmFjdG9yeS5jcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyKCkpO2dnPWNyZWF0ZU5TKCdnJyk7Z2cuYXBwZW5kQ2hpbGQodGhpcy5sYXllckVsZW1lbnQpO2xheWVyRWxlbWVudFBhcmVudD1nZzttYXNrZXIuYXBwZW5kQ2hpbGQoZ2cpO2dnLnNldEF0dHJpYnV0ZSgnZmlsdGVyJywndXJsKCcrbG9jYXRpb25IcmVmKycjJytmaWxJZCsnKScpO319ZWxzZSBpZih0aGlzLmRhdGEudGQ9PTIpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG52YXIgbWFza0dyb3VwPWNyZWF0ZU5TKCdtYXNrJyk7bWFza0dyb3VwLnNldEF0dHJpYnV0ZSgnaWQnLHRoaXMubGF5ZXJJZCk7bWFza0dyb3VwLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywnYWxwaGEnKTt2YXIgbWFza0dyb3VwZXI9Y3JlYXRlTlMoJ2cnKTttYXNrR3JvdXAuYXBwZW5kQ2hpbGQobWFza0dyb3VwZXIpO2ZpbElkPWNyZWF0ZUVsZW1lbnRJRCgpO2ZpbD1maWx0ZXJzRmFjdG9yeS5jcmVhdGVGaWx0ZXIoZmlsSWQpOy8vLyAvXG4vLyBUaGlzIHNvbHV0aW9uIGRvZXNuJ3Qgd29yayBvbiBBbmRyb2lkIHdoZW4gbWV0YSB0YWcgd2l0aCB2aWV3cG9ydCBhdHRyaWJ1dGUgaXMgc2V0XG4vKiB2YXIgZmVDb2xvck1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XHJcbiAgICAgICAgICAgICAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsICdtYXRyaXgnKTtcclxuICAgICAgICAgICAgICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xyXG4gICAgICAgICAgICAgICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsJzEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIC0xIDEnKTtcclxuICAgICAgICAgICAgICAgIGZpbC5hcHBlbmRDaGlsZChmZUNvbG9yTWF0cml4KTsgKi8gLy8vIC9cbnZhciBmZUNUcj1jcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpO2ZlQ1RyLnNldEF0dHJpYnV0ZSgnaW4nLCdTb3VyY2VHcmFwaGljJyk7ZmlsLmFwcGVuZENoaWxkKGZlQ1RyKTt2YXIgZmVGdW5jPWNyZWF0ZU5TKCdmZUZ1bmNBJyk7ZmVGdW5jLnNldEF0dHJpYnV0ZSgndHlwZScsJ3RhYmxlJyk7ZmVGdW5jLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCcxLjAgMC4wJyk7ZmVDVHIuYXBwZW5kQ2hpbGQoZmVGdW5jKTsvLy8gL1xudGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZmlsKTt2YXIgYWxwaGFSZWN0PWNyZWF0ZU5TKCdyZWN0Jyk7YWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLHRoaXMuY29tcC5kYXRhLncpO2FscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsdGhpcy5jb21wLmRhdGEuaCk7YWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgneCcsJzAnKTthbHBoYVJlY3Quc2V0QXR0cmlidXRlKCd5JywnMCcpO2FscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCcjZmZmZmZmJyk7YWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgnb3BhY2l0eScsJzAnKTttYXNrR3JvdXBlci5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsJ3VybCgnK2xvY2F0aW9uSHJlZisnIycrZmlsSWQrJyknKTttYXNrR3JvdXBlci5hcHBlbmRDaGlsZChhbHBoYVJlY3QpO21hc2tHcm91cGVyLmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTtsYXllckVsZW1lbnRQYXJlbnQ9bWFza0dyb3VwZXI7aWYoIWZlYXR1cmVTdXBwb3J0Lm1hc2tUeXBlKXttYXNrR3JvdXAuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCdsdW1pbmFuY2UnKTtmaWwuYXBwZW5kQ2hpbGQoZmlsdGVyc0ZhY3RvcnkuY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlcigpKTtnZz1jcmVhdGVOUygnZycpO21hc2tHcm91cGVyLmFwcGVuZENoaWxkKGFscGhhUmVjdCk7Z2cuYXBwZW5kQ2hpbGQodGhpcy5sYXllckVsZW1lbnQpO2xheWVyRWxlbWVudFBhcmVudD1nZzttYXNrR3JvdXBlci5hcHBlbmRDaGlsZChnZyk7fXRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKG1hc2tHcm91cCk7fX1lbHNlIGlmKHRoaXMuZGF0YS50dCl7dGhpcy5tYXR0ZUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5sYXllckVsZW1lbnQpO2xheWVyRWxlbWVudFBhcmVudD10aGlzLm1hdHRlRWxlbWVudDt0aGlzLmJhc2VFbGVtZW50PXRoaXMubWF0dGVFbGVtZW50O31lbHNlIHt0aGlzLmJhc2VFbGVtZW50PXRoaXMubGF5ZXJFbGVtZW50O31pZih0aGlzLmRhdGEubG4pe3RoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLHRoaXMuZGF0YS5sbik7fWlmKHRoaXMuZGF0YS5jbCl7dGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsdGhpcy5kYXRhLmNsKTt9Ly8gQ2xpcHBpbmcgY29tcG9zaXRpb25zIHRvIGhpZGUgY29udGVudCB0aGF0IGV4Y2VlZHMgYm91bmRhcmllcy4gSWYgY29sbGFwc2VkIHRyYW5zZm9ybWF0aW9ucyBpcyBvbiwgY29tcG9uZW50IHNob3VsZCBub3QgYmUgY2xpcHBlZFxuaWYodGhpcy5kYXRhLnR5PT09MCYmIXRoaXMuZGF0YS5oZCl7dmFyIGNwPWNyZWF0ZU5TKCdjbGlwUGF0aCcpO3ZhciBwdD1jcmVhdGVOUygncGF0aCcpO3B0LnNldEF0dHJpYnV0ZSgnZCcsJ00wLDAgTCcrdGhpcy5kYXRhLncrJywwIEwnK3RoaXMuZGF0YS53KycsJyt0aGlzLmRhdGEuaCsnIEwwLCcrdGhpcy5kYXRhLmgrJ3onKTt2YXIgY2xpcElkPWNyZWF0ZUVsZW1lbnRJRCgpO2NwLnNldEF0dHJpYnV0ZSgnaWQnLGNsaXBJZCk7Y3AuYXBwZW5kQ2hpbGQocHQpO3RoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGNwKTtpZih0aGlzLmNoZWNrTWFza3MoKSl7dmFyIGNwR3JvdXA9Y3JlYXRlTlMoJ2cnKTtjcEdyb3VwLnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywndXJsKCcrbG9jYXRpb25IcmVmKycjJytjbGlwSWQrJyknKTtjcEdyb3VwLmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTt0aGlzLnRyYW5zZm9ybWVkRWxlbWVudD1jcEdyb3VwO2lmKGxheWVyRWxlbWVudFBhcmVudCl7bGF5ZXJFbGVtZW50UGFyZW50LmFwcGVuZENoaWxkKHRoaXMudHJhbnNmb3JtZWRFbGVtZW50KTt9ZWxzZSB7dGhpcy5iYXNlRWxlbWVudD10aGlzLnRyYW5zZm9ybWVkRWxlbWVudDt9fWVsc2Uge3RoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywndXJsKCcrbG9jYXRpb25IcmVmKycjJytjbGlwSWQrJyknKTt9fWlmKHRoaXMuZGF0YS5ibSE9PTApe3RoaXMuc2V0QmxlbmRNb2RlKCk7fX0scmVuZGVyRWxlbWVudDpmdW5jdGlvbiByZW5kZXJFbGVtZW50KCl7aWYodGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmKXt0aGlzLnRyYW5zZm9ybWVkRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsdGhpcy5maW5hbFRyYW5zZm9ybS5tYXQudG8yZENTUygpKTt9aWYodGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYpe3RoaXMudHJhbnNmb3JtZWRFbGVtZW50LnNldEF0dHJpYnV0ZSgnb3BhY2l0eScsdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLnYpO319LGRlc3Ryb3lCYXNlRWxlbWVudDpmdW5jdGlvbiBkZXN0cm95QmFzZUVsZW1lbnQoKXt0aGlzLmxheWVyRWxlbWVudD1udWxsO3RoaXMubWF0dGVFbGVtZW50PW51bGw7dGhpcy5tYXNrTWFuYWdlci5kZXN0cm95KCk7fSxnZXRCYXNlRWxlbWVudDpmdW5jdGlvbiBnZXRCYXNlRWxlbWVudCgpe2lmKHRoaXMuZGF0YS5oZCl7cmV0dXJuIG51bGw7fXJldHVybiB0aGlzLmJhc2VFbGVtZW50O30sY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHM6ZnVuY3Rpb24gY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKXt0aGlzLm1hc2tNYW5hZ2VyPW5ldyBNYXNrRWxlbWVudCh0aGlzLmRhdGEsdGhpcyx0aGlzLmdsb2JhbERhdGEpO3RoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyPW5ldyBTVkdFZmZlY3RzKHRoaXMpO30sc2V0TWF0dGU6ZnVuY3Rpb24gc2V0TWF0dGUoaWQpe2lmKCF0aGlzLm1hdHRlRWxlbWVudCl7cmV0dXJuO310aGlzLm1hdHRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21hc2snLCd1cmwoJytsb2NhdGlvbkhyZWYrJyMnK2lkKycpJyk7fX07LyogZ2xvYmFsIFByb2Nlc3NlZEVsZW1lbnQgKi9mdW5jdGlvbiBJU2hhcGVFbGVtZW50KCl7fUlTaGFwZUVsZW1lbnQucHJvdG90eXBlPXthZGRTaGFwZVRvTW9kaWZpZXJzOmZ1bmN0aW9uIGFkZFNoYXBlVG9Nb2RpZmllcnMoZGF0YSl7dmFyIGk7dmFyIGxlbj10aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMuc2hhcGVNb2RpZmllcnNbaV0uYWRkU2hhcGUoZGF0YSk7fX0saXNTaGFwZUluQW5pbWF0ZWRNb2RpZmllcnM6ZnVuY3Rpb24gaXNTaGFwZUluQW5pbWF0ZWRNb2RpZmllcnMoZGF0YSl7dmFyIGk9MDt2YXIgbGVuPXRoaXMuc2hhcGVNb2RpZmllcnMubGVuZ3RoO3doaWxlKGk8bGVuKXtpZih0aGlzLnNoYXBlTW9kaWZpZXJzW2ldLmlzQW5pbWF0ZWRXaXRoU2hhcGUoZGF0YSkpe3JldHVybiB0cnVlO319cmV0dXJuIGZhbHNlO30scmVuZGVyTW9kaWZpZXJzOmZ1bmN0aW9uIHJlbmRlck1vZGlmaWVycygpe2lmKCF0aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aCl7cmV0dXJuO312YXIgaTt2YXIgbGVuPXRoaXMuc2hhcGVzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMuc2hhcGVzW2ldLnNoLnJlc2V0KCk7fWxlbj10aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aDt2YXIgc2hvdWxkQnJlYWtQcm9jZXNzO2ZvcihpPWxlbi0xO2k+PTA7aS09MSl7c2hvdWxkQnJlYWtQcm9jZXNzPXRoaXMuc2hhcGVNb2RpZmllcnNbaV0ucHJvY2Vzc1NoYXBlcyh0aGlzLl9pc0ZpcnN0RnJhbWUpOy8vIHdvcmthcm91bmQgdG8gZml4IGNhc2VzIHdoZXJlIGEgcmVwZWF0ZXIgcmVzZXRzIHRoZSBzaGFwZSBzbyB0aGUgZm9sbG93aW5nIHByb2Nlc3NlcyBnZXQgY2FsbGVkIHR3aWNlXG4vLyBUT0RPOiBmaW5kIGEgYmV0dGVyIHNvbHV0aW9uIGZvciB0aGlzXG5pZihzaG91bGRCcmVha1Byb2Nlc3Mpe2JyZWFrO319fSxsY0VudW06ezE6J2J1dHQnLDI6J3JvdW5kJywzOidzcXVhcmUnfSxsakVudW06ezE6J21pdGVyJywyOidyb3VuZCcsMzonYmV2ZWwnfSxzZWFyY2hQcm9jZXNzZWRFbGVtZW50OmZ1bmN0aW9uIHNlYXJjaFByb2Nlc3NlZEVsZW1lbnQoZWxlbSl7dmFyIGVsZW1lbnRzPXRoaXMucHJvY2Vzc2VkRWxlbWVudHM7dmFyIGk9MDt2YXIgbGVuPWVsZW1lbnRzLmxlbmd0aDt3aGlsZShpPGxlbil7aWYoZWxlbWVudHNbaV0uZWxlbT09PWVsZW0pe3JldHVybiBlbGVtZW50c1tpXS5wb3M7fWkrPTE7fXJldHVybiAwO30sYWRkUHJvY2Vzc2VkRWxlbWVudDpmdW5jdGlvbiBhZGRQcm9jZXNzZWRFbGVtZW50KGVsZW0scG9zKXt2YXIgZWxlbWVudHM9dGhpcy5wcm9jZXNzZWRFbGVtZW50czt2YXIgaT1lbGVtZW50cy5sZW5ndGg7d2hpbGUoaSl7aS09MTtpZihlbGVtZW50c1tpXS5lbGVtPT09ZWxlbSl7ZWxlbWVudHNbaV0ucG9zPXBvcztyZXR1cm47fX1lbGVtZW50cy5wdXNoKG5ldyBQcm9jZXNzZWRFbGVtZW50KGVsZW0scG9zKSk7fSxwcmVwYXJlRnJhbWU6ZnVuY3Rpb24gcHJlcGFyZUZyYW1lKG51bSl7dGhpcy5wcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSk7dGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sdGhpcy5pc0luUmFuZ2UpO319Oy8qIGdsb2JhbCBUZXh0UHJvcGVydHksIFRleHRBbmltYXRvclByb3BlcnR5LCBidWlsZFNoYXBlU3RyaW5nLCBMZXR0ZXJQcm9wcyAqL2Z1bmN0aW9uIElUZXh0RWxlbWVudCgpe31JVGV4dEVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50PWZ1bmN0aW9uKGRhdGEsZ2xvYmFsRGF0YSxjb21wKXt0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZz10cnVlO3RoaXMuaW5pdEZyYW1lKCk7dGhpcy5pbml0QmFzZURhdGEoZGF0YSxnbG9iYWxEYXRhLGNvbXApO3RoaXMudGV4dFByb3BlcnR5PW5ldyBUZXh0UHJvcGVydHkodGhpcyxkYXRhLnQsdGhpcy5keW5hbWljUHJvcGVydGllcyk7dGhpcy50ZXh0QW5pbWF0b3I9bmV3IFRleHRBbmltYXRvclByb3BlcnR5KGRhdGEudCx0aGlzLnJlbmRlclR5cGUsdGhpcyk7dGhpcy5pbml0VHJhbnNmb3JtKGRhdGEsZ2xvYmFsRGF0YSxjb21wKTt0aGlzLmluaXRIaWVyYXJjaHkoKTt0aGlzLmluaXRSZW5kZXJhYmxlKCk7dGhpcy5pbml0UmVuZGVyZXJFbGVtZW50KCk7dGhpcy5jcmVhdGVDb250YWluZXJFbGVtZW50cygpO3RoaXMuY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKTt0aGlzLmNyZWF0ZUNvbnRlbnQoKTt0aGlzLmhpZGUoKTt0aGlzLnRleHRBbmltYXRvci5zZWFyY2hQcm9wZXJ0aWVzKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMpO307SVRleHRFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWU9ZnVuY3Rpb24obnVtKXt0aGlzLl9tZGY9ZmFsc2U7dGhpcy5wcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSk7dGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sdGhpcy5pc0luUmFuZ2UpO2lmKHRoaXMudGV4dFByb3BlcnR5Ll9tZGZ8fHRoaXMudGV4dFByb3BlcnR5Ll9pc0ZpcnN0RnJhbWUpe3RoaXMuYnVpbGROZXdUZXh0KCk7dGhpcy50ZXh0UHJvcGVydHkuX2lzRmlyc3RGcmFtZT1mYWxzZTt0aGlzLnRleHRQcm9wZXJ0eS5fbWRmPWZhbHNlO319O0lUZXh0RWxlbWVudC5wcm90b3R5cGUuY3JlYXRlUGF0aFNoYXBlPWZ1bmN0aW9uKG1hdHJpeEhlbHBlcixzaGFwZXMpe3ZhciBqO3ZhciBqTGVuPXNoYXBlcy5sZW5ndGg7dmFyIHBhdGhOb2Rlczt2YXIgc2hhcGVTdHI9Jyc7Zm9yKGo9MDtqPGpMZW47ais9MSl7cGF0aE5vZGVzPXNoYXBlc1tqXS5rcy5rO3NoYXBlU3RyKz1idWlsZFNoYXBlU3RyaW5nKHBhdGhOb2RlcyxwYXRoTm9kZXMuaS5sZW5ndGgsdHJ1ZSxtYXRyaXhIZWxwZXIpO31yZXR1cm4gc2hhcGVTdHI7fTtJVGV4dEVsZW1lbnQucHJvdG90eXBlLnVwZGF0ZURvY3VtZW50RGF0YT1mdW5jdGlvbihuZXdEYXRhLGluZGV4KXt0aGlzLnRleHRQcm9wZXJ0eS51cGRhdGVEb2N1bWVudERhdGEobmV3RGF0YSxpbmRleCk7fTtJVGV4dEVsZW1lbnQucHJvdG90eXBlLmNhblJlc2l6ZUZvbnQ9ZnVuY3Rpb24oX2NhblJlc2l6ZSl7dGhpcy50ZXh0UHJvcGVydHkuY2FuUmVzaXplRm9udChfY2FuUmVzaXplKTt9O0lUZXh0RWxlbWVudC5wcm90b3R5cGUuc2V0TWluaW11bUZvbnRTaXplPWZ1bmN0aW9uKF9mb250U2l6ZSl7dGhpcy50ZXh0UHJvcGVydHkuc2V0TWluaW11bUZvbnRTaXplKF9mb250U2l6ZSk7fTtJVGV4dEVsZW1lbnQucHJvdG90eXBlLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeD1mdW5jdGlvbihkb2N1bWVudERhdGEsbWF0cml4SGVscGVyLGxpbmVOdW1iZXIseFBvcyx5UG9zKXtpZihkb2N1bWVudERhdGEucHMpe21hdHJpeEhlbHBlci50cmFuc2xhdGUoZG9jdW1lbnREYXRhLnBzWzBdLGRvY3VtZW50RGF0YS5wc1sxXStkb2N1bWVudERhdGEuYXNjZW50LDApO31tYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsLWRvY3VtZW50RGF0YS5scywwKTtzd2l0Y2goZG9jdW1lbnREYXRhLmope2Nhc2UgMTptYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0Kyhkb2N1bWVudERhdGEuYm94V2lkdGgtZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGluZU51bWJlcl0pLDAsMCk7YnJlYWs7Y2FzZSAyOm1hdHJpeEhlbHBlci50cmFuc2xhdGUoZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQrKGRvY3VtZW50RGF0YS5ib3hXaWR0aC1kb2N1bWVudERhdGEubGluZVdpZHRoc1tsaW5lTnVtYmVyXSkvMiwwLDApO2JyZWFrO2RlZmF1bHQ6YnJlYWs7fW1hdHJpeEhlbHBlci50cmFuc2xhdGUoeFBvcyx5UG9zLDApO307SVRleHRFbGVtZW50LnByb3RvdHlwZS5idWlsZENvbG9yPWZ1bmN0aW9uKGNvbG9yRGF0YSl7cmV0dXJuICdyZ2IoJytNYXRoLnJvdW5kKGNvbG9yRGF0YVswXSoyNTUpKycsJytNYXRoLnJvdW5kKGNvbG9yRGF0YVsxXSoyNTUpKycsJytNYXRoLnJvdW5kKGNvbG9yRGF0YVsyXSoyNTUpKycpJzt9O0lUZXh0RWxlbWVudC5wcm90b3R5cGUuZW1wdHlQcm9wPW5ldyBMZXR0ZXJQcm9wcygpO0lUZXh0RWxlbWVudC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe307LyogZ2xvYmFsIGV4dGVuZFByb3RvdHlwZSwgQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnQgKi9mdW5jdGlvbiBJQ29tcEVsZW1lbnQoKXt9ZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCxUcmFuc2Zvcm1FbGVtZW50LEhpZXJhcmNoeUVsZW1lbnQsRnJhbWVFbGVtZW50LFJlbmRlcmFibGVET01FbGVtZW50XSxJQ29tcEVsZW1lbnQpO0lDb21wRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQ9ZnVuY3Rpb24oZGF0YSxnbG9iYWxEYXRhLGNvbXApe3RoaXMuaW5pdEZyYW1lKCk7dGhpcy5pbml0QmFzZURhdGEoZGF0YSxnbG9iYWxEYXRhLGNvbXApO3RoaXMuaW5pdFRyYW5zZm9ybShkYXRhLGdsb2JhbERhdGEsY29tcCk7dGhpcy5pbml0UmVuZGVyYWJsZSgpO3RoaXMuaW5pdEhpZXJhcmNoeSgpO3RoaXMuaW5pdFJlbmRlcmVyRWxlbWVudCgpO3RoaXMuY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKTt0aGlzLmNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCk7aWYodGhpcy5kYXRhLnh0fHwhZ2xvYmFsRGF0YS5wcm9ncmVzc2l2ZUxvYWQpe3RoaXMuYnVpbGRBbGxJdGVtcygpO310aGlzLmhpZGUoKTt9Oy8qIElDb21wRWxlbWVudC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICBpZighdGhpcy5oaWRkZW4pe1xyXG4gICAgICAgIHRoaXMuaGlkZUVsZW1lbnQoKTtcclxuICAgICAgICB2YXIgaSxsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcclxuICAgICAgICBmb3IoIGkgPSAwOyBpIDwgbGVuOyBpKz0xICl7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuZWxlbWVudHNbaV0pe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07ICovSUNvbXBFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWU9ZnVuY3Rpb24obnVtKXt0aGlzLl9tZGY9ZmFsc2U7dGhpcy5wcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSk7dGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sdGhpcy5pc0luUmFuZ2UpO2lmKCF0aGlzLmlzSW5SYW5nZSYmIXRoaXMuZGF0YS54dCl7cmV0dXJuO31pZighdGhpcy50bS5fcGxhY2Vob2xkZXIpe3ZhciB0aW1lUmVtYXBwZWQ9dGhpcy50bS52O2lmKHRpbWVSZW1hcHBlZD09PXRoaXMuZGF0YS5vcCl7dGltZVJlbWFwcGVkPXRoaXMuZGF0YS5vcC0xO310aGlzLnJlbmRlcmVkRnJhbWU9dGltZVJlbWFwcGVkO31lbHNlIHt0aGlzLnJlbmRlcmVkRnJhbWU9bnVtL3RoaXMuZGF0YS5zcjt9dmFyIGk7dmFyIGxlbj10aGlzLmVsZW1lbnRzLmxlbmd0aDtpZighdGhpcy5jb21wbGV0ZUxheWVycyl7dGhpcy5jaGVja0xheWVycyh0aGlzLnJlbmRlcmVkRnJhbWUpO30vLyBUaGlzIGl0ZXJhdGlvbiBuZWVkcyB0byBiZSBiYWNrd2FyZHMgYmVjYXVzZSBvZiBob3cgZXhwcmVzc2lvbnMgY29ubmVjdCBiZXR3ZWVuIGVhY2ggb3RoZXJcbmZvcihpPWxlbi0xO2k+PTA7aS09MSl7aWYodGhpcy5jb21wbGV0ZUxheWVyc3x8dGhpcy5lbGVtZW50c1tpXSl7dGhpcy5lbGVtZW50c1tpXS5wcmVwYXJlRnJhbWUodGhpcy5yZW5kZXJlZEZyYW1lLXRoaXMubGF5ZXJzW2ldLnN0KTtpZih0aGlzLmVsZW1lbnRzW2ldLl9tZGYpe3RoaXMuX21kZj10cnVlO319fX07SUNvbXBFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgaTt2YXIgbGVuPXRoaXMubGF5ZXJzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKHRoaXMuY29tcGxldGVMYXllcnN8fHRoaXMuZWxlbWVudHNbaV0pe3RoaXMuZWxlbWVudHNbaV0ucmVuZGVyRnJhbWUoKTt9fX07SUNvbXBFbGVtZW50LnByb3RvdHlwZS5zZXRFbGVtZW50cz1mdW5jdGlvbihlbGVtcyl7dGhpcy5lbGVtZW50cz1lbGVtczt9O0lDb21wRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50czt9O0lDb21wRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveUVsZW1lbnRzPWZ1bmN0aW9uKCl7dmFyIGk7dmFyIGxlbj10aGlzLmxheWVycy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZih0aGlzLmVsZW1lbnRzW2ldKXt0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3koKTt9fX07SUNvbXBFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5kZXN0cm95RWxlbWVudHMoKTt0aGlzLmRlc3Ryb3lCYXNlRWxlbWVudCgpO307LyogZ2xvYmFsIGV4dGVuZFByb3RvdHlwZSwgQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIFNWR0Jhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVET01FbGVtZW50LCBjcmVhdGVOUyAqL2Z1bmN0aW9uIElJbWFnZUVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApe3RoaXMuYXNzZXREYXRhPWdsb2JhbERhdGEuZ2V0QXNzZXREYXRhKGRhdGEucmVmSWQpO3RoaXMuaW5pdEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApO3RoaXMuc291cmNlUmVjdD17dG9wOjAsbGVmdDowLHdpZHRoOnRoaXMuYXNzZXREYXRhLncsaGVpZ2h0OnRoaXMuYXNzZXREYXRhLmh9O31leHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LFRyYW5zZm9ybUVsZW1lbnQsU1ZHQmFzZUVsZW1lbnQsSGllcmFyY2h5RWxlbWVudCxGcmFtZUVsZW1lbnQsUmVuZGVyYWJsZURPTUVsZW1lbnRdLElJbWFnZUVsZW1lbnQpO0lJbWFnZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgYXNzZXRQYXRoPXRoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldHNQYXRoKHRoaXMuYXNzZXREYXRhKTt0aGlzLmlubmVyRWxlbT1jcmVhdGVOUygnaW1hZ2UnKTt0aGlzLmlubmVyRWxlbS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJyx0aGlzLmFzc2V0RGF0YS53KydweCcpO3RoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZSgnaGVpZ2h0Jyx0aGlzLmFzc2V0RGF0YS5oKydweCcpO3RoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZSgncHJlc2VydmVBc3BlY3RSYXRpbycsdGhpcy5hc3NldERhdGEucHJ8fHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvKTt0aGlzLmlubmVyRWxlbS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsJ2hyZWYnLGFzc2V0UGF0aCk7dGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5pbm5lckVsZW0pO307SUltYWdlRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNvdXJjZVJlY3Q7fTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBJSW1hZ2VFbGVtZW50LCBjcmVhdGVOUyAqL2Z1bmN0aW9uIElTb2xpZEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApe3RoaXMuaW5pdEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApO31leHRlbmRQcm90b3R5cGUoW0lJbWFnZUVsZW1lbnRdLElTb2xpZEVsZW1lbnQpO0lTb2xpZEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgcmVjdD1jcmVhdGVOUygncmVjdCcpOy8vLyAvcmVjdC5zdHlsZS53aWR0aCA9IHRoaXMuZGF0YS5zdztcbi8vLyAvcmVjdC5zdHlsZS5oZWlnaHQgPSB0aGlzLmRhdGEuc2g7XG4vLy8gL3JlY3Quc3R5bGUuZmlsbCA9IHRoaXMuZGF0YS5zYztcbnJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsdGhpcy5kYXRhLnN3KTtyZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0Jyx0aGlzLmRhdGEuc2gpO3JlY3Quc2V0QXR0cmlidXRlKCdmaWxsJyx0aGlzLmRhdGEuc2MpO3RoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHJlY3QpO307LyogZ2xvYmFsIFByb3BlcnR5RmFjdG9yeSwgZXh0ZW5kUHJvdG90eXBlLCBSZW5kZXJhYmxlRWxlbWVudCwgQmFzZUVsZW1lbnQsIEZyYW1lRWxlbWVudCAqL2Z1bmN0aW9uIEF1ZGlvRWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7dGhpcy5pbml0RnJhbWUoKTt0aGlzLmluaXRSZW5kZXJhYmxlKCk7dGhpcy5hc3NldERhdGE9Z2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7dGhpcy5pbml0QmFzZURhdGEoZGF0YSxnbG9iYWxEYXRhLGNvbXApO3RoaXMuX2lzUGxheWluZz1mYWxzZTt0aGlzLl9jYW5QbGF5PWZhbHNlO3ZhciBhc3NldFBhdGg9dGhpcy5nbG9iYWxEYXRhLmdldEFzc2V0c1BhdGgodGhpcy5hc3NldERhdGEpO3RoaXMuYXVkaW89dGhpcy5nbG9iYWxEYXRhLmF1ZGlvQ29udHJvbGxlci5jcmVhdGVBdWRpbyhhc3NldFBhdGgpO3RoaXMuX2N1cnJlbnRUaW1lPTA7dGhpcy5nbG9iYWxEYXRhLmF1ZGlvQ29udHJvbGxlci5hZGRBdWRpbyh0aGlzKTt0aGlzLnRtPWRhdGEudG0/UHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcyxkYXRhLnRtLDAsZ2xvYmFsRGF0YS5mcmFtZVJhdGUsdGhpcyk6e19wbGFjZWhvbGRlcjp0cnVlfTt9QXVkaW9FbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWU9ZnVuY3Rpb24obnVtKXt0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtLHRydWUpO3RoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLHRydWUpO2lmKCF0aGlzLnRtLl9wbGFjZWhvbGRlcil7dmFyIHRpbWVSZW1hcHBlZD10aGlzLnRtLnY7dGhpcy5fY3VycmVudFRpbWU9dGltZVJlbWFwcGVkO31lbHNlIHt0aGlzLl9jdXJyZW50VGltZT1udW0vdGhpcy5kYXRhLnNyO319O2V4dGVuZFByb3RvdHlwZShbUmVuZGVyYWJsZUVsZW1lbnQsQmFzZUVsZW1lbnQsRnJhbWVFbGVtZW50XSxBdWRpb0VsZW1lbnQpO0F1ZGlvRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWU9ZnVuY3Rpb24oKXtpZih0aGlzLmlzSW5SYW5nZSYmdGhpcy5fY2FuUGxheSl7aWYoIXRoaXMuX2lzUGxheWluZyl7dGhpcy5hdWRpby5wbGF5KCk7dGhpcy5hdWRpby5zZWVrKHRoaXMuX2N1cnJlbnRUaW1lL3RoaXMuZ2xvYmFsRGF0YS5mcmFtZVJhdGUpO3RoaXMuX2lzUGxheWluZz10cnVlO31lbHNlIGlmKCF0aGlzLmF1ZGlvLnBsYXlpbmcoKXx8TWF0aC5hYnModGhpcy5fY3VycmVudFRpbWUvdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZS10aGlzLmF1ZGlvLnNlZWsoKSk+MC4xKXt0aGlzLmF1ZGlvLnNlZWsodGhpcy5fY3VycmVudFRpbWUvdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZSk7fX19O0F1ZGlvRWxlbWVudC5wcm90b3R5cGUuc2hvdz1mdW5jdGlvbigpey8vIHRoaXMuYXVkaW8ucGxheSgpXG59O0F1ZGlvRWxlbWVudC5wcm90b3R5cGUuaGlkZT1mdW5jdGlvbigpe3RoaXMuYXVkaW8ucGF1c2UoKTt0aGlzLl9pc1BsYXlpbmc9ZmFsc2U7fTtBdWRpb0VsZW1lbnQucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7dGhpcy5hdWRpby5wYXVzZSgpO3RoaXMuX2lzUGxheWluZz1mYWxzZTt0aGlzLl9jYW5QbGF5PWZhbHNlO307QXVkaW9FbGVtZW50LnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXt0aGlzLl9jYW5QbGF5PXRydWU7fTtBdWRpb0VsZW1lbnQucHJvdG90eXBlLnNldFJhdGU9ZnVuY3Rpb24ocmF0ZVZhbHVlKXt0aGlzLmF1ZGlvLnJhdGUocmF0ZVZhbHVlKTt9O0F1ZGlvRWxlbWVudC5wcm90b3R5cGUudm9sdW1lPWZ1bmN0aW9uKHZvbHVtZVZhbHVlKXt0aGlzLmF1ZGlvLnZvbHVtZSh2b2x1bWVWYWx1ZSk7fTtBdWRpb0VsZW1lbnQucHJvdG90eXBlLmdldEJhc2VFbGVtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw7fTtBdWRpb0VsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt9O0F1ZGlvRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZT1mdW5jdGlvbigpe307QXVkaW9FbGVtZW50LnByb3RvdHlwZS5pbml0RXhwcmVzc2lvbnM9ZnVuY3Rpb24oKXt9Oy8qIGdsb2JhbCBjcmVhdGVTaXplZEFycmF5LCBQcm9wZXJ0eUZhY3RvcnksIGV4dGVuZFByb3RvdHlwZSwgU1ZHUmVuZGVyZXIsIElDb21wRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQgKi9mdW5jdGlvbiBTVkdDb21wRWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7dGhpcy5sYXllcnM9ZGF0YS5sYXllcnM7dGhpcy5zdXBwb3J0czNkPXRydWU7dGhpcy5jb21wbGV0ZUxheWVycz1mYWxzZTt0aGlzLnBlbmRpbmdFbGVtZW50cz1bXTt0aGlzLmVsZW1lbnRzPXRoaXMubGF5ZXJzP2NyZWF0ZVNpemVkQXJyYXkodGhpcy5sYXllcnMubGVuZ3RoKTpbXTsvLyB0aGlzLmxheWVyRWxlbWVudCA9IGNyZWF0ZU5TKCdnJyk7XG50aGlzLmluaXRFbGVtZW50KGRhdGEsZ2xvYmFsRGF0YSxjb21wKTt0aGlzLnRtPWRhdGEudG0/UHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcyxkYXRhLnRtLDAsZ2xvYmFsRGF0YS5mcmFtZVJhdGUsdGhpcyk6e19wbGFjZWhvbGRlcjp0cnVlfTt9ZXh0ZW5kUHJvdG90eXBlKFtTVkdSZW5kZXJlcixJQ29tcEVsZW1lbnQsU1ZHQmFzZUVsZW1lbnRdLFNWR0NvbXBFbGVtZW50KTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCxcclxuUmVuZGVyYWJsZURPTUVsZW1lbnQsIElUZXh0RWxlbWVudCwgY3JlYXRlU2l6ZWRBcnJheSwgY3JlYXRlTlMgKi9mdW5jdGlvbiBTVkdUZXh0TG90dGllRWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7dGhpcy50ZXh0U3BhbnM9W107dGhpcy5yZW5kZXJUeXBlPSdzdmcnO3RoaXMuaW5pdEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApO31leHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LFRyYW5zZm9ybUVsZW1lbnQsU1ZHQmFzZUVsZW1lbnQsSGllcmFyY2h5RWxlbWVudCxGcmFtZUVsZW1lbnQsUmVuZGVyYWJsZURPTUVsZW1lbnQsSVRleHRFbGVtZW50XSxTVkdUZXh0TG90dGllRWxlbWVudCk7U1ZHVGV4dExvdHRpZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQ9ZnVuY3Rpb24oKXtpZih0aGlzLmRhdGEuc2luZ2xlU2hhcGUmJiF0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpe3RoaXMudGV4dENvbnRhaW5lcj1jcmVhdGVOUygndGV4dCcpO319O1NWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5idWlsZFRleHRDb250ZW50cz1mdW5jdGlvbih0ZXh0QXJyYXkpe3ZhciBpPTA7dmFyIGxlbj10ZXh0QXJyYXkubGVuZ3RoO3ZhciB0ZXh0Q29udGVudHM9W107dmFyIGN1cnJlbnRUZXh0Q29udGVudD0nJzt3aGlsZShpPGxlbil7aWYodGV4dEFycmF5W2ldPT09U3RyaW5nLmZyb21DaGFyQ29kZSgxMyl8fHRleHRBcnJheVtpXT09PVN0cmluZy5mcm9tQ2hhckNvZGUoMykpe3RleHRDb250ZW50cy5wdXNoKGN1cnJlbnRUZXh0Q29udGVudCk7Y3VycmVudFRleHRDb250ZW50PScnO31lbHNlIHtjdXJyZW50VGV4dENvbnRlbnQrPXRleHRBcnJheVtpXTt9aSs9MTt9dGV4dENvbnRlbnRzLnB1c2goY3VycmVudFRleHRDb250ZW50KTtyZXR1cm4gdGV4dENvbnRlbnRzO307U1ZHVGV4dExvdHRpZUVsZW1lbnQucHJvdG90eXBlLmJ1aWxkTmV3VGV4dD1mdW5jdGlvbigpe3ZhciBpO3ZhciBsZW47dmFyIGRvY3VtZW50RGF0YT10aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YTt0aGlzLnJlbmRlcmVkTGV0dGVycz1jcmVhdGVTaXplZEFycmF5KGRvY3VtZW50RGF0YT9kb2N1bWVudERhdGEubC5sZW5ndGg6MCk7aWYoZG9jdW1lbnREYXRhLmZjKXt0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuZmMpKTt9ZWxzZSB7dGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsJywncmdiYSgwLDAsMCwwKScpO31pZihkb2N1bWVudERhdGEuc2Mpe3RoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlJyx0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLnNjKSk7dGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLGRvY3VtZW50RGF0YS5zdyk7fXRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJyxkb2N1bWVudERhdGEuZmluYWxTaXplKTt2YXIgZm9udERhdGE9dGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpO2lmKGZvbnREYXRhLmZDbGFzcyl7dGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsZm9udERhdGEuZkNsYXNzKTt9ZWxzZSB7dGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsZm9udERhdGEuZkZhbWlseSk7dmFyIGZXZWlnaHQ9ZG9jdW1lbnREYXRhLmZXZWlnaHQ7dmFyIGZTdHlsZT1kb2N1bWVudERhdGEuZlN0eWxlO3RoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9udC1zdHlsZScsZlN0eWxlKTt0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0JyxmV2VpZ2h0KTt9dGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJyxkb2N1bWVudERhdGEudCk7dmFyIGxldHRlcnM9ZG9jdW1lbnREYXRhLmx8fFtdO3ZhciB1c2VzR2x5cGhzPSEhdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmNoYXJzO2xlbj1sZXR0ZXJzLmxlbmd0aDt2YXIgdFNwYW47dmFyIG1hdHJpeEhlbHBlcj10aGlzLm1IZWxwZXI7dmFyIHNoYXBlczt2YXIgc2hhcGVTdHI9Jyc7dmFyIHNpbmdsZVNoYXBlPXRoaXMuZGF0YS5zaW5nbGVTaGFwZTt2YXIgeFBvcz0wO3ZhciB5UG9zPTA7dmFyIGZpcnN0TGluZT10cnVlO3ZhciB0cmFja2luZ09mZnNldD1kb2N1bWVudERhdGEudHIqMC4wMDEqZG9jdW1lbnREYXRhLmZpbmFsU2l6ZTtpZihzaW5nbGVTaGFwZSYmIXVzZXNHbHlwaHMmJiFkb2N1bWVudERhdGEuc3ope3ZhciB0RWxlbWVudD10aGlzLnRleHRDb250YWluZXI7dmFyIGp1c3RpZnk9J3N0YXJ0Jztzd2l0Y2goZG9jdW1lbnREYXRhLmope2Nhc2UgMTpqdXN0aWZ5PSdlbmQnO2JyZWFrO2Nhc2UgMjpqdXN0aWZ5PSdtaWRkbGUnO2JyZWFrO2RlZmF1bHQ6anVzdGlmeT0nc3RhcnQnO2JyZWFrO310RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJyxqdXN0aWZ5KTt0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2xldHRlci1zcGFjaW5nJyx0cmFja2luZ09mZnNldCk7dmFyIHRleHRDb250ZW50PXRoaXMuYnVpbGRUZXh0Q29udGVudHMoZG9jdW1lbnREYXRhLmZpbmFsVGV4dCk7bGVuPXRleHRDb250ZW50Lmxlbmd0aDt5UG9zPWRvY3VtZW50RGF0YS5wcz9kb2N1bWVudERhdGEucHNbMV0rZG9jdW1lbnREYXRhLmFzY2VudDowO2ZvcihpPTA7aTxsZW47aSs9MSl7dFNwYW49dGhpcy50ZXh0U3BhbnNbaV18fGNyZWF0ZU5TKCd0c3BhbicpO3RTcGFuLnRleHRDb250ZW50PXRleHRDb250ZW50W2ldO3RTcGFuLnNldEF0dHJpYnV0ZSgneCcsMCk7dFNwYW4uc2V0QXR0cmlidXRlKCd5Jyx5UG9zKTt0U3Bhbi5zdHlsZS5kaXNwbGF5PSdpbmhlcml0Jzt0RWxlbWVudC5hcHBlbmRDaGlsZCh0U3Bhbik7dGhpcy50ZXh0U3BhbnNbaV09dFNwYW47eVBvcys9ZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodDt9dGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodEVsZW1lbnQpO31lbHNlIHt2YXIgY2FjaGVkU3BhbnNMZW5ndGg9dGhpcy50ZXh0U3BhbnMubGVuZ3RoO3ZhciBzaGFwZURhdGE7dmFyIGNoYXJEYXRhO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoIXVzZXNHbHlwaHN8fCFzaW5nbGVTaGFwZXx8aT09PTApe3RTcGFuPWNhY2hlZFNwYW5zTGVuZ3RoPmk/dGhpcy50ZXh0U3BhbnNbaV06Y3JlYXRlTlModXNlc0dseXBocz8ncGF0aCc6J3RleHQnKTtpZihjYWNoZWRTcGFuc0xlbmd0aDw9aSl7dFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsJ2J1dHQnKTt0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsJ3JvdW5kJyk7dFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbWl0ZXJsaW1pdCcsJzQnKTt0aGlzLnRleHRTcGFuc1tpXT10U3Bhbjt0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZCh0U3Bhbik7fXRTcGFuLnN0eWxlLmRpc3BsYXk9J2luaGVyaXQnO31tYXRyaXhIZWxwZXIucmVzZXQoKTttYXRyaXhIZWxwZXIuc2NhbGUoZG9jdW1lbnREYXRhLmZpbmFsU2l6ZS8xMDAsZG9jdW1lbnREYXRhLmZpbmFsU2l6ZS8xMDApO2lmKHNpbmdsZVNoYXBlKXtpZihsZXR0ZXJzW2ldLm4pe3hQb3M9LXRyYWNraW5nT2Zmc2V0O3lQb3MrPWRvY3VtZW50RGF0YS55T2Zmc2V0O3lQb3MrPWZpcnN0TGluZT8xOjA7Zmlyc3RMaW5lPWZhbHNlO310aGlzLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeChkb2N1bWVudERhdGEsbWF0cml4SGVscGVyLGxldHRlcnNbaV0ubGluZSx4UG9zLHlQb3MpO3hQb3MrPWxldHRlcnNbaV0ubHx8MDsvLyB4UG9zICs9IGxldHRlcnNbaV0udmFsID09PSAnICcgPyAwIDogdHJhY2tpbmdPZmZzZXQ7XG54UG9zKz10cmFja2luZ09mZnNldDt9aWYodXNlc0dseXBocyl7Y2hhckRhdGE9dGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGRvY3VtZW50RGF0YS5maW5hbFRleHRbaV0sZm9udERhdGEuZlN0eWxlLHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5KTtzaGFwZURhdGE9Y2hhckRhdGEmJmNoYXJEYXRhLmRhdGF8fHt9O3NoYXBlcz1zaGFwZURhdGEuc2hhcGVzP3NoYXBlRGF0YS5zaGFwZXNbMF0uaXQ6W107aWYoIXNpbmdsZVNoYXBlKXt0U3Bhbi5zZXRBdHRyaWJ1dGUoJ2QnLHRoaXMuY3JlYXRlUGF0aFNoYXBlKG1hdHJpeEhlbHBlcixzaGFwZXMpKTt9ZWxzZSB7c2hhcGVTdHIrPXRoaXMuY3JlYXRlUGF0aFNoYXBlKG1hdHJpeEhlbHBlcixzaGFwZXMpO319ZWxzZSB7aWYoc2luZ2xlU2hhcGUpe3RTcGFuLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywndHJhbnNsYXRlKCcrbWF0cml4SGVscGVyLnByb3BzWzEyXSsnLCcrbWF0cml4SGVscGVyLnByb3BzWzEzXSsnKScpO310U3Bhbi50ZXh0Q29udGVudD1sZXR0ZXJzW2ldLnZhbDt0U3Bhbi5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJywneG1sOnNwYWNlJywncHJlc2VydmUnKTt9Ly9cbn1pZihzaW5nbGVTaGFwZSYmdFNwYW4pe3RTcGFuLnNldEF0dHJpYnV0ZSgnZCcsc2hhcGVTdHIpO319d2hpbGUoaTx0aGlzLnRleHRTcGFucy5sZW5ndGgpe3RoaXMudGV4dFNwYW5zW2ldLnN0eWxlLmRpc3BsYXk9J25vbmUnO2krPTE7fXRoaXMuX3NpemVDaGFuZ2VkPXRydWU7fTtTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZT1mdW5jdGlvbigpe3RoaXMucHJlcGFyZUZyYW1lKHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lLXRoaXMuZGF0YS5zdCk7dGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtpZih0aGlzLl9zaXplQ2hhbmdlZCl7dGhpcy5fc2l6ZUNoYW5nZWQ9ZmFsc2U7dmFyIHRleHRCb3g9dGhpcy5sYXllckVsZW1lbnQuZ2V0QkJveCgpO3RoaXMuYmJveD17dG9wOnRleHRCb3gueSxsZWZ0OnRleHRCb3gueCx3aWR0aDp0ZXh0Qm94LndpZHRoLGhlaWdodDp0ZXh0Qm94LmhlaWdodH07fXJldHVybiB0aGlzLmJib3g7fTtTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50PWZ1bmN0aW9uKCl7aWYoIXRoaXMuZGF0YS5zaW5nbGVTaGFwZSl7dGhpcy50ZXh0QW5pbWF0b3IuZ2V0TWVhc3VyZXModGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEsdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcpO2lmKHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnfHx0aGlzLnRleHRBbmltYXRvci5sZXR0ZXJzQ2hhbmdlZEZsYWcpe3RoaXMuX3NpemVDaGFuZ2VkPXRydWU7dmFyIGk7dmFyIGxlbjt2YXIgcmVuZGVyZWRMZXR0ZXJzPXRoaXMudGV4dEFuaW1hdG9yLnJlbmRlcmVkTGV0dGVyczt2YXIgbGV0dGVycz10aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO2xlbj1sZXR0ZXJzLmxlbmd0aDt2YXIgcmVuZGVyZWRMZXR0ZXI7dmFyIHRleHRTcGFuO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoIWxldHRlcnNbaV0ubil7cmVuZGVyZWRMZXR0ZXI9cmVuZGVyZWRMZXR0ZXJzW2ldO3RleHRTcGFuPXRoaXMudGV4dFNwYW5zW2ldO2lmKHJlbmRlcmVkTGV0dGVyLl9tZGYubSl7dGV4dFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLHJlbmRlcmVkTGV0dGVyLm0pO31pZihyZW5kZXJlZExldHRlci5fbWRmLm8pe3RleHRTcGFuLnNldEF0dHJpYnV0ZSgnb3BhY2l0eScscmVuZGVyZWRMZXR0ZXIubyk7fWlmKHJlbmRlcmVkTGV0dGVyLl9tZGYuc3cpe3RleHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJyxyZW5kZXJlZExldHRlci5zdyk7fWlmKHJlbmRlcmVkTGV0dGVyLl9tZGYuc2Mpe3RleHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJyxyZW5kZXJlZExldHRlci5zYyk7fWlmKHJlbmRlcmVkTGV0dGVyLl9tZGYuZmMpe3RleHRTcGFuLnNldEF0dHJpYnV0ZSgnZmlsbCcscmVuZGVyZWRMZXR0ZXIuZmMpO319fX19fTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQsIElTaGFwZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsXHJcbkZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnQsIE1hdHJpeCwgU1ZHU3R5bGVEYXRhLCBTVkdTdHJva2VTdHlsZURhdGEsIFNWR0ZpbGxTdHlsZURhdGEsXHJcblNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YSwgU1ZHR3JhZGllbnRTdHJva2VTdHlsZURhdGEsIGxvY2F0aW9uSHJlZiwgZ2V0QmxlbmRNb2RlLCBTaGFwZUdyb3VwRGF0YSxcclxuVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LCBTVkdUcmFuc2Zvcm1EYXRhLCBTaGFwZVByb3BlcnR5RmFjdG9yeSwgU1ZHU2hhcGVEYXRhLCBTVkdFbGVtZW50c1JlbmRlcmVyLCBTaGFwZU1vZGlmaWVycyAqL2Z1bmN0aW9uIFNWR1NoYXBlRWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7Ly8gTGlzdCBvZiBkcmF3YWJsZSBlbGVtZW50c1xudGhpcy5zaGFwZXM9W107Ly8gRnVsbCBzaGFwZSBkYXRhXG50aGlzLnNoYXBlc0RhdGE9ZGF0YS5zaGFwZXM7Ly8gTGlzdCBvZiBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hhcGVzXG50aGlzLnN0eWxlc0xpc3Q9W107Ly8gTGlzdCBvZiBtb2RpZmllcnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hhcGVzXG50aGlzLnNoYXBlTW9kaWZpZXJzPVtdOy8vIExpc3Qgb2YgaXRlbXMgaW4gc2hhcGUgdHJlZVxudGhpcy5pdGVtc0RhdGE9W107Ly8gTGlzdCBvZiBpdGVtcyBpbiBwcmV2aW91cyBzaGFwZSB0cmVlXG50aGlzLnByb2Nlc3NlZEVsZW1lbnRzPVtdOy8vIExpc3Qgb2YgYW5pbWF0ZWQgY29tcG9uZW50c1xudGhpcy5hbmltYXRlZENvbnRlbnRzPVtdO3RoaXMuaW5pdEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApOy8vIE1vdmluZyBhbnkgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGdldCB0b28gbXVjaCBhY2Nlc3MgYWZ0ZXIgaW5pdGlhbGl6YXRpb24gYmVjYXVzZSBvZiB2OCB3YXkgb2YgaGFuZGxpbmcgbW9yZSB0aGFuIDEwIHByb3BlcnRpZXMuXG4vLyBMaXN0IG9mIGVsZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbnRoaXMucHJldlZpZXdEYXRhPVtdOy8vIE1vdmluZyBhbnkgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGdldCB0b28gbXVjaCBhY2Nlc3MgYWZ0ZXIgaW5pdGlhbGl6YXRpb24gYmVjYXVzZSBvZiB2OCB3YXkgb2YgaGFuZGxpbmcgbW9yZSB0aGFuIDEwIHByb3BlcnRpZXMuXG59ZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCxUcmFuc2Zvcm1FbGVtZW50LFNWR0Jhc2VFbGVtZW50LElTaGFwZUVsZW1lbnQsSGllcmFyY2h5RWxlbWVudCxGcmFtZUVsZW1lbnQsUmVuZGVyYWJsZURPTUVsZW1lbnRdLFNWR1NoYXBlRWxlbWVudCk7U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5pbml0U2Vjb25kYXJ5RWxlbWVudD1mdW5jdGlvbigpe307U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5pZGVudGl0eU1hdHJpeD1uZXcgTWF0cml4KCk7U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5idWlsZEV4cHJlc3Npb25JbnRlcmZhY2U9ZnVuY3Rpb24oKXt9O1NWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudD1mdW5jdGlvbigpe3RoaXMuc2VhcmNoU2hhcGVzKHRoaXMuc2hhcGVzRGF0YSx0aGlzLml0ZW1zRGF0YSx0aGlzLnByZXZWaWV3RGF0YSx0aGlzLmxheWVyRWxlbWVudCwwLFtdLHRydWUpO3RoaXMuZmlsdGVyVW5pcXVlU2hhcGVzKCk7fTsvKlxyXG5UaGlzIG1ldGhvZCBzZWFyY2hlcyBmb3IgbXVsdGlwbGUgc2hhcGVzIHRoYXQgYWZmZWN0IGEgc2luZ2xlIGVsZW1lbnQgYW5kIG9uZSBvZiB0aGVtIGlzIGFuaW1hdGVkXHJcbiovU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5maWx0ZXJVbmlxdWVTaGFwZXM9ZnVuY3Rpb24oKXt2YXIgaTt2YXIgbGVuPXRoaXMuc2hhcGVzLmxlbmd0aDt2YXIgc2hhcGU7dmFyIGo7dmFyIGpMZW49dGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDt2YXIgc3R5bGU7dmFyIHRlbXBTaGFwZXM9W107dmFyIGFyZUFuaW1hdGVkPWZhbHNlO2ZvcihqPTA7ajxqTGVuO2orPTEpe3N0eWxlPXRoaXMuc3R5bGVzTGlzdFtqXTthcmVBbmltYXRlZD1mYWxzZTt0ZW1wU2hhcGVzLmxlbmd0aD0wO2ZvcihpPTA7aTxsZW47aSs9MSl7c2hhcGU9dGhpcy5zaGFwZXNbaV07aWYoc2hhcGUuc3R5bGVzLmluZGV4T2Yoc3R5bGUpIT09LTEpe3RlbXBTaGFwZXMucHVzaChzaGFwZSk7YXJlQW5pbWF0ZWQ9c2hhcGUuX2lzQW5pbWF0ZWR8fGFyZUFuaW1hdGVkO319aWYodGVtcFNoYXBlcy5sZW5ndGg+MSYmYXJlQW5pbWF0ZWQpe3RoaXMuc2V0U2hhcGVzQXNBbmltYXRlZCh0ZW1wU2hhcGVzKTt9fX07U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zZXRTaGFwZXNBc0FuaW1hdGVkPWZ1bmN0aW9uKHNoYXBlcyl7dmFyIGk7dmFyIGxlbj1zaGFwZXMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7c2hhcGVzW2ldLnNldEFzQW5pbWF0ZWQoKTt9fTtTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVN0eWxlRWxlbWVudD1mdW5jdGlvbihkYXRhLGxldmVsKXsvLyBUT0RPOiBwcmV2ZW50IGRyYXdpbmcgb2YgaGlkZGVuIHN0eWxlc1xudmFyIGVsZW1lbnREYXRhO3ZhciBzdHlsZU9iPW5ldyBTVkdTdHlsZURhdGEoZGF0YSxsZXZlbCk7dmFyIHBhdGhFbGVtZW50PXN0eWxlT2IucEVsZW07aWYoZGF0YS50eT09PSdzdCcpe2VsZW1lbnREYXRhPW5ldyBTVkdTdHJva2VTdHlsZURhdGEodGhpcyxkYXRhLHN0eWxlT2IpO31lbHNlIGlmKGRhdGEudHk9PT0nZmwnKXtlbGVtZW50RGF0YT1uZXcgU1ZHRmlsbFN0eWxlRGF0YSh0aGlzLGRhdGEsc3R5bGVPYik7fWVsc2UgaWYoZGF0YS50eT09PSdnZid8fGRhdGEudHk9PT0nZ3MnKXt2YXIgR3JhZGllbnRDb25zdHJ1Y3Rvcj1kYXRhLnR5PT09J2dmJz9TVkdHcmFkaWVudEZpbGxTdHlsZURhdGE6U1ZHR3JhZGllbnRTdHJva2VTdHlsZURhdGE7ZWxlbWVudERhdGE9bmV3IEdyYWRpZW50Q29uc3RydWN0b3IodGhpcyxkYXRhLHN0eWxlT2IpO3RoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGVsZW1lbnREYXRhLmdmKTtpZihlbGVtZW50RGF0YS5tYXNrSWQpe3RoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGVsZW1lbnREYXRhLm1zKTt0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChlbGVtZW50RGF0YS5vZik7cGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdtYXNrJywndXJsKCcrbG9jYXRpb25IcmVmKycjJytlbGVtZW50RGF0YS5tYXNrSWQrJyknKTt9fWlmKGRhdGEudHk9PT0nc3QnfHxkYXRhLnR5PT09J2dzJyl7cGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsdGhpcy5sY0VudW1bZGF0YS5sY118fCdyb3VuZCcpO3BhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVqb2luJyx0aGlzLmxqRW51bVtkYXRhLmxqXXx8J3JvdW5kJyk7cGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCcwJyk7aWYoZGF0YS5saj09PTEpe3BhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW1pdGVybGltaXQnLGRhdGEubWwpO319aWYoZGF0YS5yPT09Mil7cGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsLXJ1bGUnLCdldmVub2RkJyk7fWlmKGRhdGEubG4pe3BhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLGRhdGEubG4pO31pZihkYXRhLmNsKXtwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJyxkYXRhLmNsKTt9aWYoZGF0YS5ibSl7cGF0aEVsZW1lbnQuc3R5bGVbJ21peC1ibGVuZC1tb2RlJ109Z2V0QmxlbmRNb2RlKGRhdGEuYm0pO310aGlzLnN0eWxlc0xpc3QucHVzaChzdHlsZU9iKTt0aGlzLmFkZFRvQW5pbWF0ZWRDb250ZW50cyhkYXRhLGVsZW1lbnREYXRhKTtyZXR1cm4gZWxlbWVudERhdGE7fTtTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUdyb3VwRWxlbWVudD1mdW5jdGlvbihkYXRhKXt2YXIgZWxlbWVudERhdGE9bmV3IFNoYXBlR3JvdXBEYXRhKCk7aWYoZGF0YS5sbil7ZWxlbWVudERhdGEuZ3Iuc2V0QXR0cmlidXRlKCdpZCcsZGF0YS5sbik7fWlmKGRhdGEuY2wpe2VsZW1lbnREYXRhLmdyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLGRhdGEuY2wpO31pZihkYXRhLmJtKXtlbGVtZW50RGF0YS5nci5zdHlsZVsnbWl4LWJsZW5kLW1vZGUnXT1nZXRCbGVuZE1vZGUoZGF0YS5ibSk7fXJldHVybiBlbGVtZW50RGF0YTt9O1NWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlVHJhbnNmb3JtRWxlbWVudD1mdW5jdGlvbihkYXRhLGNvbnRhaW5lcil7dmFyIHRyYW5zZm9ybVByb3BlcnR5PVRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eSh0aGlzLGRhdGEsdGhpcyk7dmFyIGVsZW1lbnREYXRhPW5ldyBTVkdUcmFuc2Zvcm1EYXRhKHRyYW5zZm9ybVByb3BlcnR5LHRyYW5zZm9ybVByb3BlcnR5Lm8sY29udGFpbmVyKTt0aGlzLmFkZFRvQW5pbWF0ZWRDb250ZW50cyhkYXRhLGVsZW1lbnREYXRhKTtyZXR1cm4gZWxlbWVudERhdGE7fTtTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNoYXBlRWxlbWVudD1mdW5jdGlvbihkYXRhLG93blRyYW5zZm9ybWVycyxsZXZlbCl7dmFyIHR5PTQ7aWYoZGF0YS50eT09PSdyYycpe3R5PTU7fWVsc2UgaWYoZGF0YS50eT09PSdlbCcpe3R5PTY7fWVsc2UgaWYoZGF0YS50eT09PSdzcicpe3R5PTc7fXZhciBzaGFwZVByb3BlcnR5PVNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLGRhdGEsdHksdGhpcyk7dmFyIGVsZW1lbnREYXRhPW5ldyBTVkdTaGFwZURhdGEob3duVHJhbnNmb3JtZXJzLGxldmVsLHNoYXBlUHJvcGVydHkpO3RoaXMuc2hhcGVzLnB1c2goZWxlbWVudERhdGEpO3RoaXMuYWRkU2hhcGVUb01vZGlmaWVycyhlbGVtZW50RGF0YSk7dGhpcy5hZGRUb0FuaW1hdGVkQ29udGVudHMoZGF0YSxlbGVtZW50RGF0YSk7cmV0dXJuIGVsZW1lbnREYXRhO307U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5hZGRUb0FuaW1hdGVkQ29udGVudHM9ZnVuY3Rpb24oZGF0YSxlbGVtZW50KXt2YXIgaT0wO3ZhciBsZW49dGhpcy5hbmltYXRlZENvbnRlbnRzLmxlbmd0aDt3aGlsZShpPGxlbil7aWYodGhpcy5hbmltYXRlZENvbnRlbnRzW2ldLmVsZW1lbnQ9PT1lbGVtZW50KXtyZXR1cm47fWkrPTE7fXRoaXMuYW5pbWF0ZWRDb250ZW50cy5wdXNoKHtmbjpTVkdFbGVtZW50c1JlbmRlcmVyLmNyZWF0ZVJlbmRlckZ1bmN0aW9uKGRhdGEpLGVsZW1lbnQ6ZWxlbWVudCxkYXRhOmRhdGF9KTt9O1NWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuc2V0RWxlbWVudFN0eWxlcz1mdW5jdGlvbihlbGVtZW50RGF0YSl7dmFyIGFycj1lbGVtZW50RGF0YS5zdHlsZXM7dmFyIGo7dmFyIGpMZW49dGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtmb3Ioaj0wO2o8akxlbjtqKz0xKXtpZighdGhpcy5zdHlsZXNMaXN0W2pdLmNsb3NlZCl7YXJyLnB1c2godGhpcy5zdHlsZXNMaXN0W2pdKTt9fX07U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZWxvYWRTaGFwZXM9ZnVuY3Rpb24oKXt0aGlzLl9pc0ZpcnN0RnJhbWU9dHJ1ZTt2YXIgaTt2YXIgbGVuPXRoaXMuaXRlbXNEYXRhLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMucHJldlZpZXdEYXRhW2ldPXRoaXMuaXRlbXNEYXRhW2ldO310aGlzLnNlYXJjaFNoYXBlcyh0aGlzLnNoYXBlc0RhdGEsdGhpcy5pdGVtc0RhdGEsdGhpcy5wcmV2Vmlld0RhdGEsdGhpcy5sYXllckVsZW1lbnQsMCxbXSx0cnVlKTt0aGlzLmZpbHRlclVuaXF1ZVNoYXBlcygpO2xlbj10aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uZ2V0VmFsdWUoKTt9dGhpcy5yZW5kZXJNb2RpZmllcnMoKTt9O1NWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuc2VhcmNoU2hhcGVzPWZ1bmN0aW9uKGFycixpdGVtc0RhdGEscHJldlZpZXdEYXRhLGNvbnRhaW5lcixsZXZlbCx0cmFuc2Zvcm1lcnMscmVuZGVyKXt2YXIgb3duVHJhbnNmb3JtZXJzPVtdLmNvbmNhdCh0cmFuc2Zvcm1lcnMpO3ZhciBpO3ZhciBsZW49YXJyLmxlbmd0aC0xO3ZhciBqO3ZhciBqTGVuO3ZhciBvd25TdHlsZXM9W107dmFyIG93bk1vZGlmaWVycz1bXTt2YXIgY3VycmVudFRyYW5zZm9ybTt2YXIgbW9kaWZpZXI7dmFyIHByb2Nlc3NlZFBvcztmb3IoaT1sZW47aT49MDtpLT0xKXtwcm9jZXNzZWRQb3M9dGhpcy5zZWFyY2hQcm9jZXNzZWRFbGVtZW50KGFycltpXSk7aWYoIXByb2Nlc3NlZFBvcyl7YXJyW2ldLl9yZW5kZXI9cmVuZGVyO31lbHNlIHtpdGVtc0RhdGFbaV09cHJldlZpZXdEYXRhW3Byb2Nlc3NlZFBvcy0xXTt9aWYoYXJyW2ldLnR5PT09J2ZsJ3x8YXJyW2ldLnR5PT09J3N0J3x8YXJyW2ldLnR5PT09J2dmJ3x8YXJyW2ldLnR5PT09J2dzJyl7aWYoIXByb2Nlc3NlZFBvcyl7aXRlbXNEYXRhW2ldPXRoaXMuY3JlYXRlU3R5bGVFbGVtZW50KGFycltpXSxsZXZlbCk7fWVsc2Uge2l0ZW1zRGF0YVtpXS5zdHlsZS5jbG9zZWQ9ZmFsc2U7fWlmKGFycltpXS5fcmVuZGVyKXtjb250YWluZXIuYXBwZW5kQ2hpbGQoaXRlbXNEYXRhW2ldLnN0eWxlLnBFbGVtKTt9b3duU3R5bGVzLnB1c2goaXRlbXNEYXRhW2ldLnN0eWxlKTt9ZWxzZSBpZihhcnJbaV0udHk9PT0nZ3InKXtpZighcHJvY2Vzc2VkUG9zKXtpdGVtc0RhdGFbaV09dGhpcy5jcmVhdGVHcm91cEVsZW1lbnQoYXJyW2ldKTt9ZWxzZSB7akxlbj1pdGVtc0RhdGFbaV0uaXQubGVuZ3RoO2ZvcihqPTA7ajxqTGVuO2orPTEpe2l0ZW1zRGF0YVtpXS5wcmV2Vmlld0RhdGFbal09aXRlbXNEYXRhW2ldLml0W2pdO319dGhpcy5zZWFyY2hTaGFwZXMoYXJyW2ldLml0LGl0ZW1zRGF0YVtpXS5pdCxpdGVtc0RhdGFbaV0ucHJldlZpZXdEYXRhLGl0ZW1zRGF0YVtpXS5ncixsZXZlbCsxLG93blRyYW5zZm9ybWVycyxyZW5kZXIpO2lmKGFycltpXS5fcmVuZGVyKXtjb250YWluZXIuYXBwZW5kQ2hpbGQoaXRlbXNEYXRhW2ldLmdyKTt9fWVsc2UgaWYoYXJyW2ldLnR5PT09J3RyJyl7aWYoIXByb2Nlc3NlZFBvcyl7aXRlbXNEYXRhW2ldPXRoaXMuY3JlYXRlVHJhbnNmb3JtRWxlbWVudChhcnJbaV0sY29udGFpbmVyKTt9Y3VycmVudFRyYW5zZm9ybT1pdGVtc0RhdGFbaV0udHJhbnNmb3JtO293blRyYW5zZm9ybWVycy5wdXNoKGN1cnJlbnRUcmFuc2Zvcm0pO31lbHNlIGlmKGFycltpXS50eT09PSdzaCd8fGFycltpXS50eT09PSdyYyd8fGFycltpXS50eT09PSdlbCd8fGFycltpXS50eT09PSdzcicpe2lmKCFwcm9jZXNzZWRQb3Mpe2l0ZW1zRGF0YVtpXT10aGlzLmNyZWF0ZVNoYXBlRWxlbWVudChhcnJbaV0sb3duVHJhbnNmb3JtZXJzLGxldmVsKTt9dGhpcy5zZXRFbGVtZW50U3R5bGVzKGl0ZW1zRGF0YVtpXSk7fWVsc2UgaWYoYXJyW2ldLnR5PT09J3RtJ3x8YXJyW2ldLnR5PT09J3JkJ3x8YXJyW2ldLnR5PT09J21zJ3x8YXJyW2ldLnR5PT09J3BiJyl7aWYoIXByb2Nlc3NlZFBvcyl7bW9kaWZpZXI9U2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTttb2RpZmllci5pbml0KHRoaXMsYXJyW2ldKTtpdGVtc0RhdGFbaV09bW9kaWZpZXI7dGhpcy5zaGFwZU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTt9ZWxzZSB7bW9kaWZpZXI9aXRlbXNEYXRhW2ldO21vZGlmaWVyLmNsb3NlZD1mYWxzZTt9b3duTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO31lbHNlIGlmKGFycltpXS50eT09PSdycCcpe2lmKCFwcm9jZXNzZWRQb3Mpe21vZGlmaWVyPVNoYXBlTW9kaWZpZXJzLmdldE1vZGlmaWVyKGFycltpXS50eSk7aXRlbXNEYXRhW2ldPW1vZGlmaWVyO21vZGlmaWVyLmluaXQodGhpcyxhcnIsaSxpdGVtc0RhdGEpO3RoaXMuc2hhcGVNb2RpZmllcnMucHVzaChtb2RpZmllcik7cmVuZGVyPWZhbHNlO31lbHNlIHttb2RpZmllcj1pdGVtc0RhdGFbaV07bW9kaWZpZXIuY2xvc2VkPXRydWU7fW93bk1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTt9dGhpcy5hZGRQcm9jZXNzZWRFbGVtZW50KGFycltpXSxpKzEpO31sZW49b3duU3R5bGVzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe293blN0eWxlc1tpXS5jbG9zZWQ9dHJ1ZTt9bGVuPW93bk1vZGlmaWVycy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtvd25Nb2RpZmllcnNbaV0uY2xvc2VkPXRydWU7fX07U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQ9ZnVuY3Rpb24oKXt0aGlzLnJlbmRlck1vZGlmaWVycygpO3ZhciBpO3ZhciBsZW49dGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMuc3R5bGVzTGlzdFtpXS5yZXNldCgpO310aGlzLnJlbmRlclNoYXBlKCk7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZih0aGlzLnN0eWxlc0xpc3RbaV0uX21kZnx8dGhpcy5faXNGaXJzdEZyYW1lKXtpZih0aGlzLnN0eWxlc0xpc3RbaV0ubXNFbGVtKXt0aGlzLnN0eWxlc0xpc3RbaV0ubXNFbGVtLnNldEF0dHJpYnV0ZSgnZCcsdGhpcy5zdHlsZXNMaXN0W2ldLmQpOy8vIEFkZGluZyBNMCAwIGZpeGVzIHNhbWUgbWFzayBidWcgb24gYWxsIGJyb3dzZXJzXG50aGlzLnN0eWxlc0xpc3RbaV0uZD0nTTAgMCcrdGhpcy5zdHlsZXNMaXN0W2ldLmQ7fXRoaXMuc3R5bGVzTGlzdFtpXS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ2QnLHRoaXMuc3R5bGVzTGlzdFtpXS5kfHwnTTAgMCcpO319fTtTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclNoYXBlPWZ1bmN0aW9uKCl7dmFyIGk7dmFyIGxlbj10aGlzLmFuaW1hdGVkQ29udGVudHMubGVuZ3RoO3ZhciBhbmltYXRlZENvbnRlbnQ7Zm9yKGk9MDtpPGxlbjtpKz0xKXthbmltYXRlZENvbnRlbnQ9dGhpcy5hbmltYXRlZENvbnRlbnRzW2ldO2lmKCh0aGlzLl9pc0ZpcnN0RnJhbWV8fGFuaW1hdGVkQ29udGVudC5lbGVtZW50Ll9pc0FuaW1hdGVkKSYmYW5pbWF0ZWRDb250ZW50LmRhdGEhPT10cnVlKXthbmltYXRlZENvbnRlbnQuZm4oYW5pbWF0ZWRDb250ZW50LmRhdGEsYW5pbWF0ZWRDb250ZW50LmVsZW1lbnQsdGhpcy5faXNGaXJzdEZyYW1lKTt9fX07U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5kZXN0cm95QmFzZUVsZW1lbnQoKTt0aGlzLnNoYXBlc0RhdGE9bnVsbDt0aGlzLml0ZW1zRGF0YT1udWxsO307LyogZ2xvYmFsIGNyZWF0ZU5TICovZnVuY3Rpb24gU1ZHVGludEZpbHRlcihmaWx0ZXIsZmlsdGVyTWFuYWdlcil7dGhpcy5maWx0ZXJNYW5hZ2VyPWZpbHRlck1hbmFnZXI7dmFyIGZlQ29sb3JNYXRyaXg9Y3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsJ21hdHJpeCcpO2ZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCdsaW5lYXJSR0InKTtmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywnMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMCAwIDAgMSAwJyk7ZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsJ2YxJyk7ZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29sb3JNYXRyaXgpO2ZlQ29sb3JNYXRyaXg9Y3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsJ21hdHJpeCcpO2ZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCdzUkdCJyk7ZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsJzEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCcpO2ZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdyZXN1bHQnLCdmMicpO2ZpbHRlci5hcHBlbmRDaGlsZChmZUNvbG9yTWF0cml4KTt0aGlzLm1hdHJpeEZpbHRlcj1mZUNvbG9yTWF0cml4O2lmKGZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52IT09MTAwfHxmaWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAuayl7dmFyIGZlTWVyZ2U9Y3JlYXRlTlMoJ2ZlTWVyZ2UnKTtmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVNZXJnZSk7dmFyIGZlTWVyZ2VOb2RlO2ZlTWVyZ2VOb2RlPWNyZWF0ZU5TKCdmZU1lcmdlTm9kZScpO2ZlTWVyZ2VOb2RlLnNldEF0dHJpYnV0ZSgnaW4nLCdTb3VyY2VHcmFwaGljJyk7ZmVNZXJnZS5hcHBlbmRDaGlsZChmZU1lcmdlTm9kZSk7ZmVNZXJnZU5vZGU9Y3JlYXRlTlMoJ2ZlTWVyZ2VOb2RlJyk7ZmVNZXJnZU5vZGUuc2V0QXR0cmlidXRlKCdpbicsJ2YyJyk7ZmVNZXJnZS5hcHBlbmRDaGlsZChmZU1lcmdlTm9kZSk7fX1TVkdUaW50RmlsdGVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbihmb3JjZVJlbmRlcil7aWYoZm9yY2VSZW5kZXJ8fHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKXt2YXIgY29sb3JCbGFjaz10aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52O3ZhciBjb2xvcldoaXRlPXRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnY7dmFyIG9wYWNpdHk9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudi8xMDA7dGhpcy5tYXRyaXhGaWx0ZXIuc2V0QXR0cmlidXRlKCd2YWx1ZXMnLGNvbG9yV2hpdGVbMF0tY29sb3JCbGFja1swXSsnIDAgMCAwICcrY29sb3JCbGFja1swXSsnICcrKGNvbG9yV2hpdGVbMV0tY29sb3JCbGFja1sxXSkrJyAwIDAgMCAnK2NvbG9yQmxhY2tbMV0rJyAnKyhjb2xvcldoaXRlWzJdLWNvbG9yQmxhY2tbMl0pKycgMCAwIDAgJytjb2xvckJsYWNrWzJdKycgMCAwIDAgJytvcGFjaXR5KycgMCcpO319Oy8qIGdsb2JhbCBjcmVhdGVOUyAqL2Z1bmN0aW9uIFNWR0ZpbGxGaWx0ZXIoZmlsdGVyLGZpbHRlck1hbmFnZXIpe3RoaXMuZmlsdGVyTWFuYWdlcj1maWx0ZXJNYW5hZ2VyO3ZhciBmZUNvbG9yTWF0cml4PWNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7ZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdtYXRyaXgnKTtmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywnc1JHQicpO2ZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCcxIDAgMCAwIDAgMCAxIDAgMCAwIDAgMCAxIDAgMCAwIDAgMCAxIDAnKTtmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb2xvck1hdHJpeCk7dGhpcy5tYXRyaXhGaWx0ZXI9ZmVDb2xvck1hdHJpeDt9U1ZHRmlsbEZpbHRlci5wcm90b3R5cGUucmVuZGVyRnJhbWU9ZnVuY3Rpb24oZm9yY2VSZW5kZXIpe2lmKGZvcmNlUmVuZGVyfHx0aGlzLmZpbHRlck1hbmFnZXIuX21kZil7dmFyIGNvbG9yPXRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLnY7dmFyIG9wYWNpdHk9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzZdLnAudjt0aGlzLm1hdHJpeEZpbHRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsJzAgMCAwIDAgJytjb2xvclswXSsnIDAgMCAwIDAgJytjb2xvclsxXSsnIDAgMCAwIDAgJytjb2xvclsyXSsnIDAgMCAwICcrb3BhY2l0eSsnIDAnKTt9fTsvKiBnbG9iYWwgY3JlYXRlTlMgKi9mdW5jdGlvbiBTVkdHYXVzc2lhbkJsdXJFZmZlY3QoZmlsdGVyLGZpbHRlck1hbmFnZXIpey8vIE91dHNldCB0aGUgZmlsdGVyIHJlZ2lvbiBieSAxMDAlIG9uIGFsbCBzaWRlcyB0byBhY2NvbW1vZGF0ZSBibHVyIGV4cGFuc2lvbi5cbmZpbHRlci5zZXRBdHRyaWJ1dGUoJ3gnLCctMTAwJScpO2ZpbHRlci5zZXRBdHRyaWJ1dGUoJ3knLCctMTAwJScpO2ZpbHRlci5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywnMzAwJScpO2ZpbHRlci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsJzMwMCUnKTt0aGlzLmZpbHRlck1hbmFnZXI9ZmlsdGVyTWFuYWdlcjt2YXIgZmVHYXVzc2lhbkJsdXI9Y3JlYXRlTlMoJ2ZlR2F1c3NpYW5CbHVyJyk7ZmlsdGVyLmFwcGVuZENoaWxkKGZlR2F1c3NpYW5CbHVyKTt0aGlzLmZlR2F1c3NpYW5CbHVyPWZlR2F1c3NpYW5CbHVyO31TVkdHYXVzc2lhbkJsdXJFZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lPWZ1bmN0aW9uKGZvcmNlUmVuZGVyKXtpZihmb3JjZVJlbmRlcnx8dGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpey8vIEVtcGlyaWNhbCB2YWx1ZSwgbWF0Y2hpbmcgQUUncyBibHVyIGFwcGVhcmFuY2UuXG52YXIga0JsdXJyaW5lc3NUb1NpZ21hPTAuMzt2YXIgc2lnbWE9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudiprQmx1cnJpbmVzc1RvU2lnbWE7Ly8gRGltZW5zaW9ucyBtYXBwaW5nOlxuLy9cbi8vICAgMSAtPiBob3Jpem9udGFsICYgdmVydGljYWxcbi8vICAgMiAtPiBob3Jpem9udGFsIG9ubHlcbi8vICAgMyAtPiB2ZXJ0aWNhbCBvbmx5XG4vL1xudmFyIGRpbWVuc2lvbnM9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAudjt2YXIgc2lnbWFYPWRpbWVuc2lvbnM9PTM/MDpzaWdtYTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxudmFyIHNpZ21hWT1kaW1lbnNpb25zPT0yPzA6c2lnbWE7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbnRoaXMuZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdzdGREZXZpYXRpb24nLHNpZ21hWCsnICcrc2lnbWFZKTsvLyBSZXBlYXQgZWRnZXMgbWFwcGluZzpcbi8vXG4vLyAgIDAgLT4gb2ZmIC0+IGR1cGxpY2F0ZVxuLy8gICAxIC0+IG9uICAtPiB3cmFwXG52YXIgZWRnZU1vZGU9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudj09MT8nd3JhcCc6J2R1cGxpY2F0ZSc7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbnRoaXMuZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdlZGdlTW9kZScsZWRnZU1vZGUpO319Oy8qIGdsb2JhbCBjcmVhdGVOUywgY3JlYXRlRWxlbWVudElELCBsb2NhdGlvbkhyZWYsIGJtRmxvb3IgKi9mdW5jdGlvbiBTVkdTdHJva2VFZmZlY3QoZWxlbSxmaWx0ZXJNYW5hZ2VyKXt0aGlzLmluaXRpYWxpemVkPWZhbHNlO3RoaXMuZmlsdGVyTWFuYWdlcj1maWx0ZXJNYW5hZ2VyO3RoaXMuZWxlbT1lbGVtO3RoaXMucGF0aHM9W107fVNWR1N0cm9rZUVmZmVjdC5wcm90b3R5cGUuaW5pdGlhbGl6ZT1mdW5jdGlvbigpe3ZhciBlbGVtQ2hpbGRyZW49dGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZHJlbnx8dGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZE5vZGVzO3ZhciBwYXRoO3ZhciBncm91cFBhdGg7dmFyIGk7dmFyIGxlbjtpZih0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMV0ucC52PT09MSl7bGVuPXRoaXMuZWxlbS5tYXNrTWFuYWdlci5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO2k9MDt9ZWxzZSB7aT10aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52LTE7bGVuPWkrMTt9Z3JvdXBQYXRoPWNyZWF0ZU5TKCdnJyk7Z3JvdXBQYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsJ25vbmUnKTtncm91cFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsJ3JvdW5kJyk7Z3JvdXBQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnLDEpO2ZvcihpO2k8bGVuO2krPTEpe3BhdGg9Y3JlYXRlTlMoJ3BhdGgnKTtncm91cFBhdGguYXBwZW5kQ2hpbGQocGF0aCk7dGhpcy5wYXRocy5wdXNoKHtwOnBhdGgsbTppfSk7fWlmKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52PT09Myl7dmFyIG1hc2s9Y3JlYXRlTlMoJ21hc2snKTt2YXIgaWQ9Y3JlYXRlRWxlbWVudElEKCk7bWFzay5zZXRBdHRyaWJ1dGUoJ2lkJyxpZCk7bWFzay5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsJ2FscGhhJyk7bWFzay5hcHBlbmRDaGlsZChncm91cFBhdGgpO3RoaXMuZWxlbS5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQobWFzayk7dmFyIGc9Y3JlYXRlTlMoJ2cnKTtnLnNldEF0dHJpYnV0ZSgnbWFzaycsJ3VybCgnK2xvY2F0aW9uSHJlZisnIycraWQrJyknKTt3aGlsZShlbGVtQ2hpbGRyZW5bMF0pe2cuYXBwZW5kQ2hpbGQoZWxlbUNoaWxkcmVuWzBdKTt9dGhpcy5lbGVtLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChnKTt0aGlzLm1hc2tlcj1tYXNrO2dyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsJyNmZmYnKTt9ZWxzZSBpZih0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMTBdLnAudj09PTF8fHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52PT09Mil7aWYodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnY9PT0yKXtlbGVtQ2hpbGRyZW49dGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZHJlbnx8dGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZE5vZGVzO3doaWxlKGVsZW1DaGlsZHJlbi5sZW5ndGgpe3RoaXMuZWxlbS5sYXllckVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbUNoaWxkcmVuWzBdKTt9fXRoaXMuZWxlbS5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoZ3JvdXBQYXRoKTt0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnbWFzaycpO2dyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsJyNmZmYnKTt9dGhpcy5pbml0aWFsaXplZD10cnVlO3RoaXMucGF0aE1hc2tlcj1ncm91cFBhdGg7fTtTVkdTdHJva2VFZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lPWZ1bmN0aW9uKGZvcmNlUmVuZGVyKXtpZighdGhpcy5pbml0aWFsaXplZCl7dGhpcy5pbml0aWFsaXplKCk7fXZhciBpO3ZhciBsZW49dGhpcy5wYXRocy5sZW5ndGg7dmFyIG1hc2s7dmFyIHBhdGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZih0aGlzLnBhdGhzW2ldLm0hPT0tMSl7bWFzaz10aGlzLmVsZW0ubWFza01hbmFnZXIudmlld0RhdGFbdGhpcy5wYXRoc1tpXS5tXTtwYXRoPXRoaXMucGF0aHNbaV0ucDtpZihmb3JjZVJlbmRlcnx8dGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGZ8fG1hc2sucHJvcC5fbWRmKXtwYXRoLnNldEF0dHJpYnV0ZSgnZCcsbWFzay5sYXN0UGF0aCk7fWlmKGZvcmNlUmVuZGVyfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOV0ucC5fbWRmfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbN10ucC5fbWRmfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOF0ucC5fbWRmfHxtYXNrLnByb3AuX21kZil7dmFyIGRhc2hhcnJheVZhbHVlO2lmKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s3XS5wLnYhPT0wfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOF0ucC52IT09MTAwKXt2YXIgcz1NYXRoLm1pbih0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbN10ucC52LHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s4XS5wLnYpKjAuMDE7dmFyIGU9TWF0aC5tYXgodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzddLnAudix0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOF0ucC52KSowLjAxO3ZhciBsPXBhdGguZ2V0VG90YWxMZW5ndGgoKTtkYXNoYXJyYXlWYWx1ZT0nMCAwIDAgJytsKnMrJyAnO3ZhciBsaW5lTGVuZ3RoPWwqKGUtcyk7dmFyIHNlZ21lbnQ9MSt0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52KjIqdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzldLnAudiowLjAxO3ZhciB1bml0cz1NYXRoLmZsb29yKGxpbmVMZW5ndGgvc2VnbWVudCk7dmFyIGo7Zm9yKGo9MDtqPHVuaXRzO2orPTEpe2Rhc2hhcnJheVZhbHVlKz0nMSAnK3RoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLnYqMip0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOV0ucC52KjAuMDErJyAnO31kYXNoYXJyYXlWYWx1ZSs9JzAgJytsKjEwKycgMCAwJzt9ZWxzZSB7ZGFzaGFycmF5VmFsdWU9JzEgJyt0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52KjIqdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzldLnAudiowLjAxO31wYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsZGFzaGFycmF5VmFsdWUpO319fWlmKGZvcmNlUmVuZGVyfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmKXt0aGlzLnBhdGhNYXNrZXIuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLnYqMik7fWlmKGZvcmNlUmVuZGVyfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNl0ucC5fbWRmKXt0aGlzLnBhdGhNYXNrZXIuc2V0QXR0cmlidXRlKCdvcGFjaXR5Jyx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNl0ucC52KTt9aWYodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnY9PT0xfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMTBdLnAudj09PTIpe2lmKGZvcmNlUmVuZGVyfHx0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbM10ucC5fbWRmKXt2YXIgY29sb3I9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzNdLnAudjt0aGlzLnBhdGhNYXNrZXIuc2V0QXR0cmlidXRlKCdzdHJva2UnLCdyZ2IoJytibUZsb29yKGNvbG9yWzBdKjI1NSkrJywnK2JtRmxvb3IoY29sb3JbMV0qMjU1KSsnLCcrYm1GbG9vcihjb2xvclsyXSoyNTUpKycpJyk7fX19Oy8qIGdsb2JhbCBjcmVhdGVOUyAqL2Z1bmN0aW9uIFNWR1RyaXRvbmVGaWx0ZXIoZmlsdGVyLGZpbHRlck1hbmFnZXIpe3RoaXMuZmlsdGVyTWFuYWdlcj1maWx0ZXJNYW5hZ2VyO3ZhciBmZUNvbG9yTWF0cml4PWNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7ZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdtYXRyaXgnKTtmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywnbGluZWFyUkdCJyk7ZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsJzAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAgMCAwIDEgMCcpO2ZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdyZXN1bHQnLCdmMScpO2ZpbHRlci5hcHBlbmRDaGlsZChmZUNvbG9yTWF0cml4KTt2YXIgZmVDb21wb25lbnRUcmFuc2Zlcj1jcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpO2ZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCdzUkdCJyk7ZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29tcG9uZW50VHJhbnNmZXIpO3RoaXMubWF0cml4RmlsdGVyPWZlQ29tcG9uZW50VHJhbnNmZXI7dmFyIGZlRnVuY1I9Y3JlYXRlTlMoJ2ZlRnVuY1InKTtmZUZ1bmNSLnNldEF0dHJpYnV0ZSgndHlwZScsJ3RhYmxlJyk7ZmVDb21wb25lbnRUcmFuc2Zlci5hcHBlbmRDaGlsZChmZUZ1bmNSKTt0aGlzLmZlRnVuY1I9ZmVGdW5jUjt2YXIgZmVGdW5jRz1jcmVhdGVOUygnZmVGdW5jRycpO2ZlRnVuY0cuc2V0QXR0cmlidXRlKCd0eXBlJywndGFibGUnKTtmZUNvbXBvbmVudFRyYW5zZmVyLmFwcGVuZENoaWxkKGZlRnVuY0cpO3RoaXMuZmVGdW5jRz1mZUZ1bmNHO3ZhciBmZUZ1bmNCPWNyZWF0ZU5TKCdmZUZ1bmNCJyk7ZmVGdW5jQi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCd0YWJsZScpO2ZlQ29tcG9uZW50VHJhbnNmZXIuYXBwZW5kQ2hpbGQoZmVGdW5jQik7dGhpcy5mZUZ1bmNCPWZlRnVuY0I7fVNWR1RyaXRvbmVGaWx0ZXIucHJvdG90eXBlLnJlbmRlckZyYW1lPWZ1bmN0aW9uKGZvcmNlUmVuZGVyKXtpZihmb3JjZVJlbmRlcnx8dGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpe3ZhciBjb2xvcjE9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjt2YXIgY29sb3IyPXRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnY7dmFyIGNvbG9yMz10aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52O3ZhciB0YWJsZVI9Y29sb3IzWzBdKycgJytjb2xvcjJbMF0rJyAnK2NvbG9yMVswXTt2YXIgdGFibGVHPWNvbG9yM1sxXSsnICcrY29sb3IyWzFdKycgJytjb2xvcjFbMV07dmFyIHRhYmxlQj1jb2xvcjNbMl0rJyAnK2NvbG9yMlsyXSsnICcrY29sb3IxWzJdO3RoaXMuZmVGdW5jUi5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJyx0YWJsZVIpO3RoaXMuZmVGdW5jRy5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJyx0YWJsZUcpO3RoaXMuZmVGdW5jQi5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJyx0YWJsZUIpOy8vIHZhciBvcGFjaXR5ID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudi8xMDA7XG4vLyB0aGlzLm1hdHJpeEZpbHRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsKGNvbG9yV2hpdGVbMF0tIGNvbG9yQmxhY2tbMF0pKycgMCAwIDAgJysgY29sb3JCbGFja1swXSArJyAnKyAoY29sb3JXaGl0ZVsxXS0gY29sb3JCbGFja1sxXSkgKycgMCAwIDAgJysgY29sb3JCbGFja1sxXSArJyAnKyAoY29sb3JXaGl0ZVsyXS0gY29sb3JCbGFja1syXSkgKycgMCAwIDAgJysgY29sb3JCbGFja1syXSArJyAwIDAgMCAnICsgb3BhY2l0eSArICcgMCcpO1xufX07LyogZ2xvYmFsIGNyZWF0ZU5TICovZnVuY3Rpb24gU1ZHUHJvTGV2ZWxzRmlsdGVyKGZpbHRlcixmaWx0ZXJNYW5hZ2VyKXt0aGlzLmZpbHRlck1hbmFnZXI9ZmlsdGVyTWFuYWdlcjt2YXIgZWZmZWN0RWxlbWVudHM9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzO3ZhciBmZUNvbXBvbmVudFRyYW5zZmVyPWNyZWF0ZU5TKCdmZUNvbXBvbmVudFRyYW5zZmVyJyk7aWYoZWZmZWN0RWxlbWVudHNbMTBdLnAua3x8ZWZmZWN0RWxlbWVudHNbMTBdLnAudiE9PTB8fGVmZmVjdEVsZW1lbnRzWzExXS5wLmt8fGVmZmVjdEVsZW1lbnRzWzExXS5wLnYhPT0xfHxlZmZlY3RFbGVtZW50c1sxMl0ucC5rfHxlZmZlY3RFbGVtZW50c1sxMl0ucC52IT09MXx8ZWZmZWN0RWxlbWVudHNbMTNdLnAua3x8ZWZmZWN0RWxlbWVudHNbMTNdLnAudiE9PTB8fGVmZmVjdEVsZW1lbnRzWzE0XS5wLmt8fGVmZmVjdEVsZW1lbnRzWzE0XS5wLnYhPT0xKXt0aGlzLmZlRnVuY1I9dGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY1InLGZlQ29tcG9uZW50VHJhbnNmZXIpO31pZihlZmZlY3RFbGVtZW50c1sxN10ucC5rfHxlZmZlY3RFbGVtZW50c1sxN10ucC52IT09MHx8ZWZmZWN0RWxlbWVudHNbMThdLnAua3x8ZWZmZWN0RWxlbWVudHNbMThdLnAudiE9PTF8fGVmZmVjdEVsZW1lbnRzWzE5XS5wLmt8fGVmZmVjdEVsZW1lbnRzWzE5XS5wLnYhPT0xfHxlZmZlY3RFbGVtZW50c1syMF0ucC5rfHxlZmZlY3RFbGVtZW50c1syMF0ucC52IT09MHx8ZWZmZWN0RWxlbWVudHNbMjFdLnAua3x8ZWZmZWN0RWxlbWVudHNbMjFdLnAudiE9PTEpe3RoaXMuZmVGdW5jRz10aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jRycsZmVDb21wb25lbnRUcmFuc2Zlcik7fWlmKGVmZmVjdEVsZW1lbnRzWzI0XS5wLmt8fGVmZmVjdEVsZW1lbnRzWzI0XS5wLnYhPT0wfHxlZmZlY3RFbGVtZW50c1syNV0ucC5rfHxlZmZlY3RFbGVtZW50c1syNV0ucC52IT09MXx8ZWZmZWN0RWxlbWVudHNbMjZdLnAua3x8ZWZmZWN0RWxlbWVudHNbMjZdLnAudiE9PTF8fGVmZmVjdEVsZW1lbnRzWzI3XS5wLmt8fGVmZmVjdEVsZW1lbnRzWzI3XS5wLnYhPT0wfHxlZmZlY3RFbGVtZW50c1syOF0ucC5rfHxlZmZlY3RFbGVtZW50c1syOF0ucC52IT09MSl7dGhpcy5mZUZ1bmNCPXRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNCJyxmZUNvbXBvbmVudFRyYW5zZmVyKTt9aWYoZWZmZWN0RWxlbWVudHNbMzFdLnAua3x8ZWZmZWN0RWxlbWVudHNbMzFdLnAudiE9PTB8fGVmZmVjdEVsZW1lbnRzWzMyXS5wLmt8fGVmZmVjdEVsZW1lbnRzWzMyXS5wLnYhPT0xfHxlZmZlY3RFbGVtZW50c1szM10ucC5rfHxlZmZlY3RFbGVtZW50c1szM10ucC52IT09MXx8ZWZmZWN0RWxlbWVudHNbMzRdLnAua3x8ZWZmZWN0RWxlbWVudHNbMzRdLnAudiE9PTB8fGVmZmVjdEVsZW1lbnRzWzM1XS5wLmt8fGVmZmVjdEVsZW1lbnRzWzM1XS5wLnYhPT0xKXt0aGlzLmZlRnVuY0E9dGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY0EnLGZlQ29tcG9uZW50VHJhbnNmZXIpO31pZih0aGlzLmZlRnVuY1J8fHRoaXMuZmVGdW5jR3x8dGhpcy5mZUZ1bmNCfHx0aGlzLmZlRnVuY0Epe2ZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCdzUkdCJyk7ZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29tcG9uZW50VHJhbnNmZXIpO2ZlQ29tcG9uZW50VHJhbnNmZXI9Y3JlYXRlTlMoJ2ZlQ29tcG9uZW50VHJhbnNmZXInKTt9aWYoZWZmZWN0RWxlbWVudHNbM10ucC5rfHxlZmZlY3RFbGVtZW50c1szXS5wLnYhPT0wfHxlZmZlY3RFbGVtZW50c1s0XS5wLmt8fGVmZmVjdEVsZW1lbnRzWzRdLnAudiE9PTF8fGVmZmVjdEVsZW1lbnRzWzVdLnAua3x8ZWZmZWN0RWxlbWVudHNbNV0ucC52IT09MXx8ZWZmZWN0RWxlbWVudHNbNl0ucC5rfHxlZmZlY3RFbGVtZW50c1s2XS5wLnYhPT0wfHxlZmZlY3RFbGVtZW50c1s3XS5wLmt8fGVmZmVjdEVsZW1lbnRzWzddLnAudiE9PTEpe2ZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCdzUkdCJyk7ZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29tcG9uZW50VHJhbnNmZXIpO3RoaXMuZmVGdW5jUkNvbXBvc2VkPXRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNSJyxmZUNvbXBvbmVudFRyYW5zZmVyKTt0aGlzLmZlRnVuY0dDb21wb3NlZD10aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jRycsZmVDb21wb25lbnRUcmFuc2Zlcik7dGhpcy5mZUZ1bmNCQ29tcG9zZWQ9dGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY0InLGZlQ29tcG9uZW50VHJhbnNmZXIpO319U1ZHUHJvTGV2ZWxzRmlsdGVyLnByb3RvdHlwZS5jcmVhdGVGZUZ1bmM9ZnVuY3Rpb24odHlwZSxmZUNvbXBvbmVudFRyYW5zZmVyKXt2YXIgZmVGdW5jPWNyZWF0ZU5TKHR5cGUpO2ZlRnVuYy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCd0YWJsZScpO2ZlQ29tcG9uZW50VHJhbnNmZXIuYXBwZW5kQ2hpbGQoZmVGdW5jKTtyZXR1cm4gZmVGdW5jO307U1ZHUHJvTGV2ZWxzRmlsdGVyLnByb3RvdHlwZS5nZXRUYWJsZVZhbHVlPWZ1bmN0aW9uKGlucHV0QmxhY2ssaW5wdXRXaGl0ZSxnYW1tYSxvdXRwdXRCbGFjayxvdXRwdXRXaGl0ZSl7dmFyIGNudD0wO3ZhciBzZWdtZW50cz0yNTY7dmFyIHBlcmM7dmFyIG1pbj1NYXRoLm1pbihpbnB1dEJsYWNrLGlucHV0V2hpdGUpO3ZhciBtYXg9TWF0aC5tYXgoaW5wdXRCbGFjayxpbnB1dFdoaXRlKTt2YXIgdGFibGU9QXJyYXkuY2FsbChudWxsLHtsZW5ndGg6c2VnbWVudHN9KTt2YXIgY29sb3JWYWx1ZTt2YXIgcG9zPTA7dmFyIG91dHB1dERlbHRhPW91dHB1dFdoaXRlLW91dHB1dEJsYWNrO3ZhciBpbnB1dERlbHRhPWlucHV0V2hpdGUtaW5wdXRCbGFjazt3aGlsZShjbnQ8PTI1Nil7cGVyYz1jbnQvMjU2O2lmKHBlcmM8PW1pbil7Y29sb3JWYWx1ZT1pbnB1dERlbHRhPDA/b3V0cHV0V2hpdGU6b3V0cHV0QmxhY2s7fWVsc2UgaWYocGVyYz49bWF4KXtjb2xvclZhbHVlPWlucHV0RGVsdGE8MD9vdXRwdXRCbGFjazpvdXRwdXRXaGl0ZTt9ZWxzZSB7Y29sb3JWYWx1ZT1vdXRwdXRCbGFjaytvdXRwdXREZWx0YSpNYXRoLnBvdygocGVyYy1pbnB1dEJsYWNrKS9pbnB1dERlbHRhLDEvZ2FtbWEpO310YWJsZVtwb3NdPWNvbG9yVmFsdWU7cG9zKz0xO2NudCs9MjU2LyhzZWdtZW50cy0xKTt9cmV0dXJuIHRhYmxlLmpvaW4oJyAnKTt9O1NWR1Byb0xldmVsc0ZpbHRlci5wcm90b3R5cGUucmVuZGVyRnJhbWU9ZnVuY3Rpb24oZm9yY2VSZW5kZXIpe2lmKGZvcmNlUmVuZGVyfHx0aGlzLmZpbHRlck1hbmFnZXIuX21kZil7dmFyIHZhbDt2YXIgZWZmZWN0RWxlbWVudHM9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzO2lmKHRoaXMuZmVGdW5jUkNvbXBvc2VkJiYoZm9yY2VSZW5kZXJ8fGVmZmVjdEVsZW1lbnRzWzNdLnAuX21kZnx8ZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmfHxlZmZlY3RFbGVtZW50c1s1XS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzZdLnAuX21kZnx8ZWZmZWN0RWxlbWVudHNbN10ucC5fbWRmKSl7dmFsPXRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1szXS5wLnYsZWZmZWN0RWxlbWVudHNbNF0ucC52LGVmZmVjdEVsZW1lbnRzWzVdLnAudixlZmZlY3RFbGVtZW50c1s2XS5wLnYsZWZmZWN0RWxlbWVudHNbN10ucC52KTt0aGlzLmZlRnVuY1JDb21wb3NlZC5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJyx2YWwpO3RoaXMuZmVGdW5jR0NvbXBvc2VkLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLHZhbCk7dGhpcy5mZUZ1bmNCQ29tcG9zZWQuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsdmFsKTt9aWYodGhpcy5mZUZ1bmNSJiYoZm9yY2VSZW5kZXJ8fGVmZmVjdEVsZW1lbnRzWzEwXS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzExXS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzEyXS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzEzXS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzE0XS5wLl9tZGYpKXt2YWw9dGhpcy5nZXRUYWJsZVZhbHVlKGVmZmVjdEVsZW1lbnRzWzEwXS5wLnYsZWZmZWN0RWxlbWVudHNbMTFdLnAudixlZmZlY3RFbGVtZW50c1sxMl0ucC52LGVmZmVjdEVsZW1lbnRzWzEzXS5wLnYsZWZmZWN0RWxlbWVudHNbMTRdLnAudik7dGhpcy5mZUZ1bmNSLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLHZhbCk7fWlmKHRoaXMuZmVGdW5jRyYmKGZvcmNlUmVuZGVyfHxlZmZlY3RFbGVtZW50c1sxN10ucC5fbWRmfHxlZmZlY3RFbGVtZW50c1sxOF0ucC5fbWRmfHxlZmZlY3RFbGVtZW50c1sxOV0ucC5fbWRmfHxlZmZlY3RFbGVtZW50c1syMF0ucC5fbWRmfHxlZmZlY3RFbGVtZW50c1syMV0ucC5fbWRmKSl7dmFsPXRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1sxN10ucC52LGVmZmVjdEVsZW1lbnRzWzE4XS5wLnYsZWZmZWN0RWxlbWVudHNbMTldLnAudixlZmZlY3RFbGVtZW50c1syMF0ucC52LGVmZmVjdEVsZW1lbnRzWzIxXS5wLnYpO3RoaXMuZmVGdW5jRy5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJyx2YWwpO31pZih0aGlzLmZlRnVuY0ImJihmb3JjZVJlbmRlcnx8ZWZmZWN0RWxlbWVudHNbMjRdLnAuX21kZnx8ZWZmZWN0RWxlbWVudHNbMjVdLnAuX21kZnx8ZWZmZWN0RWxlbWVudHNbMjZdLnAuX21kZnx8ZWZmZWN0RWxlbWVudHNbMjddLnAuX21kZnx8ZWZmZWN0RWxlbWVudHNbMjhdLnAuX21kZikpe3ZhbD10aGlzLmdldFRhYmxlVmFsdWUoZWZmZWN0RWxlbWVudHNbMjRdLnAudixlZmZlY3RFbGVtZW50c1syNV0ucC52LGVmZmVjdEVsZW1lbnRzWzI2XS5wLnYsZWZmZWN0RWxlbWVudHNbMjddLnAudixlZmZlY3RFbGVtZW50c1syOF0ucC52KTt0aGlzLmZlRnVuY0Iuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsdmFsKTt9aWYodGhpcy5mZUZ1bmNBJiYoZm9yY2VSZW5kZXJ8fGVmZmVjdEVsZW1lbnRzWzMxXS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzMyXS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzMzXS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzM0XS5wLl9tZGZ8fGVmZmVjdEVsZW1lbnRzWzM1XS5wLl9tZGYpKXt2YWw9dGhpcy5nZXRUYWJsZVZhbHVlKGVmZmVjdEVsZW1lbnRzWzMxXS5wLnYsZWZmZWN0RWxlbWVudHNbMzJdLnAudixlZmZlY3RFbGVtZW50c1szM10ucC52LGVmZmVjdEVsZW1lbnRzWzM0XS5wLnYsZWZmZWN0RWxlbWVudHNbMzVdLnAudik7dGhpcy5mZUZ1bmNBLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLHZhbCk7fX19Oy8qIGdsb2JhbCBjcmVhdGVOUywgcmdiVG9IZXgsIGRlZ1RvUmFkcyAqL2Z1bmN0aW9uIFNWR0Ryb3BTaGFkb3dFZmZlY3QoZmlsdGVyLGZpbHRlck1hbmFnZXIpe3ZhciBmaWx0ZXJTaXplPWZpbHRlck1hbmFnZXIuY29udGFpbmVyLmdsb2JhbERhdGEucmVuZGVyQ29uZmlnLmZpbHRlclNpemU7ZmlsdGVyLnNldEF0dHJpYnV0ZSgneCcsZmlsdGVyU2l6ZS54KTtmaWx0ZXIuc2V0QXR0cmlidXRlKCd5JyxmaWx0ZXJTaXplLnkpO2ZpbHRlci5zZXRBdHRyaWJ1dGUoJ3dpZHRoJyxmaWx0ZXJTaXplLndpZHRoKTtmaWx0ZXIuc2V0QXR0cmlidXRlKCdoZWlnaHQnLGZpbHRlclNpemUuaGVpZ2h0KTt0aGlzLmZpbHRlck1hbmFnZXI9ZmlsdGVyTWFuYWdlcjt2YXIgZmVHYXVzc2lhbkJsdXI9Y3JlYXRlTlMoJ2ZlR2F1c3NpYW5CbHVyJyk7ZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdpbicsJ1NvdXJjZUFscGhhJyk7ZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCdkcm9wX3NoYWRvd18xJyk7ZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdzdGREZXZpYXRpb24nLCcwJyk7dGhpcy5mZUdhdXNzaWFuQmx1cj1mZUdhdXNzaWFuQmx1cjtmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVHYXVzc2lhbkJsdXIpO3ZhciBmZU9mZnNldD1jcmVhdGVOUygnZmVPZmZzZXQnKTtmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R4JywnMjUnKTtmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R5JywnMCcpO2ZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnaW4nLCdkcm9wX3NoYWRvd18xJyk7ZmVPZmZzZXQuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCdkcm9wX3NoYWRvd18yJyk7dGhpcy5mZU9mZnNldD1mZU9mZnNldDtmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVPZmZzZXQpO3ZhciBmZUZsb29kPWNyZWF0ZU5TKCdmZUZsb29kJyk7ZmVGbG9vZC5zZXRBdHRyaWJ1dGUoJ2Zsb29kLWNvbG9yJywnIzAwZmYwMCcpO2ZlRmxvb2Quc2V0QXR0cmlidXRlKCdmbG9vZC1vcGFjaXR5JywnMScpO2ZlRmxvb2Quc2V0QXR0cmlidXRlKCdyZXN1bHQnLCdkcm9wX3NoYWRvd18zJyk7dGhpcy5mZUZsb29kPWZlRmxvb2Q7ZmlsdGVyLmFwcGVuZENoaWxkKGZlRmxvb2QpO3ZhciBmZUNvbXBvc2l0ZT1jcmVhdGVOUygnZmVDb21wb3NpdGUnKTtmZUNvbXBvc2l0ZS5zZXRBdHRyaWJ1dGUoJ2luJywnZHJvcF9zaGFkb3dfMycpO2ZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgnaW4yJywnZHJvcF9zaGFkb3dfMicpO2ZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgnb3BlcmF0b3InLCdpbicpO2ZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgncmVzdWx0JywnZHJvcF9zaGFkb3dfNCcpO2ZpbHRlci5hcHBlbmRDaGlsZChmZUNvbXBvc2l0ZSk7dmFyIGZlTWVyZ2U9Y3JlYXRlTlMoJ2ZlTWVyZ2UnKTtmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVNZXJnZSk7dmFyIGZlTWVyZ2VOb2RlO2ZlTWVyZ2VOb2RlPWNyZWF0ZU5TKCdmZU1lcmdlTm9kZScpO2ZlTWVyZ2UuYXBwZW5kQ2hpbGQoZmVNZXJnZU5vZGUpO2ZlTWVyZ2VOb2RlPWNyZWF0ZU5TKCdmZU1lcmdlTm9kZScpO2ZlTWVyZ2VOb2RlLnNldEF0dHJpYnV0ZSgnaW4nLCdTb3VyY2VHcmFwaGljJyk7dGhpcy5mZU1lcmdlTm9kZT1mZU1lcmdlTm9kZTt0aGlzLmZlTWVyZ2U9ZmVNZXJnZTt0aGlzLm9yaWdpbmFsTm9kZUFkZGVkPWZhbHNlO2ZlTWVyZ2UuYXBwZW5kQ2hpbGQoZmVNZXJnZU5vZGUpO31TVkdEcm9wU2hhZG93RWZmZWN0LnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbihmb3JjZVJlbmRlcil7aWYoZm9yY2VSZW5kZXJ8fHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKXtpZihmb3JjZVJlbmRlcnx8dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAuX21kZil7dGhpcy5mZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ3N0ZERldmlhdGlvbicsdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAudi80KTt9aWYoZm9yY2VSZW5kZXJ8fHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLl9tZGYpe3ZhciBjb2w9dGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjt0aGlzLmZlRmxvb2Quc2V0QXR0cmlidXRlKCdmbG9vZC1jb2xvcicscmdiVG9IZXgoTWF0aC5yb3VuZChjb2xbMF0qMjU1KSxNYXRoLnJvdW5kKGNvbFsxXSoyNTUpLE1hdGgucm91bmQoY29sWzJdKjI1NSkpKTt9aWYoZm9yY2VSZW5kZXJ8fHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLl9tZGYpe3RoaXMuZmVGbG9vZC5zZXRBdHRyaWJ1dGUoJ2Zsb29kLW9wYWNpdHknLHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnYvMjU1KTt9aWYoZm9yY2VSZW5kZXJ8fHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLl9tZGZ8fHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1szXS5wLl9tZGYpe3ZhciBkaXN0YW5jZT10aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbM10ucC52O3ZhciBhbmdsZT0odGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudi05MCkqZGVnVG9SYWRzO3ZhciB4PWRpc3RhbmNlKk1hdGguY29zKGFuZ2xlKTt2YXIgeT1kaXN0YW5jZSpNYXRoLnNpbihhbmdsZSk7dGhpcy5mZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R4Jyx4KTt0aGlzLmZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnZHknLHkpO30vKiBpZihmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNV0ucC5fbWRmKXtcclxuICAgICAgICAgICAgaWYodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzVdLnAudiA9PT0gMSAmJiB0aGlzLm9yaWdpbmFsTm9kZUFkZGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZlTWVyZ2UucmVtb3ZlQ2hpbGQodGhpcy5mZU1lcmdlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsTm9kZUFkZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNV0ucC52ID09PSAwICYmICF0aGlzLm9yaWdpbmFsTm9kZUFkZGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZlTWVyZ2UuYXBwZW5kQ2hpbGQodGhpcy5mZU1lcmdlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsTm9kZUFkZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gKi99fTsvKiBnbG9iYWwgY3JlYXRlRWxlbWVudElELCBjcmVhdGVOUyAqL3ZhciBfc3ZnTWF0dGVTeW1ib2xzPVtdO2Z1bmN0aW9uIFNWR01hdHRlM0VmZmVjdChmaWx0ZXJFbGVtLGZpbHRlck1hbmFnZXIsZWxlbSl7dGhpcy5pbml0aWFsaXplZD1mYWxzZTt0aGlzLmZpbHRlck1hbmFnZXI9ZmlsdGVyTWFuYWdlcjt0aGlzLmZpbHRlckVsZW09ZmlsdGVyRWxlbTt0aGlzLmVsZW09ZWxlbTtlbGVtLm1hdHRlRWxlbWVudD1jcmVhdGVOUygnZycpO2VsZW0ubWF0dGVFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0ubGF5ZXJFbGVtZW50KTtlbGVtLm1hdHRlRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtLnRyYW5zZm9ybWVkRWxlbWVudCk7ZWxlbS5iYXNlRWxlbWVudD1lbGVtLm1hdHRlRWxlbWVudDt9U1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5maW5kU3ltYm9sPWZ1bmN0aW9uKG1hc2spe3ZhciBpPTA7dmFyIGxlbj1fc3ZnTWF0dGVTeW1ib2xzLmxlbmd0aDt3aGlsZShpPGxlbil7aWYoX3N2Z01hdHRlU3ltYm9sc1tpXT09PW1hc2spe3JldHVybiBfc3ZnTWF0dGVTeW1ib2xzW2ldO31pKz0xO31yZXR1cm4gbnVsbDt9O1NWR01hdHRlM0VmZmVjdC5wcm90b3R5cGUucmVwbGFjZUluUGFyZW50PWZ1bmN0aW9uKG1hc2ssc3ltYm9sSWQpe3ZhciBwYXJlbnROb2RlPW1hc2subGF5ZXJFbGVtZW50LnBhcmVudE5vZGU7aWYoIXBhcmVudE5vZGUpe3JldHVybjt9dmFyIGNoaWxkcmVuPXBhcmVudE5vZGUuY2hpbGRyZW47dmFyIGk9MDt2YXIgbGVuPWNoaWxkcmVuLmxlbmd0aDt3aGlsZShpPGxlbil7aWYoY2hpbGRyZW5baV09PT1tYXNrLmxheWVyRWxlbWVudCl7YnJlYWs7fWkrPTE7fXZhciBuZXh0Q2hpbGQ7aWYoaTw9bGVuLTIpe25leHRDaGlsZD1jaGlsZHJlbltpKzFdO312YXIgdXNlRWxlbT1jcmVhdGVOUygndXNlJyk7dXNlRWxlbS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCcjJytzeW1ib2xJZCk7aWYobmV4dENoaWxkKXtwYXJlbnROb2RlLmluc2VydEJlZm9yZSh1c2VFbGVtLG5leHRDaGlsZCk7fWVsc2Uge3BhcmVudE5vZGUuYXBwZW5kQ2hpbGQodXNlRWxlbSk7fX07U1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5zZXRFbGVtZW50QXNNYXNrPWZ1bmN0aW9uKGVsZW0sbWFzayl7aWYoIXRoaXMuZmluZFN5bWJvbChtYXNrKSl7dmFyIHN5bWJvbElkPWNyZWF0ZUVsZW1lbnRJRCgpO3ZhciBtYXNrZXI9Y3JlYXRlTlMoJ21hc2snKTttYXNrZXIuc2V0QXR0cmlidXRlKCdpZCcsbWFzay5sYXllcklkKTttYXNrZXIuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCdhbHBoYScpO19zdmdNYXR0ZVN5bWJvbHMucHVzaChtYXNrKTt2YXIgZGVmcz1lbGVtLmdsb2JhbERhdGEuZGVmcztkZWZzLmFwcGVuZENoaWxkKG1hc2tlcik7dmFyIHN5bWJvbD1jcmVhdGVOUygnc3ltYm9sJyk7c3ltYm9sLnNldEF0dHJpYnV0ZSgnaWQnLHN5bWJvbElkKTt0aGlzLnJlcGxhY2VJblBhcmVudChtYXNrLHN5bWJvbElkKTtzeW1ib2wuYXBwZW5kQ2hpbGQobWFzay5sYXllckVsZW1lbnQpO2RlZnMuYXBwZW5kQ2hpbGQoc3ltYm9sKTt2YXIgdXNlRWxlbT1jcmVhdGVOUygndXNlJyk7dXNlRWxlbS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCcjJytzeW1ib2xJZCk7bWFza2VyLmFwcGVuZENoaWxkKHVzZUVsZW0pO21hc2suZGF0YS5oZD1mYWxzZTttYXNrLnNob3coKTt9ZWxlbS5zZXRNYXR0ZShtYXNrLmxheWVySWQpO307U1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5pbml0aWFsaXplPWZ1bmN0aW9uKCl7dmFyIGluZD10aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52O3ZhciBlbGVtZW50cz10aGlzLmVsZW0uY29tcC5lbGVtZW50czt2YXIgaT0wO3ZhciBsZW49ZWxlbWVudHMubGVuZ3RoO3doaWxlKGk8bGVuKXtpZihlbGVtZW50c1tpXSYmZWxlbWVudHNbaV0uZGF0YS5pbmQ9PT1pbmQpe3RoaXMuc2V0RWxlbWVudEFzTWFzayh0aGlzLmVsZW0sZWxlbWVudHNbaV0pO31pKz0xO310aGlzLmluaXRpYWxpemVkPXRydWU7fTtTVkdNYXR0ZTNFZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe3RoaXMuaW5pdGlhbGl6ZSgpO319Oy8qIGdsb2JhbCBjcmVhdGVFbGVtZW50SUQsIGZpbHRlcnNGYWN0b3J5LCBTVkdUaW50RmlsdGVyLCBTVkdGaWxsRmlsdGVyLCBTVkdTdHJva2VFZmZlY3QsIFNWR1RyaXRvbmVGaWx0ZXIsXHJcblNWR1Byb0xldmVsc0ZpbHRlciwgU1ZHRHJvcFNoYWRvd0VmZmVjdCwgU1ZHTWF0dGUzRWZmZWN0LCBTVkdHYXVzc2lhbkJsdXJFZmZlY3QsIGxvY2F0aW9uSHJlZiAqL2Z1bmN0aW9uIFNWR0VmZmVjdHMoZWxlbSl7dmFyIGk7dmFyIGxlbj1lbGVtLmRhdGEuZWY/ZWxlbS5kYXRhLmVmLmxlbmd0aDowO3ZhciBmaWxJZD1jcmVhdGVFbGVtZW50SUQoKTt2YXIgZmlsPWZpbHRlcnNGYWN0b3J5LmNyZWF0ZUZpbHRlcihmaWxJZCx0cnVlKTt2YXIgY291bnQ9MDt0aGlzLmZpbHRlcnM9W107dmFyIGZpbHRlck1hbmFnZXI7Zm9yKGk9MDtpPGxlbjtpKz0xKXtmaWx0ZXJNYW5hZ2VyPW51bGw7aWYoZWxlbS5kYXRhLmVmW2ldLnR5PT09MjApe2NvdW50Kz0xO2ZpbHRlck1hbmFnZXI9bmV3IFNWR1RpbnRGaWx0ZXIoZmlsLGVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHNbaV0pO31lbHNlIGlmKGVsZW0uZGF0YS5lZltpXS50eT09PTIxKXtjb3VudCs9MTtmaWx0ZXJNYW5hZ2VyPW5ldyBTVkdGaWxsRmlsdGVyKGZpbCxlbGVtLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzW2ldKTt9ZWxzZSBpZihlbGVtLmRhdGEuZWZbaV0udHk9PT0yMil7ZmlsdGVyTWFuYWdlcj1uZXcgU1ZHU3Ryb2tlRWZmZWN0KGVsZW0sZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50c1tpXSk7fWVsc2UgaWYoZWxlbS5kYXRhLmVmW2ldLnR5PT09MjMpe2NvdW50Kz0xO2ZpbHRlck1hbmFnZXI9bmV3IFNWR1RyaXRvbmVGaWx0ZXIoZmlsLGVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHNbaV0pO31lbHNlIGlmKGVsZW0uZGF0YS5lZltpXS50eT09PTI0KXtjb3VudCs9MTtmaWx0ZXJNYW5hZ2VyPW5ldyBTVkdQcm9MZXZlbHNGaWx0ZXIoZmlsLGVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHNbaV0pO31lbHNlIGlmKGVsZW0uZGF0YS5lZltpXS50eT09PTI1KXtjb3VudCs9MTtmaWx0ZXJNYW5hZ2VyPW5ldyBTVkdEcm9wU2hhZG93RWZmZWN0KGZpbCxlbGVtLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzW2ldKTt9ZWxzZSBpZihlbGVtLmRhdGEuZWZbaV0udHk9PT0yOCl7Ly8gY291bnQgKz0gMTtcbmZpbHRlck1hbmFnZXI9bmV3IFNWR01hdHRlM0VmZmVjdChmaWwsZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50c1tpXSxlbGVtKTt9ZWxzZSBpZihlbGVtLmRhdGEuZWZbaV0udHk9PT0yOSl7Y291bnQrPTE7ZmlsdGVyTWFuYWdlcj1uZXcgU1ZHR2F1c3NpYW5CbHVyRWZmZWN0KGZpbCxlbGVtLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzW2ldKTt9aWYoZmlsdGVyTWFuYWdlcil7dGhpcy5maWx0ZXJzLnB1c2goZmlsdGVyTWFuYWdlcik7fX1pZihjb3VudCl7ZWxlbS5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZmlsKTtlbGVtLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsJ3VybCgnK2xvY2F0aW9uSHJlZisnIycrZmlsSWQrJyknKTt9aWYodGhpcy5maWx0ZXJzLmxlbmd0aCl7ZWxlbS5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO319U1ZHRWZmZWN0cy5wcm90b3R5cGUucmVuZGVyRnJhbWU9ZnVuY3Rpb24oX2lzRmlyc3RGcmFtZSl7dmFyIGk7dmFyIGxlbj10aGlzLmZpbHRlcnMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7dGhpcy5maWx0ZXJzW2ldLnJlbmRlckZyYW1lKF9pc0ZpcnN0RnJhbWUpO319Oy8qIGdsb2JhbCBNYXRyaXgsIGNyZWF0ZVR5cGVkQXJyYXkgKi9mdW5jdGlvbiBDVkNvbnRleHREYXRhKCl7dGhpcy5zYXZlZD1bXTt0aGlzLmNBcnJQb3M9MDt0aGlzLmNUcj1uZXcgTWF0cml4KCk7dGhpcy5jTz0xO3ZhciBpO3ZhciBsZW49MTU7dGhpcy5zYXZlZE9wPWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGxlbik7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLnNhdmVkW2ldPWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLDE2KTt9dGhpcy5fbGVuZ3RoPWxlbjt9Q1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuZHVwbGljYXRlPWZ1bmN0aW9uKCl7dmFyIG5ld0xlbmd0aD10aGlzLl9sZW5ndGgqMjt2YXIgY3VycmVudFNhdmVkT3A9dGhpcy5zYXZlZE9wO3RoaXMuc2F2ZWRPcD1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxuZXdMZW5ndGgpO3RoaXMuc2F2ZWRPcC5zZXQoY3VycmVudFNhdmVkT3ApO3ZhciBpPTA7Zm9yKGk9dGhpcy5fbGVuZ3RoO2k8bmV3TGVuZ3RoO2krPTEpe3RoaXMuc2F2ZWRbaV09Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsMTYpO310aGlzLl9sZW5ndGg9bmV3TGVuZ3RoO307Q1ZDb250ZXh0RGF0YS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmNBcnJQb3M9MDt0aGlzLmNUci5yZXNldCgpO3RoaXMuY089MTt9Oy8qIGdsb2JhbCBDVkVmZmVjdHMsIGdldEJsZW5kTW9kZSwgQ1ZNYXNrRWxlbWVudCwgTWF0cml4ICovZnVuY3Rpb24gQ1ZCYXNlRWxlbWVudCgpe31DVkJhc2VFbGVtZW50LnByb3RvdHlwZT17Y3JlYXRlRWxlbWVudHM6ZnVuY3Rpb24gY3JlYXRlRWxlbWVudHMoKXt9LGluaXRSZW5kZXJlckVsZW1lbnQ6ZnVuY3Rpb24gaW5pdFJlbmRlcmVyRWxlbWVudCgpe30sY3JlYXRlQ29udGFpbmVyRWxlbWVudHM6ZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKXt0aGlzLmNhbnZhc0NvbnRleHQ9dGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQ7dGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXI9bmV3IENWRWZmZWN0cyh0aGlzKTt9LGNyZWF0ZUNvbnRlbnQ6ZnVuY3Rpb24gY3JlYXRlQ29udGVudCgpe30sc2V0QmxlbmRNb2RlOmZ1bmN0aW9uIHNldEJsZW5kTW9kZSgpe3ZhciBnbG9iYWxEYXRhPXRoaXMuZ2xvYmFsRGF0YTtpZihnbG9iYWxEYXRhLmJsZW5kTW9kZSE9PXRoaXMuZGF0YS5ibSl7Z2xvYmFsRGF0YS5ibGVuZE1vZGU9dGhpcy5kYXRhLmJtO3ZhciBibGVuZE1vZGVWYWx1ZT1nZXRCbGVuZE1vZGUodGhpcy5kYXRhLmJtKTtnbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPWJsZW5kTW9kZVZhbHVlO319LGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzOmZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCl7dGhpcy5tYXNrTWFuYWdlcj1uZXcgQ1ZNYXNrRWxlbWVudCh0aGlzLmRhdGEsdGhpcyk7fSxoaWRlRWxlbWVudDpmdW5jdGlvbiBoaWRlRWxlbWVudCgpe2lmKCF0aGlzLmhpZGRlbiYmKCF0aGlzLmlzSW5SYW5nZXx8dGhpcy5pc1RyYW5zcGFyZW50KSl7dGhpcy5oaWRkZW49dHJ1ZTt9fSxzaG93RWxlbWVudDpmdW5jdGlvbiBzaG93RWxlbWVudCgpe2lmKHRoaXMuaXNJblJhbmdlJiYhdGhpcy5pc1RyYW5zcGFyZW50KXt0aGlzLmhpZGRlbj1mYWxzZTt0aGlzLl9pc0ZpcnN0RnJhbWU9dHJ1ZTt0aGlzLm1hc2tNYW5hZ2VyLl9pc0ZpcnN0RnJhbWU9dHJ1ZTt9fSxyZW5kZXJGcmFtZTpmdW5jdGlvbiByZW5kZXJGcmFtZSgpe2lmKHRoaXMuaGlkZGVufHx0aGlzLmRhdGEuaGQpe3JldHVybjt9dGhpcy5yZW5kZXJUcmFuc2Zvcm0oKTt0aGlzLnJlbmRlclJlbmRlcmFibGUoKTt0aGlzLnNldEJsZW5kTW9kZSgpO3ZhciBmb3JjZVJlYWxTdGFjaz10aGlzLmRhdGEudHk9PT0wO3RoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5zYXZlKGZvcmNlUmVhbFN0YWNrKTt0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4VHJhbnNmb3JtKHRoaXMuZmluYWxUcmFuc2Zvcm0ubWF0LnByb3BzKTt0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4T3BhY2l0eSh0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8udik7dGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTt0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIucmVzdG9yZShmb3JjZVJlYWxTdGFjayk7aWYodGhpcy5tYXNrTWFuYWdlci5oYXNNYXNrcyl7dGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLnJlc3RvcmUodHJ1ZSk7fWlmKHRoaXMuX2lzRmlyc3RGcmFtZSl7dGhpcy5faXNGaXJzdEZyYW1lPWZhbHNlO319LGRlc3Ryb3k6ZnVuY3Rpb24gZGVzdHJveSgpe3RoaXMuY2FudmFzQ29udGV4dD1udWxsO3RoaXMuZGF0YT1udWxsO3RoaXMuZ2xvYmFsRGF0YT1udWxsO3RoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO30sbUhlbHBlcjpuZXcgTWF0cml4KCl9O0NWQmFzZUVsZW1lbnQucHJvdG90eXBlLmhpZGU9Q1ZCYXNlRWxlbWVudC5wcm90b3R5cGUuaGlkZUVsZW1lbnQ7Q1ZCYXNlRWxlbWVudC5wcm90b3R5cGUuc2hvdz1DVkJhc2VFbGVtZW50LnByb3RvdHlwZS5zaG93RWxlbWVudDsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCxIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsXHJcblJlbmRlcmFibGVFbGVtZW50LCBTVkdTaGFwZUVsZW1lbnQsIElJbWFnZUVsZW1lbnQsIGNyZWF0ZVRhZyAqL2Z1bmN0aW9uIENWSW1hZ2VFbGVtZW50KGRhdGEsZ2xvYmFsRGF0YSxjb21wKXt0aGlzLmFzc2V0RGF0YT1nbG9iYWxEYXRhLmdldEFzc2V0RGF0YShkYXRhLnJlZklkKTt0aGlzLmltZz1nbG9iYWxEYXRhLmltYWdlTG9hZGVyLmdldEltYWdlKHRoaXMuYXNzZXREYXRhKTt0aGlzLmluaXRFbGVtZW50KGRhdGEsZ2xvYmFsRGF0YSxjb21wKTt9ZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCxUcmFuc2Zvcm1FbGVtZW50LENWQmFzZUVsZW1lbnQsSGllcmFyY2h5RWxlbWVudCxGcmFtZUVsZW1lbnQsUmVuZGVyYWJsZUVsZW1lbnRdLENWSW1hZ2VFbGVtZW50KTtDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQ9U1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudDtDVkltYWdlRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lPUlJbWFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZTtDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudD1mdW5jdGlvbigpe2lmKHRoaXMuaW1nLndpZHRoJiYodGhpcy5hc3NldERhdGEudyE9PXRoaXMuaW1nLndpZHRofHx0aGlzLmFzc2V0RGF0YS5oIT09dGhpcy5pbWcuaGVpZ2h0KSl7dmFyIGNhbnZhcz1jcmVhdGVUYWcoJ2NhbnZhcycpO2NhbnZhcy53aWR0aD10aGlzLmFzc2V0RGF0YS53O2NhbnZhcy5oZWlnaHQ9dGhpcy5hc3NldERhdGEuaDt2YXIgY3R4PWNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO3ZhciBpbWdXPXRoaXMuaW1nLndpZHRoO3ZhciBpbWdIPXRoaXMuaW1nLmhlaWdodDt2YXIgaW1nUmVsPWltZ1cvaW1nSDt2YXIgY2FudmFzUmVsPXRoaXMuYXNzZXREYXRhLncvdGhpcy5hc3NldERhdGEuaDt2YXIgd2lkdGhDcm9wO3ZhciBoZWlnaHRDcm9wO3ZhciBwYXI9dGhpcy5hc3NldERhdGEucHJ8fHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvO2lmKGltZ1JlbD5jYW52YXNSZWwmJnBhcj09PSd4TWlkWU1pZCBzbGljZSd8fGltZ1JlbDxjYW52YXNSZWwmJnBhciE9PSd4TWlkWU1pZCBzbGljZScpe2hlaWdodENyb3A9aW1nSDt3aWR0aENyb3A9aGVpZ2h0Q3JvcCpjYW52YXNSZWw7fWVsc2Uge3dpZHRoQ3JvcD1pbWdXO2hlaWdodENyb3A9d2lkdGhDcm9wL2NhbnZhc1JlbDt9Y3R4LmRyYXdJbWFnZSh0aGlzLmltZywoaW1nVy13aWR0aENyb3ApLzIsKGltZ0gtaGVpZ2h0Q3JvcCkvMix3aWR0aENyb3AsaGVpZ2h0Q3JvcCwwLDAsdGhpcy5hc3NldERhdGEudyx0aGlzLmFzc2V0RGF0YS5oKTt0aGlzLmltZz1jYW52YXM7fX07Q1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudD1mdW5jdGlvbigpe3RoaXMuY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UodGhpcy5pbWcsMCwwKTt9O0NWSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5pbWc9bnVsbDt9Oy8qIGdsb2JhbCBjcmVhdGVTaXplZEFycmF5LCBQcm9wZXJ0eUZhY3RvcnksIGV4dGVuZFByb3RvdHlwZSwgQ2FudmFzUmVuZGVyZXIsIElDb21wRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCAqL2Z1bmN0aW9uIENWQ29tcEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApe3RoaXMuY29tcGxldGVMYXllcnM9ZmFsc2U7dGhpcy5sYXllcnM9ZGF0YS5sYXllcnM7dGhpcy5wZW5kaW5nRWxlbWVudHM9W107dGhpcy5lbGVtZW50cz1jcmVhdGVTaXplZEFycmF5KHRoaXMubGF5ZXJzLmxlbmd0aCk7dGhpcy5pbml0RWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCk7dGhpcy50bT1kYXRhLnRtP1Byb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsZGF0YS50bSwwLGdsb2JhbERhdGEuZnJhbWVSYXRlLHRoaXMpOntfcGxhY2Vob2xkZXI6dHJ1ZX07fWV4dGVuZFByb3RvdHlwZShbQ2FudmFzUmVuZGVyZXIsSUNvbXBFbGVtZW50LENWQmFzZUVsZW1lbnRdLENWQ29tcEVsZW1lbnQpO0NWQ29tcEVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudD1mdW5jdGlvbigpe3ZhciBjdHg9dGhpcy5jYW52YXNDb250ZXh0O2N0eC5iZWdpblBhdGgoKTtjdHgubW92ZVRvKDAsMCk7Y3R4LmxpbmVUbyh0aGlzLmRhdGEudywwKTtjdHgubGluZVRvKHRoaXMuZGF0YS53LHRoaXMuZGF0YS5oKTtjdHgubGluZVRvKDAsdGhpcy5kYXRhLmgpO2N0eC5saW5lVG8oMCwwKTtjdHguY2xpcCgpO3ZhciBpO3ZhciBsZW49dGhpcy5sYXllcnMubGVuZ3RoO2ZvcihpPWxlbi0xO2k+PTA7aS09MSl7aWYodGhpcy5jb21wbGV0ZUxheWVyc3x8dGhpcy5lbGVtZW50c1tpXSl7dGhpcy5lbGVtZW50c1tpXS5yZW5kZXJGcmFtZSgpO319fTtDVkNvbXBFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGk7dmFyIGxlbj10aGlzLmxheWVycy5sZW5ndGg7Zm9yKGk9bGVuLTE7aT49MDtpLT0xKXtpZih0aGlzLmVsZW1lbnRzW2ldKXt0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3koKTt9fXRoaXMubGF5ZXJzPW51bGw7dGhpcy5lbGVtZW50cz1udWxsO307LyogZ2xvYmFsIGNyZWF0ZVNpemVkQXJyYXksIFNoYXBlUHJvcGVydHlGYWN0b3J5LCBNYXNrRWxlbWVudCAqL2Z1bmN0aW9uIENWTWFza0VsZW1lbnQoZGF0YSxlbGVtZW50KXt0aGlzLmRhdGE9ZGF0YTt0aGlzLmVsZW1lbnQ9ZWxlbWVudDt0aGlzLm1hc2tzUHJvcGVydGllcz10aGlzLmRhdGEubWFza3NQcm9wZXJ0aWVzfHxbXTt0aGlzLnZpZXdEYXRhPWNyZWF0ZVNpemVkQXJyYXkodGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoKTt2YXIgaTt2YXIgbGVuPXRoaXMubWFza3NQcm9wZXJ0aWVzLmxlbmd0aDt2YXIgaGFzTWFza3M9ZmFsc2U7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZih0aGlzLm1hc2tzUHJvcGVydGllc1tpXS5tb2RlIT09J24nKXtoYXNNYXNrcz10cnVlO310aGlzLnZpZXdEYXRhW2ldPVNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLmVsZW1lbnQsdGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0sMyk7fXRoaXMuaGFzTWFza3M9aGFzTWFza3M7aWYoaGFzTWFza3Mpe3RoaXMuZWxlbWVudC5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO319Q1ZNYXNrRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWU9ZnVuY3Rpb24oKXtpZighdGhpcy5oYXNNYXNrcyl7cmV0dXJuO312YXIgdHJhbnNmb3JtPXRoaXMuZWxlbWVudC5maW5hbFRyYW5zZm9ybS5tYXQ7dmFyIGN0eD10aGlzLmVsZW1lbnQuY2FudmFzQ29udGV4dDt2YXIgaTt2YXIgbGVuPXRoaXMubWFza3NQcm9wZXJ0aWVzLmxlbmd0aDt2YXIgcHQ7dmFyIHB0czt2YXIgZGF0YTtjdHguYmVnaW5QYXRoKCk7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZih0aGlzLm1hc2tzUHJvcGVydGllc1tpXS5tb2RlIT09J24nKXtpZih0aGlzLm1hc2tzUHJvcGVydGllc1tpXS5pbnYpe2N0eC5tb3ZlVG8oMCwwKTtjdHgubGluZVRvKHRoaXMuZWxlbWVudC5nbG9iYWxEYXRhLmNvbXBTaXplLncsMCk7Y3R4LmxpbmVUbyh0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5jb21wU2l6ZS53LHRoaXMuZWxlbWVudC5nbG9iYWxEYXRhLmNvbXBTaXplLmgpO2N0eC5saW5lVG8oMCx0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oKTtjdHgubGluZVRvKDAsMCk7fWRhdGE9dGhpcy52aWV3RGF0YVtpXS52O3B0PXRyYW5zZm9ybS5hcHBseVRvUG9pbnRBcnJheShkYXRhLnZbMF1bMF0sZGF0YS52WzBdWzFdLDApO2N0eC5tb3ZlVG8ocHRbMF0scHRbMV0pO3ZhciBqO3ZhciBqTGVuPWRhdGEuX2xlbmd0aDtmb3Ioaj0xO2o8akxlbjtqKz0xKXtwdHM9dHJhbnNmb3JtLmFwcGx5VG9UcmlwbGVQb2ludHMoZGF0YS5vW2otMV0sZGF0YS5pW2pdLGRhdGEudltqXSk7Y3R4LmJlemllckN1cnZlVG8ocHRzWzBdLHB0c1sxXSxwdHNbMl0scHRzWzNdLHB0c1s0XSxwdHNbNV0pO31wdHM9dHJhbnNmb3JtLmFwcGx5VG9UcmlwbGVQb2ludHMoZGF0YS5vW2otMV0sZGF0YS5pWzBdLGRhdGEudlswXSk7Y3R4LmJlemllckN1cnZlVG8ocHRzWzBdLHB0c1sxXSxwdHNbMl0scHRzWzNdLHB0c1s0XSxwdHNbNV0pO319dGhpcy5lbGVtZW50Lmdsb2JhbERhdGEucmVuZGVyZXIuc2F2ZSh0cnVlKTtjdHguY2xpcCgpO307Q1ZNYXNrRWxlbWVudC5wcm90b3R5cGUuZ2V0TWFza1Byb3BlcnR5PU1hc2tFbGVtZW50LnByb3RvdHlwZS5nZXRNYXNrUHJvcGVydHk7Q1ZNYXNrRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudD1udWxsO307LyogZ2xvYmFsIFNoYXBlVHJhbnNmb3JtTWFuYWdlciwgZXh0ZW5kUHJvdG90eXBlLCBCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCwgSVNoYXBlRWxlbWVudCxcclxuSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnQsIFByb3BlcnR5RmFjdG9yeSwgZGVnVG9SYWRzLCBHcmFkaWVudFByb3BlcnR5LFxyXG5EYXNoUHJvcGVydHksIFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeSwgQ1ZTaGFwZURhdGEsIFNoYXBlTW9kaWZpZXJzLCBibUZsb29yICovZnVuY3Rpb24gQ1ZTaGFwZUVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApe3RoaXMuc2hhcGVzPVtdO3RoaXMuc2hhcGVzRGF0YT1kYXRhLnNoYXBlczt0aGlzLnN0eWxlc0xpc3Q9W107dGhpcy5pdGVtc0RhdGE9W107dGhpcy5wcmV2Vmlld0RhdGE9W107dGhpcy5zaGFwZU1vZGlmaWVycz1bXTt0aGlzLnByb2Nlc3NlZEVsZW1lbnRzPVtdO3RoaXMudHJhbnNmb3Jtc01hbmFnZXI9bmV3IFNoYXBlVHJhbnNmb3JtTWFuYWdlcigpO3RoaXMuaW5pdEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApO31leHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LFRyYW5zZm9ybUVsZW1lbnQsQ1ZCYXNlRWxlbWVudCxJU2hhcGVFbGVtZW50LEhpZXJhcmNoeUVsZW1lbnQsRnJhbWVFbGVtZW50LFJlbmRlcmFibGVFbGVtZW50XSxDVlNoYXBlRWxlbWVudCk7Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50PVJlbmRlcmFibGVET01FbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudDtDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUudHJhbnNmb3JtSGVscGVyPXtvcGFjaXR5OjEsX29wTWRmOmZhbHNlfTtDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZGFzaFJlc2V0dGVyPVtdO0NWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50PWZ1bmN0aW9uKCl7dGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLHRoaXMuaXRlbXNEYXRhLHRoaXMucHJldlZpZXdEYXRhLHRydWUsW10pO307Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVN0eWxlRWxlbWVudD1mdW5jdGlvbihkYXRhLHRyYW5zZm9ybXMpe3ZhciBzdHlsZUVsZW09e2RhdGE6ZGF0YSx0eXBlOmRhdGEudHkscHJlVHJhbnNmb3Jtczp0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLmFkZFRyYW5zZm9ybVNlcXVlbmNlKHRyYW5zZm9ybXMpLHRyYW5zZm9ybXM6W10sZWxlbWVudHM6W10sY2xvc2VkOmRhdGEuaGQ9PT10cnVlfTt2YXIgZWxlbWVudERhdGE9e307aWYoZGF0YS50eT09PSdmbCd8fGRhdGEudHk9PT0nc3QnKXtlbGVtZW50RGF0YS5jPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsZGF0YS5jLDEsMjU1LHRoaXMpO2lmKCFlbGVtZW50RGF0YS5jLmspe3N0eWxlRWxlbS5jbz0ncmdiKCcrYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMF0pKycsJytibUZsb29yKGVsZW1lbnREYXRhLmMudlsxXSkrJywnK2JtRmxvb3IoZWxlbWVudERhdGEuYy52WzJdKSsnKSc7fX1lbHNlIGlmKGRhdGEudHk9PT0nZ2YnfHxkYXRhLnR5PT09J2dzJyl7ZWxlbWVudERhdGEucz1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLGRhdGEucywxLG51bGwsdGhpcyk7ZWxlbWVudERhdGEuZT1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLGRhdGEuZSwxLG51bGwsdGhpcyk7ZWxlbWVudERhdGEuaD1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLGRhdGEuaHx8e2s6MH0sMCwwLjAxLHRoaXMpO2VsZW1lbnREYXRhLmE9UHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcyxkYXRhLmF8fHtrOjB9LDAsZGVnVG9SYWRzLHRoaXMpO2VsZW1lbnREYXRhLmc9bmV3IEdyYWRpZW50UHJvcGVydHkodGhpcyxkYXRhLmcsdGhpcyk7fWVsZW1lbnREYXRhLm89UHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcyxkYXRhLm8sMCwwLjAxLHRoaXMpO2lmKGRhdGEudHk9PT0nc3QnfHxkYXRhLnR5PT09J2dzJyl7c3R5bGVFbGVtLmxjPXRoaXMubGNFbnVtW2RhdGEubGNdfHwncm91bmQnO3N0eWxlRWxlbS5saj10aGlzLmxqRW51bVtkYXRhLmxqXXx8J3JvdW5kJztpZihkYXRhLmxqPT0xKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuc3R5bGVFbGVtLm1sPWRhdGEubWw7fWVsZW1lbnREYXRhLnc9UHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcyxkYXRhLncsMCxudWxsLHRoaXMpO2lmKCFlbGVtZW50RGF0YS53Lmspe3N0eWxlRWxlbS53aT1lbGVtZW50RGF0YS53LnY7fWlmKGRhdGEuZCl7dmFyIGQ9bmV3IERhc2hQcm9wZXJ0eSh0aGlzLGRhdGEuZCwnY2FudmFzJyx0aGlzKTtlbGVtZW50RGF0YS5kPWQ7aWYoIWVsZW1lbnREYXRhLmQuayl7c3R5bGVFbGVtLmRhPWVsZW1lbnREYXRhLmQuZGFzaEFycmF5O3N0eWxlRWxlbS5kbz1lbGVtZW50RGF0YS5kLmRhc2hvZmZzZXRbMF07fX19ZWxzZSB7c3R5bGVFbGVtLnI9ZGF0YS5yPT09Mj8nZXZlbm9kZCc6J25vbnplcm8nO310aGlzLnN0eWxlc0xpc3QucHVzaChzdHlsZUVsZW0pO2VsZW1lbnREYXRhLnN0eWxlPXN0eWxlRWxlbTtyZXR1cm4gZWxlbWVudERhdGE7fTtDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlR3JvdXBFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIGVsZW1lbnREYXRhPXtpdDpbXSxwcmV2Vmlld0RhdGE6W119O3JldHVybiBlbGVtZW50RGF0YTt9O0NWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVUcmFuc2Zvcm1FbGVtZW50PWZ1bmN0aW9uKGRhdGEpe3ZhciBlbGVtZW50RGF0YT17dHJhbnNmb3JtOntvcGFjaXR5OjEsX29wTWRmOmZhbHNlLGtleTp0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLmdldE5ld0tleSgpLG9wOlByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsZGF0YS5vLDAsMC4wMSx0aGlzKSxtUHJvcHM6VHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KHRoaXMsZGF0YSx0aGlzKX19O3JldHVybiBlbGVtZW50RGF0YTt9O0NWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTaGFwZUVsZW1lbnQ9ZnVuY3Rpb24oZGF0YSl7dmFyIGVsZW1lbnREYXRhPW5ldyBDVlNoYXBlRGF0YSh0aGlzLGRhdGEsdGhpcy5zdHlsZXNMaXN0LHRoaXMudHJhbnNmb3Jtc01hbmFnZXIpO3RoaXMuc2hhcGVzLnB1c2goZWxlbWVudERhdGEpO3RoaXMuYWRkU2hhcGVUb01vZGlmaWVycyhlbGVtZW50RGF0YSk7cmV0dXJuIGVsZW1lbnREYXRhO307Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbG9hZFNoYXBlcz1mdW5jdGlvbigpe3RoaXMuX2lzRmlyc3RGcmFtZT10cnVlO3ZhciBpO3ZhciBsZW49dGhpcy5pdGVtc0RhdGEubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7dGhpcy5wcmV2Vmlld0RhdGFbaV09dGhpcy5pdGVtc0RhdGFbaV07fXRoaXMuc2VhcmNoU2hhcGVzKHRoaXMuc2hhcGVzRGF0YSx0aGlzLml0ZW1zRGF0YSx0aGlzLnByZXZWaWV3RGF0YSx0cnVlLFtdKTtsZW49dGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLmdldFZhbHVlKCk7fXRoaXMucmVuZGVyTW9kaWZpZXJzKCk7dGhpcy50cmFuc2Zvcm1zTWFuYWdlci5wcm9jZXNzU2VxdWVuY2VzKHRoaXMuX2lzRmlyc3RGcmFtZSk7fTtDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuYWRkVHJhbnNmb3JtVG9TdHlsZUxpc3Q9ZnVuY3Rpb24odHJhbnNmb3JtKXt2YXIgaTt2YXIgbGVuPXRoaXMuc3R5bGVzTGlzdC5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZighdGhpcy5zdHlsZXNMaXN0W2ldLmNsb3NlZCl7dGhpcy5zdHlsZXNMaXN0W2ldLnRyYW5zZm9ybXMucHVzaCh0cmFuc2Zvcm0pO319fTtDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlVHJhbnNmb3JtRnJvbVN0eWxlTGlzdD1mdW5jdGlvbigpe3ZhciBpO3ZhciBsZW49dGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKCF0aGlzLnN0eWxlc0xpc3RbaV0uY2xvc2VkKXt0aGlzLnN0eWxlc0xpc3RbaV0udHJhbnNmb3Jtcy5wb3AoKTt9fX07Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNsb3NlU3R5bGVzPWZ1bmN0aW9uKHN0eWxlcyl7dmFyIGk7dmFyIGxlbj1zdHlsZXMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7c3R5bGVzW2ldLmNsb3NlZD10cnVlO319O0NWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zZWFyY2hTaGFwZXM9ZnVuY3Rpb24oYXJyLGl0ZW1zRGF0YSxwcmV2Vmlld0RhdGEsc2hvdWxkUmVuZGVyLHRyYW5zZm9ybXMpe3ZhciBpO3ZhciBsZW49YXJyLmxlbmd0aC0xO3ZhciBqO3ZhciBqTGVuO3ZhciBvd25TdHlsZXM9W107dmFyIG93bk1vZGlmaWVycz1bXTt2YXIgcHJvY2Vzc2VkUG9zO3ZhciBtb2RpZmllcjt2YXIgY3VycmVudFRyYW5zZm9ybTt2YXIgb3duVHJhbnNmb3Jtcz1bXS5jb25jYXQodHJhbnNmb3Jtcyk7Zm9yKGk9bGVuO2k+PTA7aS09MSl7cHJvY2Vzc2VkUG9zPXRoaXMuc2VhcmNoUHJvY2Vzc2VkRWxlbWVudChhcnJbaV0pO2lmKCFwcm9jZXNzZWRQb3Mpe2FycltpXS5fc2hvdWxkUmVuZGVyPXNob3VsZFJlbmRlcjt9ZWxzZSB7aXRlbXNEYXRhW2ldPXByZXZWaWV3RGF0YVtwcm9jZXNzZWRQb3MtMV07fWlmKGFycltpXS50eT09PSdmbCd8fGFycltpXS50eT09PSdzdCd8fGFycltpXS50eT09PSdnZid8fGFycltpXS50eT09PSdncycpe2lmKCFwcm9jZXNzZWRQb3Mpe2l0ZW1zRGF0YVtpXT10aGlzLmNyZWF0ZVN0eWxlRWxlbWVudChhcnJbaV0sb3duVHJhbnNmb3Jtcyk7fWVsc2Uge2l0ZW1zRGF0YVtpXS5zdHlsZS5jbG9zZWQ9ZmFsc2U7fW93blN0eWxlcy5wdXNoKGl0ZW1zRGF0YVtpXS5zdHlsZSk7fWVsc2UgaWYoYXJyW2ldLnR5PT09J2dyJyl7aWYoIXByb2Nlc3NlZFBvcyl7aXRlbXNEYXRhW2ldPXRoaXMuY3JlYXRlR3JvdXBFbGVtZW50KGFycltpXSk7fWVsc2Uge2pMZW49aXRlbXNEYXRhW2ldLml0Lmxlbmd0aDtmb3Ioaj0wO2o8akxlbjtqKz0xKXtpdGVtc0RhdGFbaV0ucHJldlZpZXdEYXRhW2pdPWl0ZW1zRGF0YVtpXS5pdFtqXTt9fXRoaXMuc2VhcmNoU2hhcGVzKGFycltpXS5pdCxpdGVtc0RhdGFbaV0uaXQsaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YSxzaG91bGRSZW5kZXIsb3duVHJhbnNmb3Jtcyk7fWVsc2UgaWYoYXJyW2ldLnR5PT09J3RyJyl7aWYoIXByb2Nlc3NlZFBvcyl7Y3VycmVudFRyYW5zZm9ybT10aGlzLmNyZWF0ZVRyYW5zZm9ybUVsZW1lbnQoYXJyW2ldKTtpdGVtc0RhdGFbaV09Y3VycmVudFRyYW5zZm9ybTt9b3duVHJhbnNmb3Jtcy5wdXNoKGl0ZW1zRGF0YVtpXSk7dGhpcy5hZGRUcmFuc2Zvcm1Ub1N0eWxlTGlzdChpdGVtc0RhdGFbaV0pO31lbHNlIGlmKGFycltpXS50eT09PSdzaCd8fGFycltpXS50eT09PSdyYyd8fGFycltpXS50eT09PSdlbCd8fGFycltpXS50eT09PSdzcicpe2lmKCFwcm9jZXNzZWRQb3Mpe2l0ZW1zRGF0YVtpXT10aGlzLmNyZWF0ZVNoYXBlRWxlbWVudChhcnJbaV0pO319ZWxzZSBpZihhcnJbaV0udHk9PT0ndG0nfHxhcnJbaV0udHk9PT0ncmQnfHxhcnJbaV0udHk9PT0ncGInKXtpZighcHJvY2Vzc2VkUG9zKXttb2RpZmllcj1TaGFwZU1vZGlmaWVycy5nZXRNb2RpZmllcihhcnJbaV0udHkpO21vZGlmaWVyLmluaXQodGhpcyxhcnJbaV0pO2l0ZW1zRGF0YVtpXT1tb2RpZmllcjt0aGlzLnNoYXBlTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO31lbHNlIHttb2RpZmllcj1pdGVtc0RhdGFbaV07bW9kaWZpZXIuY2xvc2VkPWZhbHNlO31vd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7fWVsc2UgaWYoYXJyW2ldLnR5PT09J3JwJyl7aWYoIXByb2Nlc3NlZFBvcyl7bW9kaWZpZXI9U2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTtpdGVtc0RhdGFbaV09bW9kaWZpZXI7bW9kaWZpZXIuaW5pdCh0aGlzLGFycixpLGl0ZW1zRGF0YSk7dGhpcy5zaGFwZU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtzaG91bGRSZW5kZXI9ZmFsc2U7fWVsc2Uge21vZGlmaWVyPWl0ZW1zRGF0YVtpXTttb2RpZmllci5jbG9zZWQ9dHJ1ZTt9b3duTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO310aGlzLmFkZFByb2Nlc3NlZEVsZW1lbnQoYXJyW2ldLGkrMSk7fXRoaXMucmVtb3ZlVHJhbnNmb3JtRnJvbVN0eWxlTGlzdCgpO3RoaXMuY2xvc2VTdHlsZXMob3duU3R5bGVzKTtsZW49b3duTW9kaWZpZXJzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe293bk1vZGlmaWVyc1tpXS5jbG9zZWQ9dHJ1ZTt9fTtDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50PWZ1bmN0aW9uKCl7dGhpcy50cmFuc2Zvcm1IZWxwZXIub3BhY2l0eT0xO3RoaXMudHJhbnNmb3JtSGVscGVyLl9vcE1kZj1mYWxzZTt0aGlzLnJlbmRlck1vZGlmaWVycygpO3RoaXMudHJhbnNmb3Jtc01hbmFnZXIucHJvY2Vzc1NlcXVlbmNlcyh0aGlzLl9pc0ZpcnN0RnJhbWUpO3RoaXMucmVuZGVyU2hhcGUodGhpcy50cmFuc2Zvcm1IZWxwZXIsdGhpcy5zaGFwZXNEYXRhLHRoaXMuaXRlbXNEYXRhLHRydWUpO307Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclNoYXBlVHJhbnNmb3JtPWZ1bmN0aW9uKHBhcmVudFRyYW5zZm9ybSxncm91cFRyYW5zZm9ybSl7aWYocGFyZW50VHJhbnNmb3JtLl9vcE1kZnx8Z3JvdXBUcmFuc2Zvcm0ub3AuX21kZnx8dGhpcy5faXNGaXJzdEZyYW1lKXtncm91cFRyYW5zZm9ybS5vcGFjaXR5PXBhcmVudFRyYW5zZm9ybS5vcGFjaXR5O2dyb3VwVHJhbnNmb3JtLm9wYWNpdHkqPWdyb3VwVHJhbnNmb3JtLm9wLnY7Z3JvdXBUcmFuc2Zvcm0uX29wTWRmPXRydWU7fX07Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmRyYXdMYXllcj1mdW5jdGlvbigpe3ZhciBpO3ZhciBsZW49dGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDt2YXIgajt2YXIgakxlbjt2YXIgazt2YXIga0xlbjt2YXIgZWxlbXM7dmFyIG5vZGVzO3ZhciByZW5kZXJlcj10aGlzLmdsb2JhbERhdGEucmVuZGVyZXI7dmFyIGN0eD10aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDt2YXIgdHlwZTt2YXIgY3VycmVudFN0eWxlO2ZvcihpPTA7aTxsZW47aSs9MSl7Y3VycmVudFN0eWxlPXRoaXMuc3R5bGVzTGlzdFtpXTt0eXBlPWN1cnJlbnRTdHlsZS50eXBlOy8vIFNraXBwaW5nIHN0eWxlIHdoZW5cbi8vIFN0cm9rZSB3aWR0aCBlcXVhbHMgMFxuLy8gc3R5bGUgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCAoZXh0cmEgdW51c2VkIHJlcGVhdGVycylcbi8vIGN1cnJlbnQgb3BhY2l0eSBlcXVhbHMgMFxuLy8gZ2xvYmFsIG9wYWNpdHkgZXF1YWxzIDBcbmlmKCEoKHR5cGU9PT0nc3QnfHx0eXBlPT09J2dzJykmJmN1cnJlbnRTdHlsZS53aT09PTB8fCFjdXJyZW50U3R5bGUuZGF0YS5fc2hvdWxkUmVuZGVyfHxjdXJyZW50U3R5bGUuY29PcD09PTB8fHRoaXMuZ2xvYmFsRGF0YS5jdXJyZW50R2xvYmFsQWxwaGE9PT0wKSl7cmVuZGVyZXIuc2F2ZSgpO2VsZW1zPWN1cnJlbnRTdHlsZS5lbGVtZW50cztpZih0eXBlPT09J3N0J3x8dHlwZT09PSdncycpe2N0eC5zdHJva2VTdHlsZT10eXBlPT09J3N0Jz9jdXJyZW50U3R5bGUuY286Y3VycmVudFN0eWxlLmdyZDtjdHgubGluZVdpZHRoPWN1cnJlbnRTdHlsZS53aTtjdHgubGluZUNhcD1jdXJyZW50U3R5bGUubGM7Y3R4LmxpbmVKb2luPWN1cnJlbnRTdHlsZS5sajtjdHgubWl0ZXJMaW1pdD1jdXJyZW50U3R5bGUubWx8fDA7fWVsc2Uge2N0eC5maWxsU3R5bGU9dHlwZT09PSdmbCc/Y3VycmVudFN0eWxlLmNvOmN1cnJlbnRTdHlsZS5ncmQ7fXJlbmRlcmVyLmN0eE9wYWNpdHkoY3VycmVudFN0eWxlLmNvT3ApO2lmKHR5cGUhPT0nc3QnJiZ0eXBlIT09J2dzJyl7Y3R4LmJlZ2luUGF0aCgpO31yZW5kZXJlci5jdHhUcmFuc2Zvcm0oY3VycmVudFN0eWxlLnByZVRyYW5zZm9ybXMuZmluYWxUcmFuc2Zvcm0ucHJvcHMpO2pMZW49ZWxlbXMubGVuZ3RoO2ZvcihqPTA7ajxqTGVuO2orPTEpe2lmKHR5cGU9PT0nc3QnfHx0eXBlPT09J2dzJyl7Y3R4LmJlZ2luUGF0aCgpO2lmKGN1cnJlbnRTdHlsZS5kYSl7Y3R4LnNldExpbmVEYXNoKGN1cnJlbnRTdHlsZS5kYSk7Y3R4LmxpbmVEYXNoT2Zmc2V0PWN1cnJlbnRTdHlsZS5kbzt9fW5vZGVzPWVsZW1zW2pdLnRyTm9kZXM7a0xlbj1ub2Rlcy5sZW5ndGg7Zm9yKGs9MDtrPGtMZW47ays9MSl7aWYobm9kZXNba10udD09PSdtJyl7Y3R4Lm1vdmVUbyhub2Rlc1trXS5wWzBdLG5vZGVzW2tdLnBbMV0pO31lbHNlIGlmKG5vZGVzW2tdLnQ9PT0nYycpe2N0eC5iZXppZXJDdXJ2ZVRvKG5vZGVzW2tdLnB0c1swXSxub2Rlc1trXS5wdHNbMV0sbm9kZXNba10ucHRzWzJdLG5vZGVzW2tdLnB0c1szXSxub2Rlc1trXS5wdHNbNF0sbm9kZXNba10ucHRzWzVdKTt9ZWxzZSB7Y3R4LmNsb3NlUGF0aCgpO319aWYodHlwZT09PSdzdCd8fHR5cGU9PT0nZ3MnKXtjdHguc3Ryb2tlKCk7aWYoY3VycmVudFN0eWxlLmRhKXtjdHguc2V0TGluZURhc2godGhpcy5kYXNoUmVzZXR0ZXIpO319fWlmKHR5cGUhPT0nc3QnJiZ0eXBlIT09J2dzJyl7Y3R4LmZpbGwoY3VycmVudFN0eWxlLnIpO31yZW5kZXJlci5yZXN0b3JlKCk7fX19O0NWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTaGFwZT1mdW5jdGlvbihwYXJlbnRUcmFuc2Zvcm0saXRlbXMsZGF0YSxpc01haW4pe3ZhciBpO3ZhciBsZW49aXRlbXMubGVuZ3RoLTE7dmFyIGdyb3VwVHJhbnNmb3JtO2dyb3VwVHJhbnNmb3JtPXBhcmVudFRyYW5zZm9ybTtmb3IoaT1sZW47aT49MDtpLT0xKXtpZihpdGVtc1tpXS50eT09PSd0cicpe2dyb3VwVHJhbnNmb3JtPWRhdGFbaV0udHJhbnNmb3JtO3RoaXMucmVuZGVyU2hhcGVUcmFuc2Zvcm0ocGFyZW50VHJhbnNmb3JtLGdyb3VwVHJhbnNmb3JtKTt9ZWxzZSBpZihpdGVtc1tpXS50eT09PSdzaCd8fGl0ZW1zW2ldLnR5PT09J2VsJ3x8aXRlbXNbaV0udHk9PT0ncmMnfHxpdGVtc1tpXS50eT09PSdzcicpe3RoaXMucmVuZGVyUGF0aChpdGVtc1tpXSxkYXRhW2ldKTt9ZWxzZSBpZihpdGVtc1tpXS50eT09PSdmbCcpe3RoaXMucmVuZGVyRmlsbChpdGVtc1tpXSxkYXRhW2ldLGdyb3VwVHJhbnNmb3JtKTt9ZWxzZSBpZihpdGVtc1tpXS50eT09PSdzdCcpe3RoaXMucmVuZGVyU3Ryb2tlKGl0ZW1zW2ldLGRhdGFbaV0sZ3JvdXBUcmFuc2Zvcm0pO31lbHNlIGlmKGl0ZW1zW2ldLnR5PT09J2dmJ3x8aXRlbXNbaV0udHk9PT0nZ3MnKXt0aGlzLnJlbmRlckdyYWRpZW50RmlsbChpdGVtc1tpXSxkYXRhW2ldLGdyb3VwVHJhbnNmb3JtKTt9ZWxzZSBpZihpdGVtc1tpXS50eT09PSdncicpe3RoaXMucmVuZGVyU2hhcGUoZ3JvdXBUcmFuc2Zvcm0saXRlbXNbaV0uaXQsZGF0YVtpXS5pdCk7fWVsc2UgaWYoaXRlbXNbaV0udHk9PT0ndG0nKXsvL1xufX1pZihpc01haW4pe3RoaXMuZHJhd0xheWVyKCk7fX07Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclN0eWxlZFNoYXBlPWZ1bmN0aW9uKHN0eWxlZFNoYXBlLHNoYXBlKXtpZih0aGlzLl9pc0ZpcnN0RnJhbWV8fHNoYXBlLl9tZGZ8fHN0eWxlZFNoYXBlLnRyYW5zZm9ybXMuX21kZil7dmFyIHNoYXBlTm9kZXM9c3R5bGVkU2hhcGUudHJOb2Rlczt2YXIgcGF0aHM9c2hhcGUucGF0aHM7dmFyIGk7dmFyIGxlbjt2YXIgajt2YXIgakxlbj1wYXRocy5fbGVuZ3RoO3NoYXBlTm9kZXMubGVuZ3RoPTA7dmFyIGdyb3VwVHJhbnNmb3JtTWF0PXN0eWxlZFNoYXBlLnRyYW5zZm9ybXMuZmluYWxUcmFuc2Zvcm07Zm9yKGo9MDtqPGpMZW47ais9MSl7dmFyIHBhdGhOb2Rlcz1wYXRocy5zaGFwZXNbal07aWYocGF0aE5vZGVzJiZwYXRoTm9kZXMudil7bGVuPXBhdGhOb2Rlcy5fbGVuZ3RoO2ZvcihpPTE7aTxsZW47aSs9MSl7aWYoaT09PTEpe3NoYXBlTm9kZXMucHVzaCh7dDonbScscDpncm91cFRyYW5zZm9ybU1hdC5hcHBseVRvUG9pbnRBcnJheShwYXRoTm9kZXMudlswXVswXSxwYXRoTm9kZXMudlswXVsxXSwwKX0pO31zaGFwZU5vZGVzLnB1c2goe3Q6J2MnLHB0czpncm91cFRyYW5zZm9ybU1hdC5hcHBseVRvVHJpcGxlUG9pbnRzKHBhdGhOb2Rlcy5vW2ktMV0scGF0aE5vZGVzLmlbaV0scGF0aE5vZGVzLnZbaV0pfSk7fWlmKGxlbj09PTEpe3NoYXBlTm9kZXMucHVzaCh7dDonbScscDpncm91cFRyYW5zZm9ybU1hdC5hcHBseVRvUG9pbnRBcnJheShwYXRoTm9kZXMudlswXVswXSxwYXRoTm9kZXMudlswXVsxXSwwKX0pO31pZihwYXRoTm9kZXMuYyYmbGVuKXtzaGFwZU5vZGVzLnB1c2goe3Q6J2MnLHB0czpncm91cFRyYW5zZm9ybU1hdC5hcHBseVRvVHJpcGxlUG9pbnRzKHBhdGhOb2Rlcy5vW2ktMV0scGF0aE5vZGVzLmlbMF0scGF0aE5vZGVzLnZbMF0pfSk7c2hhcGVOb2Rlcy5wdXNoKHt0Oid6J30pO319fXN0eWxlZFNoYXBlLnRyTm9kZXM9c2hhcGVOb2Rlczt9fTtDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyUGF0aD1mdW5jdGlvbihwYXRoRGF0YSxpdGVtRGF0YSl7aWYocGF0aERhdGEuaGQhPT10cnVlJiZwYXRoRGF0YS5fc2hvdWxkUmVuZGVyKXt2YXIgaTt2YXIgbGVuPWl0ZW1EYXRhLnN0eWxlZFNoYXBlcy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLnJlbmRlclN0eWxlZFNoYXBlKGl0ZW1EYXRhLnN0eWxlZFNoYXBlc1tpXSxpdGVtRGF0YS5zaCk7fX19O0NWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGaWxsPWZ1bmN0aW9uKHN0eWxlRGF0YSxpdGVtRGF0YSxncm91cFRyYW5zZm9ybSl7dmFyIHN0eWxlRWxlbT1pdGVtRGF0YS5zdHlsZTtpZihpdGVtRGF0YS5jLl9tZGZ8fHRoaXMuX2lzRmlyc3RGcmFtZSl7c3R5bGVFbGVtLmNvPSdyZ2IoJytibUZsb29yKGl0ZW1EYXRhLmMudlswXSkrJywnK2JtRmxvb3IoaXRlbURhdGEuYy52WzFdKSsnLCcrYm1GbG9vcihpdGVtRGF0YS5jLnZbMl0pKycpJzt9aWYoaXRlbURhdGEuby5fbWRmfHxncm91cFRyYW5zZm9ybS5fb3BNZGZ8fHRoaXMuX2lzRmlyc3RGcmFtZSl7c3R5bGVFbGVtLmNvT3A9aXRlbURhdGEuby52Kmdyb3VwVHJhbnNmb3JtLm9wYWNpdHk7fX07Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlckdyYWRpZW50RmlsbD1mdW5jdGlvbihzdHlsZURhdGEsaXRlbURhdGEsZ3JvdXBUcmFuc2Zvcm0pe3ZhciBzdHlsZUVsZW09aXRlbURhdGEuc3R5bGU7dmFyIGdyZDtpZighc3R5bGVFbGVtLmdyZHx8aXRlbURhdGEuZy5fbWRmfHxpdGVtRGF0YS5zLl9tZGZ8fGl0ZW1EYXRhLmUuX21kZnx8c3R5bGVEYXRhLnQhPT0xJiYoaXRlbURhdGEuaC5fbWRmfHxpdGVtRGF0YS5hLl9tZGYpKXt2YXIgY3R4PXRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0O3ZhciBwdDE9aXRlbURhdGEucy52O3ZhciBwdDI9aXRlbURhdGEuZS52O2lmKHN0eWxlRGF0YS50PT09MSl7Z3JkPWN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudChwdDFbMF0scHQxWzFdLHB0MlswXSxwdDJbMV0pO31lbHNlIHt2YXIgcmFkPU1hdGguc3FydChNYXRoLnBvdyhwdDFbMF0tcHQyWzBdLDIpK01hdGgucG93KHB0MVsxXS1wdDJbMV0sMikpO3ZhciBhbmc9TWF0aC5hdGFuMihwdDJbMV0tcHQxWzFdLHB0MlswXS1wdDFbMF0pO3ZhciBwZXJjZW50PWl0ZW1EYXRhLmgudjtpZihwZXJjZW50Pj0xKXtwZXJjZW50PTAuOTk7fWVsc2UgaWYocGVyY2VudDw9LTEpe3BlcmNlbnQ9LTAuOTk7fXZhciBkaXN0PXJhZCpwZXJjZW50O3ZhciB4PU1hdGguY29zKGFuZytpdGVtRGF0YS5hLnYpKmRpc3QrcHQxWzBdO3ZhciB5PU1hdGguc2luKGFuZytpdGVtRGF0YS5hLnYpKmRpc3QrcHQxWzFdO2dyZD1jdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoeCx5LDAscHQxWzBdLHB0MVsxXSxyYWQpO312YXIgaTt2YXIgbGVuPXN0eWxlRGF0YS5nLnA7dmFyIGNWYWx1ZXM9aXRlbURhdGEuZy5jO3ZhciBvcGFjaXR5PTE7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZihpdGVtRGF0YS5nLl9oYXNPcGFjaXR5JiZpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSl7b3BhY2l0eT1pdGVtRGF0YS5nLm9baSoyKzFdO31ncmQuYWRkQ29sb3JTdG9wKGNWYWx1ZXNbaSo0XS8xMDAsJ3JnYmEoJytjVmFsdWVzW2kqNCsxXSsnLCcrY1ZhbHVlc1tpKjQrMl0rJywnK2NWYWx1ZXNbaSo0KzNdKycsJytvcGFjaXR5KycpJyk7fXN0eWxlRWxlbS5ncmQ9Z3JkO31zdHlsZUVsZW0uY29PcD1pdGVtRGF0YS5vLnYqZ3JvdXBUcmFuc2Zvcm0ub3BhY2l0eTt9O0NWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTdHJva2U9ZnVuY3Rpb24oc3R5bGVEYXRhLGl0ZW1EYXRhLGdyb3VwVHJhbnNmb3JtKXt2YXIgc3R5bGVFbGVtPWl0ZW1EYXRhLnN0eWxlO3ZhciBkPWl0ZW1EYXRhLmQ7aWYoZCYmKGQuX21kZnx8dGhpcy5faXNGaXJzdEZyYW1lKSl7c3R5bGVFbGVtLmRhPWQuZGFzaEFycmF5O3N0eWxlRWxlbS5kbz1kLmRhc2hvZmZzZXRbMF07fWlmKGl0ZW1EYXRhLmMuX21kZnx8dGhpcy5faXNGaXJzdEZyYW1lKXtzdHlsZUVsZW0uY289J3JnYignK2JtRmxvb3IoaXRlbURhdGEuYy52WzBdKSsnLCcrYm1GbG9vcihpdGVtRGF0YS5jLnZbMV0pKycsJytibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkrJyknO31pZihpdGVtRGF0YS5vLl9tZGZ8fGdyb3VwVHJhbnNmb3JtLl9vcE1kZnx8dGhpcy5faXNGaXJzdEZyYW1lKXtzdHlsZUVsZW0uY29PcD1pdGVtRGF0YS5vLnYqZ3JvdXBUcmFuc2Zvcm0ub3BhY2l0eTt9aWYoaXRlbURhdGEudy5fbWRmfHx0aGlzLl9pc0ZpcnN0RnJhbWUpe3N0eWxlRWxlbS53aT1pdGVtRGF0YS53LnY7fX07Q1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLnNoYXBlc0RhdGE9bnVsbDt0aGlzLmdsb2JhbERhdGE9bnVsbDt0aGlzLmNhbnZhc0NvbnRleHQ9bnVsbDt0aGlzLnN0eWxlc0xpc3QubGVuZ3RoPTA7dGhpcy5pdGVtc0RhdGEubGVuZ3RoPTA7fTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudCxcclxuU1ZHU2hhcGVFbGVtZW50LCBJSW1hZ2VFbGVtZW50ICovZnVuY3Rpb24gQ1ZTb2xpZEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApe3RoaXMuaW5pdEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApO31leHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LFRyYW5zZm9ybUVsZW1lbnQsQ1ZCYXNlRWxlbWVudCxIaWVyYXJjaHlFbGVtZW50LEZyYW1lRWxlbWVudCxSZW5kZXJhYmxlRWxlbWVudF0sQ1ZTb2xpZEVsZW1lbnQpO0NWU29saWRFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudD1TVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50O0NWU29saWRFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWU9SUltYWdlRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lO0NWU29saWRFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgY3R4PXRoaXMuY2FudmFzQ29udGV4dDtjdHguZmlsbFN0eWxlPXRoaXMuZGF0YS5zYztjdHguZmlsbFJlY3QoMCwwLHRoaXMuZGF0YS5zdyx0aGlzLmRhdGEuc2gpOy8vXG59Oy8qIGdsb2JhbCBleHRlbmRQcm90b3R5cGUsIEJhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsXHJcblJlbmRlcmFibGVFbGVtZW50LCBJVGV4dEVsZW1lbnQsIGNyZWF0ZVRhZywgY3JlYXRlU2l6ZWRBcnJheSAqL2Z1bmN0aW9uIENWVGV4dEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApe3RoaXMudGV4dFNwYW5zPVtdO3RoaXMueU9mZnNldD0wO3RoaXMuZmlsbENvbG9yQW5pbT1mYWxzZTt0aGlzLnN0cm9rZUNvbG9yQW5pbT1mYWxzZTt0aGlzLnN0cm9rZVdpZHRoQW5pbT1mYWxzZTt0aGlzLnN0cm9rZT1mYWxzZTt0aGlzLmZpbGw9ZmFsc2U7dGhpcy5qdXN0aWZ5T2Zmc2V0PTA7dGhpcy5jdXJyZW50UmVuZGVyPW51bGw7dGhpcy5yZW5kZXJUeXBlPSdjYW52YXMnO3RoaXMudmFsdWVzPXtmaWxsOidyZ2JhKDAsMCwwLDApJyxzdHJva2U6J3JnYmEoMCwwLDAsMCknLHNXaWR0aDowLGZWYWx1ZTonJ307dGhpcy5pbml0RWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCk7fWV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsVHJhbnNmb3JtRWxlbWVudCxDVkJhc2VFbGVtZW50LEhpZXJhcmNoeUVsZW1lbnQsRnJhbWVFbGVtZW50LFJlbmRlcmFibGVFbGVtZW50LElUZXh0RWxlbWVudF0sQ1ZUZXh0RWxlbWVudCk7Q1ZUZXh0RWxlbWVudC5wcm90b3R5cGUudEhlbHBlcj1jcmVhdGVUYWcoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJyk7Q1ZUZXh0RWxlbWVudC5wcm90b3R5cGUuYnVpbGROZXdUZXh0PWZ1bmN0aW9uKCl7dmFyIGRvY3VtZW50RGF0YT10aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YTt0aGlzLnJlbmRlcmVkTGV0dGVycz1jcmVhdGVTaXplZEFycmF5KGRvY3VtZW50RGF0YS5sP2RvY3VtZW50RGF0YS5sLmxlbmd0aDowKTt2YXIgaGFzRmlsbD1mYWxzZTtpZihkb2N1bWVudERhdGEuZmMpe2hhc0ZpbGw9dHJ1ZTt0aGlzLnZhbHVlcy5maWxsPXRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuZmMpO31lbHNlIHt0aGlzLnZhbHVlcy5maWxsPSdyZ2JhKDAsMCwwLDApJzt9dGhpcy5maWxsPWhhc0ZpbGw7dmFyIGhhc1N0cm9rZT1mYWxzZTtpZihkb2N1bWVudERhdGEuc2Mpe2hhc1N0cm9rZT10cnVlO3RoaXMudmFsdWVzLnN0cm9rZT10aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLnNjKTt0aGlzLnZhbHVlcy5zV2lkdGg9ZG9jdW1lbnREYXRhLnN3O312YXIgZm9udERhdGE9dGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpO3ZhciBpO3ZhciBsZW47dmFyIGxldHRlcnM9ZG9jdW1lbnREYXRhLmw7dmFyIG1hdHJpeEhlbHBlcj10aGlzLm1IZWxwZXI7dGhpcy5zdHJva2U9aGFzU3Ryb2tlO3RoaXMudmFsdWVzLmZWYWx1ZT1kb2N1bWVudERhdGEuZmluYWxTaXplKydweCAnK3RoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5O2xlbj1kb2N1bWVudERhdGEuZmluYWxUZXh0Lmxlbmd0aDsvLyB0aGlzLnRIZWxwZXIuZm9udCA9IHRoaXMudmFsdWVzLmZWYWx1ZTtcbnZhciBjaGFyRGF0YTt2YXIgc2hhcGVEYXRhO3ZhciBrO3ZhciBrTGVuO3ZhciBzaGFwZXM7dmFyIGo7dmFyIGpMZW47dmFyIHBhdGhOb2Rlczt2YXIgY29tbWFuZHM7dmFyIHBhdGhBcnI7dmFyIHNpbmdsZVNoYXBlPXRoaXMuZGF0YS5zaW5nbGVTaGFwZTt2YXIgdHJhY2tpbmdPZmZzZXQ9ZG9jdW1lbnREYXRhLnRyKjAuMDAxKmRvY3VtZW50RGF0YS5maW5hbFNpemU7dmFyIHhQb3M9MDt2YXIgeVBvcz0wO3ZhciBmaXJzdExpbmU9dHJ1ZTt2YXIgY250PTA7Zm9yKGk9MDtpPGxlbjtpKz0xKXtjaGFyRGF0YT10aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Q2hhckRhdGEoZG9jdW1lbnREYXRhLmZpbmFsVGV4dFtpXSxmb250RGF0YS5mU3R5bGUsdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHkpO3NoYXBlRGF0YT1jaGFyRGF0YSYmY2hhckRhdGEuZGF0YXx8e307bWF0cml4SGVscGVyLnJlc2V0KCk7aWYoc2luZ2xlU2hhcGUmJmxldHRlcnNbaV0ubil7eFBvcz0tdHJhY2tpbmdPZmZzZXQ7eVBvcys9ZG9jdW1lbnREYXRhLnlPZmZzZXQ7eVBvcys9Zmlyc3RMaW5lPzE6MDtmaXJzdExpbmU9ZmFsc2U7fXNoYXBlcz1zaGFwZURhdGEuc2hhcGVzP3NoYXBlRGF0YS5zaGFwZXNbMF0uaXQ6W107akxlbj1zaGFwZXMubGVuZ3RoO21hdHJpeEhlbHBlci5zY2FsZShkb2N1bWVudERhdGEuZmluYWxTaXplLzEwMCxkb2N1bWVudERhdGEuZmluYWxTaXplLzEwMCk7aWYoc2luZ2xlU2hhcGUpe3RoaXMuYXBwbHlUZXh0UHJvcGVydGllc1RvTWF0cml4KGRvY3VtZW50RGF0YSxtYXRyaXhIZWxwZXIsbGV0dGVyc1tpXS5saW5lLHhQb3MseVBvcyk7fWNvbW1hbmRzPWNyZWF0ZVNpemVkQXJyYXkoakxlbik7Zm9yKGo9MDtqPGpMZW47ais9MSl7a0xlbj1zaGFwZXNbal0ua3Muay5pLmxlbmd0aDtwYXRoTm9kZXM9c2hhcGVzW2pdLmtzLms7cGF0aEFycj1bXTtmb3Ioaz0xO2s8a0xlbjtrKz0xKXtpZihrPT09MSl7cGF0aEFyci5wdXNoKG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMudlswXVswXSxwYXRoTm9kZXMudlswXVsxXSwwKSxtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLnZbMF1bMF0scGF0aE5vZGVzLnZbMF1bMV0sMCkpO31wYXRoQXJyLnB1c2gobWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy5vW2stMV1bMF0scGF0aE5vZGVzLm9bay0xXVsxXSwwKSxtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLm9bay0xXVswXSxwYXRoTm9kZXMub1trLTFdWzFdLDApLG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMuaVtrXVswXSxwYXRoTm9kZXMuaVtrXVsxXSwwKSxtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLmlba11bMF0scGF0aE5vZGVzLmlba11bMV0sMCksbWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy52W2tdWzBdLHBhdGhOb2Rlcy52W2tdWzFdLDApLG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMudltrXVswXSxwYXRoTm9kZXMudltrXVsxXSwwKSk7fXBhdGhBcnIucHVzaChtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLm9bay0xXVswXSxwYXRoTm9kZXMub1trLTFdWzFdLDApLG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMub1trLTFdWzBdLHBhdGhOb2Rlcy5vW2stMV1bMV0sMCksbWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy5pWzBdWzBdLHBhdGhOb2Rlcy5pWzBdWzFdLDApLG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMuaVswXVswXSxwYXRoTm9kZXMuaVswXVsxXSwwKSxtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLnZbMF1bMF0scGF0aE5vZGVzLnZbMF1bMV0sMCksbWF0cml4SGVscGVyLmFwcGx5VG9ZKHBhdGhOb2Rlcy52WzBdWzBdLHBhdGhOb2Rlcy52WzBdWzFdLDApKTtjb21tYW5kc1tqXT1wYXRoQXJyO31pZihzaW5nbGVTaGFwZSl7eFBvcys9bGV0dGVyc1tpXS5sO3hQb3MrPXRyYWNraW5nT2Zmc2V0O31pZih0aGlzLnRleHRTcGFuc1tjbnRdKXt0aGlzLnRleHRTcGFuc1tjbnRdLmVsZW09Y29tbWFuZHM7fWVsc2Uge3RoaXMudGV4dFNwYW5zW2NudF09e2VsZW06Y29tbWFuZHN9O31jbnQrPTE7fX07Q1ZUZXh0RWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50PWZ1bmN0aW9uKCl7dmFyIGN0eD10aGlzLmNhbnZhc0NvbnRleHQ7Y3R4LmZvbnQ9dGhpcy52YWx1ZXMuZlZhbHVlO2N0eC5saW5lQ2FwPSdidXR0JztjdHgubGluZUpvaW49J21pdGVyJztjdHgubWl0ZXJMaW1pdD00O2lmKCF0aGlzLmRhdGEuc2luZ2xlU2hhcGUpe3RoaXMudGV4dEFuaW1hdG9yLmdldE1lYXN1cmVzKHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnKTt9dmFyIGk7dmFyIGxlbjt2YXIgajt2YXIgakxlbjt2YXIgazt2YXIga0xlbjt2YXIgcmVuZGVyZWRMZXR0ZXJzPXRoaXMudGV4dEFuaW1hdG9yLnJlbmRlcmVkTGV0dGVyczt2YXIgbGV0dGVycz10aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO2xlbj1sZXR0ZXJzLmxlbmd0aDt2YXIgcmVuZGVyZWRMZXR0ZXI7dmFyIGxhc3RGaWxsPW51bGw7dmFyIGxhc3RTdHJva2U9bnVsbDt2YXIgbGFzdFN0cm9rZVc9bnVsbDt2YXIgY29tbWFuZHM7dmFyIHBhdGhBcnI7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZighbGV0dGVyc1tpXS5uKXtyZW5kZXJlZExldHRlcj1yZW5kZXJlZExldHRlcnNbaV07aWYocmVuZGVyZWRMZXR0ZXIpe3RoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5zYXZlKCk7dGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLmN0eFRyYW5zZm9ybShyZW5kZXJlZExldHRlci5wKTt0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4T3BhY2l0eShyZW5kZXJlZExldHRlci5vKTt9aWYodGhpcy5maWxsKXtpZihyZW5kZXJlZExldHRlciYmcmVuZGVyZWRMZXR0ZXIuZmMpe2lmKGxhc3RGaWxsIT09cmVuZGVyZWRMZXR0ZXIuZmMpe2xhc3RGaWxsPXJlbmRlcmVkTGV0dGVyLmZjO2N0eC5maWxsU3R5bGU9cmVuZGVyZWRMZXR0ZXIuZmM7fX1lbHNlIGlmKGxhc3RGaWxsIT09dGhpcy52YWx1ZXMuZmlsbCl7bGFzdEZpbGw9dGhpcy52YWx1ZXMuZmlsbDtjdHguZmlsbFN0eWxlPXRoaXMudmFsdWVzLmZpbGw7fWNvbW1hbmRzPXRoaXMudGV4dFNwYW5zW2ldLmVsZW07akxlbj1jb21tYW5kcy5sZW5ndGg7dGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7Zm9yKGo9MDtqPGpMZW47ais9MSl7cGF0aEFycj1jb21tYW5kc1tqXTtrTGVuPXBhdGhBcnIubGVuZ3RoO3RoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0Lm1vdmVUbyhwYXRoQXJyWzBdLHBhdGhBcnJbMV0pO2ZvcihrPTI7azxrTGVuO2srPTYpe3RoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmJlemllckN1cnZlVG8ocGF0aEFycltrXSxwYXRoQXJyW2srMV0scGF0aEFycltrKzJdLHBhdGhBcnJbayszXSxwYXRoQXJyW2srNF0scGF0aEFycltrKzVdKTt9fXRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO3RoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmZpbGwoKTsvLy8gY3R4LmZpbGxUZXh0KHRoaXMudGV4dFNwYW5zW2ldLnZhbCwwLDApO1xufWlmKHRoaXMuc3Ryb2tlKXtpZihyZW5kZXJlZExldHRlciYmcmVuZGVyZWRMZXR0ZXIuc3cpe2lmKGxhc3RTdHJva2VXIT09cmVuZGVyZWRMZXR0ZXIuc3cpe2xhc3RTdHJva2VXPXJlbmRlcmVkTGV0dGVyLnN3O2N0eC5saW5lV2lkdGg9cmVuZGVyZWRMZXR0ZXIuc3c7fX1lbHNlIGlmKGxhc3RTdHJva2VXIT09dGhpcy52YWx1ZXMuc1dpZHRoKXtsYXN0U3Ryb2tlVz10aGlzLnZhbHVlcy5zV2lkdGg7Y3R4LmxpbmVXaWR0aD10aGlzLnZhbHVlcy5zV2lkdGg7fWlmKHJlbmRlcmVkTGV0dGVyJiZyZW5kZXJlZExldHRlci5zYyl7aWYobGFzdFN0cm9rZSE9PXJlbmRlcmVkTGV0dGVyLnNjKXtsYXN0U3Ryb2tlPXJlbmRlcmVkTGV0dGVyLnNjO2N0eC5zdHJva2VTdHlsZT1yZW5kZXJlZExldHRlci5zYzt9fWVsc2UgaWYobGFzdFN0cm9rZSE9PXRoaXMudmFsdWVzLnN0cm9rZSl7bGFzdFN0cm9rZT10aGlzLnZhbHVlcy5zdHJva2U7Y3R4LnN0cm9rZVN0eWxlPXRoaXMudmFsdWVzLnN0cm9rZTt9Y29tbWFuZHM9dGhpcy50ZXh0U3BhbnNbaV0uZWxlbTtqTGVuPWNvbW1hbmRzLmxlbmd0aDt0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5iZWdpblBhdGgoKTtmb3Ioaj0wO2o8akxlbjtqKz0xKXtwYXRoQXJyPWNvbW1hbmRzW2pdO2tMZW49cGF0aEFyci5sZW5ndGg7dGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQubW92ZVRvKHBhdGhBcnJbMF0scGF0aEFyclsxXSk7Zm9yKGs9MjtrPGtMZW47ays9Nil7dGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmV6aWVyQ3VydmVUbyhwYXRoQXJyW2tdLHBhdGhBcnJbaysxXSxwYXRoQXJyW2srMl0scGF0aEFycltrKzNdLHBhdGhBcnJbays0XSxwYXRoQXJyW2srNV0pO319dGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuY2xvc2VQYXRoKCk7dGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuc3Ryb2tlKCk7Ly8vIGN0eC5zdHJva2VUZXh0KGxldHRlcnNbaV0udmFsLDAsMCk7XG59aWYocmVuZGVyZWRMZXR0ZXIpe3RoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKCk7fX19fTtmdW5jdGlvbiBDVkVmZmVjdHMoKXt9Q1ZFZmZlY3RzLnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbigpe307LyogZ2xvYmFsIGNyZWF0ZVRhZywgY3JlYXRlTlMsIHN0eWxlRGl2LCBDVkVmZmVjdHMsIE1hc2tFbGVtZW50LCBTVkdCYXNlRWxlbWVudCwgSHlicmlkUmVuZGVyZXIgKi9mdW5jdGlvbiBIQmFzZUVsZW1lbnQoKXt9SEJhc2VFbGVtZW50LnByb3RvdHlwZT17Y2hlY2tCbGVuZE1vZGU6ZnVuY3Rpb24gY2hlY2tCbGVuZE1vZGUoKXt9LGluaXRSZW5kZXJlckVsZW1lbnQ6ZnVuY3Rpb24gaW5pdFJlbmRlcmVyRWxlbWVudCgpe3RoaXMuYmFzZUVsZW1lbnQ9Y3JlYXRlVGFnKHRoaXMuZGF0YS50Z3x8J2RpdicpO2lmKHRoaXMuZGF0YS5oYXNNYXNrKXt0aGlzLnN2Z0VsZW1lbnQ9Y3JlYXRlTlMoJ3N2ZycpO3RoaXMubGF5ZXJFbGVtZW50PWNyZWF0ZU5TKCdnJyk7dGhpcy5tYXNrZWRFbGVtZW50PXRoaXMubGF5ZXJFbGVtZW50O3RoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7dGhpcy5iYXNlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnN2Z0VsZW1lbnQpO31lbHNlIHt0aGlzLmxheWVyRWxlbWVudD10aGlzLmJhc2VFbGVtZW50O31zdHlsZURpdih0aGlzLmJhc2VFbGVtZW50KTt9LGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzOmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCl7dGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXI9bmV3IENWRWZmZWN0cyh0aGlzKTt0aGlzLnRyYW5zZm9ybWVkRWxlbWVudD10aGlzLmJhc2VFbGVtZW50O3RoaXMubWFza2VkRWxlbWVudD10aGlzLmxheWVyRWxlbWVudDtpZih0aGlzLmRhdGEubG4pe3RoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLHRoaXMuZGF0YS5sbik7fWlmKHRoaXMuZGF0YS5jbCl7dGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsdGhpcy5kYXRhLmNsKTt9aWYodGhpcy5kYXRhLmJtIT09MCl7dGhpcy5zZXRCbGVuZE1vZGUoKTt9fSxyZW5kZXJFbGVtZW50OmZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoKXt2YXIgdHJhbnNmb3JtZWRFbGVtZW50U3R5bGU9dGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQ/dGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQuc3R5bGU6e307aWYodGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmKXt2YXIgbWF0cml4VmFsdWU9dGhpcy5maW5hbFRyYW5zZm9ybS5tYXQudG9DU1MoKTt0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZS50cmFuc2Zvcm09bWF0cml4VmFsdWU7dHJhbnNmb3JtZWRFbGVtZW50U3R5bGUud2Via2l0VHJhbnNmb3JtPW1hdHJpeFZhbHVlO31pZih0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZil7dHJhbnNmb3JtZWRFbGVtZW50U3R5bGUub3BhY2l0eT10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8udjt9fSxyZW5kZXJGcmFtZTpmdW5jdGlvbiByZW5kZXJGcmFtZSgpey8vIElmIGl0IGlzIGV4cG9ydGVkIGFzIGhpZGRlbiAoZGF0YS5oZCA9PT0gdHJ1ZSkgbm8gbmVlZCB0byByZW5kZXJcbi8vIElmIGl0IGlzIG5vdCB2aXNpYmxlIG5vIG5lZWQgdG8gcmVuZGVyXG5pZih0aGlzLmRhdGEuaGR8fHRoaXMuaGlkZGVuKXtyZXR1cm47fXRoaXMucmVuZGVyVHJhbnNmb3JtKCk7dGhpcy5yZW5kZXJSZW5kZXJhYmxlKCk7dGhpcy5yZW5kZXJFbGVtZW50KCk7dGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtpZih0aGlzLl9pc0ZpcnN0RnJhbWUpe3RoaXMuX2lzRmlyc3RGcmFtZT1mYWxzZTt9fSxkZXN0cm95OmZ1bmN0aW9uIGRlc3Ryb3koKXt0aGlzLmxheWVyRWxlbWVudD1udWxsO3RoaXMudHJhbnNmb3JtZWRFbGVtZW50PW51bGw7aWYodGhpcy5tYXR0ZUVsZW1lbnQpe3RoaXMubWF0dGVFbGVtZW50PW51bGw7fWlmKHRoaXMubWFza01hbmFnZXIpe3RoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO3RoaXMubWFza01hbmFnZXI9bnVsbDt9fSxjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50czpmdW5jdGlvbiBjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpe3RoaXMubWFza01hbmFnZXI9bmV3IE1hc2tFbGVtZW50KHRoaXMuZGF0YSx0aGlzLHRoaXMuZ2xvYmFsRGF0YSk7fSxhZGRFZmZlY3RzOmZ1bmN0aW9uIGFkZEVmZmVjdHMoKXt9LHNldE1hdHRlOmZ1bmN0aW9uIHNldE1hdHRlKCl7fX07SEJhc2VFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudD1TVkdCYXNlRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQ7SEJhc2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95QmFzZUVsZW1lbnQ9SEJhc2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95O0hCYXNlRWxlbWVudC5wcm90b3R5cGUuYnVpbGRFbGVtZW50UGFyZW50aW5nPUh5YnJpZFJlbmRlcmVyLnByb3RvdHlwZS5idWlsZEVsZW1lbnRQYXJlbnRpbmc7LyogZ2xvYmFsIGV4dGVuZFByb3RvdHlwZSwgQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIEhCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LFxyXG5SZW5kZXJhYmxlRE9NRWxlbWVudCwgY3JlYXRlTlMsIGNyZWF0ZVRhZyAqL2Z1bmN0aW9uIEhTb2xpZEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApe3RoaXMuaW5pdEVsZW1lbnQoZGF0YSxnbG9iYWxEYXRhLGNvbXApO31leHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LFRyYW5zZm9ybUVsZW1lbnQsSEJhc2VFbGVtZW50LEhpZXJhcmNoeUVsZW1lbnQsRnJhbWVFbGVtZW50LFJlbmRlcmFibGVET01FbGVtZW50XSxIU29saWRFbGVtZW50KTtIU29saWRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50PWZ1bmN0aW9uKCl7dmFyIHJlY3Q7aWYodGhpcy5kYXRhLmhhc01hc2spe3JlY3Q9Y3JlYXRlTlMoJ3JlY3QnKTtyZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLHRoaXMuZGF0YS5zdyk7cmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsdGhpcy5kYXRhLnNoKTtyZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsdGhpcy5kYXRhLnNjKTt0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsdGhpcy5kYXRhLnN3KTt0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLHRoaXMuZGF0YS5zaCk7fWVsc2Uge3JlY3Q9Y3JlYXRlVGFnKCdkaXYnKTtyZWN0LnN0eWxlLndpZHRoPXRoaXMuZGF0YS5zdysncHgnO3JlY3Quc3R5bGUuaGVpZ2h0PXRoaXMuZGF0YS5zaCsncHgnO3JlY3Quc3R5bGUuYmFja2dyb3VuZENvbG9yPXRoaXMuZGF0YS5zYzt9dGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQocmVjdCk7fTsvKiBnbG9iYWwgY3JlYXRlU2l6ZWRBcnJheSwgUHJvcGVydHlGYWN0b3J5LCBleHRlbmRQcm90b3R5cGUsIEh5YnJpZFJlbmRlcmVyLCBJQ29tcEVsZW1lbnQsIEhCYXNlRWxlbWVudCAqL2Z1bmN0aW9uIEhDb21wRWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7dGhpcy5sYXllcnM9ZGF0YS5sYXllcnM7dGhpcy5zdXBwb3J0czNkPSFkYXRhLmhhc01hc2s7dGhpcy5jb21wbGV0ZUxheWVycz1mYWxzZTt0aGlzLnBlbmRpbmdFbGVtZW50cz1bXTt0aGlzLmVsZW1lbnRzPXRoaXMubGF5ZXJzP2NyZWF0ZVNpemVkQXJyYXkodGhpcy5sYXllcnMubGVuZ3RoKTpbXTt0aGlzLmluaXRFbGVtZW50KGRhdGEsZ2xvYmFsRGF0YSxjb21wKTt0aGlzLnRtPWRhdGEudG0/UHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcyxkYXRhLnRtLDAsZ2xvYmFsRGF0YS5mcmFtZVJhdGUsdGhpcyk6e19wbGFjZWhvbGRlcjp0cnVlfTt9ZXh0ZW5kUHJvdG90eXBlKFtIeWJyaWRSZW5kZXJlcixJQ29tcEVsZW1lbnQsSEJhc2VFbGVtZW50XSxIQ29tcEVsZW1lbnQpO0hDb21wRWxlbWVudC5wcm90b3R5cGUuX2NyZWF0ZUJhc2VDb250YWluZXJFbGVtZW50cz1IQ29tcEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzO0hDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGFpbmVyRWxlbWVudHM9ZnVuY3Rpb24oKXt0aGlzLl9jcmVhdGVCYXNlQ29udGFpbmVyRWxlbWVudHMoKTsvLyBkaXZFbGVtZW50LnN0eWxlLmNsaXAgPSAncmVjdCgwcHgsICcrdGhpcy5kYXRhLncrJ3B4LCAnK3RoaXMuZGF0YS5oKydweCwgMHB4KSc7XG5pZih0aGlzLmRhdGEuaGFzTWFzayl7dGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLHRoaXMuZGF0YS53KTt0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLHRoaXMuZGF0YS5oKTt0aGlzLnRyYW5zZm9ybWVkRWxlbWVudD10aGlzLmJhc2VFbGVtZW50O31lbHNlIHt0aGlzLnRyYW5zZm9ybWVkRWxlbWVudD10aGlzLmxheWVyRWxlbWVudDt9fTtIQ29tcEVsZW1lbnQucHJvdG90eXBlLmFkZFRvM2RDb250YWluZXI9ZnVuY3Rpb24oZWxlbSxwb3Mpe3ZhciBqPTA7dmFyIG5leHRFbGVtZW50O3doaWxlKGo8cG9zKXtpZih0aGlzLmVsZW1lbnRzW2pdJiZ0aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KXtuZXh0RWxlbWVudD10aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KCk7fWorPTE7fWlmKG5leHRFbGVtZW50KXt0aGlzLmxheWVyRWxlbWVudC5pbnNlcnRCZWZvcmUoZWxlbSxuZXh0RWxlbWVudCk7fWVsc2Uge3RoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0pO319Oy8qIGdsb2JhbCBjcmVhdGVOUywgZXh0ZW5kUHJvdG90eXBlLCBCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSFNvbGlkRWxlbWVudCwgU1ZHU2hhcGVFbGVtZW50LCBIQmFzZUVsZW1lbnQsXHJcbkhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZUVsZW1lbnQsIGNyZWF0ZU5TLCBibU1pbiwgYm1TcXJ0LCBibU1pbiwgYm1NYXgsIGJtUG93ICovZnVuY3Rpb24gSFNoYXBlRWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7Ly8gTGlzdCBvZiBkcmF3YWJsZSBlbGVtZW50c1xudGhpcy5zaGFwZXM9W107Ly8gRnVsbCBzaGFwZSBkYXRhXG50aGlzLnNoYXBlc0RhdGE9ZGF0YS5zaGFwZXM7Ly8gTGlzdCBvZiBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hhcGVzXG50aGlzLnN0eWxlc0xpc3Q9W107Ly8gTGlzdCBvZiBtb2RpZmllcnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hhcGVzXG50aGlzLnNoYXBlTW9kaWZpZXJzPVtdOy8vIExpc3Qgb2YgaXRlbXMgaW4gc2hhcGUgdHJlZVxudGhpcy5pdGVtc0RhdGE9W107Ly8gTGlzdCBvZiBpdGVtcyBpbiBwcmV2aW91cyBzaGFwZSB0cmVlXG50aGlzLnByb2Nlc3NlZEVsZW1lbnRzPVtdOy8vIExpc3Qgb2YgYW5pbWF0ZWQgY29tcG9uZW50c1xudGhpcy5hbmltYXRlZENvbnRlbnRzPVtdO3RoaXMuc2hhcGVzQ29udGFpbmVyPWNyZWF0ZU5TKCdnJyk7dGhpcy5pbml0RWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCk7Ly8gTW92aW5nIGFueSBwcm9wZXJ0eSB0aGF0IGRvZXNuJ3QgZ2V0IHRvbyBtdWNoIGFjY2VzcyBhZnRlciBpbml0aWFsaXphdGlvbiBiZWNhdXNlIG9mIHY4IHdheSBvZiBoYW5kbGluZyBtb3JlIHRoYW4gMTAgcHJvcGVydGllcy5cbi8vIExpc3Qgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZFxudGhpcy5wcmV2Vmlld0RhdGE9W107dGhpcy5jdXJyZW50QkJveD17eDo5OTk5OTkseTotOTk5OTk5LGg6MCx3OjB9O31leHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LFRyYW5zZm9ybUVsZW1lbnQsSFNvbGlkRWxlbWVudCxTVkdTaGFwZUVsZW1lbnQsSEJhc2VFbGVtZW50LEhpZXJhcmNoeUVsZW1lbnQsRnJhbWVFbGVtZW50LFJlbmRlcmFibGVFbGVtZW50XSxIU2hhcGVFbGVtZW50KTtIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5fcmVuZGVyU2hhcGVGcmFtZT1IU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQ7SFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudD1mdW5jdGlvbigpe3ZhciBjb250O3RoaXMuYmFzZUVsZW1lbnQuc3R5bGUuZm9udFNpemU9MDtpZih0aGlzLmRhdGEuaGFzTWFzayl7dGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zaGFwZXNDb250YWluZXIpO2NvbnQ9dGhpcy5zdmdFbGVtZW50O31lbHNlIHtjb250PWNyZWF0ZU5TKCdzdmcnKTt2YXIgc2l6ZT10aGlzLmNvbXAuZGF0YT90aGlzLmNvbXAuZGF0YTp0aGlzLmdsb2JhbERhdGEuY29tcFNpemU7Y29udC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJyxzaXplLncpO2NvbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLHNpemUuaCk7Y29udC5hcHBlbmRDaGlsZCh0aGlzLnNoYXBlc0NvbnRhaW5lcik7dGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udCk7fXRoaXMuc2VhcmNoU2hhcGVzKHRoaXMuc2hhcGVzRGF0YSx0aGlzLml0ZW1zRGF0YSx0aGlzLnByZXZWaWV3RGF0YSx0aGlzLnNoYXBlc0NvbnRhaW5lciwwLFtdLHRydWUpO3RoaXMuZmlsdGVyVW5pcXVlU2hhcGVzKCk7dGhpcy5zaGFwZUNvbnQ9Y29udDt9O0hTaGFwZUVsZW1lbnQucHJvdG90eXBlLmdldFRyYW5zZm9ybWVkUG9pbnQ9ZnVuY3Rpb24odHJhbnNmb3JtZXJzLHBvaW50KXt2YXIgaTt2YXIgbGVuPXRyYW5zZm9ybWVycy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtwb2ludD10cmFuc2Zvcm1lcnNbaV0ubVByb3BzLnYuYXBwbHlUb1BvaW50QXJyYXkocG9pbnRbMF0scG9pbnRbMV0sMCk7fXJldHVybiBwb2ludDt9O0hTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNhbGN1bGF0ZVNoYXBlQm91bmRpbmdCb3g9ZnVuY3Rpb24oaXRlbSxib3VuZGluZ0JveCl7dmFyIHNoYXBlPWl0ZW0uc2gudjt2YXIgdHJhbnNmb3JtZXJzPWl0ZW0udHJhbnNmb3JtZXJzO3ZhciBpO3ZhciBsZW49c2hhcGUuX2xlbmd0aDt2YXIgdlBvaW50O3ZhciBvUG9pbnQ7dmFyIG5leHRJUG9pbnQ7dmFyIG5leHRWUG9pbnQ7aWYobGVuPD0xKXtyZXR1cm47fWZvcihpPTA7aTxsZW4tMTtpKz0xKXt2UG9pbnQ9dGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycyxzaGFwZS52W2ldKTtvUG9pbnQ9dGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycyxzaGFwZS5vW2ldKTtuZXh0SVBvaW50PXRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsc2hhcGUuaVtpKzFdKTtuZXh0VlBvaW50PXRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsc2hhcGUudltpKzFdKTt0aGlzLmNoZWNrQm91bmRzKHZQb2ludCxvUG9pbnQsbmV4dElQb2ludCxuZXh0VlBvaW50LGJvdW5kaW5nQm94KTt9aWYoc2hhcGUuYyl7dlBvaW50PXRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsc2hhcGUudltpXSk7b1BvaW50PXRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsc2hhcGUub1tpXSk7bmV4dElQb2ludD10aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLHNoYXBlLmlbMF0pO25leHRWUG9pbnQ9dGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycyxzaGFwZS52WzBdKTt0aGlzLmNoZWNrQm91bmRzKHZQb2ludCxvUG9pbnQsbmV4dElQb2ludCxuZXh0VlBvaW50LGJvdW5kaW5nQm94KTt9fTtIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jaGVja0JvdW5kcz1mdW5jdGlvbih2UG9pbnQsb1BvaW50LG5leHRJUG9pbnQsbmV4dFZQb2ludCxib3VuZGluZ0JveCl7dGhpcy5nZXRCb3VuZHNPZkN1cnZlKHZQb2ludCxvUG9pbnQsbmV4dElQb2ludCxuZXh0VlBvaW50KTt2YXIgYm91bmRzPXRoaXMuc2hhcGVCb3VuZGluZ0JveDtib3VuZGluZ0JveC54PWJtTWluKGJvdW5kcy5sZWZ0LGJvdW5kaW5nQm94LngpO2JvdW5kaW5nQm94LnhNYXg9Ym1NYXgoYm91bmRzLnJpZ2h0LGJvdW5kaW5nQm94LnhNYXgpO2JvdW5kaW5nQm94Lnk9Ym1NaW4oYm91bmRzLnRvcCxib3VuZGluZ0JveC55KTtib3VuZGluZ0JveC55TWF4PWJtTWF4KGJvdW5kcy5ib3R0b20sYm91bmRpbmdCb3gueU1heCk7fTtIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zaGFwZUJvdW5kaW5nQm94PXtsZWZ0OjAscmlnaHQ6MCx0b3A6MCxib3R0b206MH07SFNoYXBlRWxlbWVudC5wcm90b3R5cGUudGVtcEJvdW5kaW5nQm94PXt4OjAseE1heDowLHk6MCx5TWF4OjAsd2lkdGg6MCxoZWlnaHQ6MH07SFNoYXBlRWxlbWVudC5wcm90b3R5cGUuZ2V0Qm91bmRzT2ZDdXJ2ZT1mdW5jdGlvbihwMCxwMSxwMixwMyl7dmFyIGJvdW5kcz1bW3AwWzBdLHAzWzBdXSxbcDBbMV0scDNbMV1dXTtmb3IodmFyIGEsYixjLHQsYjJhYyx0MSx0MixpPTA7aTwyOysraSl7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wbHVzcGx1c1xuYj02KnAwW2ldLTEyKnAxW2ldKzYqcDJbaV07YT0tMypwMFtpXSs5KnAxW2ldLTkqcDJbaV0rMypwM1tpXTtjPTMqcDFbaV0tMypwMFtpXTtifD0wOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuYXw9MDsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcbmN8PTA7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1iaXR3aXNlXG5pZihhPT09MCYmYj09PTApey8vXG59ZWxzZSBpZihhPT09MCl7dD0tYy9iO2lmKHQ+MCYmdDwxKXtib3VuZHNbaV0ucHVzaCh0aGlzLmNhbGN1bGF0ZUYodCxwMCxwMSxwMixwMyxpKSk7fX1lbHNlIHtiMmFjPWIqYi00KmMqYTtpZihiMmFjPj0wKXt0MT0oLWIrYm1TcXJ0KGIyYWMpKS8oMiphKTtpZih0MT4wJiZ0MTwxKWJvdW5kc1tpXS5wdXNoKHRoaXMuY2FsY3VsYXRlRih0MSxwMCxwMSxwMixwMyxpKSk7dDI9KC1iLWJtU3FydChiMmFjKSkvKDIqYSk7aWYodDI+MCYmdDI8MSlib3VuZHNbaV0ucHVzaCh0aGlzLmNhbGN1bGF0ZUYodDIscDAscDEscDIscDMsaSkpO319fXRoaXMuc2hhcGVCb3VuZGluZ0JveC5sZWZ0PWJtTWluLmFwcGx5KG51bGwsYm91bmRzWzBdKTt0aGlzLnNoYXBlQm91bmRpbmdCb3gudG9wPWJtTWluLmFwcGx5KG51bGwsYm91bmRzWzFdKTt0aGlzLnNoYXBlQm91bmRpbmdCb3gucmlnaHQ9Ym1NYXguYXBwbHkobnVsbCxib3VuZHNbMF0pO3RoaXMuc2hhcGVCb3VuZGluZ0JveC5ib3R0b209Ym1NYXguYXBwbHkobnVsbCxib3VuZHNbMV0pO307SFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2FsY3VsYXRlRj1mdW5jdGlvbih0LHAwLHAxLHAyLHAzLGkpe3JldHVybiBibVBvdygxLXQsMykqcDBbaV0rMypibVBvdygxLXQsMikqdCpwMVtpXSszKigxLXQpKmJtUG93KHQsMikqcDJbaV0rYm1Qb3codCwzKSpwM1tpXTt9O0hTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNhbGN1bGF0ZUJvdW5kaW5nQm94PWZ1bmN0aW9uKGl0ZW1zRGF0YSxib3VuZGluZ0JveCl7dmFyIGk7dmFyIGxlbj1pdGVtc0RhdGEubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYoaXRlbXNEYXRhW2ldJiZpdGVtc0RhdGFbaV0uc2gpe3RoaXMuY2FsY3VsYXRlU2hhcGVCb3VuZGluZ0JveChpdGVtc0RhdGFbaV0sYm91bmRpbmdCb3gpO31lbHNlIGlmKGl0ZW1zRGF0YVtpXSYmaXRlbXNEYXRhW2ldLml0KXt0aGlzLmNhbGN1bGF0ZUJvdW5kaW5nQm94KGl0ZW1zRGF0YVtpXS5pdCxib3VuZGluZ0JveCk7fX19O0hTaGFwZUVsZW1lbnQucHJvdG90eXBlLmN1cnJlbnRCb3hDb250YWlucz1mdW5jdGlvbihib3gpe3JldHVybiB0aGlzLmN1cnJlbnRCQm94Lng8PWJveC54JiZ0aGlzLmN1cnJlbnRCQm94Lnk8PWJveC55JiZ0aGlzLmN1cnJlbnRCQm94LndpZHRoK3RoaXMuY3VycmVudEJCb3gueD49Ym94LngrYm94LndpZHRoJiZ0aGlzLmN1cnJlbnRCQm94LmhlaWdodCt0aGlzLmN1cnJlbnRCQm94Lnk+PWJveC55K2JveC5oZWlnaHQ7fTtIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQ9ZnVuY3Rpb24oKXt0aGlzLl9yZW5kZXJTaGFwZUZyYW1lKCk7aWYoIXRoaXMuaGlkZGVuJiYodGhpcy5faXNGaXJzdEZyYW1lfHx0aGlzLl9tZGYpKXt2YXIgdGVtcEJvdW5kaW5nQm94PXRoaXMudGVtcEJvdW5kaW5nQm94O3ZhciBtYXg9OTk5OTk5O3RlbXBCb3VuZGluZ0JveC54PW1heDt0ZW1wQm91bmRpbmdCb3gueE1heD0tbWF4O3RlbXBCb3VuZGluZ0JveC55PW1heDt0ZW1wQm91bmRpbmdCb3gueU1heD0tbWF4O3RoaXMuY2FsY3VsYXRlQm91bmRpbmdCb3godGhpcy5pdGVtc0RhdGEsdGVtcEJvdW5kaW5nQm94KTt0ZW1wQm91bmRpbmdCb3gud2lkdGg9dGVtcEJvdW5kaW5nQm94LnhNYXg8dGVtcEJvdW5kaW5nQm94Lng/MDp0ZW1wQm91bmRpbmdCb3gueE1heC10ZW1wQm91bmRpbmdCb3gueDt0ZW1wQm91bmRpbmdCb3guaGVpZ2h0PXRlbXBCb3VuZGluZ0JveC55TWF4PHRlbXBCb3VuZGluZ0JveC55PzA6dGVtcEJvdW5kaW5nQm94LnlNYXgtdGVtcEJvdW5kaW5nQm94Lnk7Ly8gdmFyIHRlbXBCb3VuZGluZ0JveCA9IHRoaXMuc2hhcGVDb250LmdldEJCb3goKTtcbmlmKHRoaXMuY3VycmVudEJveENvbnRhaW5zKHRlbXBCb3VuZGluZ0JveCkpe3JldHVybjt9dmFyIGNoYW5nZWQ9ZmFsc2U7aWYodGhpcy5jdXJyZW50QkJveC53IT09dGVtcEJvdW5kaW5nQm94LndpZHRoKXt0aGlzLmN1cnJlbnRCQm94Lnc9dGVtcEJvdW5kaW5nQm94LndpZHRoO3RoaXMuc2hhcGVDb250LnNldEF0dHJpYnV0ZSgnd2lkdGgnLHRlbXBCb3VuZGluZ0JveC53aWR0aCk7Y2hhbmdlZD10cnVlO31pZih0aGlzLmN1cnJlbnRCQm94LmghPT10ZW1wQm91bmRpbmdCb3guaGVpZ2h0KXt0aGlzLmN1cnJlbnRCQm94Lmg9dGVtcEJvdW5kaW5nQm94LmhlaWdodDt0aGlzLnNoYXBlQ29udC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsdGVtcEJvdW5kaW5nQm94LmhlaWdodCk7Y2hhbmdlZD10cnVlO31pZihjaGFuZ2VkfHx0aGlzLmN1cnJlbnRCQm94LnghPT10ZW1wQm91bmRpbmdCb3gueHx8dGhpcy5jdXJyZW50QkJveC55IT09dGVtcEJvdW5kaW5nQm94Lnkpe3RoaXMuY3VycmVudEJCb3gudz10ZW1wQm91bmRpbmdCb3gud2lkdGg7dGhpcy5jdXJyZW50QkJveC5oPXRlbXBCb3VuZGluZ0JveC5oZWlnaHQ7dGhpcy5jdXJyZW50QkJveC54PXRlbXBCb3VuZGluZ0JveC54O3RoaXMuY3VycmVudEJCb3gueT10ZW1wQm91bmRpbmdCb3gueTt0aGlzLnNoYXBlQ29udC5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLHRoaXMuY3VycmVudEJCb3gueCsnICcrdGhpcy5jdXJyZW50QkJveC55KycgJyt0aGlzLmN1cnJlbnRCQm94LncrJyAnK3RoaXMuY3VycmVudEJCb3guaCk7dmFyIHNoYXBlU3R5bGU9dGhpcy5zaGFwZUNvbnQuc3R5bGU7dmFyIHNoYXBlVHJhbnNmb3JtPSd0cmFuc2xhdGUoJyt0aGlzLmN1cnJlbnRCQm94LngrJ3B4LCcrdGhpcy5jdXJyZW50QkJveC55KydweCknO3NoYXBlU3R5bGUudHJhbnNmb3JtPXNoYXBlVHJhbnNmb3JtO3NoYXBlU3R5bGUud2Via2l0VHJhbnNmb3JtPXNoYXBlVHJhbnNmb3JtO319fTsvKiBnbG9iYWwgZXh0ZW5kUHJvdG90eXBlLCBCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSEJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsXHJcblJlbmRlcmFibGVET01FbGVtZW50LCBJVGV4dEVsZW1lbnQsIGNyZWF0ZVNpemVkQXJyYXksIGNyZWF0ZVRhZywgc3R5bGVEaXYsIGNyZWF0ZU5TICovZnVuY3Rpb24gSFRleHRFbGVtZW50KGRhdGEsZ2xvYmFsRGF0YSxjb21wKXt0aGlzLnRleHRTcGFucz1bXTt0aGlzLnRleHRQYXRocz1bXTt0aGlzLmN1cnJlbnRCQm94PXt4Ojk5OTk5OSx5Oi05OTk5OTksaDowLHc6MH07dGhpcy5yZW5kZXJUeXBlPSdzdmcnO3RoaXMuaXNNYXNrZWQ9ZmFsc2U7dGhpcy5pbml0RWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCk7fWV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsVHJhbnNmb3JtRWxlbWVudCxIQmFzZUVsZW1lbnQsSGllcmFyY2h5RWxlbWVudCxGcmFtZUVsZW1lbnQsUmVuZGVyYWJsZURPTUVsZW1lbnQsSVRleHRFbGVtZW50XSxIVGV4dEVsZW1lbnQpO0hUZXh0RWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudD1mdW5jdGlvbigpe3RoaXMuaXNNYXNrZWQ9dGhpcy5jaGVja01hc2tzKCk7aWYodGhpcy5pc01hc2tlZCl7dGhpcy5yZW5kZXJUeXBlPSdzdmcnO3RoaXMuY29tcFc9dGhpcy5jb21wLmRhdGEudzt0aGlzLmNvbXBIPXRoaXMuY29tcC5kYXRhLmg7dGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLHRoaXMuY29tcFcpO3RoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsdGhpcy5jb21wSCk7dmFyIGc9Y3JlYXRlTlMoJ2cnKTt0aGlzLm1hc2tlZEVsZW1lbnQuYXBwZW5kQ2hpbGQoZyk7dGhpcy5pbm5lckVsZW09Zzt9ZWxzZSB7dGhpcy5yZW5kZXJUeXBlPSdodG1sJzt0aGlzLmlubmVyRWxlbT10aGlzLmxheWVyRWxlbWVudDt9dGhpcy5jaGVja1BhcmVudGluZygpO307SFRleHRFbGVtZW50LnByb3RvdHlwZS5idWlsZE5ld1RleHQ9ZnVuY3Rpb24oKXt2YXIgZG9jdW1lbnREYXRhPXRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhO3RoaXMucmVuZGVyZWRMZXR0ZXJzPWNyZWF0ZVNpemVkQXJyYXkoZG9jdW1lbnREYXRhLmw/ZG9jdW1lbnREYXRhLmwubGVuZ3RoOjApO3ZhciBpbm5lckVsZW1TdHlsZT10aGlzLmlubmVyRWxlbS5zdHlsZTt2YXIgdGV4dENvbG9yPWRvY3VtZW50RGF0YS5mYz90aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLmZjKToncmdiYSgwLDAsMCwwKSc7aW5uZXJFbGVtU3R5bGUuZmlsbD10ZXh0Q29sb3I7aW5uZXJFbGVtU3R5bGUuY29sb3I9dGV4dENvbG9yO2lmKGRvY3VtZW50RGF0YS5zYyl7aW5uZXJFbGVtU3R5bGUuc3Ryb2tlPXRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuc2MpO2lubmVyRWxlbVN0eWxlLnN0cm9rZVdpZHRoPWRvY3VtZW50RGF0YS5zdysncHgnO312YXIgZm9udERhdGE9dGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpO2lmKCF0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpe2lubmVyRWxlbVN0eWxlLmZvbnRTaXplPWRvY3VtZW50RGF0YS5maW5hbFNpemUrJ3B4Jztpbm5lckVsZW1TdHlsZS5saW5lSGVpZ2h0PWRvY3VtZW50RGF0YS5maW5hbFNpemUrJ3B4JztpZihmb250RGF0YS5mQ2xhc3Mpe3RoaXMuaW5uZXJFbGVtLmNsYXNzTmFtZT1mb250RGF0YS5mQ2xhc3M7fWVsc2Uge2lubmVyRWxlbVN0eWxlLmZvbnRGYW1pbHk9Zm9udERhdGEuZkZhbWlseTt2YXIgZldlaWdodD1kb2N1bWVudERhdGEuZldlaWdodDt2YXIgZlN0eWxlPWRvY3VtZW50RGF0YS5mU3R5bGU7aW5uZXJFbGVtU3R5bGUuZm9udFN0eWxlPWZTdHlsZTtpbm5lckVsZW1TdHlsZS5mb250V2VpZ2h0PWZXZWlnaHQ7fX12YXIgaTt2YXIgbGVuO3ZhciBsZXR0ZXJzPWRvY3VtZW50RGF0YS5sO2xlbj1sZXR0ZXJzLmxlbmd0aDt2YXIgdFNwYW47dmFyIHRQYXJlbnQ7dmFyIHRDb250O3ZhciBtYXRyaXhIZWxwZXI9dGhpcy5tSGVscGVyO3ZhciBzaGFwZXM7dmFyIHNoYXBlU3RyPScnO3ZhciBjbnQ9MDtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5jaGFycyl7aWYoIXRoaXMudGV4dFBhdGhzW2NudF0pe3RTcGFuPWNyZWF0ZU5TKCdwYXRoJyk7dFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsJ2J1dHQnKTt0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsJ3JvdW5kJyk7dFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbWl0ZXJsaW1pdCcsJzQnKTt9ZWxzZSB7dFNwYW49dGhpcy50ZXh0UGF0aHNbY250XTt9aWYoIXRoaXMuaXNNYXNrZWQpe2lmKHRoaXMudGV4dFNwYW5zW2NudF0pe3RQYXJlbnQ9dGhpcy50ZXh0U3BhbnNbY250XTt0Q29udD10UGFyZW50LmNoaWxkcmVuWzBdO31lbHNlIHt0UGFyZW50PWNyZWF0ZVRhZygnZGl2Jyk7dFBhcmVudC5zdHlsZS5saW5lSGVpZ2h0PTA7dENvbnQ9Y3JlYXRlTlMoJ3N2ZycpO3RDb250LmFwcGVuZENoaWxkKHRTcGFuKTtzdHlsZURpdih0UGFyZW50KTt9fX1lbHNlIGlmKCF0aGlzLmlzTWFza2VkKXtpZih0aGlzLnRleHRTcGFuc1tjbnRdKXt0UGFyZW50PXRoaXMudGV4dFNwYW5zW2NudF07dFNwYW49dGhpcy50ZXh0UGF0aHNbY250XTt9ZWxzZSB7dFBhcmVudD1jcmVhdGVUYWcoJ3NwYW4nKTtzdHlsZURpdih0UGFyZW50KTt0U3Bhbj1jcmVhdGVUYWcoJ3NwYW4nKTtzdHlsZURpdih0U3Bhbik7dFBhcmVudC5hcHBlbmRDaGlsZCh0U3Bhbik7fX1lbHNlIHt0U3Bhbj10aGlzLnRleHRQYXRoc1tjbnRdP3RoaXMudGV4dFBhdGhzW2NudF06Y3JlYXRlTlMoJ3RleHQnKTt9Ly8gdFNwYW4uc2V0QXR0cmlidXRlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuaWYodGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmNoYXJzKXt2YXIgY2hhckRhdGE9dGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGRvY3VtZW50RGF0YS5maW5hbFRleHRbaV0sZm9udERhdGEuZlN0eWxlLHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5KTt2YXIgc2hhcGVEYXRhO2lmKGNoYXJEYXRhKXtzaGFwZURhdGE9Y2hhckRhdGEuZGF0YTt9ZWxzZSB7c2hhcGVEYXRhPW51bGw7fW1hdHJpeEhlbHBlci5yZXNldCgpO2lmKHNoYXBlRGF0YSYmc2hhcGVEYXRhLnNoYXBlcyl7c2hhcGVzPXNoYXBlRGF0YS5zaGFwZXNbMF0uaXQ7bWF0cml4SGVscGVyLnNjYWxlKGRvY3VtZW50RGF0YS5maW5hbFNpemUvMTAwLGRvY3VtZW50RGF0YS5maW5hbFNpemUvMTAwKTtzaGFwZVN0cj10aGlzLmNyZWF0ZVBhdGhTaGFwZShtYXRyaXhIZWxwZXIsc2hhcGVzKTt0U3Bhbi5zZXRBdHRyaWJ1dGUoJ2QnLHNoYXBlU3RyKTt9aWYoIXRoaXMuaXNNYXNrZWQpe3RoaXMuaW5uZXJFbGVtLmFwcGVuZENoaWxkKHRQYXJlbnQpO2lmKHNoYXBlRGF0YSYmc2hhcGVEYXRhLnNoYXBlcyl7Ly8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBpcyBuZWVkZWQgdG8gZ2V0IGV4YWN0IG1lYXN1cmUgb2Ygc2hhcGVcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodENvbnQpO3ZhciBib3VuZGluZ0JveD10Q29udC5nZXRCQm94KCk7dENvbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsYm91bmRpbmdCb3gud2lkdGgrMik7dENvbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLGJvdW5kaW5nQm94LmhlaWdodCsyKTt0Q29udC5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLGJvdW5kaW5nQm94LngtMSsnICcrKGJvdW5kaW5nQm94LnktMSkrJyAnKyhib3VuZGluZ0JveC53aWR0aCsyKSsnICcrKGJvdW5kaW5nQm94LmhlaWdodCsyKSk7dmFyIHRDb250U3R5bGU9dENvbnQuc3R5bGU7dmFyIHRDb250VHJhbnNsYXRpb249J3RyYW5zbGF0ZSgnKyhib3VuZGluZ0JveC54LTEpKydweCwnKyhib3VuZGluZ0JveC55LTEpKydweCknO3RDb250U3R5bGUudHJhbnNmb3JtPXRDb250VHJhbnNsYXRpb247dENvbnRTdHlsZS53ZWJraXRUcmFuc2Zvcm09dENvbnRUcmFuc2xhdGlvbjtsZXR0ZXJzW2ldLnlPZmZzZXQ9Ym91bmRpbmdCb3gueS0xO31lbHNlIHt0Q29udC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywxKTt0Q29udC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsMSk7fXRQYXJlbnQuYXBwZW5kQ2hpbGQodENvbnQpO31lbHNlIHt0aGlzLmlubmVyRWxlbS5hcHBlbmRDaGlsZCh0U3Bhbik7fX1lbHNlIHt0U3Bhbi50ZXh0Q29udGVudD1sZXR0ZXJzW2ldLnZhbDt0U3Bhbi5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJywneG1sOnNwYWNlJywncHJlc2VydmUnKTtpZighdGhpcy5pc01hc2tlZCl7dGhpcy5pbm5lckVsZW0uYXBwZW5kQ2hpbGQodFBhcmVudCk7Ly9cbnZhciB0U3R5bGU9dFNwYW4uc3R5bGU7dmFyIHRTcGFuVHJhbnNsYXRpb249J3RyYW5zbGF0ZTNkKDAsJystZG9jdW1lbnREYXRhLmZpbmFsU2l6ZS8xLjIrJ3B4LDApJzt0U3R5bGUudHJhbnNmb3JtPXRTcGFuVHJhbnNsYXRpb247dFN0eWxlLndlYmtpdFRyYW5zZm9ybT10U3BhblRyYW5zbGF0aW9uO31lbHNlIHt0aGlzLmlubmVyRWxlbS5hcHBlbmRDaGlsZCh0U3Bhbik7fX0vL1xuaWYoIXRoaXMuaXNNYXNrZWQpe3RoaXMudGV4dFNwYW5zW2NudF09dFBhcmVudDt9ZWxzZSB7dGhpcy50ZXh0U3BhbnNbY250XT10U3Bhbjt9dGhpcy50ZXh0U3BhbnNbY250XS5zdHlsZS5kaXNwbGF5PSdibG9jayc7dGhpcy50ZXh0UGF0aHNbY250XT10U3BhbjtjbnQrPTE7fXdoaWxlKGNudDx0aGlzLnRleHRTcGFucy5sZW5ndGgpe3RoaXMudGV4dFNwYW5zW2NudF0uc3R5bGUuZGlzcGxheT0nbm9uZSc7Y250Kz0xO319O0hUZXh0RWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50PWZ1bmN0aW9uKCl7dmFyIHN2Z1N0eWxlO2lmKHRoaXMuZGF0YS5zaW5nbGVTaGFwZSl7aWYoIXRoaXMuX2lzRmlyc3RGcmFtZSYmIXRoaXMubGV0dGVyc0NoYW5nZWRGbGFnKXtyZXR1cm47fWlmKHRoaXMuaXNNYXNrZWQmJnRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZil7Ly8gVG9kbyBCZW5jaG1hcmsgaWYgdXNpbmcgdGhpcyBpcyBiZXR0ZXIgdGhhbiBnZXRCQm94XG50aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywtdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5wLnZbMF0rJyAnKy10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlsxXSsnICcrdGhpcy5jb21wVysnICcrdGhpcy5jb21wSCk7c3ZnU3R5bGU9dGhpcy5zdmdFbGVtZW50LnN0eWxlO3ZhciB0cmFuc2xhdGlvbj0ndHJhbnNsYXRlKCcrLXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AucC52WzBdKydweCwnKy10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlsxXSsncHgpJztzdmdTdHlsZS50cmFuc2Zvcm09dHJhbnNsYXRpb247c3ZnU3R5bGUud2Via2l0VHJhbnNmb3JtPXRyYW5zbGF0aW9uO319dGhpcy50ZXh0QW5pbWF0b3IuZ2V0TWVhc3VyZXModGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEsdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcpO2lmKCF0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyYmIXRoaXMudGV4dEFuaW1hdG9yLmxldHRlcnNDaGFuZ2VkRmxhZyl7cmV0dXJuO312YXIgaTt2YXIgbGVuO3ZhciBjb3VudD0wO3ZhciByZW5kZXJlZExldHRlcnM9dGhpcy50ZXh0QW5pbWF0b3IucmVuZGVyZWRMZXR0ZXJzO3ZhciBsZXR0ZXJzPXRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLmw7bGVuPWxldHRlcnMubGVuZ3RoO3ZhciByZW5kZXJlZExldHRlcjt2YXIgdGV4dFNwYW47dmFyIHRleHRQYXRoO2ZvcihpPTA7aTxsZW47aSs9MSl7aWYobGV0dGVyc1tpXS5uKXtjb3VudCs9MTt9ZWxzZSB7dGV4dFNwYW49dGhpcy50ZXh0U3BhbnNbaV07dGV4dFBhdGg9dGhpcy50ZXh0UGF0aHNbaV07cmVuZGVyZWRMZXR0ZXI9cmVuZGVyZWRMZXR0ZXJzW2NvdW50XTtjb3VudCs9MTtpZihyZW5kZXJlZExldHRlci5fbWRmLm0pe2lmKCF0aGlzLmlzTWFza2VkKXt0ZXh0U3Bhbi5zdHlsZS53ZWJraXRUcmFuc2Zvcm09cmVuZGVyZWRMZXR0ZXIubTt0ZXh0U3Bhbi5zdHlsZS50cmFuc2Zvcm09cmVuZGVyZWRMZXR0ZXIubTt9ZWxzZSB7dGV4dFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLHJlbmRlcmVkTGV0dGVyLm0pO319Ly8vIC90ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLHJlbmRlcmVkTGV0dGVyLm8pO1xudGV4dFNwYW4uc3R5bGUub3BhY2l0eT1yZW5kZXJlZExldHRlci5vO2lmKHJlbmRlcmVkTGV0dGVyLnN3JiZyZW5kZXJlZExldHRlci5fbWRmLnN3KXt0ZXh0UGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcscmVuZGVyZWRMZXR0ZXIuc3cpO31pZihyZW5kZXJlZExldHRlci5zYyYmcmVuZGVyZWRMZXR0ZXIuX21kZi5zYyl7dGV4dFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLHJlbmRlcmVkTGV0dGVyLnNjKTt9aWYocmVuZGVyZWRMZXR0ZXIuZmMmJnJlbmRlcmVkTGV0dGVyLl9tZGYuZmMpe3RleHRQYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcscmVuZGVyZWRMZXR0ZXIuZmMpO3RleHRQYXRoLnN0eWxlLmNvbG9yPXJlbmRlcmVkTGV0dGVyLmZjO319fWlmKHRoaXMuaW5uZXJFbGVtLmdldEJCb3gmJiF0aGlzLmhpZGRlbiYmKHRoaXMuX2lzRmlyc3RGcmFtZXx8dGhpcy5fbWRmKSl7dmFyIGJvdW5kaW5nQm94PXRoaXMuaW5uZXJFbGVtLmdldEJCb3goKTtpZih0aGlzLmN1cnJlbnRCQm94LnchPT1ib3VuZGluZ0JveC53aWR0aCl7dGhpcy5jdXJyZW50QkJveC53PWJvdW5kaW5nQm94LndpZHRoO3RoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJyxib3VuZGluZ0JveC53aWR0aCk7fWlmKHRoaXMuY3VycmVudEJCb3guaCE9PWJvdW5kaW5nQm94LmhlaWdodCl7dGhpcy5jdXJyZW50QkJveC5oPWJvdW5kaW5nQm94LmhlaWdodDt0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLGJvdW5kaW5nQm94LmhlaWdodCk7fXZhciBtYXJnaW49MTtpZih0aGlzLmN1cnJlbnRCQm94LnchPT1ib3VuZGluZ0JveC53aWR0aCttYXJnaW4qMnx8dGhpcy5jdXJyZW50QkJveC5oIT09Ym91bmRpbmdCb3guaGVpZ2h0K21hcmdpbioyfHx0aGlzLmN1cnJlbnRCQm94LnghPT1ib3VuZGluZ0JveC54LW1hcmdpbnx8dGhpcy5jdXJyZW50QkJveC55IT09Ym91bmRpbmdCb3gueS1tYXJnaW4pe3RoaXMuY3VycmVudEJCb3gudz1ib3VuZGluZ0JveC53aWR0aCttYXJnaW4qMjt0aGlzLmN1cnJlbnRCQm94Lmg9Ym91bmRpbmdCb3guaGVpZ2h0K21hcmdpbioyO3RoaXMuY3VycmVudEJCb3gueD1ib3VuZGluZ0JveC54LW1hcmdpbjt0aGlzLmN1cnJlbnRCQm94Lnk9Ym91bmRpbmdCb3gueS1tYXJnaW47dGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsdGhpcy5jdXJyZW50QkJveC54KycgJyt0aGlzLmN1cnJlbnRCQm94LnkrJyAnK3RoaXMuY3VycmVudEJCb3gudysnICcrdGhpcy5jdXJyZW50QkJveC5oKTtzdmdTdHlsZT10aGlzLnN2Z0VsZW1lbnQuc3R5bGU7dmFyIHN2Z1RyYW5zZm9ybT0ndHJhbnNsYXRlKCcrdGhpcy5jdXJyZW50QkJveC54KydweCwnK3RoaXMuY3VycmVudEJCb3gueSsncHgpJztzdmdTdHlsZS50cmFuc2Zvcm09c3ZnVHJhbnNmb3JtO3N2Z1N0eWxlLndlYmtpdFRyYW5zZm9ybT1zdmdUcmFuc2Zvcm07fX19Oy8qIGdsb2JhbCBleHRlbmRQcm90b3R5cGUsIEJhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhTb2xpZEVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsXHJcbkZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZUVsZW1lbnQsIGNyZWF0ZU5TICovZnVuY3Rpb24gSEltYWdlRWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCl7dGhpcy5hc3NldERhdGE9Z2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7dGhpcy5pbml0RWxlbWVudChkYXRhLGdsb2JhbERhdGEsY29tcCk7fWV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsVHJhbnNmb3JtRWxlbWVudCxIQmFzZUVsZW1lbnQsSFNvbGlkRWxlbWVudCxIaWVyYXJjaHlFbGVtZW50LEZyYW1lRWxlbWVudCxSZW5kZXJhYmxlRWxlbWVudF0sSEltYWdlRWxlbWVudCk7SEltYWdlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudD1mdW5jdGlvbigpe3ZhciBhc3NldFBhdGg9dGhpcy5nbG9iYWxEYXRhLmdldEFzc2V0c1BhdGgodGhpcy5hc3NldERhdGEpO3ZhciBpbWc9bmV3IEltYWdlKCk7aWYodGhpcy5kYXRhLmhhc01hc2spe3RoaXMuaW1hZ2VFbGVtPWNyZWF0ZU5TKCdpbWFnZScpO3RoaXMuaW1hZ2VFbGVtLnNldEF0dHJpYnV0ZSgnd2lkdGgnLHRoaXMuYXNzZXREYXRhLncrJ3B4Jyk7dGhpcy5pbWFnZUVsZW0uc2V0QXR0cmlidXRlKCdoZWlnaHQnLHRoaXMuYXNzZXREYXRhLmgrJ3B4Jyk7dGhpcy5pbWFnZUVsZW0uc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCdocmVmJyxhc3NldFBhdGgpO3RoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaW1hZ2VFbGVtKTt0aGlzLmJhc2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLHRoaXMuYXNzZXREYXRhLncpO3RoaXMuYmFzZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLHRoaXMuYXNzZXREYXRhLmgpO31lbHNlIHt0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChpbWcpO31pbWcuY3Jvc3NPcmlnaW49J2Fub255bW91cyc7aW1nLnNyYz1hc3NldFBhdGg7aWYodGhpcy5kYXRhLmxuKXt0aGlzLmJhc2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLHRoaXMuZGF0YS5sbik7fX07LyogZ2xvYmFsIFByb3BlcnR5RmFjdG9yeSwgZGVnVG9SYWRzLCBNYXRyaXgsIGV4dGVuZFByb3RvdHlwZSwgQmFzZUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCAqL2Z1bmN0aW9uIEhDYW1lcmFFbGVtZW50KGRhdGEsZ2xvYmFsRGF0YSxjb21wKXt0aGlzLmluaXRGcmFtZSgpO3RoaXMuaW5pdEJhc2VEYXRhKGRhdGEsZ2xvYmFsRGF0YSxjb21wKTt0aGlzLmluaXRIaWVyYXJjaHkoKTt2YXIgZ2V0UHJvcD1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcDt0aGlzLnBlPWdldFByb3AodGhpcyxkYXRhLnBlLDAsMCx0aGlzKTtpZihkYXRhLmtzLnAucyl7dGhpcy5weD1nZXRQcm9wKHRoaXMsZGF0YS5rcy5wLngsMSwwLHRoaXMpO3RoaXMucHk9Z2V0UHJvcCh0aGlzLGRhdGEua3MucC55LDEsMCx0aGlzKTt0aGlzLnB6PWdldFByb3AodGhpcyxkYXRhLmtzLnAueiwxLDAsdGhpcyk7fWVsc2Uge3RoaXMucD1nZXRQcm9wKHRoaXMsZGF0YS5rcy5wLDEsMCx0aGlzKTt9aWYoZGF0YS5rcy5hKXt0aGlzLmE9Z2V0UHJvcCh0aGlzLGRhdGEua3MuYSwxLDAsdGhpcyk7fWlmKGRhdGEua3Mub3Iuay5sZW5ndGgmJmRhdGEua3Mub3Iua1swXS50byl7dmFyIGk7dmFyIGxlbj1kYXRhLmtzLm9yLmsubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7ZGF0YS5rcy5vci5rW2ldLnRvPW51bGw7ZGF0YS5rcy5vci5rW2ldLnRpPW51bGw7fX10aGlzLm9yPWdldFByb3AodGhpcyxkYXRhLmtzLm9yLDEsZGVnVG9SYWRzLHRoaXMpO3RoaXMub3Iuc2g9dHJ1ZTt0aGlzLnJ4PWdldFByb3AodGhpcyxkYXRhLmtzLnJ4LDAsZGVnVG9SYWRzLHRoaXMpO3RoaXMucnk9Z2V0UHJvcCh0aGlzLGRhdGEua3MucnksMCxkZWdUb1JhZHMsdGhpcyk7dGhpcy5yej1nZXRQcm9wKHRoaXMsZGF0YS5rcy5yeiwwLGRlZ1RvUmFkcyx0aGlzKTt0aGlzLm1hdD1uZXcgTWF0cml4KCk7dGhpcy5fcHJldk1hdD1uZXcgTWF0cml4KCk7dGhpcy5faXNGaXJzdEZyYW1lPXRydWU7Ly8gVE9ETzogZmluZCBhIGJldHRlciB3YXkgdG8gbWFrZSB0aGUgSENhbWVyYSBlbGVtZW50IHRvIGJlIGNvbXBhdGlibGUgd2l0aCB0aGUgTGF5ZXJJbnRlcmZhY2UgYW5kIFRyYW5zZm9ybUludGVyZmFjZS5cbnRoaXMuZmluYWxUcmFuc2Zvcm09e21Qcm9wOnRoaXN9O31leHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LEZyYW1lRWxlbWVudCxIaWVyYXJjaHlFbGVtZW50XSxIQ2FtZXJhRWxlbWVudCk7SENhbWVyYUVsZW1lbnQucHJvdG90eXBlLnNldHVwPWZ1bmN0aW9uKCl7dmFyIGk7dmFyIGxlbj10aGlzLmNvbXAudGhyZWVERWxlbWVudHMubGVuZ3RoO3ZhciBjb21wO3ZhciBwZXJzcGVjdGl2ZVN0eWxlO3ZhciBjb250YWluZXJTdHlsZTtmb3IoaT0wO2k8bGVuO2krPTEpey8vIFtwZXJzcGVjdGl2ZUVsZW0sY29udGFpbmVyXVxuY29tcD10aGlzLmNvbXAudGhyZWVERWxlbWVudHNbaV07aWYoY29tcC50eXBlPT09JzNkJyl7cGVyc3BlY3RpdmVTdHlsZT1jb21wLnBlcnNwZWN0aXZlRWxlbS5zdHlsZTtjb250YWluZXJTdHlsZT1jb21wLmNvbnRhaW5lci5zdHlsZTt2YXIgcGVyc3BlY3RpdmU9dGhpcy5wZS52KydweCc7dmFyIG9yaWdpbj0nMHB4IDBweCAwcHgnO3ZhciBtYXRyaXg9J21hdHJpeDNkKDEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsMCwwLDEpJztwZXJzcGVjdGl2ZVN0eWxlLnBlcnNwZWN0aXZlPXBlcnNwZWN0aXZlO3BlcnNwZWN0aXZlU3R5bGUud2Via2l0UGVyc3BlY3RpdmU9cGVyc3BlY3RpdmU7Y29udGFpbmVyU3R5bGUudHJhbnNmb3JtT3JpZ2luPW9yaWdpbjtjb250YWluZXJTdHlsZS5tb3pUcmFuc2Zvcm1PcmlnaW49b3JpZ2luO2NvbnRhaW5lclN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbj1vcmlnaW47cGVyc3BlY3RpdmVTdHlsZS50cmFuc2Zvcm09bWF0cml4O3BlcnNwZWN0aXZlU3R5bGUud2Via2l0VHJhbnNmb3JtPW1hdHJpeDt9fX07SENhbWVyYUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnRzPWZ1bmN0aW9uKCl7fTtIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuaGlkZT1mdW5jdGlvbigpe307SENhbWVyYUVsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lPWZ1bmN0aW9uKCl7dmFyIF9tZGY9dGhpcy5faXNGaXJzdEZyYW1lO3ZhciBpO3ZhciBsZW47aWYodGhpcy5oaWVyYXJjaHkpe2xlbj10aGlzLmhpZXJhcmNoeS5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtfbWRmPXRoaXMuaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLl9tZGZ8fF9tZGY7fX1pZihfbWRmfHx0aGlzLnBlLl9tZGZ8fHRoaXMucCYmdGhpcy5wLl9tZGZ8fHRoaXMucHgmJih0aGlzLnB4Ll9tZGZ8fHRoaXMucHkuX21kZnx8dGhpcy5wei5fbWRmKXx8dGhpcy5yeC5fbWRmfHx0aGlzLnJ5Ll9tZGZ8fHRoaXMucnouX21kZnx8dGhpcy5vci5fbWRmfHx0aGlzLmEmJnRoaXMuYS5fbWRmKXt0aGlzLm1hdC5yZXNldCgpO2lmKHRoaXMuaGllcmFyY2h5KXtsZW49dGhpcy5oaWVyYXJjaHkubGVuZ3RoLTE7Zm9yKGk9bGVuO2k+PTA7aS09MSl7dmFyIG1UcmFuc2Y9dGhpcy5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3A7dGhpcy5tYXQudHJhbnNsYXRlKC1tVHJhbnNmLnAudlswXSwtbVRyYW5zZi5wLnZbMV0sbVRyYW5zZi5wLnZbMl0pO3RoaXMubWF0LnJvdGF0ZVgoLW1UcmFuc2Yub3IudlswXSkucm90YXRlWSgtbVRyYW5zZi5vci52WzFdKS5yb3RhdGVaKG1UcmFuc2Yub3IudlsyXSk7dGhpcy5tYXQucm90YXRlWCgtbVRyYW5zZi5yeC52KS5yb3RhdGVZKC1tVHJhbnNmLnJ5LnYpLnJvdGF0ZVoobVRyYW5zZi5yei52KTt0aGlzLm1hdC5zY2FsZSgxL21UcmFuc2Yucy52WzBdLDEvbVRyYW5zZi5zLnZbMV0sMS9tVHJhbnNmLnMudlsyXSk7dGhpcy5tYXQudHJhbnNsYXRlKG1UcmFuc2YuYS52WzBdLG1UcmFuc2YuYS52WzFdLG1UcmFuc2YuYS52WzJdKTt9fWlmKHRoaXMucCl7dGhpcy5tYXQudHJhbnNsYXRlKC10aGlzLnAudlswXSwtdGhpcy5wLnZbMV0sdGhpcy5wLnZbMl0pO31lbHNlIHt0aGlzLm1hdC50cmFuc2xhdGUoLXRoaXMucHgudiwtdGhpcy5weS52LHRoaXMucHoudik7fWlmKHRoaXMuYSl7dmFyIGRpZmZWZWN0b3I7aWYodGhpcy5wKXtkaWZmVmVjdG9yPVt0aGlzLnAudlswXS10aGlzLmEudlswXSx0aGlzLnAudlsxXS10aGlzLmEudlsxXSx0aGlzLnAudlsyXS10aGlzLmEudlsyXV07fWVsc2Uge2RpZmZWZWN0b3I9W3RoaXMucHgudi10aGlzLmEudlswXSx0aGlzLnB5LnYtdGhpcy5hLnZbMV0sdGhpcy5wei52LXRoaXMuYS52WzJdXTt9dmFyIG1hZz1NYXRoLnNxcnQoTWF0aC5wb3coZGlmZlZlY3RvclswXSwyKStNYXRoLnBvdyhkaWZmVmVjdG9yWzFdLDIpK01hdGgucG93KGRpZmZWZWN0b3JbMl0sMikpOy8vIHZhciBsb29rRGlyID0gZ2V0Tm9ybWFsaXplZFBvaW50KGdldERpZmZWZWN0b3IodGhpcy5hLnYsdGhpcy5wLnYpKTtcbnZhciBsb29rRGlyPVtkaWZmVmVjdG9yWzBdL21hZyxkaWZmVmVjdG9yWzFdL21hZyxkaWZmVmVjdG9yWzJdL21hZ107dmFyIGxvb2tMZW5ndGhPblhaPU1hdGguc3FydChsb29rRGlyWzJdKmxvb2tEaXJbMl0rbG9va0RpclswXSpsb29rRGlyWzBdKTt2YXIgbVJvdGF0aW9uWD1NYXRoLmF0YW4yKGxvb2tEaXJbMV0sbG9va0xlbmd0aE9uWFopO3ZhciBtUm90YXRpb25ZPU1hdGguYXRhbjIobG9va0RpclswXSwtbG9va0RpclsyXSk7dGhpcy5tYXQucm90YXRlWShtUm90YXRpb25ZKS5yb3RhdGVYKC1tUm90YXRpb25YKTt9dGhpcy5tYXQucm90YXRlWCgtdGhpcy5yeC52KS5yb3RhdGVZKC10aGlzLnJ5LnYpLnJvdGF0ZVoodGhpcy5yei52KTt0aGlzLm1hdC5yb3RhdGVYKC10aGlzLm9yLnZbMF0pLnJvdGF0ZVkoLXRoaXMub3IudlsxXSkucm90YXRlWih0aGlzLm9yLnZbMl0pO3RoaXMubWF0LnRyYW5zbGF0ZSh0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudy8yLHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oLzIsMCk7dGhpcy5tYXQudHJhbnNsYXRlKDAsMCx0aGlzLnBlLnYpO3ZhciBoYXNNYXRyaXhDaGFuZ2VkPSF0aGlzLl9wcmV2TWF0LmVxdWFscyh0aGlzLm1hdCk7aWYoKGhhc01hdHJpeENoYW5nZWR8fHRoaXMucGUuX21kZikmJnRoaXMuY29tcC50aHJlZURFbGVtZW50cyl7bGVuPXRoaXMuY29tcC50aHJlZURFbGVtZW50cy5sZW5ndGg7dmFyIGNvbXA7dmFyIHBlcnNwZWN0aXZlU3R5bGU7dmFyIGNvbnRhaW5lclN0eWxlO2ZvcihpPTA7aTxsZW47aSs9MSl7Y29tcD10aGlzLmNvbXAudGhyZWVERWxlbWVudHNbaV07aWYoY29tcC50eXBlPT09JzNkJyl7aWYoaGFzTWF0cml4Q2hhbmdlZCl7dmFyIG1hdFZhbHVlPXRoaXMubWF0LnRvQ1NTKCk7Y29udGFpbmVyU3R5bGU9Y29tcC5jb250YWluZXIuc3R5bGU7Y29udGFpbmVyU3R5bGUudHJhbnNmb3JtPW1hdFZhbHVlO2NvbnRhaW5lclN0eWxlLndlYmtpdFRyYW5zZm9ybT1tYXRWYWx1ZTt9aWYodGhpcy5wZS5fbWRmKXtwZXJzcGVjdGl2ZVN0eWxlPWNvbXAucGVyc3BlY3RpdmVFbGVtLnN0eWxlO3BlcnNwZWN0aXZlU3R5bGUucGVyc3BlY3RpdmU9dGhpcy5wZS52KydweCc7cGVyc3BlY3RpdmVTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZT10aGlzLnBlLnYrJ3B4Jzt9fX10aGlzLm1hdC5jbG9uZSh0aGlzLl9wcmV2TWF0KTt9fXRoaXMuX2lzRmlyc3RGcmFtZT1mYWxzZTt9O0hDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWU9ZnVuY3Rpb24obnVtKXt0aGlzLnByZXBhcmVQcm9wZXJ0aWVzKG51bSx0cnVlKTt9O0hDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7fTtIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbDt9O2Z1bmN0aW9uIEhFZmZlY3RzKCl7fUhFZmZlY3RzLnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbigpe307LyogZ2xvYmFsIGNyZWF0ZVRhZywgQW5pbWF0aW9uSXRlbSAqLyAvKiBleHBvcnRlZCBhbmltYXRpb25NYW5hZ2VyICovdmFyIGFuaW1hdGlvbk1hbmFnZXI9ZnVuY3Rpb24oKXt2YXIgbW9kdWxlT2I9e307dmFyIHJlZ2lzdGVyZWRBbmltYXRpb25zPVtdO3ZhciBpbml0VGltZT0wO3ZhciBsZW49MDt2YXIgcGxheWluZ0FuaW1hdGlvbnNOdW09MDt2YXIgX3N0b3BwZWQ9dHJ1ZTt2YXIgX2lzRnJvemVuPWZhbHNlO2Z1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZXYpe3ZhciBpPTA7dmFyIGFuaW1JdGVtPWV2LnRhcmdldDt3aGlsZShpPGxlbil7aWYocmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uPT09YW5pbUl0ZW0pe3JlZ2lzdGVyZWRBbmltYXRpb25zLnNwbGljZShpLDEpO2ktPTE7bGVuLT0xO2lmKCFhbmltSXRlbS5pc1BhdXNlZCl7c3VidHJhY3RQbGF5aW5nQ291bnQoKTt9fWkrPTE7fX1mdW5jdGlvbiByZWdpc3RlckFuaW1hdGlvbihlbGVtZW50LGFuaW1hdGlvbkRhdGEpe2lmKCFlbGVtZW50KXtyZXR1cm4gbnVsbDt9dmFyIGk9MDt3aGlsZShpPGxlbil7aWYocmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uZWxlbT09PWVsZW1lbnQmJnJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmVsZW0hPT1udWxsKXtyZXR1cm4gcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uO31pKz0xO312YXIgYW5pbUl0ZW09bmV3IEFuaW1hdGlvbkl0ZW0oKTtzZXR1cEFuaW1hdGlvbihhbmltSXRlbSxlbGVtZW50KTthbmltSXRlbS5zZXREYXRhKGVsZW1lbnQsYW5pbWF0aW9uRGF0YSk7cmV0dXJuIGFuaW1JdGVtO31mdW5jdGlvbiBnZXRSZWdpc3RlcmVkQW5pbWF0aW9ucygpe3ZhciBpO3ZhciBsZW5Bbmltcz1yZWdpc3RlcmVkQW5pbWF0aW9ucy5sZW5ndGg7dmFyIGFuaW1hdGlvbnM9W107Zm9yKGk9MDtpPGxlbkFuaW1zO2krPTEpe2FuaW1hdGlvbnMucHVzaChyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24pO31yZXR1cm4gYW5pbWF0aW9uczt9ZnVuY3Rpb24gYWRkUGxheWluZ0NvdW50KCl7cGxheWluZ0FuaW1hdGlvbnNOdW0rPTE7YWN0aXZhdGUoKTt9ZnVuY3Rpb24gc3VidHJhY3RQbGF5aW5nQ291bnQoKXtwbGF5aW5nQW5pbWF0aW9uc051bS09MTt9ZnVuY3Rpb24gc2V0dXBBbmltYXRpb24oYW5pbUl0ZW0sZWxlbWVudCl7YW5pbUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZGVzdHJveScscmVtb3ZlRWxlbWVudCk7YW5pbUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignX2FjdGl2ZScsYWRkUGxheWluZ0NvdW50KTthbmltSXRlbS5hZGRFdmVudExpc3RlbmVyKCdfaWRsZScsc3VidHJhY3RQbGF5aW5nQ291bnQpO3JlZ2lzdGVyZWRBbmltYXRpb25zLnB1c2goe2VsZW06ZWxlbWVudCxhbmltYXRpb246YW5pbUl0ZW19KTtsZW4rPTE7fWZ1bmN0aW9uIGxvYWRBbmltYXRpb24ocGFyYW1zKXt2YXIgYW5pbUl0ZW09bmV3IEFuaW1hdGlvbkl0ZW0oKTtzZXR1cEFuaW1hdGlvbihhbmltSXRlbSxudWxsKTthbmltSXRlbS5zZXRQYXJhbXMocGFyYW1zKTtyZXR1cm4gYW5pbUl0ZW07fWZ1bmN0aW9uIHNldFNwZWVkKHZhbCxhbmltYXRpb24pe3ZhciBpO2ZvcihpPTA7aTxsZW47aSs9MSl7cmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnNldFNwZWVkKHZhbCxhbmltYXRpb24pO319ZnVuY3Rpb24gc2V0RGlyZWN0aW9uKHZhbCxhbmltYXRpb24pe3ZhciBpO2ZvcihpPTA7aTxsZW47aSs9MSl7cmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnNldERpcmVjdGlvbih2YWwsYW5pbWF0aW9uKTt9fWZ1bmN0aW9uIHBsYXkoYW5pbWF0aW9uKXt2YXIgaTtmb3IoaT0wO2k8bGVuO2krPTEpe3JlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5wbGF5KGFuaW1hdGlvbik7fX1mdW5jdGlvbiByZXN1bWUobm93VGltZSl7dmFyIGVsYXBzZWRUaW1lPW5vd1RpbWUtaW5pdFRpbWU7dmFyIGk7Zm9yKGk9MDtpPGxlbjtpKz0xKXtyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uYWR2YW5jZVRpbWUoZWxhcHNlZFRpbWUpO31pbml0VGltZT1ub3dUaW1lO2lmKHBsYXlpbmdBbmltYXRpb25zTnVtJiYhX2lzRnJvemVuKXt3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc3VtZSk7fWVsc2Uge19zdG9wcGVkPXRydWU7fX1mdW5jdGlvbiBmaXJzdChub3dUaW1lKXtpbml0VGltZT1ub3dUaW1lO3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lKTt9ZnVuY3Rpb24gcGF1c2UoYW5pbWF0aW9uKXt2YXIgaTtmb3IoaT0wO2k8bGVuO2krPTEpe3JlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5wYXVzZShhbmltYXRpb24pO319ZnVuY3Rpb24gZ29Ub0FuZFN0b3AodmFsdWUsaXNGcmFtZSxhbmltYXRpb24pe3ZhciBpO2ZvcihpPTA7aTxsZW47aSs9MSl7cmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLmdvVG9BbmRTdG9wKHZhbHVlLGlzRnJhbWUsYW5pbWF0aW9uKTt9fWZ1bmN0aW9uIHN0b3AoYW5pbWF0aW9uKXt2YXIgaTtmb3IoaT0wO2k8bGVuO2krPTEpe3JlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5zdG9wKGFuaW1hdGlvbik7fX1mdW5jdGlvbiB0b2dnbGVQYXVzZShhbmltYXRpb24pe3ZhciBpO2ZvcihpPTA7aTxsZW47aSs9MSl7cmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnRvZ2dsZVBhdXNlKGFuaW1hdGlvbik7fX1mdW5jdGlvbiBkZXN0cm95KGFuaW1hdGlvbil7dmFyIGk7Zm9yKGk9bGVuLTE7aT49MDtpLT0xKXtyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uZGVzdHJveShhbmltYXRpb24pO319ZnVuY3Rpb24gc2VhcmNoQW5pbWF0aW9ucyhhbmltYXRpb25EYXRhLHN0YW5kYWxvbmUscmVuZGVyZXIpe3ZhciBhbmltRWxlbWVudHM9W10uY29uY2F0KFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbG90dGllJykpLFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYm9keW1vdmluJykpKTt2YXIgaTt2YXIgbGVuQW5pbXM9YW5pbUVsZW1lbnRzLmxlbmd0aDtmb3IoaT0wO2k8bGVuQW5pbXM7aSs9MSl7aWYocmVuZGVyZXIpe2FuaW1FbGVtZW50c1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYm0tdHlwZScscmVuZGVyZXIpO31yZWdpc3RlckFuaW1hdGlvbihhbmltRWxlbWVudHNbaV0sYW5pbWF0aW9uRGF0YSk7fWlmKHN0YW5kYWxvbmUmJmxlbkFuaW1zPT09MCl7aWYoIXJlbmRlcmVyKXtyZW5kZXJlcj0nc3ZnJzt9dmFyIGJvZHk9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtib2R5LmlubmVyVGV4dD0nJzt2YXIgZGl2PWNyZWF0ZVRhZygnZGl2Jyk7ZGl2LnN0eWxlLndpZHRoPScxMDAlJztkaXYuc3R5bGUuaGVpZ2h0PScxMDAlJztkaXYuc2V0QXR0cmlidXRlKCdkYXRhLWJtLXR5cGUnLHJlbmRlcmVyKTtib2R5LmFwcGVuZENoaWxkKGRpdik7cmVnaXN0ZXJBbmltYXRpb24oZGl2LGFuaW1hdGlvbkRhdGEpO319ZnVuY3Rpb24gcmVzaXplKCl7dmFyIGk7Zm9yKGk9MDtpPGxlbjtpKz0xKXtyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24ucmVzaXplKCk7fX1mdW5jdGlvbiBhY3RpdmF0ZSgpe2lmKCFfaXNGcm96ZW4mJnBsYXlpbmdBbmltYXRpb25zTnVtKXtpZihfc3RvcHBlZCl7d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmaXJzdCk7X3N0b3BwZWQ9ZmFsc2U7fX19ZnVuY3Rpb24gZnJlZXplKCl7X2lzRnJvemVuPXRydWU7fWZ1bmN0aW9uIHVuZnJlZXplKCl7X2lzRnJvemVuPWZhbHNlO2FjdGl2YXRlKCk7fWZ1bmN0aW9uIHNldFZvbHVtZSh2YWwsYW5pbWF0aW9uKXt2YXIgaTtmb3IoaT0wO2k8bGVuO2krPTEpe3JlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5zZXRWb2x1bWUodmFsLGFuaW1hdGlvbik7fX1mdW5jdGlvbiBtdXRlKGFuaW1hdGlvbil7dmFyIGk7Zm9yKGk9MDtpPGxlbjtpKz0xKXtyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24ubXV0ZShhbmltYXRpb24pO319ZnVuY3Rpb24gdW5tdXRlKGFuaW1hdGlvbil7dmFyIGk7Zm9yKGk9MDtpPGxlbjtpKz0xKXtyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24udW5tdXRlKGFuaW1hdGlvbik7fX1tb2R1bGVPYi5yZWdpc3RlckFuaW1hdGlvbj1yZWdpc3RlckFuaW1hdGlvbjttb2R1bGVPYi5sb2FkQW5pbWF0aW9uPWxvYWRBbmltYXRpb247bW9kdWxlT2Iuc2V0U3BlZWQ9c2V0U3BlZWQ7bW9kdWxlT2Iuc2V0RGlyZWN0aW9uPXNldERpcmVjdGlvbjttb2R1bGVPYi5wbGF5PXBsYXk7bW9kdWxlT2IucGF1c2U9cGF1c2U7bW9kdWxlT2Iuc3RvcD1zdG9wO21vZHVsZU9iLnRvZ2dsZVBhdXNlPXRvZ2dsZVBhdXNlO21vZHVsZU9iLnNlYXJjaEFuaW1hdGlvbnM9c2VhcmNoQW5pbWF0aW9uczttb2R1bGVPYi5yZXNpemU9cmVzaXplOy8vIG1vZHVsZU9iLnN0YXJ0ID0gc3RhcnQ7XG5tb2R1bGVPYi5nb1RvQW5kU3RvcD1nb1RvQW5kU3RvcDttb2R1bGVPYi5kZXN0cm95PWRlc3Ryb3k7bW9kdWxlT2IuZnJlZXplPWZyZWV6ZTttb2R1bGVPYi51bmZyZWV6ZT11bmZyZWV6ZTttb2R1bGVPYi5zZXRWb2x1bWU9c2V0Vm9sdW1lO21vZHVsZU9iLm11dGU9bXV0ZTttb2R1bGVPYi51bm11dGU9dW5tdXRlO21vZHVsZU9iLmdldFJlZ2lzdGVyZWRBbmltYXRpb25zPWdldFJlZ2lzdGVyZWRBbmltYXRpb25zO3JldHVybiBtb2R1bGVPYjt9KCk7LyogZ2xvYmFsIGNyZWF0ZUVsZW1lbnRJRCwgc3ViZnJhbWVFbmFibGVkLCBQcm9qZWN0SW50ZXJmYWNlLCBJbWFnZVByZWxvYWRlciwgYXVkaW9Db250cm9sbGVyRmFjdG9yeSwgZXh0ZW5kUHJvdG90eXBlLCBCYXNlRXZlbnQsXHJcbkNhbnZhc1JlbmRlcmVyLCBTVkdSZW5kZXJlciwgSHlicmlkUmVuZGVyZXIsIGFzc2V0TG9hZGVyLCBkYXRhTWFuYWdlciwgZXhwcmVzc2lvbnNQbHVnaW4sIEJNRW50ZXJGcmFtZUV2ZW50LCBCTUNvbXBsZXRlTG9vcEV2ZW50LFxyXG5CTUNvbXBsZXRlRXZlbnQsIEJNU2VnbWVudFN0YXJ0RXZlbnQsIEJNRGVzdHJveUV2ZW50LCBCTUVudGVyRnJhbWVFdmVudCwgQk1Db21wbGV0ZUxvb3BFdmVudCwgQk1Db21wbGV0ZUV2ZW50LCBCTVNlZ21lbnRTdGFydEV2ZW50LFxyXG5CTURlc3Ryb3lFdmVudCwgQk1SZW5kZXJGcmFtZUVycm9yRXZlbnQsIEJNQ29uZmlnRXJyb3JFdmVudCwgbWFya2VyUGFyc2VyICovdmFyIEFuaW1hdGlvbkl0ZW09ZnVuY3Rpb24gQW5pbWF0aW9uSXRlbSgpe3RoaXMuX2Nicz1bXTt0aGlzLm5hbWU9Jyc7dGhpcy5wYXRoPScnO3RoaXMuaXNMb2FkZWQ9ZmFsc2U7dGhpcy5jdXJyZW50RnJhbWU9MDt0aGlzLmN1cnJlbnRSYXdGcmFtZT0wO3RoaXMuZmlyc3RGcmFtZT0wO3RoaXMudG90YWxGcmFtZXM9MDt0aGlzLmZyYW1lUmF0ZT0wO3RoaXMuZnJhbWVNdWx0PTA7dGhpcy5wbGF5U3BlZWQ9MTt0aGlzLnBsYXlEaXJlY3Rpb249MTt0aGlzLnBsYXlDb3VudD0wO3RoaXMuYW5pbWF0aW9uRGF0YT17fTt0aGlzLmFzc2V0cz1bXTt0aGlzLmlzUGF1c2VkPXRydWU7dGhpcy5hdXRvcGxheT1mYWxzZTt0aGlzLmxvb3A9dHJ1ZTt0aGlzLnJlbmRlcmVyPW51bGw7dGhpcy5hbmltYXRpb25JRD1jcmVhdGVFbGVtZW50SUQoKTt0aGlzLmFzc2V0c1BhdGg9Jyc7dGhpcy50aW1lQ29tcGxldGVkPTA7dGhpcy5zZWdtZW50UG9zPTA7dGhpcy5pc1N1YmZyYW1lRW5hYmxlZD1zdWJmcmFtZUVuYWJsZWQ7dGhpcy5zZWdtZW50cz1bXTt0aGlzLl9pZGxlPXRydWU7dGhpcy5fY29tcGxldGVkTG9vcD1mYWxzZTt0aGlzLnByb2plY3RJbnRlcmZhY2U9UHJvamVjdEludGVyZmFjZSgpO3RoaXMuaW1hZ2VQcmVsb2FkZXI9bmV3IEltYWdlUHJlbG9hZGVyKCk7dGhpcy5hdWRpb0NvbnRyb2xsZXI9YXVkaW9Db250cm9sbGVyRmFjdG9yeSgpO3RoaXMubWFya2Vycz1bXTt9O2V4dGVuZFByb3RvdHlwZShbQmFzZUV2ZW50XSxBbmltYXRpb25JdGVtKTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXRQYXJhbXM9ZnVuY3Rpb24ocGFyYW1zKXtpZihwYXJhbXMud3JhcHBlcnx8cGFyYW1zLmNvbnRhaW5lcil7dGhpcy53cmFwcGVyPXBhcmFtcy53cmFwcGVyfHxwYXJhbXMuY29udGFpbmVyO312YXIgYW5pbVR5cGU9J3N2Zyc7aWYocGFyYW1zLmFuaW1UeXBlKXthbmltVHlwZT1wYXJhbXMuYW5pbVR5cGU7fWVsc2UgaWYocGFyYW1zLnJlbmRlcmVyKXthbmltVHlwZT1wYXJhbXMucmVuZGVyZXI7fXN3aXRjaChhbmltVHlwZSl7Y2FzZSdjYW52YXMnOnRoaXMucmVuZGVyZXI9bmV3IENhbnZhc1JlbmRlcmVyKHRoaXMscGFyYW1zLnJlbmRlcmVyU2V0dGluZ3MpO2JyZWFrO2Nhc2Unc3ZnJzp0aGlzLnJlbmRlcmVyPW5ldyBTVkdSZW5kZXJlcih0aGlzLHBhcmFtcy5yZW5kZXJlclNldHRpbmdzKTticmVhaztkZWZhdWx0OnRoaXMucmVuZGVyZXI9bmV3IEh5YnJpZFJlbmRlcmVyKHRoaXMscGFyYW1zLnJlbmRlcmVyU2V0dGluZ3MpO2JyZWFrO310aGlzLmltYWdlUHJlbG9hZGVyLnNldENhY2hlVHlwZShhbmltVHlwZSx0aGlzLnJlbmRlcmVyLmdsb2JhbERhdGEuZGVmcyk7dGhpcy5yZW5kZXJlci5zZXRQcm9qZWN0SW50ZXJmYWNlKHRoaXMucHJvamVjdEludGVyZmFjZSk7dGhpcy5hbmltVHlwZT1hbmltVHlwZTtpZihwYXJhbXMubG9vcD09PScnfHxwYXJhbXMubG9vcD09PW51bGx8fHBhcmFtcy5sb29wPT09dW5kZWZpbmVkfHxwYXJhbXMubG9vcD09PXRydWUpe3RoaXMubG9vcD10cnVlO31lbHNlIGlmKHBhcmFtcy5sb29wPT09ZmFsc2Upe3RoaXMubG9vcD1mYWxzZTt9ZWxzZSB7dGhpcy5sb29wPXBhcnNlSW50KHBhcmFtcy5sb29wLDEwKTt9dGhpcy5hdXRvcGxheT0nYXV0b3BsYXknaW4gcGFyYW1zP3BhcmFtcy5hdXRvcGxheTp0cnVlO3RoaXMubmFtZT1wYXJhbXMubmFtZT9wYXJhbXMubmFtZTonJzt0aGlzLmF1dG9sb2FkU2VnbWVudHM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmFtcywnYXV0b2xvYWRTZWdtZW50cycpP3BhcmFtcy5hdXRvbG9hZFNlZ21lbnRzOnRydWU7dGhpcy5hc3NldHNQYXRoPXBhcmFtcy5hc3NldHNQYXRoO3RoaXMuaW5pdGlhbFNlZ21lbnQ9cGFyYW1zLmluaXRpYWxTZWdtZW50O2lmKHBhcmFtcy5hdWRpb0ZhY3Rvcnkpe3RoaXMuYXVkaW9Db250cm9sbGVyLnNldEF1ZGlvRmFjdG9yeShwYXJhbXMuYXVkaW9GYWN0b3J5KTt9aWYocGFyYW1zLmFuaW1hdGlvbkRhdGEpe3RoaXMuY29uZmlnQW5pbWF0aW9uKHBhcmFtcy5hbmltYXRpb25EYXRhKTt9ZWxzZSBpZihwYXJhbXMucGF0aCl7aWYocGFyYW1zLnBhdGgubGFzdEluZGV4T2YoJ1xcXFwnKSE9PS0xKXt0aGlzLnBhdGg9cGFyYW1zLnBhdGguc3Vic3RyKDAscGFyYW1zLnBhdGgubGFzdEluZGV4T2YoJ1xcXFwnKSsxKTt9ZWxzZSB7dGhpcy5wYXRoPXBhcmFtcy5wYXRoLnN1YnN0cigwLHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCcvJykrMSk7fXRoaXMuZmlsZU5hbWU9cGFyYW1zLnBhdGguc3Vic3RyKHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCcvJykrMSk7dGhpcy5maWxlTmFtZT10aGlzLmZpbGVOYW1lLnN1YnN0cigwLHRoaXMuZmlsZU5hbWUubGFzdEluZGV4T2YoJy5qc29uJykpO2Fzc2V0TG9hZGVyLmxvYWQocGFyYW1zLnBhdGgsdGhpcy5jb25maWdBbmltYXRpb24uYmluZCh0aGlzKSxmdW5jdGlvbigpe3RoaXMudHJpZ2dlcignZGF0YV9mYWlsZWQnKTt9LmJpbmQodGhpcykpO319O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldERhdGE9ZnVuY3Rpb24od3JhcHBlcixhbmltYXRpb25EYXRhKXtpZihhbmltYXRpb25EYXRhKXtpZih0eXBlb2YgYW5pbWF0aW9uRGF0YSE9PSdvYmplY3QnKXthbmltYXRpb25EYXRhPUpTT04ucGFyc2UoYW5pbWF0aW9uRGF0YSk7fX12YXIgcGFyYW1zPXt3cmFwcGVyOndyYXBwZXIsYW5pbWF0aW9uRGF0YTphbmltYXRpb25EYXRhfTt2YXIgd3JhcHBlckF0dHJpYnV0ZXM9d3JhcHBlci5hdHRyaWJ1dGVzO3BhcmFtcy5wYXRoPXdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltYXRpb24tcGF0aCcpLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuP3dyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltYXRpb24tcGF0aCcpLnZhbHVlOndyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1wYXRoJykvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXBhdGgnKS52YWx1ZTp3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXBhdGgnKT93cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXBhdGgnKS52YWx1ZTonJztwYXJhbXMuYW5pbVR5cGU9d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tdHlwZScpLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuP3dyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltLXR5cGUnKS52YWx1ZTp3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tdHlwZScpLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuP3dyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS10eXBlJykudmFsdWU6d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS10eXBlJykvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS10eXBlJykudmFsdWU6d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXJlbmRlcmVyJykvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXJlbmRlcmVyJykudmFsdWU6d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1yZW5kZXJlcicpP3dyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcmVuZGVyZXInKS52YWx1ZTonY2FudmFzJzt2YXIgbG9vcD13cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1sb29wJykvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tbG9vcCcpLnZhbHVlOndyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1sb29wJykvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWxvb3AnKS52YWx1ZTp3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWxvb3AnKT93cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWxvb3AnKS52YWx1ZTonJztpZihsb29wPT09J2ZhbHNlJyl7cGFyYW1zLmxvb3A9ZmFsc2U7fWVsc2UgaWYobG9vcD09PSd0cnVlJyl7cGFyYW1zLmxvb3A9dHJ1ZTt9ZWxzZSBpZihsb29wIT09Jycpe3BhcmFtcy5sb29wPXBhcnNlSW50KGxvb3AsMTApO312YXIgYXV0b3BsYXk9d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tYXV0b3BsYXknKS8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbj93cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1hdXRvcGxheScpLnZhbHVlOndyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1hdXRvcGxheScpLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuP3dyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1hdXRvcGxheScpLnZhbHVlOndyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tYXV0b3BsYXknKT93cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWF1dG9wbGF5JykudmFsdWU6dHJ1ZTtwYXJhbXMuYXV0b3BsYXk9YXV0b3BsYXkhPT0nZmFsc2UnO3BhcmFtcy5uYW1lPXdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1uYW1lJykvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLW5hbWUnKS52YWx1ZTp3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tbmFtZScpLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuP3dyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1uYW1lJykudmFsdWU6d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1uYW1lJyk/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1uYW1lJykudmFsdWU6Jyc7dmFyIHByZXJlbmRlcj13cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1wcmVyZW5kZXInKS8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbj93cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1wcmVyZW5kZXInKS52YWx1ZTp3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcHJlcmVuZGVyJykvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXByZXJlbmRlcicpLnZhbHVlOndyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcHJlcmVuZGVyJyk/d3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1wcmVyZW5kZXInKS52YWx1ZTonJztpZihwcmVyZW5kZXI9PT0nZmFsc2UnKXtwYXJhbXMucHJlcmVuZGVyPWZhbHNlO310aGlzLnNldFBhcmFtcyhwYXJhbXMpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuaW5jbHVkZUxheWVycz1mdW5jdGlvbihkYXRhKXtpZihkYXRhLm9wPnRoaXMuYW5pbWF0aW9uRGF0YS5vcCl7dGhpcy5hbmltYXRpb25EYXRhLm9wPWRhdGEub3A7dGhpcy50b3RhbEZyYW1lcz1NYXRoLmZsb29yKGRhdGEub3AtdGhpcy5hbmltYXRpb25EYXRhLmlwKTt9dmFyIGxheWVycz10aGlzLmFuaW1hdGlvbkRhdGEubGF5ZXJzO3ZhciBpO3ZhciBsZW49bGF5ZXJzLmxlbmd0aDt2YXIgbmV3TGF5ZXJzPWRhdGEubGF5ZXJzO3ZhciBqO3ZhciBqTGVuPW5ld0xheWVycy5sZW5ndGg7Zm9yKGo9MDtqPGpMZW47ais9MSl7aT0wO3doaWxlKGk8bGVuKXtpZihsYXllcnNbaV0uaWQ9PT1uZXdMYXllcnNbal0uaWQpe2xheWVyc1tpXT1uZXdMYXllcnNbal07YnJlYWs7fWkrPTE7fX1pZihkYXRhLmNoYXJzfHxkYXRhLmZvbnRzKXt0aGlzLnJlbmRlcmVyLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuYWRkQ2hhcnMoZGF0YS5jaGFycyk7dGhpcy5yZW5kZXJlci5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmFkZEZvbnRzKGRhdGEuZm9udHMsdGhpcy5yZW5kZXJlci5nbG9iYWxEYXRhLmRlZnMpO31pZihkYXRhLmFzc2V0cyl7bGVuPWRhdGEuYXNzZXRzLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3RoaXMuYW5pbWF0aW9uRGF0YS5hc3NldHMucHVzaChkYXRhLmFzc2V0c1tpXSk7fX10aGlzLmFuaW1hdGlvbkRhdGEuX19jb21wbGV0ZT1mYWxzZTtkYXRhTWFuYWdlci5jb21wbGV0ZURhdGEodGhpcy5hbmltYXRpb25EYXRhLHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlcik7dGhpcy5yZW5kZXJlci5pbmNsdWRlTGF5ZXJzKGRhdGEubGF5ZXJzKTtpZihleHByZXNzaW9uc1BsdWdpbil7ZXhwcmVzc2lvbnNQbHVnaW4uaW5pdEV4cHJlc3Npb25zKHRoaXMpO310aGlzLmxvYWROZXh0U2VnbWVudCgpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUubG9hZE5leHRTZWdtZW50PWZ1bmN0aW9uKCl7dmFyIHNlZ21lbnRzPXRoaXMuYW5pbWF0aW9uRGF0YS5zZWdtZW50cztpZighc2VnbWVudHN8fHNlZ21lbnRzLmxlbmd0aD09PTB8fCF0aGlzLmF1dG9sb2FkU2VnbWVudHMpe3RoaXMudHJpZ2dlcignZGF0YV9yZWFkeScpO3RoaXMudGltZUNvbXBsZXRlZD10aGlzLnRvdGFsRnJhbWVzO3JldHVybjt9dmFyIHNlZ21lbnQ9c2VnbWVudHMuc2hpZnQoKTt0aGlzLnRpbWVDb21wbGV0ZWQ9c2VnbWVudC50aW1lKnRoaXMuZnJhbWVSYXRlO3ZhciBzZWdtZW50UGF0aD10aGlzLnBhdGgrdGhpcy5maWxlTmFtZSsnXycrdGhpcy5zZWdtZW50UG9zKycuanNvbic7dGhpcy5zZWdtZW50UG9zKz0xO2Fzc2V0TG9hZGVyLmxvYWQoc2VnbWVudFBhdGgsdGhpcy5pbmNsdWRlTGF5ZXJzLmJpbmQodGhpcyksZnVuY3Rpb24oKXt0aGlzLnRyaWdnZXIoJ2RhdGFfZmFpbGVkJyk7fS5iaW5kKHRoaXMpKTt9O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmxvYWRTZWdtZW50cz1mdW5jdGlvbigpe3ZhciBzZWdtZW50cz10aGlzLmFuaW1hdGlvbkRhdGEuc2VnbWVudHM7aWYoIXNlZ21lbnRzKXt0aGlzLnRpbWVDb21wbGV0ZWQ9dGhpcy50b3RhbEZyYW1lczt9dGhpcy5sb2FkTmV4dFNlZ21lbnQoKTt9O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmltYWdlc0xvYWRlZD1mdW5jdGlvbigpe3RoaXMudHJpZ2dlcignbG9hZGVkX2ltYWdlcycpO3RoaXMuY2hlY2tMb2FkZWQoKTt9O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnByZWxvYWRJbWFnZXM9ZnVuY3Rpb24oKXt0aGlzLmltYWdlUHJlbG9hZGVyLnNldEFzc2V0c1BhdGgodGhpcy5hc3NldHNQYXRoKTt0aGlzLmltYWdlUHJlbG9hZGVyLnNldFBhdGgodGhpcy5wYXRoKTt0aGlzLmltYWdlUHJlbG9hZGVyLmxvYWRBc3NldHModGhpcy5hbmltYXRpb25EYXRhLmFzc2V0cyx0aGlzLmltYWdlc0xvYWRlZC5iaW5kKHRoaXMpKTt9O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmNvbmZpZ0FuaW1hdGlvbj1mdW5jdGlvbihhbmltRGF0YSl7aWYoIXRoaXMucmVuZGVyZXIpe3JldHVybjt9dHJ5e3RoaXMuYW5pbWF0aW9uRGF0YT1hbmltRGF0YTtpZih0aGlzLmluaXRpYWxTZWdtZW50KXt0aGlzLnRvdGFsRnJhbWVzPU1hdGguZmxvb3IodGhpcy5pbml0aWFsU2VnbWVudFsxXS10aGlzLmluaXRpYWxTZWdtZW50WzBdKTt0aGlzLmZpcnN0RnJhbWU9TWF0aC5yb3VuZCh0aGlzLmluaXRpYWxTZWdtZW50WzBdKTt9ZWxzZSB7dGhpcy50b3RhbEZyYW1lcz1NYXRoLmZsb29yKHRoaXMuYW5pbWF0aW9uRGF0YS5vcC10aGlzLmFuaW1hdGlvbkRhdGEuaXApO3RoaXMuZmlyc3RGcmFtZT1NYXRoLnJvdW5kKHRoaXMuYW5pbWF0aW9uRGF0YS5pcCk7fXRoaXMucmVuZGVyZXIuY29uZmlnQW5pbWF0aW9uKGFuaW1EYXRhKTtpZighYW5pbURhdGEuYXNzZXRzKXthbmltRGF0YS5hc3NldHM9W107fXRoaXMuYXNzZXRzPXRoaXMuYW5pbWF0aW9uRGF0YS5hc3NldHM7dGhpcy5mcmFtZVJhdGU9dGhpcy5hbmltYXRpb25EYXRhLmZyO3RoaXMuZnJhbWVNdWx0PXRoaXMuYW5pbWF0aW9uRGF0YS5mci8xMDAwO3RoaXMucmVuZGVyZXIuc2VhcmNoRXh0cmFDb21wb3NpdGlvbnMoYW5pbURhdGEuYXNzZXRzKTt0aGlzLm1hcmtlcnM9bWFya2VyUGFyc2VyKGFuaW1EYXRhLm1hcmtlcnN8fFtdKTt0aGlzLnRyaWdnZXIoJ2NvbmZpZ19yZWFkeScpO3RoaXMucHJlbG9hZEltYWdlcygpO3RoaXMubG9hZFNlZ21lbnRzKCk7dGhpcy51cGRhRnJhbWVNb2RpZmllcigpO3RoaXMud2FpdEZvckZvbnRzTG9hZGVkKCk7aWYodGhpcy5pc1BhdXNlZCl7dGhpcy5hdWRpb0NvbnRyb2xsZXIucGF1c2UoKTt9fWNhdGNoKGVycm9yKXt0aGlzLnRyaWdnZXJDb25maWdFcnJvcihlcnJvcik7fX07QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUud2FpdEZvckZvbnRzTG9hZGVkPWZ1bmN0aW9uKCl7aWYoIXRoaXMucmVuZGVyZXIpe3JldHVybjt9aWYodGhpcy5yZW5kZXJlci5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmlzTG9hZGVkKXt0aGlzLmNoZWNrTG9hZGVkKCk7fWVsc2Uge3NldFRpbWVvdXQodGhpcy53YWl0Rm9yRm9udHNMb2FkZWQuYmluZCh0aGlzKSwyMCk7fX07QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuY2hlY2tMb2FkZWQ9ZnVuY3Rpb24oKXtpZighdGhpcy5pc0xvYWRlZCYmdGhpcy5yZW5kZXJlci5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmlzTG9hZGVkJiYodGhpcy5pbWFnZVByZWxvYWRlci5sb2FkZWQoKXx8dGhpcy5yZW5kZXJlci5yZW5kZXJlclR5cGUhPT0nY2FudmFzJykpe3RoaXMuaXNMb2FkZWQ9dHJ1ZTtkYXRhTWFuYWdlci5jb21wbGV0ZURhdGEodGhpcy5hbmltYXRpb25EYXRhLHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlcik7aWYoZXhwcmVzc2lvbnNQbHVnaW4pe2V4cHJlc3Npb25zUGx1Z2luLmluaXRFeHByZXNzaW9ucyh0aGlzKTt9dGhpcy5yZW5kZXJlci5pbml0SXRlbXMoKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhpcy50cmlnZ2VyKCdET01Mb2FkZWQnKTt9LmJpbmQodGhpcyksMCk7dGhpcy5nb3RvRnJhbWUoKTtpZih0aGlzLmF1dG9wbGF5KXt0aGlzLnBsYXkoKTt9fX07QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKCl7dGhpcy5yZW5kZXJlci51cGRhdGVDb250YWluZXJTaXplKCk7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXRTdWJmcmFtZT1mdW5jdGlvbihmbGFnKXt0aGlzLmlzU3ViZnJhbWVFbmFibGVkPSEhZmxhZzt9O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdvdG9GcmFtZT1mdW5jdGlvbigpe3RoaXMuY3VycmVudEZyYW1lPXRoaXMuaXNTdWJmcmFtZUVuYWJsZWQ/dGhpcy5jdXJyZW50UmF3RnJhbWU6fn50aGlzLmN1cnJlbnRSYXdGcmFtZTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcbmlmKHRoaXMudGltZUNvbXBsZXRlZCE9PXRoaXMudG90YWxGcmFtZXMmJnRoaXMuY3VycmVudEZyYW1lPnRoaXMudGltZUNvbXBsZXRlZCl7dGhpcy5jdXJyZW50RnJhbWU9dGhpcy50aW1lQ29tcGxldGVkO310aGlzLnRyaWdnZXIoJ2VudGVyRnJhbWUnKTt0aGlzLnJlbmRlckZyYW1lKCk7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbigpe2lmKHRoaXMuaXNMb2FkZWQ9PT1mYWxzZXx8IXRoaXMucmVuZGVyZXIpe3JldHVybjt9dHJ5e3RoaXMucmVuZGVyZXIucmVuZGVyRnJhbWUodGhpcy5jdXJyZW50RnJhbWUrdGhpcy5maXJzdEZyYW1lKTt9Y2F0Y2goZXJyb3Ipe3RoaXMudHJpZ2dlclJlbmRlckZyYW1lRXJyb3IoZXJyb3IpO319O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnBsYXk9ZnVuY3Rpb24obmFtZSl7aWYobmFtZSYmdGhpcy5uYW1lIT09bmFtZSl7cmV0dXJuO31pZih0aGlzLmlzUGF1c2VkPT09dHJ1ZSl7dGhpcy5pc1BhdXNlZD1mYWxzZTt0aGlzLmF1ZGlvQ29udHJvbGxlci5yZXN1bWUoKTtpZih0aGlzLl9pZGxlKXt0aGlzLl9pZGxlPWZhbHNlO3RoaXMudHJpZ2dlcignX2FjdGl2ZScpO319fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbihuYW1lKXtpZihuYW1lJiZ0aGlzLm5hbWUhPT1uYW1lKXtyZXR1cm47fWlmKHRoaXMuaXNQYXVzZWQ9PT1mYWxzZSl7dGhpcy5pc1BhdXNlZD10cnVlO3RoaXMuX2lkbGU9dHJ1ZTt0aGlzLnRyaWdnZXIoJ19pZGxlJyk7dGhpcy5hdWRpb0NvbnRyb2xsZXIucGF1c2UoKTt9fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS50b2dnbGVQYXVzZT1mdW5jdGlvbihuYW1lKXtpZihuYW1lJiZ0aGlzLm5hbWUhPT1uYW1lKXtyZXR1cm47fWlmKHRoaXMuaXNQYXVzZWQ9PT10cnVlKXt0aGlzLnBsYXkoKTt9ZWxzZSB7dGhpcy5wYXVzZSgpO319O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnN0b3A9ZnVuY3Rpb24obmFtZSl7aWYobmFtZSYmdGhpcy5uYW1lIT09bmFtZSl7cmV0dXJuO310aGlzLnBhdXNlKCk7dGhpcy5wbGF5Q291bnQ9MDt0aGlzLl9jb21wbGV0ZWRMb29wPWZhbHNlO3RoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUoMCk7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRNYXJrZXJEYXRhPWZ1bmN0aW9uKG1hcmtlck5hbWUpe3ZhciBtYXJrZXI7Zm9yKHZhciBpPTA7aTx0aGlzLm1hcmtlcnMubGVuZ3RoO2krPTEpe21hcmtlcj10aGlzLm1hcmtlcnNbaV07aWYobWFya2VyLnBheWxvYWQmJm1hcmtlci5wYXlsb2FkLm5hbWU9PT1tYXJrZXJOYW1lKXtyZXR1cm4gbWFya2VyO319cmV0dXJuIG51bGw7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb1RvQW5kU3RvcD1mdW5jdGlvbih2YWx1ZSxpc0ZyYW1lLG5hbWUpe2lmKG5hbWUmJnRoaXMubmFtZSE9PW5hbWUpe3JldHVybjt9dmFyIG51bVZhbHVlPU51bWJlcih2YWx1ZSk7aWYoaXNOYU4obnVtVmFsdWUpKXt2YXIgbWFya2VyPXRoaXMuZ2V0TWFya2VyRGF0YSh2YWx1ZSk7aWYobWFya2VyKXt0aGlzLmdvVG9BbmRTdG9wKG1hcmtlci50aW1lLHRydWUpO319ZWxzZSBpZihpc0ZyYW1lKXt0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKHZhbHVlKTt9ZWxzZSB7dGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSh2YWx1ZSp0aGlzLmZyYW1lTW9kaWZpZXIpO310aGlzLnBhdXNlKCk7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb1RvQW5kUGxheT1mdW5jdGlvbih2YWx1ZSxpc0ZyYW1lLG5hbWUpe2lmKG5hbWUmJnRoaXMubmFtZSE9PW5hbWUpe3JldHVybjt9dmFyIG51bVZhbHVlPU51bWJlcih2YWx1ZSk7aWYoaXNOYU4obnVtVmFsdWUpKXt2YXIgbWFya2VyPXRoaXMuZ2V0TWFya2VyRGF0YSh2YWx1ZSk7aWYobWFya2VyKXtpZighbWFya2VyLmR1cmF0aW9uKXt0aGlzLmdvVG9BbmRTdG9wKG1hcmtlci50aW1lLHRydWUpO31lbHNlIHt0aGlzLnBsYXlTZWdtZW50cyhbbWFya2VyLnRpbWUsbWFya2VyLnRpbWUrbWFya2VyLmR1cmF0aW9uXSx0cnVlKTt9fX1lbHNlIHt0aGlzLmdvVG9BbmRTdG9wKG51bVZhbHVlLGlzRnJhbWUsbmFtZSk7fXRoaXMucGxheSgpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuYWR2YW5jZVRpbWU9ZnVuY3Rpb24odmFsdWUpe2lmKHRoaXMuaXNQYXVzZWQ9PT10cnVlfHx0aGlzLmlzTG9hZGVkPT09ZmFsc2Upe3JldHVybjt9dmFyIG5leHRWYWx1ZT10aGlzLmN1cnJlbnRSYXdGcmFtZSt2YWx1ZSp0aGlzLmZyYW1lTW9kaWZpZXI7dmFyIF9pc0NvbXBsZXRlPWZhbHNlOy8vIENoZWNraW5nIGlmIG5leHRWYWx1ZSA+IHRvdGFsRnJhbWVzIC0gMSBmb3IgYWRkcmVzc2luZyBub24gbG9vcGluZyBhbmQgbG9vcGluZyBhbmltYXRpb25zLlxuLy8gSWYgYW5pbWF0aW9uIHdvbid0IGxvb3AsIGl0IHNob3VsZCBzdG9wIGF0IHRvdGFsRnJhbWVzIC0gMS4gSWYgaXQgd2lsbCBsb29wIGl0IHNob3VsZCBjb21wbGV0ZSB0aGUgbGFzdCBmcmFtZSBhbmQgdGhlbiBsb29wLlxuaWYobmV4dFZhbHVlPj10aGlzLnRvdGFsRnJhbWVzLTEmJnRoaXMuZnJhbWVNb2RpZmllcj4wKXtpZighdGhpcy5sb29wfHx0aGlzLnBsYXlDb3VudD09PXRoaXMubG9vcCl7aWYoIXRoaXMuY2hlY2tTZWdtZW50cyhuZXh0VmFsdWU+dGhpcy50b3RhbEZyYW1lcz9uZXh0VmFsdWUldGhpcy50b3RhbEZyYW1lczowKSl7X2lzQ29tcGxldGU9dHJ1ZTtuZXh0VmFsdWU9dGhpcy50b3RhbEZyYW1lcy0xO319ZWxzZSBpZihuZXh0VmFsdWU+PXRoaXMudG90YWxGcmFtZXMpe3RoaXMucGxheUNvdW50Kz0xO2lmKCF0aGlzLmNoZWNrU2VnbWVudHMobmV4dFZhbHVlJXRoaXMudG90YWxGcmFtZXMpKXt0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSV0aGlzLnRvdGFsRnJhbWVzKTt0aGlzLl9jb21wbGV0ZWRMb29wPXRydWU7dGhpcy50cmlnZ2VyKCdsb29wQ29tcGxldGUnKTt9fWVsc2Uge3RoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUobmV4dFZhbHVlKTt9fWVsc2UgaWYobmV4dFZhbHVlPDApe2lmKCF0aGlzLmNoZWNrU2VnbWVudHMobmV4dFZhbHVlJXRoaXMudG90YWxGcmFtZXMpKXtpZih0aGlzLmxvb3AmJiEodGhpcy5wbGF5Q291bnQtLTw9MCYmdGhpcy5sb29wIT09dHJ1ZSkpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGx1c3BsdXNcbnRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodGhpcy50b3RhbEZyYW1lcytuZXh0VmFsdWUldGhpcy50b3RhbEZyYW1lcyk7aWYoIXRoaXMuX2NvbXBsZXRlZExvb3Ape3RoaXMuX2NvbXBsZXRlZExvb3A9dHJ1ZTt9ZWxzZSB7dGhpcy50cmlnZ2VyKCdsb29wQ29tcGxldGUnKTt9fWVsc2Uge19pc0NvbXBsZXRlPXRydWU7bmV4dFZhbHVlPTA7fX19ZWxzZSB7dGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZShuZXh0VmFsdWUpO31pZihfaXNDb21wbGV0ZSl7dGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZShuZXh0VmFsdWUpO3RoaXMucGF1c2UoKTt0aGlzLnRyaWdnZXIoJ2NvbXBsZXRlJyk7fX07QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuYWRqdXN0U2VnbWVudD1mdW5jdGlvbihhcnIsb2Zmc2V0KXt0aGlzLnBsYXlDb3VudD0wO2lmKGFyclsxXTxhcnJbMF0pe2lmKHRoaXMuZnJhbWVNb2RpZmllcj4wKXtpZih0aGlzLnBsYXlTcGVlZDwwKXt0aGlzLnNldFNwZWVkKC10aGlzLnBsYXlTcGVlZCk7fWVsc2Uge3RoaXMuc2V0RGlyZWN0aW9uKC0xKTt9fXRoaXMudG90YWxGcmFtZXM9YXJyWzBdLWFyclsxXTt0aGlzLnRpbWVDb21wbGV0ZWQ9dGhpcy50b3RhbEZyYW1lczt0aGlzLmZpcnN0RnJhbWU9YXJyWzFdO3RoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodGhpcy50b3RhbEZyYW1lcy0wLjAwMS1vZmZzZXQpO31lbHNlIGlmKGFyclsxXT5hcnJbMF0pe2lmKHRoaXMuZnJhbWVNb2RpZmllcjwwKXtpZih0aGlzLnBsYXlTcGVlZDwwKXt0aGlzLnNldFNwZWVkKC10aGlzLnBsYXlTcGVlZCk7fWVsc2Uge3RoaXMuc2V0RGlyZWN0aW9uKDEpO319dGhpcy50b3RhbEZyYW1lcz1hcnJbMV0tYXJyWzBdO3RoaXMudGltZUNvbXBsZXRlZD10aGlzLnRvdGFsRnJhbWVzO3RoaXMuZmlyc3RGcmFtZT1hcnJbMF07dGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSgwLjAwMStvZmZzZXQpO310aGlzLnRyaWdnZXIoJ3NlZ21lbnRTdGFydCcpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0U2VnbWVudD1mdW5jdGlvbihpbml0LGVuZCl7dmFyIHBlbmRpbmdGcmFtZT0tMTtpZih0aGlzLmlzUGF1c2VkKXtpZih0aGlzLmN1cnJlbnRSYXdGcmFtZSt0aGlzLmZpcnN0RnJhbWU8aW5pdCl7cGVuZGluZ0ZyYW1lPWluaXQ7fWVsc2UgaWYodGhpcy5jdXJyZW50UmF3RnJhbWUrdGhpcy5maXJzdEZyYW1lPmVuZCl7cGVuZGluZ0ZyYW1lPWVuZC1pbml0O319dGhpcy5maXJzdEZyYW1lPWluaXQ7dGhpcy50b3RhbEZyYW1lcz1lbmQtaW5pdDt0aGlzLnRpbWVDb21wbGV0ZWQ9dGhpcy50b3RhbEZyYW1lcztpZihwZW5kaW5nRnJhbWUhPT0tMSl7dGhpcy5nb1RvQW5kU3RvcChwZW5kaW5nRnJhbWUsdHJ1ZSk7fX07QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucGxheVNlZ21lbnRzPWZ1bmN0aW9uKGFycixmb3JjZUZsYWcpe2lmKGZvcmNlRmxhZyl7dGhpcy5zZWdtZW50cy5sZW5ndGg9MDt9aWYodHlwZW9mIGFyclswXT09PSdvYmplY3QnKXt2YXIgaTt2YXIgbGVuPWFyci5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLnNlZ21lbnRzLnB1c2goYXJyW2ldKTt9fWVsc2Uge3RoaXMuc2VnbWVudHMucHVzaChhcnIpO31pZih0aGlzLnNlZ21lbnRzLmxlbmd0aCYmZm9yY2VGbGFnKXt0aGlzLmFkanVzdFNlZ21lbnQodGhpcy5zZWdtZW50cy5zaGlmdCgpLDApO31pZih0aGlzLmlzUGF1c2VkKXt0aGlzLnBsYXkoKTt9fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5yZXNldFNlZ21lbnRzPWZ1bmN0aW9uKGZvcmNlRmxhZyl7dGhpcy5zZWdtZW50cy5sZW5ndGg9MDt0aGlzLnNlZ21lbnRzLnB1c2goW3RoaXMuYW5pbWF0aW9uRGF0YS5pcCx0aGlzLmFuaW1hdGlvbkRhdGEub3BdKTsvLyB0aGlzLnNlZ21lbnRzLnB1c2goW3RoaXMuYW5pbWF0aW9uRGF0YS5pcCp0aGlzLmZyYW1lUmF0ZSxNYXRoLmZsb29yKHRoaXMuYW5pbWF0aW9uRGF0YS5vcCAtIHRoaXMuYW5pbWF0aW9uRGF0YS5pcCt0aGlzLmFuaW1hdGlvbkRhdGEuaXAqdGhpcy5mcmFtZVJhdGUpXSk7XG5pZihmb3JjZUZsYWcpe3RoaXMuY2hlY2tTZWdtZW50cygwKTt9fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5jaGVja1NlZ21lbnRzPWZ1bmN0aW9uKG9mZnNldCl7aWYodGhpcy5zZWdtZW50cy5sZW5ndGgpe3RoaXMuYWRqdXN0U2VnbWVudCh0aGlzLnNlZ21lbnRzLnNoaWZ0KCksb2Zmc2V0KTtyZXR1cm4gdHJ1ZTt9cmV0dXJuIGZhbHNlO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbihuYW1lKXtpZihuYW1lJiZ0aGlzLm5hbWUhPT1uYW1lfHwhdGhpcy5yZW5kZXJlcil7cmV0dXJuO310aGlzLnJlbmRlcmVyLmRlc3Ryb3koKTt0aGlzLmltYWdlUHJlbG9hZGVyLmRlc3Ryb3koKTt0aGlzLnRyaWdnZXIoJ2Rlc3Ryb3knKTt0aGlzLl9jYnM9bnVsbDt0aGlzLm9uRW50ZXJGcmFtZT1udWxsO3RoaXMub25Mb29wQ29tcGxldGU9bnVsbDt0aGlzLm9uQ29tcGxldGU9bnVsbDt0aGlzLm9uU2VnbWVudFN0YXJ0PW51bGw7dGhpcy5vbkRlc3Ryb3k9bnVsbDt0aGlzLnJlbmRlcmVyPW51bGw7dGhpcy5yZW5kZXJlcj1udWxsO3RoaXMuaW1hZ2VQcmVsb2FkZXI9bnVsbDt0aGlzLnByb2plY3RJbnRlcmZhY2U9bnVsbDt9O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlPWZ1bmN0aW9uKHZhbHVlKXt0aGlzLmN1cnJlbnRSYXdGcmFtZT12YWx1ZTt0aGlzLmdvdG9GcmFtZSgpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0U3BlZWQ9ZnVuY3Rpb24odmFsKXt0aGlzLnBsYXlTcGVlZD12YWw7dGhpcy51cGRhRnJhbWVNb2RpZmllcigpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0RGlyZWN0aW9uPWZ1bmN0aW9uKHZhbCl7dGhpcy5wbGF5RGlyZWN0aW9uPXZhbDwwPy0xOjE7dGhpcy51cGRhRnJhbWVNb2RpZmllcigpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0Vm9sdW1lPWZ1bmN0aW9uKHZhbCxuYW1lKXtpZihuYW1lJiZ0aGlzLm5hbWUhPT1uYW1lKXtyZXR1cm47fXRoaXMuYXVkaW9Db250cm9sbGVyLnNldFZvbHVtZSh2YWwpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ2V0Vm9sdW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXVkaW9Db250cm9sbGVyLmdldFZvbHVtZSgpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUubXV0ZT1mdW5jdGlvbihuYW1lKXtpZihuYW1lJiZ0aGlzLm5hbWUhPT1uYW1lKXtyZXR1cm47fXRoaXMuYXVkaW9Db250cm9sbGVyLm11dGUoKTt9O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnVubXV0ZT1mdW5jdGlvbihuYW1lKXtpZihuYW1lJiZ0aGlzLm5hbWUhPT1uYW1lKXtyZXR1cm47fXRoaXMuYXVkaW9Db250cm9sbGVyLnVubXV0ZSgpO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudXBkYUZyYW1lTW9kaWZpZXI9ZnVuY3Rpb24oKXt0aGlzLmZyYW1lTW9kaWZpZXI9dGhpcy5mcmFtZU11bHQqdGhpcy5wbGF5U3BlZWQqdGhpcy5wbGF5RGlyZWN0aW9uO3RoaXMuYXVkaW9Db250cm9sbGVyLnNldFJhdGUodGhpcy5wbGF5U3BlZWQqdGhpcy5wbGF5RGlyZWN0aW9uKTt9O0FuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldFBhdGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXRoO307QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ2V0QXNzZXRzUGF0aD1mdW5jdGlvbihhc3NldERhdGEpe3ZhciBwYXRoPScnO2lmKGFzc2V0RGF0YS5lKXtwYXRoPWFzc2V0RGF0YS5wO31lbHNlIGlmKHRoaXMuYXNzZXRzUGF0aCl7dmFyIGltYWdlUGF0aD1hc3NldERhdGEucDtpZihpbWFnZVBhdGguaW5kZXhPZignaW1hZ2VzLycpIT09LTEpe2ltYWdlUGF0aD1pbWFnZVBhdGguc3BsaXQoJy8nKVsxXTt9cGF0aD10aGlzLmFzc2V0c1BhdGgraW1hZ2VQYXRoO31lbHNlIHtwYXRoPXRoaXMucGF0aDtwYXRoKz1hc3NldERhdGEudT9hc3NldERhdGEudTonJztwYXRoKz1hc3NldERhdGEucDt9cmV0dXJuIHBhdGg7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRBc3NldERhdGE9ZnVuY3Rpb24oaWQpe3ZhciBpPTA7dmFyIGxlbj10aGlzLmFzc2V0cy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKGlkPT09dGhpcy5hc3NldHNbaV0uaWQpe3JldHVybiB0aGlzLmFzc2V0c1tpXTt9aSs9MTt9cmV0dXJuIG51bGw7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5oaWRlPWZ1bmN0aW9uKCl7dGhpcy5yZW5kZXJlci5oaWRlKCk7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7dGhpcy5yZW5kZXJlci5zaG93KCk7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXREdXJhdGlvbj1mdW5jdGlvbihpc0ZyYW1lKXtyZXR1cm4gaXNGcmFtZT90aGlzLnRvdGFsRnJhbWVzOnRoaXMudG90YWxGcmFtZXMvdGhpcy5mcmFtZVJhdGU7fTtBbmltYXRpb25JdGVtLnByb3RvdHlwZS50cmlnZ2VyPWZ1bmN0aW9uKG5hbWUpe2lmKHRoaXMuX2NicyYmdGhpcy5fY2JzW25hbWVdKXtzd2l0Y2gobmFtZSl7Y2FzZSdlbnRlckZyYW1lJzp0aGlzLnRyaWdnZXJFdmVudChuYW1lLG5ldyBCTUVudGVyRnJhbWVFdmVudChuYW1lLHRoaXMuY3VycmVudEZyYW1lLHRoaXMudG90YWxGcmFtZXMsdGhpcy5mcmFtZU1vZGlmaWVyKSk7YnJlYWs7Y2FzZSdsb29wQ29tcGxldGUnOnRoaXMudHJpZ2dlckV2ZW50KG5hbWUsbmV3IEJNQ29tcGxldGVMb29wRXZlbnQobmFtZSx0aGlzLmxvb3AsdGhpcy5wbGF5Q291bnQsdGhpcy5mcmFtZU11bHQpKTticmVhaztjYXNlJ2NvbXBsZXRlJzp0aGlzLnRyaWdnZXJFdmVudChuYW1lLG5ldyBCTUNvbXBsZXRlRXZlbnQobmFtZSx0aGlzLmZyYW1lTXVsdCkpO2JyZWFrO2Nhc2Unc2VnbWVudFN0YXJ0Jzp0aGlzLnRyaWdnZXJFdmVudChuYW1lLG5ldyBCTVNlZ21lbnRTdGFydEV2ZW50KG5hbWUsdGhpcy5maXJzdEZyYW1lLHRoaXMudG90YWxGcmFtZXMpKTticmVhaztjYXNlJ2Rlc3Ryb3knOnRoaXMudHJpZ2dlckV2ZW50KG5hbWUsbmV3IEJNRGVzdHJveUV2ZW50KG5hbWUsdGhpcykpO2JyZWFrO2RlZmF1bHQ6dGhpcy50cmlnZ2VyRXZlbnQobmFtZSk7fX1pZihuYW1lPT09J2VudGVyRnJhbWUnJiZ0aGlzLm9uRW50ZXJGcmFtZSl7dGhpcy5vbkVudGVyRnJhbWUuY2FsbCh0aGlzLG5ldyBCTUVudGVyRnJhbWVFdmVudChuYW1lLHRoaXMuY3VycmVudEZyYW1lLHRoaXMudG90YWxGcmFtZXMsdGhpcy5mcmFtZU11bHQpKTt9aWYobmFtZT09PSdsb29wQ29tcGxldGUnJiZ0aGlzLm9uTG9vcENvbXBsZXRlKXt0aGlzLm9uTG9vcENvbXBsZXRlLmNhbGwodGhpcyxuZXcgQk1Db21wbGV0ZUxvb3BFdmVudChuYW1lLHRoaXMubG9vcCx0aGlzLnBsYXlDb3VudCx0aGlzLmZyYW1lTXVsdCkpO31pZihuYW1lPT09J2NvbXBsZXRlJyYmdGhpcy5vbkNvbXBsZXRlKXt0aGlzLm9uQ29tcGxldGUuY2FsbCh0aGlzLG5ldyBCTUNvbXBsZXRlRXZlbnQobmFtZSx0aGlzLmZyYW1lTXVsdCkpO31pZihuYW1lPT09J3NlZ21lbnRTdGFydCcmJnRoaXMub25TZWdtZW50U3RhcnQpe3RoaXMub25TZWdtZW50U3RhcnQuY2FsbCh0aGlzLG5ldyBCTVNlZ21lbnRTdGFydEV2ZW50KG5hbWUsdGhpcy5maXJzdEZyYW1lLHRoaXMudG90YWxGcmFtZXMpKTt9aWYobmFtZT09PSdkZXN0cm95JyYmdGhpcy5vbkRlc3Ryb3kpe3RoaXMub25EZXN0cm95LmNhbGwodGhpcyxuZXcgQk1EZXN0cm95RXZlbnQobmFtZSx0aGlzKSk7fX07QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlclJlbmRlckZyYW1lRXJyb3I9ZnVuY3Rpb24obmF0aXZlRXJyb3Ipe3ZhciBlcnJvcj1uZXcgQk1SZW5kZXJGcmFtZUVycm9yRXZlbnQobmF0aXZlRXJyb3IsdGhpcy5jdXJyZW50RnJhbWUpO3RoaXMudHJpZ2dlckV2ZW50KCdlcnJvcicsZXJyb3IpO2lmKHRoaXMub25FcnJvcil7dGhpcy5vbkVycm9yLmNhbGwodGhpcyxlcnJvcik7fX07QW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlckNvbmZpZ0Vycm9yPWZ1bmN0aW9uKG5hdGl2ZUVycm9yKXt2YXIgZXJyb3I9bmV3IEJNQ29uZmlnRXJyb3JFdmVudChuYXRpdmVFcnJvcix0aGlzLmN1cnJlbnRGcmFtZSk7dGhpcy50cmlnZ2VyRXZlbnQoJ2Vycm9yJyxlcnJvcik7aWYodGhpcy5vbkVycm9yKXt0aGlzLm9uRXJyb3IuY2FsbCh0aGlzLGVycm9yKTt9fTsvKiBnbG9iYWwgQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UsIGV4cHJlc3Npb25zUGx1Z2luOiB3cml0YWJsZSAqLyAvKiBleHBvcnRlZCBleHByZXNzaW9uc1BsdWdpbiAqL3ZhciBFeHByZXNzaW9ucz1mdW5jdGlvbigpe3ZhciBvYj17fTtvYi5pbml0RXhwcmVzc2lvbnM9aW5pdEV4cHJlc3Npb25zO2Z1bmN0aW9uIGluaXRFeHByZXNzaW9ucyhhbmltYXRpb24pe3ZhciBzdGFja0NvdW50PTA7dmFyIHJlZ2lzdGVycz1bXTtmdW5jdGlvbiBwdXNoRXhwcmVzc2lvbigpe3N0YWNrQ291bnQrPTE7fWZ1bmN0aW9uIHBvcEV4cHJlc3Npb24oKXtzdGFja0NvdW50LT0xO2lmKHN0YWNrQ291bnQ9PT0wKXtyZWxlYXNlSW5zdGFuY2VzKCk7fX1mdW5jdGlvbiByZWdpc3RlckV4cHJlc3Npb25Qcm9wZXJ0eShleHByZXNzaW9uKXtpZihyZWdpc3RlcnMuaW5kZXhPZihleHByZXNzaW9uKT09PS0xKXtyZWdpc3RlcnMucHVzaChleHByZXNzaW9uKTt9fWZ1bmN0aW9uIHJlbGVhc2VJbnN0YW5jZXMoKXt2YXIgaTt2YXIgbGVuPXJlZ2lzdGVycy5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtyZWdpc3RlcnNbaV0ucmVsZWFzZSgpO31yZWdpc3RlcnMubGVuZ3RoPTA7fWFuaW1hdGlvbi5yZW5kZXJlci5jb21wSW50ZXJmYWNlPUNvbXBFeHByZXNzaW9uSW50ZXJmYWNlKGFuaW1hdGlvbi5yZW5kZXJlcik7YW5pbWF0aW9uLnJlbmRlcmVyLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5yZWdpc3RlckNvbXBvc2l0aW9uKGFuaW1hdGlvbi5yZW5kZXJlcik7YW5pbWF0aW9uLnJlbmRlcmVyLmdsb2JhbERhdGEucHVzaEV4cHJlc3Npb249cHVzaEV4cHJlc3Npb247YW5pbWF0aW9uLnJlbmRlcmVyLmdsb2JhbERhdGEucG9wRXhwcmVzc2lvbj1wb3BFeHByZXNzaW9uO2FuaW1hdGlvbi5yZW5kZXJlci5nbG9iYWxEYXRhLnJlZ2lzdGVyRXhwcmVzc2lvblByb3BlcnR5PXJlZ2lzdGVyRXhwcmVzc2lvblByb3BlcnR5O31yZXR1cm4gb2I7fSgpO2V4cHJlc3Npb25zUGx1Z2luPUV4cHJlc3Npb25zOy8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSwgbm8tdW51c2VkLXZhcnMgKi8gLyogZ2xvYmFsIEJNTWF0aCwgQmV6aWVyRmFjdG9yeSwgY3JlYXRlVHlwZWRBcnJheSwgZGVnVG9SYWRzLCBzaGFwZVBvb2wgKi92YXIgRXhwcmVzc2lvbk1hbmFnZXI9ZnVuY3Rpb24oKXsndXNlIHN0cmljdCc7dmFyIG9iPXt9O3ZhciBNYXRoPUJNTWF0aDt2YXIgd2luZG93PW51bGw7dmFyIGRvY3VtZW50PW51bGw7ZnVuY3Rpb24gJGJtX2lzSW5zdGFuY2VPZkFycmF5KGFycil7cmV0dXJuIGFyci5jb25zdHJ1Y3Rvcj09PUFycmF5fHxhcnIuY29uc3RydWN0b3I9PT1GbG9hdDMyQXJyYXk7fWZ1bmN0aW9uIGlzTnVtZXJhYmxlKHRPZlYsdil7cmV0dXJuIHRPZlY9PT0nbnVtYmVyJ3x8dE9mVj09PSdib29sZWFuJ3x8dE9mVj09PSdzdHJpbmcnfHx2IGluc3RhbmNlb2YgTnVtYmVyO31mdW5jdGlvbiAkYm1fbmVnKGEpe3ZhciB0T2ZBPXR5cGVvZiBhO2lmKHRPZkE9PT0nbnVtYmVyJ3x8dE9mQT09PSdib29sZWFuJ3x8YSBpbnN0YW5jZW9mIE51bWJlcil7cmV0dXJuIC1hO31pZigkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkpe3ZhciBpO3ZhciBsZW5BPWEubGVuZ3RoO3ZhciByZXRBcnI9W107Zm9yKGk9MDtpPGxlbkE7aSs9MSl7cmV0QXJyW2ldPS1hW2ldO31yZXR1cm4gcmV0QXJyO31pZihhLnByb3BUeXBlKXtyZXR1cm4gYS52O31yZXR1cm4gLWE7fXZhciBlYXNlSW5CZXo9QmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcoMC4zMzMsMCwwLjgzMywwLjgzMywnZWFzZUluJykuZ2V0O3ZhciBlYXNlT3V0QmV6PUJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKDAuMTY3LDAuMTY3LDAuNjY3LDEsJ2Vhc2VPdXQnKS5nZXQ7dmFyIGVhc2VJbk91dEJlej1CZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZygwLjMzLDAsMC42NjcsMSwnZWFzZUluT3V0JykuZ2V0O2Z1bmN0aW9uIHN1bShhLGIpe3ZhciB0T2ZBPXR5cGVvZiBhO3ZhciB0T2ZCPXR5cGVvZiBiO2lmKHRPZkE9PT0nc3RyaW5nJ3x8dE9mQj09PSdzdHJpbmcnKXtyZXR1cm4gYStiO31pZihpc051bWVyYWJsZSh0T2ZBLGEpJiZpc051bWVyYWJsZSh0T2ZCLGIpKXtyZXR1cm4gYStiO31pZigkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkmJmlzTnVtZXJhYmxlKHRPZkIsYikpe2E9YS5zbGljZSgwKTthWzBdKz1iO3JldHVybiBhO31pZihpc051bWVyYWJsZSh0T2ZBLGEpJiYkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpe2I9Yi5zbGljZSgwKTtiWzBdPWErYlswXTtyZXR1cm4gYjt9aWYoJGJtX2lzSW5zdGFuY2VPZkFycmF5KGEpJiYkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpe3ZhciBpPTA7dmFyIGxlbkE9YS5sZW5ndGg7dmFyIGxlbkI9Yi5sZW5ndGg7dmFyIHJldEFycj1bXTt3aGlsZShpPGxlbkF8fGk8bGVuQil7aWYoKHR5cGVvZiBhW2ldPT09J251bWJlcid8fGFbaV1pbnN0YW5jZW9mIE51bWJlcikmJih0eXBlb2YgYltpXT09PSdudW1iZXInfHxiW2ldaW5zdGFuY2VvZiBOdW1iZXIpKXtyZXRBcnJbaV09YVtpXStiW2ldO31lbHNlIHtyZXRBcnJbaV09YltpXT09PXVuZGVmaW5lZD9hW2ldOmFbaV18fGJbaV07fWkrPTE7fXJldHVybiByZXRBcnI7fXJldHVybiAwO312YXIgYWRkPXN1bTtmdW5jdGlvbiBzdWIoYSxiKXt2YXIgdE9mQT10eXBlb2YgYTt2YXIgdE9mQj10eXBlb2YgYjtpZihpc051bWVyYWJsZSh0T2ZBLGEpJiZpc051bWVyYWJsZSh0T2ZCLGIpKXtpZih0T2ZBPT09J3N0cmluZycpe2E9cGFyc2VJbnQoYSwxMCk7fWlmKHRPZkI9PT0nc3RyaW5nJyl7Yj1wYXJzZUludChiLDEwKTt9cmV0dXJuIGEtYjt9aWYoJGJtX2lzSW5zdGFuY2VPZkFycmF5KGEpJiZpc051bWVyYWJsZSh0T2ZCLGIpKXthPWEuc2xpY2UoMCk7YVswXS09YjtyZXR1cm4gYTt9aWYoaXNOdW1lcmFibGUodE9mQSxhKSYmJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKXtiPWIuc2xpY2UoMCk7YlswXT1hLWJbMF07cmV0dXJuIGI7fWlmKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSYmJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKXt2YXIgaT0wO3ZhciBsZW5BPWEubGVuZ3RoO3ZhciBsZW5CPWIubGVuZ3RoO3ZhciByZXRBcnI9W107d2hpbGUoaTxsZW5BfHxpPGxlbkIpe2lmKCh0eXBlb2YgYVtpXT09PSdudW1iZXInfHxhW2ldaW5zdGFuY2VvZiBOdW1iZXIpJiYodHlwZW9mIGJbaV09PT0nbnVtYmVyJ3x8YltpXWluc3RhbmNlb2YgTnVtYmVyKSl7cmV0QXJyW2ldPWFbaV0tYltpXTt9ZWxzZSB7cmV0QXJyW2ldPWJbaV09PT11bmRlZmluZWQ/YVtpXTphW2ldfHxiW2ldO31pKz0xO31yZXR1cm4gcmV0QXJyO31yZXR1cm4gMDt9ZnVuY3Rpb24gbXVsKGEsYil7dmFyIHRPZkE9dHlwZW9mIGE7dmFyIHRPZkI9dHlwZW9mIGI7dmFyIGFycjtpZihpc051bWVyYWJsZSh0T2ZBLGEpJiZpc051bWVyYWJsZSh0T2ZCLGIpKXtyZXR1cm4gYSpiO312YXIgaTt2YXIgbGVuO2lmKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSYmaXNOdW1lcmFibGUodE9mQixiKSl7bGVuPWEubGVuZ3RoO2Fycj1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxsZW4pO2ZvcihpPTA7aTxsZW47aSs9MSl7YXJyW2ldPWFbaV0qYjt9cmV0dXJuIGFycjt9aWYoaXNOdW1lcmFibGUodE9mQSxhKSYmJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKXtsZW49Yi5sZW5ndGg7YXJyPWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGxlbik7Zm9yKGk9MDtpPGxlbjtpKz0xKXthcnJbaV09YSpiW2ldO31yZXR1cm4gYXJyO31yZXR1cm4gMDt9ZnVuY3Rpb24gZGl2KGEsYil7dmFyIHRPZkE9dHlwZW9mIGE7dmFyIHRPZkI9dHlwZW9mIGI7dmFyIGFycjtpZihpc051bWVyYWJsZSh0T2ZBLGEpJiZpc051bWVyYWJsZSh0T2ZCLGIpKXtyZXR1cm4gYS9iO312YXIgaTt2YXIgbGVuO2lmKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSYmaXNOdW1lcmFibGUodE9mQixiKSl7bGVuPWEubGVuZ3RoO2Fycj1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxsZW4pO2ZvcihpPTA7aTxsZW47aSs9MSl7YXJyW2ldPWFbaV0vYjt9cmV0dXJuIGFycjt9aWYoaXNOdW1lcmFibGUodE9mQSxhKSYmJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKXtsZW49Yi5sZW5ndGg7YXJyPWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGxlbik7Zm9yKGk9MDtpPGxlbjtpKz0xKXthcnJbaV09YS9iW2ldO31yZXR1cm4gYXJyO31yZXR1cm4gMDt9ZnVuY3Rpb24gbW9kKGEsYil7aWYodHlwZW9mIGE9PT0nc3RyaW5nJyl7YT1wYXJzZUludChhLDEwKTt9aWYodHlwZW9mIGI9PT0nc3RyaW5nJyl7Yj1wYXJzZUludChiLDEwKTt9cmV0dXJuIGElYjt9dmFyICRibV9zdW09c3VtO3ZhciAkYm1fc3ViPXN1Yjt2YXIgJGJtX211bD1tdWw7dmFyICRibV9kaXY9ZGl2O3ZhciAkYm1fbW9kPW1vZDtmdW5jdGlvbiBjbGFtcChudW0sbWluLG1heCl7aWYobWluPm1heCl7dmFyIG1tPW1heDttYXg9bWluO21pbj1tbTt9cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG51bSxtaW4pLG1heCk7fWZ1bmN0aW9uIHJhZGlhbnNUb0RlZ3JlZXModmFsKXtyZXR1cm4gdmFsL2RlZ1RvUmFkczt9dmFyIHJhZGlhbnNfdG9fZGVncmVlcz1yYWRpYW5zVG9EZWdyZWVzO2Z1bmN0aW9uIGRlZ3JlZXNUb1JhZGlhbnModmFsKXtyZXR1cm4gdmFsKmRlZ1RvUmFkczt9dmFyIGRlZ3JlZXNfdG9fcmFkaWFucz1yYWRpYW5zVG9EZWdyZWVzO3ZhciBoZWxwZXJMZW5ndGhBcnJheT1bMCwwLDAsMCwwLDBdO2Z1bmN0aW9uIGxlbmd0aChhcnIxLGFycjIpe2lmKHR5cGVvZiBhcnIxPT09J251bWJlcid8fGFycjEgaW5zdGFuY2VvZiBOdW1iZXIpe2FycjI9YXJyMnx8MDtyZXR1cm4gTWF0aC5hYnMoYXJyMS1hcnIyKTt9aWYoIWFycjIpe2FycjI9aGVscGVyTGVuZ3RoQXJyYXk7fXZhciBpO3ZhciBsZW49TWF0aC5taW4oYXJyMS5sZW5ndGgsYXJyMi5sZW5ndGgpO3ZhciBhZGRlZExlbmd0aD0wO2ZvcihpPTA7aTxsZW47aSs9MSl7YWRkZWRMZW5ndGgrPU1hdGgucG93KGFycjJbaV0tYXJyMVtpXSwyKTt9cmV0dXJuIE1hdGguc3FydChhZGRlZExlbmd0aCk7fWZ1bmN0aW9uIG5vcm1hbGl6ZSh2ZWMpe3JldHVybiBkaXYodmVjLGxlbmd0aCh2ZWMpKTt9ZnVuY3Rpb24gcmdiVG9Ic2wodmFsKXt2YXIgcj12YWxbMF07dmFyIGc9dmFsWzFdO3ZhciBiPXZhbFsyXTt2YXIgbWF4PU1hdGgubWF4KHIsZyxiKTt2YXIgbWluPU1hdGgubWluKHIsZyxiKTt2YXIgaDt2YXIgczt2YXIgbD0obWF4K21pbikvMjtpZihtYXg9PT1taW4pe2g9MDsvLyBhY2hyb21hdGljXG5zPTA7Ly8gYWNocm9tYXRpY1xufWVsc2Uge3ZhciBkPW1heC1taW47cz1sPjAuNT9kLygyLW1heC1taW4pOmQvKG1heCttaW4pO3N3aXRjaChtYXgpe2Nhc2UgcjpoPShnLWIpL2QrKGc8Yj82OjApO2JyZWFrO2Nhc2UgZzpoPShiLXIpL2QrMjticmVhaztjYXNlIGI6aD0oci1nKS9kKzQ7YnJlYWs7ZGVmYXVsdDpicmVhazt9aC89Njt9cmV0dXJuIFtoLHMsbCx2YWxbM11dO31mdW5jdGlvbiBodWUycmdiKHAscSx0KXtpZih0PDApdCs9MTtpZih0PjEpdC09MTtpZih0PDEvNilyZXR1cm4gcCsocS1wKSo2KnQ7aWYodDwxLzIpcmV0dXJuIHE7aWYodDwyLzMpcmV0dXJuIHArKHEtcCkqKDIvMy10KSo2O3JldHVybiBwO31mdW5jdGlvbiBoc2xUb1JnYih2YWwpe3ZhciBoPXZhbFswXTt2YXIgcz12YWxbMV07dmFyIGw9dmFsWzJdO3ZhciByO3ZhciBnO3ZhciBiO2lmKHM9PT0wKXtyPWw7Ly8gYWNocm9tYXRpY1xuYj1sOy8vIGFjaHJvbWF0aWNcbmc9bDsvLyBhY2hyb21hdGljXG59ZWxzZSB7dmFyIHE9bDwwLjU/bCooMStzKTpsK3MtbCpzO3ZhciBwPTIqbC1xO3I9aHVlMnJnYihwLHEsaCsxLzMpO2c9aHVlMnJnYihwLHEsaCk7Yj1odWUycmdiKHAscSxoLTEvMyk7fXJldHVybiBbcixnLGIsdmFsWzNdXTt9ZnVuY3Rpb24gbGluZWFyKHQsdE1pbix0TWF4LHZhbHVlMSx2YWx1ZTIpe2lmKHZhbHVlMT09PXVuZGVmaW5lZHx8dmFsdWUyPT09dW5kZWZpbmVkKXt2YWx1ZTE9dE1pbjt2YWx1ZTI9dE1heDt0TWluPTA7dE1heD0xO31pZih0TWF4PHRNaW4pe3ZhciBfdE1pbj10TWF4O3RNYXg9dE1pbjt0TWluPV90TWluO31pZih0PD10TWluKXtyZXR1cm4gdmFsdWUxO31pZih0Pj10TWF4KXtyZXR1cm4gdmFsdWUyO312YXIgcGVyYz10TWF4PT09dE1pbj8wOih0LXRNaW4pLyh0TWF4LXRNaW4pO2lmKCF2YWx1ZTEubGVuZ3RoKXtyZXR1cm4gdmFsdWUxKyh2YWx1ZTItdmFsdWUxKSpwZXJjO312YXIgaTt2YXIgbGVuPXZhbHVlMS5sZW5ndGg7dmFyIGFycj1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxsZW4pO2ZvcihpPTA7aTxsZW47aSs9MSl7YXJyW2ldPXZhbHVlMVtpXSsodmFsdWUyW2ldLXZhbHVlMVtpXSkqcGVyYzt9cmV0dXJuIGFycjt9ZnVuY3Rpb24gcmFuZG9tKG1pbixtYXgpe2lmKG1heD09PXVuZGVmaW5lZCl7aWYobWluPT09dW5kZWZpbmVkKXttaW49MDttYXg9MTt9ZWxzZSB7bWF4PW1pbjttaW49dW5kZWZpbmVkO319aWYobWF4Lmxlbmd0aCl7dmFyIGk7dmFyIGxlbj1tYXgubGVuZ3RoO2lmKCFtaW4pe21pbj1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxsZW4pO312YXIgYXJyPWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGxlbik7dmFyIHJuZD1CTU1hdGgucmFuZG9tKCk7Zm9yKGk9MDtpPGxlbjtpKz0xKXthcnJbaV09bWluW2ldK3JuZCoobWF4W2ldLW1pbltpXSk7fXJldHVybiBhcnI7fWlmKG1pbj09PXVuZGVmaW5lZCl7bWluPTA7fXZhciBybmRtPUJNTWF0aC5yYW5kb20oKTtyZXR1cm4gbWluK3JuZG0qKG1heC1taW4pO31mdW5jdGlvbiBjcmVhdGVQYXRoKHBvaW50cyxpblRhbmdlbnRzLG91dFRhbmdlbnRzLGNsb3NlZCl7dmFyIGk7dmFyIGxlbj1wb2ludHMubGVuZ3RoO3ZhciBwYXRoPXNoYXBlUG9vbC5uZXdFbGVtZW50KCk7cGF0aC5zZXRQYXRoRGF0YSghIWNsb3NlZCxsZW4pO3ZhciBhcnJQbGFjZWhvbGRlcj1bMCwwXTt2YXIgaW5WZXJ0ZXhQb2ludDt2YXIgb3V0VmVydGV4UG9pbnQ7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpblZlcnRleFBvaW50PWluVGFuZ2VudHMmJmluVGFuZ2VudHNbaV0/aW5UYW5nZW50c1tpXTphcnJQbGFjZWhvbGRlcjtvdXRWZXJ0ZXhQb2ludD1vdXRUYW5nZW50cyYmb3V0VGFuZ2VudHNbaV0/b3V0VGFuZ2VudHNbaV06YXJyUGxhY2Vob2xkZXI7cGF0aC5zZXRUcmlwbGVBdChwb2ludHNbaV1bMF0scG9pbnRzW2ldWzFdLG91dFZlcnRleFBvaW50WzBdK3BvaW50c1tpXVswXSxvdXRWZXJ0ZXhQb2ludFsxXStwb2ludHNbaV1bMV0saW5WZXJ0ZXhQb2ludFswXStwb2ludHNbaV1bMF0saW5WZXJ0ZXhQb2ludFsxXStwb2ludHNbaV1bMV0saSx0cnVlKTt9cmV0dXJuIHBhdGg7fWZ1bmN0aW9uIGluaXRpYXRlRXhwcmVzc2lvbihlbGVtLGRhdGEscHJvcGVydHkpe3ZhciB2YWw9ZGF0YS54O3ZhciBuZWVkc1ZlbG9jaXR5PS92ZWxvY2l0eSg/IVtcXHdcXGRdKS8udGVzdCh2YWwpO3ZhciBfbmVlZHNSYW5kb209dmFsLmluZGV4T2YoJ3JhbmRvbScpIT09LTE7dmFyIGVsZW1UeXBlPWVsZW0uZGF0YS50eTt2YXIgdHJhbnNmb3JtO3ZhciAkYm1fdHJhbnNmb3JtO3ZhciBjb250ZW50O3ZhciBlZmZlY3Q7dmFyIHRoaXNQcm9wZXJ0eT1wcm9wZXJ0eTt0aGlzUHJvcGVydHkudmFsdWVBdFRpbWU9dGhpc1Byb3BlcnR5LmdldFZhbHVlQXRUaW1lO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzUHJvcGVydHksJ3ZhbHVlJyx7Z2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiB0aGlzUHJvcGVydHkudjt9fSk7ZWxlbS5jb21wLmZyYW1lRHVyYXRpb249MS9lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7ZWxlbS5jb21wLmRpc3BsYXlTdGFydFRpbWU9MDt2YXIgaW5Qb2ludD1lbGVtLmRhdGEuaXAvZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO3ZhciBvdXRQb2ludD1lbGVtLmRhdGEub3AvZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO3ZhciB3aWR0aD1lbGVtLmRhdGEuc3c/ZWxlbS5kYXRhLnN3OjA7dmFyIGhlaWdodD1lbGVtLmRhdGEuc2g/ZWxlbS5kYXRhLnNoOjA7dmFyIG5hbWU9ZWxlbS5kYXRhLm5tO3ZhciBsb29wSW47dmFyIGxvb3BfaW47dmFyIGxvb3BPdXQ7dmFyIGxvb3Bfb3V0O3ZhciBzbW9vdGg7dmFyIHRvV29ybGQ7dmFyIGZyb21Xb3JsZDt2YXIgZnJvbUNvbXA7dmFyIHRvQ29tcDt2YXIgZnJvbUNvbXBUb1N1cmZhY2U7dmFyIHBvc2l0aW9uO3ZhciByb3RhdGlvbjt2YXIgYW5jaG9yUG9pbnQ7dmFyIHNjYWxlO3ZhciB0aGlzTGF5ZXI7dmFyIHRoaXNDb21wO3ZhciBtYXNrO3ZhciB2YWx1ZUF0VGltZTt2YXIgdmVsb2NpdHlBdFRpbWU7dmFyIHNjb3BlZF9ibV9ydDt2YXIgZXhwcmVzc2lvbl9mdW5jdGlvbj1ldmFsKCdbZnVuY3Rpb24gX2V4cHJlc3Npb25fZnVuY3Rpb24oKXsnK3ZhbCsnO3Njb3BlZF9ibV9ydD0kYm1fcnR9XScpWzBdOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxudmFyIG51bUtleXM9cHJvcGVydHkua2Y/ZGF0YS5rLmxlbmd0aDowO3ZhciBhY3RpdmU9IXRoaXMuZGF0YXx8dGhpcy5kYXRhLmhkIT09dHJ1ZTt2YXIgd2lnZ2xlPWZ1bmN0aW9uIHdpZ2dsZShmcmVxLGFtcCl7dmFyIGlXaWdnbGU7dmFyIGo7dmFyIGxlbldpZ2dsZT10aGlzLnB2Lmxlbmd0aD90aGlzLnB2Lmxlbmd0aDoxO3ZhciBhZGRlZEFtcHM9Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsbGVuV2lnZ2xlKTtmcmVxPTU7dmFyIGl0ZXJhdGlvbnM9TWF0aC5mbG9vcih0aW1lKmZyZXEpO2lXaWdnbGU9MDtqPTA7d2hpbGUoaVdpZ2dsZTxpdGVyYXRpb25zKXsvLyB2YXIgcm5kID0gQk1NYXRoLnJhbmRvbSgpO1xuZm9yKGo9MDtqPGxlbldpZ2dsZTtqKz0xKXthZGRlZEFtcHNbal0rPS1hbXArYW1wKjIqQk1NYXRoLnJhbmRvbSgpOy8vIGFkZGVkQW1wc1tqXSArPSAtYW1wICsgYW1wKjIqcm5kO1xufWlXaWdnbGUrPTE7fS8vIHZhciBybmQyID0gQk1NYXRoLnJhbmRvbSgpO1xudmFyIHBlcmlvZHM9dGltZSpmcmVxO3ZhciBwZXJjPXBlcmlvZHMtTWF0aC5mbG9vcihwZXJpb2RzKTt2YXIgYXJyPWNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLGxlbldpZ2dsZSk7aWYobGVuV2lnZ2xlPjEpe2ZvcihqPTA7ajxsZW5XaWdnbGU7ais9MSl7YXJyW2pdPXRoaXMucHZbal0rYWRkZWRBbXBzW2pdKygtYW1wK2FtcCoyKkJNTWF0aC5yYW5kb20oKSkqcGVyYzsvLyBhcnJbal0gPSB0aGlzLnB2W2pdICsgYWRkZWRBbXBzW2pdICsgKC1hbXAgKyBhbXAqMipybmQpKnBlcmM7XG4vLyBhcnJbaV0gPSB0aGlzLnB2W2ldICsgYWRkZWRBbXAgKyBhbXAxKnBlcmMgKyBhbXAyKigxLXBlcmMpO1xufXJldHVybiBhcnI7fXJldHVybiB0aGlzLnB2K2FkZGVkQW1wc1swXSsoLWFtcCthbXAqMipCTU1hdGgucmFuZG9tKCkpKnBlcmM7fS5iaW5kKHRoaXMpO2lmKHRoaXNQcm9wZXJ0eS5sb29wSW4pe2xvb3BJbj10aGlzUHJvcGVydHkubG9vcEluLmJpbmQodGhpc1Byb3BlcnR5KTtsb29wX2luPWxvb3BJbjt9aWYodGhpc1Byb3BlcnR5Lmxvb3BPdXQpe2xvb3BPdXQ9dGhpc1Byb3BlcnR5Lmxvb3BPdXQuYmluZCh0aGlzUHJvcGVydHkpO2xvb3Bfb3V0PWxvb3BPdXQ7fWlmKHRoaXNQcm9wZXJ0eS5zbW9vdGgpe3Ntb290aD10aGlzUHJvcGVydHkuc21vb3RoLmJpbmQodGhpc1Byb3BlcnR5KTt9ZnVuY3Rpb24gbG9vcEluRHVyYXRpb24odHlwZSxkdXJhdGlvbil7cmV0dXJuIGxvb3BJbih0eXBlLGR1cmF0aW9uLHRydWUpO31mdW5jdGlvbiBsb29wT3V0RHVyYXRpb24odHlwZSxkdXJhdGlvbil7cmV0dXJuIGxvb3BPdXQodHlwZSxkdXJhdGlvbix0cnVlKTt9aWYodGhpcy5nZXRWYWx1ZUF0VGltZSl7dmFsdWVBdFRpbWU9dGhpcy5nZXRWYWx1ZUF0VGltZS5iaW5kKHRoaXMpO31pZih0aGlzLmdldFZlbG9jaXR5QXRUaW1lKXt2ZWxvY2l0eUF0VGltZT10aGlzLmdldFZlbG9jaXR5QXRUaW1lLmJpbmQodGhpcyk7fXZhciBjb21wPWVsZW0uY29tcC5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UuYmluZChlbGVtLmNvbXAuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlKTtmdW5jdGlvbiBsb29rQXQoZWxlbTEsZWxlbTIpe3ZhciBmVmVjPVtlbGVtMlswXS1lbGVtMVswXSxlbGVtMlsxXS1lbGVtMVsxXSxlbGVtMlsyXS1lbGVtMVsyXV07dmFyIHBpdGNoPU1hdGguYXRhbjIoZlZlY1swXSxNYXRoLnNxcnQoZlZlY1sxXSpmVmVjWzFdK2ZWZWNbMl0qZlZlY1syXSkpL2RlZ1RvUmFkczt2YXIgeWF3PS1NYXRoLmF0YW4yKGZWZWNbMV0sZlZlY1syXSkvZGVnVG9SYWRzO3JldHVybiBbeWF3LHBpdGNoLDBdO31mdW5jdGlvbiBlYXNlT3V0KHQsdE1pbix0TWF4LHZhbDEsdmFsMil7cmV0dXJuIGFwcGx5RWFzZShlYXNlT3V0QmV6LHQsdE1pbix0TWF4LHZhbDEsdmFsMik7fWZ1bmN0aW9uIGVhc2VJbih0LHRNaW4sdE1heCx2YWwxLHZhbDIpe3JldHVybiBhcHBseUVhc2UoZWFzZUluQmV6LHQsdE1pbix0TWF4LHZhbDEsdmFsMik7fWZ1bmN0aW9uIGVhc2UodCx0TWluLHRNYXgsdmFsMSx2YWwyKXtyZXR1cm4gYXBwbHlFYXNlKGVhc2VJbk91dEJleix0LHRNaW4sdE1heCx2YWwxLHZhbDIpO31mdW5jdGlvbiBhcHBseUVhc2UoZm4sdCx0TWluLHRNYXgsdmFsMSx2YWwyKXtpZih2YWwxPT09dW5kZWZpbmVkKXt2YWwxPXRNaW47dmFsMj10TWF4O31lbHNlIHt0PSh0LXRNaW4pLyh0TWF4LXRNaW4pO31pZih0PjEpe3Q9MTt9ZWxzZSBpZih0PDApe3Q9MDt9dmFyIG11bHQ9Zm4odCk7aWYoJGJtX2lzSW5zdGFuY2VPZkFycmF5KHZhbDEpKXt2YXIgaUtleTt2YXIgbGVuS2V5PXZhbDEubGVuZ3RoO3ZhciBhcnI9Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsbGVuS2V5KTtmb3IoaUtleT0wO2lLZXk8bGVuS2V5O2lLZXkrPTEpe2FycltpS2V5XT0odmFsMltpS2V5XS12YWwxW2lLZXldKSptdWx0K3ZhbDFbaUtleV07fXJldHVybiBhcnI7fXJldHVybiAodmFsMi12YWwxKSptdWx0K3ZhbDE7fWZ1bmN0aW9uIG5lYXJlc3RLZXkodGltZSl7dmFyIGlLZXk7dmFyIGxlbktleT1kYXRhLmsubGVuZ3RoO3ZhciBpbmRleDt2YXIga2V5VGltZTtpZighZGF0YS5rLmxlbmd0aHx8dHlwZW9mIGRhdGEua1swXT09PSdudW1iZXInKXtpbmRleD0wO2tleVRpbWU9MDt9ZWxzZSB7aW5kZXg9LTE7dGltZSo9ZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO2lmKHRpbWU8ZGF0YS5rWzBdLnQpe2luZGV4PTE7a2V5VGltZT1kYXRhLmtbMF0udDt9ZWxzZSB7Zm9yKGlLZXk9MDtpS2V5PGxlbktleS0xO2lLZXkrPTEpe2lmKHRpbWU9PT1kYXRhLmtbaUtleV0udCl7aW5kZXg9aUtleSsxO2tleVRpbWU9ZGF0YS5rW2lLZXldLnQ7YnJlYWs7fWVsc2UgaWYodGltZT5kYXRhLmtbaUtleV0udCYmdGltZTxkYXRhLmtbaUtleSsxXS50KXtpZih0aW1lLWRhdGEua1tpS2V5XS50PmRhdGEua1tpS2V5KzFdLnQtdGltZSl7aW5kZXg9aUtleSsyO2tleVRpbWU9ZGF0YS5rW2lLZXkrMV0udDt9ZWxzZSB7aW5kZXg9aUtleSsxO2tleVRpbWU9ZGF0YS5rW2lLZXldLnQ7fWJyZWFrO319aWYoaW5kZXg9PT0tMSl7aW5kZXg9aUtleSsxO2tleVRpbWU9ZGF0YS5rW2lLZXldLnQ7fX19dmFyIG9iS2V5PXt9O29iS2V5LmluZGV4PWluZGV4O29iS2V5LnRpbWU9a2V5VGltZS9lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7cmV0dXJuIG9iS2V5O31mdW5jdGlvbiBrZXkoaW5kKXt2YXIgb2JLZXk7dmFyIGlLZXk7dmFyIGxlbktleTtpZighZGF0YS5rLmxlbmd0aHx8dHlwZW9mIGRhdGEua1swXT09PSdudW1iZXInKXt0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm9wZXJ0eSBoYXMgbm8ga2V5ZnJhbWUgYXQgaW5kZXggJytpbmQpO31pbmQtPTE7b2JLZXk9e3RpbWU6ZGF0YS5rW2luZF0udC9lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsdmFsdWU6W119O3ZhciBhcnI9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEua1tpbmRdLCdzJyk/ZGF0YS5rW2luZF0uczpkYXRhLmtbaW5kLTFdLmU7bGVuS2V5PWFyci5sZW5ndGg7Zm9yKGlLZXk9MDtpS2V5PGxlbktleTtpS2V5Kz0xKXtvYktleVtpS2V5XT1hcnJbaUtleV07b2JLZXkudmFsdWVbaUtleV09YXJyW2lLZXldO31yZXR1cm4gb2JLZXk7fWZ1bmN0aW9uIGZyYW1lc1RvVGltZShmcmFtZXMsZnBzKXtpZighZnBzKXtmcHM9ZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO31yZXR1cm4gZnJhbWVzL2Zwczt9ZnVuY3Rpb24gdGltZVRvRnJhbWVzKHQsZnBzKXtpZighdCYmdCE9PTApe3Q9dGltZTt9aWYoIWZwcyl7ZnBzPWVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTt9cmV0dXJuIHQqZnBzO31mdW5jdGlvbiBzZWVkUmFuZG9tKHNlZWQpe0JNTWF0aC5zZWVkcmFuZG9tKHJhbmRTZWVkK3NlZWQpO31mdW5jdGlvbiBzb3VyY2VSZWN0QXRUaW1lKCl7cmV0dXJuIGVsZW0uc291cmNlUmVjdEF0VGltZSgpO31mdW5jdGlvbiBzdWJzdHJpbmcoaW5pdCxlbmQpe2lmKHR5cGVvZiB2YWx1ZT09PSdzdHJpbmcnKXtpZihlbmQ9PT11bmRlZmluZWQpe3JldHVybiB2YWx1ZS5zdWJzdHJpbmcoaW5pdCk7fXJldHVybiB2YWx1ZS5zdWJzdHJpbmcoaW5pdCxlbmQpO31yZXR1cm4gJyc7fWZ1bmN0aW9uIHN1YnN0cihpbml0LGVuZCl7aWYodHlwZW9mIHZhbHVlPT09J3N0cmluZycpe2lmKGVuZD09PXVuZGVmaW5lZCl7cmV0dXJuIHZhbHVlLnN1YnN0cihpbml0KTt9cmV0dXJuIHZhbHVlLnN1YnN0cihpbml0LGVuZCk7fXJldHVybiAnJzt9ZnVuY3Rpb24gcG9zdGVyaXplVGltZShmcmFtZXNQZXJTZWNvbmQpe3RpbWU9ZnJhbWVzUGVyU2Vjb25kPT09MD8wOk1hdGguZmxvb3IodGltZSpmcmFtZXNQZXJTZWNvbmQpL2ZyYW1lc1BlclNlY29uZDt2YWx1ZT12YWx1ZUF0VGltZSh0aW1lKTt9dmFyIHRpbWU7dmFyIHZlbG9jaXR5O3ZhciB2YWx1ZTt2YXIgdGV4dDt2YXIgdGV4dEluZGV4O3ZhciB0ZXh0VG90YWw7dmFyIHNlbGVjdG9yVmFsdWU7dmFyIGluZGV4PWVsZW0uZGF0YS5pbmQ7dmFyIGhhc1BhcmVudD0hIShlbGVtLmhpZXJhcmNoeSYmZWxlbS5oaWVyYXJjaHkubGVuZ3RoKTt2YXIgcGFyZW50O3ZhciByYW5kU2VlZD1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAwMDAwMCk7dmFyIGdsb2JhbERhdGE9ZWxlbS5nbG9iYWxEYXRhO2Z1bmN0aW9uIGV4ZWN1dGVFeHByZXNzaW9uKF92YWx1ZSl7Ly8gZ2xvYmFsRGF0YS5wdXNoRXhwcmVzc2lvbigpO1xudmFsdWU9X3ZhbHVlO2lmKF9uZWVkc1JhbmRvbSl7c2VlZFJhbmRvbShyYW5kU2VlZCk7fWlmKHRoaXMuZnJhbWVFeHByZXNzaW9uSWQ9PT1lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCYmdGhpcy5wcm9wVHlwZSE9PSd0ZXh0U2VsZWN0b3InKXtyZXR1cm4gdmFsdWU7fWlmKHRoaXMucHJvcFR5cGU9PT0ndGV4dFNlbGVjdG9yJyl7dGV4dEluZGV4PXRoaXMudGV4dEluZGV4O3RleHRUb3RhbD10aGlzLnRleHRUb3RhbDtzZWxlY3RvclZhbHVlPXRoaXMuc2VsZWN0b3JWYWx1ZTt9aWYoIXRoaXNMYXllcil7dGV4dD1lbGVtLmxheWVySW50ZXJmYWNlLnRleHQ7dGhpc0xheWVyPWVsZW0ubGF5ZXJJbnRlcmZhY2U7dGhpc0NvbXA9ZWxlbS5jb21wLmNvbXBJbnRlcmZhY2U7dG9Xb3JsZD10aGlzTGF5ZXIudG9Xb3JsZC5iaW5kKHRoaXNMYXllcik7ZnJvbVdvcmxkPXRoaXNMYXllci5mcm9tV29ybGQuYmluZCh0aGlzTGF5ZXIpO2Zyb21Db21wPXRoaXNMYXllci5mcm9tQ29tcC5iaW5kKHRoaXNMYXllcik7dG9Db21wPXRoaXNMYXllci50b0NvbXAuYmluZCh0aGlzTGF5ZXIpO21hc2s9dGhpc0xheWVyLm1hc2s/dGhpc0xheWVyLm1hc2suYmluZCh0aGlzTGF5ZXIpOm51bGw7ZnJvbUNvbXBUb1N1cmZhY2U9ZnJvbUNvbXA7fWlmKCF0cmFuc2Zvcm0pe3RyYW5zZm9ybT1lbGVtLmxheWVySW50ZXJmYWNlKCdBREJFIFRyYW5zZm9ybSBHcm91cCcpOyRibV90cmFuc2Zvcm09dHJhbnNmb3JtO2lmKHRyYW5zZm9ybSl7YW5jaG9yUG9pbnQ9dHJhbnNmb3JtLmFuY2hvclBvaW50Oy8qIHBvc2l0aW9uID0gdHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gdHJhbnNmb3JtLnJvdGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlID0gdHJhbnNmb3JtLnNjYWxlOyAqL319aWYoZWxlbVR5cGU9PT00JiYhY29udGVudCl7Y29udGVudD10aGlzTGF5ZXIoJ0FEQkUgUm9vdCBWZWN0b3JzIEdyb3VwJyk7fWlmKCFlZmZlY3Qpe2VmZmVjdD10aGlzTGF5ZXIoNCk7fWhhc1BhcmVudD0hIShlbGVtLmhpZXJhcmNoeSYmZWxlbS5oaWVyYXJjaHkubGVuZ3RoKTtpZihoYXNQYXJlbnQmJiFwYXJlbnQpe3BhcmVudD1lbGVtLmhpZXJhcmNoeVswXS5sYXllckludGVyZmFjZTt9dGltZT10aGlzLmNvbXAucmVuZGVyZWRGcmFtZS90aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7aWYobmVlZHNWZWxvY2l0eSl7dmVsb2NpdHk9dmVsb2NpdHlBdFRpbWUodGltZSk7fWV4cHJlc3Npb25fZnVuY3Rpb24oKTt0aGlzLmZyYW1lRXhwcmVzc2lvbklkPWVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkOy8vIFRPRE86IENoZWNrIGlmIGl0J3MgcG9zc2libGUgdG8gcmV0dXJuIG9uIFNoYXBlSW50ZXJmYWNlIHRoZSAudiB2YWx1ZVxuaWYoc2NvcGVkX2JtX3J0LnByb3BUeXBlPT09J3NoYXBlJyl7c2NvcGVkX2JtX3J0PXNjb3BlZF9ibV9ydC52O30vLyBnbG9iYWxEYXRhLnBvcEV4cHJlc3Npb24oKTtcbnJldHVybiBzY29wZWRfYm1fcnQ7fXJldHVybiBleGVjdXRlRXhwcmVzc2lvbjt9b2IuaW5pdGlhdGVFeHByZXNzaW9uPWluaXRpYXRlRXhwcmVzc2lvbjtyZXR1cm4gb2I7fSgpOy8qIGdsb2JhbCBFeHByZXNzaW9uTWFuYWdlciwgY3JlYXRlVHlwZWRBcnJheSAqLyAvKiBleHBvcnRlZCBleHByZXNzaW9uSGVscGVycyAqL3ZhciBleHByZXNzaW9uSGVscGVycz1mdW5jdGlvbigpe2Z1bmN0aW9uIHNlYXJjaEV4cHJlc3Npb25zKGVsZW0sZGF0YSxwcm9wKXtpZihkYXRhLngpe3Byb3Auaz10cnVlO3Byb3AueD10cnVlO3Byb3AuaW5pdGlhdGVFeHByZXNzaW9uPUV4cHJlc3Npb25NYW5hZ2VyLmluaXRpYXRlRXhwcmVzc2lvbjtwcm9wLmVmZmVjdHNTZXF1ZW5jZS5wdXNoKHByb3AuaW5pdGlhdGVFeHByZXNzaW9uKGVsZW0sZGF0YSxwcm9wKS5iaW5kKHByb3ApKTt9fWZ1bmN0aW9uIGdldFZhbHVlQXRUaW1lKGZyYW1lTnVtKXtmcmFtZU51bSo9dGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVSYXRlO2ZyYW1lTnVtLT10aGlzLm9mZnNldFRpbWU7aWYoZnJhbWVOdW0hPT10aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RGcmFtZSl7dGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0SW5kZXg9dGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0RnJhbWU8ZnJhbWVOdW0/dGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0SW5kZXg6MDt0aGlzLl9jYWNoaW5nQXRUaW1lLnZhbHVlPXRoaXMuaW50ZXJwb2xhdGVWYWx1ZShmcmFtZU51bSx0aGlzLl9jYWNoaW5nQXRUaW1lKTt0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RGcmFtZT1mcmFtZU51bTt9cmV0dXJuIHRoaXMuX2NhY2hpbmdBdFRpbWUudmFsdWU7fWZ1bmN0aW9uIGdldFNwZWVkQXRUaW1lKGZyYW1lTnVtKXt2YXIgZGVsdGE9LTAuMDE7dmFyIHYxPXRoaXMuZ2V0VmFsdWVBdFRpbWUoZnJhbWVOdW0pO3ZhciB2Mj10aGlzLmdldFZhbHVlQXRUaW1lKGZyYW1lTnVtK2RlbHRhKTt2YXIgc3BlZWQ9MDtpZih2MS5sZW5ndGgpe3ZhciBpO2ZvcihpPTA7aTx2MS5sZW5ndGg7aSs9MSl7c3BlZWQrPU1hdGgucG93KHYyW2ldLXYxW2ldLDIpO31zcGVlZD1NYXRoLnNxcnQoc3BlZWQpKjEwMDt9ZWxzZSB7c3BlZWQ9MDt9cmV0dXJuIHNwZWVkO31mdW5jdGlvbiBnZXRWZWxvY2l0eUF0VGltZShmcmFtZU51bSl7aWYodGhpcy52ZWwhPT11bmRlZmluZWQpe3JldHVybiB0aGlzLnZlbDt9dmFyIGRlbHRhPS0wLjAwMTsvLyBmcmFtZU51bSArPSB0aGlzLmVsZW0uZGF0YS5zdDtcbnZhciB2MT10aGlzLmdldFZhbHVlQXRUaW1lKGZyYW1lTnVtKTt2YXIgdjI9dGhpcy5nZXRWYWx1ZUF0VGltZShmcmFtZU51bStkZWx0YSk7dmFyIHZlbG9jaXR5O2lmKHYxLmxlbmd0aCl7dmVsb2NpdHk9Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsdjEubGVuZ3RoKTt2YXIgaTtmb3IoaT0wO2k8djEubGVuZ3RoO2krPTEpey8vIHJlbW92aW5nIGZyYW1lUmF0ZVxuLy8gaWYgbmVlZGVkLCBkb24ndCBhZGQgaXQgaGVyZVxuLy8gdmVsb2NpdHlbaV0gPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZVJhdGUqKCh2MltpXSAtIHYxW2ldKS9kZWx0YSk7XG52ZWxvY2l0eVtpXT0odjJbaV0tdjFbaV0pL2RlbHRhO319ZWxzZSB7dmVsb2NpdHk9KHYyLXYxKS9kZWx0YTt9cmV0dXJuIHZlbG9jaXR5O31mdW5jdGlvbiBnZXRTdGF0aWNWYWx1ZUF0VGltZSgpe3JldHVybiB0aGlzLnB2O31mdW5jdGlvbiBzZXRHcm91cFByb3BlcnR5KHByb3BlcnR5R3JvdXApe3RoaXMucHJvcGVydHlHcm91cD1wcm9wZXJ0eUdyb3VwO31yZXR1cm4ge3NlYXJjaEV4cHJlc3Npb25zOnNlYXJjaEV4cHJlc3Npb25zLGdldFNwZWVkQXRUaW1lOmdldFNwZWVkQXRUaW1lLGdldFZlbG9jaXR5QXRUaW1lOmdldFZlbG9jaXR5QXRUaW1lLGdldFZhbHVlQXRUaW1lOmdldFZhbHVlQXRUaW1lLGdldFN0YXRpY1ZhbHVlQXRUaW1lOmdldFN0YXRpY1ZhbHVlQXRUaW1lLHNldEdyb3VwUHJvcGVydHk6c2V0R3JvdXBQcm9wZXJ0eX07fSgpOy8qIGdsb2JhbCBjcmVhdGVUeXBlZEFycmF5LCBNYXRyaXgsIFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeSwgZXhwcmVzc2lvbkhlbHBlcnMsIFByb3BlcnR5RmFjdG9yeSwgZXhwcmVzc2lvbkhlbHBlcnMsXHJcbmluaXRpYWxEZWZhdWx0RnJhbWUsIHNoYXBlUG9vbCwgU2hhcGVQcm9wZXJ0eUZhY3RvcnksIGJleiwgZXh0ZW5kUHJvdG90eXBlLCBFeHByZXNzaW9uTWFuYWdlciwgY3JlYXRlU2l6ZWRBcnJheSAqLyhmdW5jdGlvbiBhZGRQcm9wZXJ0eURlY29yYXRvcigpe2Z1bmN0aW9uIGxvb3BPdXQodHlwZSxkdXJhdGlvbixkdXJhdGlvbkZsYWcpe2lmKCF0aGlzLmt8fCF0aGlzLmtleWZyYW1lcyl7cmV0dXJuIHRoaXMucHY7fXR5cGU9dHlwZT90eXBlLnRvTG93ZXJDYXNlKCk6Jyc7dmFyIGN1cnJlbnRGcmFtZT10aGlzLmNvbXAucmVuZGVyZWRGcmFtZTt2YXIga2V5ZnJhbWVzPXRoaXMua2V5ZnJhbWVzO3ZhciBsYXN0S2V5RnJhbWU9a2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGgtMV0udDtpZihjdXJyZW50RnJhbWU8PWxhc3RLZXlGcmFtZSl7cmV0dXJuIHRoaXMucHY7fXZhciBjeWNsZUR1cmF0aW9uO3ZhciBmaXJzdEtleUZyYW1lO2lmKCFkdXJhdGlvbkZsYWcpe2lmKCFkdXJhdGlvbnx8ZHVyYXRpb24+a2V5ZnJhbWVzLmxlbmd0aC0xKXtkdXJhdGlvbj1rZXlmcmFtZXMubGVuZ3RoLTE7fWZpcnN0S2V5RnJhbWU9a2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGgtMS1kdXJhdGlvbl0udDtjeWNsZUR1cmF0aW9uPWxhc3RLZXlGcmFtZS1maXJzdEtleUZyYW1lO31lbHNlIHtpZighZHVyYXRpb24pe2N5Y2xlRHVyYXRpb249TWF0aC5tYXgoMCxsYXN0S2V5RnJhbWUtdGhpcy5lbGVtLmRhdGEuaXApO31lbHNlIHtjeWNsZUR1cmF0aW9uPU1hdGguYWJzKGxhc3RLZXlGcmFtZS10aGlzLmVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSpkdXJhdGlvbik7fWZpcnN0S2V5RnJhbWU9bGFzdEtleUZyYW1lLWN5Y2xlRHVyYXRpb247fXZhciBpO3ZhciBsZW47dmFyIHJldDtpZih0eXBlPT09J3Bpbmdwb25nJyl7dmFyIGl0ZXJhdGlvbnM9TWF0aC5mbG9vcigoY3VycmVudEZyYW1lLWZpcnN0S2V5RnJhbWUpL2N5Y2xlRHVyYXRpb24pO2lmKGl0ZXJhdGlvbnMlMiE9PTApe3JldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKChjeWNsZUR1cmF0aW9uLShjdXJyZW50RnJhbWUtZmlyc3RLZXlGcmFtZSklY3ljbGVEdXJhdGlvbitmaXJzdEtleUZyYW1lKS90aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsMCk7Ly8gZXNsaW50LWRpc2FibGUtbGluZVxufX1lbHNlIGlmKHR5cGU9PT0nb2Zmc2V0Jyl7dmFyIGluaXRWPXRoaXMuZ2V0VmFsdWVBdFRpbWUoZmlyc3RLZXlGcmFtZS90aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsMCk7dmFyIGVuZFY9dGhpcy5nZXRWYWx1ZUF0VGltZShsYXN0S2V5RnJhbWUvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLDApO3ZhciBjdXJyZW50PXRoaXMuZ2V0VmFsdWVBdFRpbWUoKChjdXJyZW50RnJhbWUtZmlyc3RLZXlGcmFtZSklY3ljbGVEdXJhdGlvbitmaXJzdEtleUZyYW1lKS90aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsMCk7Ly8gZXNsaW50LWRpc2FibGUtbGluZVxudmFyIHJlcGVhdHM9TWF0aC5mbG9vcigoY3VycmVudEZyYW1lLWZpcnN0S2V5RnJhbWUpL2N5Y2xlRHVyYXRpb24pO2lmKHRoaXMucHYubGVuZ3RoKXtyZXQ9bmV3IEFycmF5KGluaXRWLmxlbmd0aCk7bGVuPXJldC5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXtyZXRbaV09KGVuZFZbaV0taW5pdFZbaV0pKnJlcGVhdHMrY3VycmVudFtpXTt9cmV0dXJuIHJldDt9cmV0dXJuIChlbmRWLWluaXRWKSpyZXBlYXRzK2N1cnJlbnQ7fWVsc2UgaWYodHlwZT09PSdjb250aW51ZScpe3ZhciBsYXN0VmFsdWU9dGhpcy5nZXRWYWx1ZUF0VGltZShsYXN0S2V5RnJhbWUvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLDApO3ZhciBuZXh0TGFzdFZhbHVlPXRoaXMuZ2V0VmFsdWVBdFRpbWUoKGxhc3RLZXlGcmFtZS0wLjAwMSkvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLDApO2lmKHRoaXMucHYubGVuZ3RoKXtyZXQ9bmV3IEFycmF5KGxhc3RWYWx1ZS5sZW5ndGgpO2xlbj1yZXQubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7cmV0W2ldPWxhc3RWYWx1ZVtpXSsobGFzdFZhbHVlW2ldLW5leHRMYXN0VmFsdWVbaV0pKigoY3VycmVudEZyYW1lLWxhc3RLZXlGcmFtZSkvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlKS8wLjAwMDU7Ly8gZXNsaW50LWRpc2FibGUtbGluZVxufXJldHVybiByZXQ7fXJldHVybiBsYXN0VmFsdWUrKGxhc3RWYWx1ZS1uZXh0TGFzdFZhbHVlKSooKGN1cnJlbnRGcmFtZS1sYXN0S2V5RnJhbWUpLzAuMDAxKTt9cmV0dXJuIHRoaXMuZ2V0VmFsdWVBdFRpbWUoKChjdXJyZW50RnJhbWUtZmlyc3RLZXlGcmFtZSklY3ljbGVEdXJhdGlvbitmaXJzdEtleUZyYW1lKS90aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsMCk7Ly8gZXNsaW50LWRpc2FibGUtbGluZVxufWZ1bmN0aW9uIGxvb3BJbih0eXBlLGR1cmF0aW9uLGR1cmF0aW9uRmxhZyl7aWYoIXRoaXMuayl7cmV0dXJuIHRoaXMucHY7fXR5cGU9dHlwZT90eXBlLnRvTG93ZXJDYXNlKCk6Jyc7dmFyIGN1cnJlbnRGcmFtZT10aGlzLmNvbXAucmVuZGVyZWRGcmFtZTt2YXIga2V5ZnJhbWVzPXRoaXMua2V5ZnJhbWVzO3ZhciBmaXJzdEtleUZyYW1lPWtleWZyYW1lc1swXS50O2lmKGN1cnJlbnRGcmFtZT49Zmlyc3RLZXlGcmFtZSl7cmV0dXJuIHRoaXMucHY7fXZhciBjeWNsZUR1cmF0aW9uO3ZhciBsYXN0S2V5RnJhbWU7aWYoIWR1cmF0aW9uRmxhZyl7aWYoIWR1cmF0aW9ufHxkdXJhdGlvbj5rZXlmcmFtZXMubGVuZ3RoLTEpe2R1cmF0aW9uPWtleWZyYW1lcy5sZW5ndGgtMTt9bGFzdEtleUZyYW1lPWtleWZyYW1lc1tkdXJhdGlvbl0udDtjeWNsZUR1cmF0aW9uPWxhc3RLZXlGcmFtZS1maXJzdEtleUZyYW1lO31lbHNlIHtpZighZHVyYXRpb24pe2N5Y2xlRHVyYXRpb249TWF0aC5tYXgoMCx0aGlzLmVsZW0uZGF0YS5vcC1maXJzdEtleUZyYW1lKTt9ZWxzZSB7Y3ljbGVEdXJhdGlvbj1NYXRoLmFicyh0aGlzLmVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSpkdXJhdGlvbik7fWxhc3RLZXlGcmFtZT1maXJzdEtleUZyYW1lK2N5Y2xlRHVyYXRpb247fXZhciBpO3ZhciBsZW47dmFyIHJldDtpZih0eXBlPT09J3Bpbmdwb25nJyl7dmFyIGl0ZXJhdGlvbnM9TWF0aC5mbG9vcigoZmlyc3RLZXlGcmFtZS1jdXJyZW50RnJhbWUpL2N5Y2xlRHVyYXRpb24pO2lmKGl0ZXJhdGlvbnMlMj09PTApe3JldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKCgoZmlyc3RLZXlGcmFtZS1jdXJyZW50RnJhbWUpJWN5Y2xlRHVyYXRpb24rZmlyc3RLZXlGcmFtZSkvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLDApOy8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn19ZWxzZSBpZih0eXBlPT09J29mZnNldCcpe3ZhciBpbml0Vj10aGlzLmdldFZhbHVlQXRUaW1lKGZpcnN0S2V5RnJhbWUvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLDApO3ZhciBlbmRWPXRoaXMuZ2V0VmFsdWVBdFRpbWUobGFzdEtleUZyYW1lL3RoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwwKTt2YXIgY3VycmVudD10aGlzLmdldFZhbHVlQXRUaW1lKChjeWNsZUR1cmF0aW9uLShmaXJzdEtleUZyYW1lLWN1cnJlbnRGcmFtZSklY3ljbGVEdXJhdGlvbitmaXJzdEtleUZyYW1lKS90aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsMCk7dmFyIHJlcGVhdHM9TWF0aC5mbG9vcigoZmlyc3RLZXlGcmFtZS1jdXJyZW50RnJhbWUpL2N5Y2xlRHVyYXRpb24pKzE7aWYodGhpcy5wdi5sZW5ndGgpe3JldD1uZXcgQXJyYXkoaW5pdFYubGVuZ3RoKTtsZW49cmV0Lmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3JldFtpXT1jdXJyZW50W2ldLShlbmRWW2ldLWluaXRWW2ldKSpyZXBlYXRzO31yZXR1cm4gcmV0O31yZXR1cm4gY3VycmVudC0oZW5kVi1pbml0VikqcmVwZWF0czt9ZWxzZSBpZih0eXBlPT09J2NvbnRpbnVlJyl7dmFyIGZpcnN0VmFsdWU9dGhpcy5nZXRWYWx1ZUF0VGltZShmaXJzdEtleUZyYW1lL3RoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwwKTt2YXIgbmV4dEZpcnN0VmFsdWU9dGhpcy5nZXRWYWx1ZUF0VGltZSgoZmlyc3RLZXlGcmFtZSswLjAwMSkvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLDApO2lmKHRoaXMucHYubGVuZ3RoKXtyZXQ9bmV3IEFycmF5KGZpcnN0VmFsdWUubGVuZ3RoKTtsZW49cmV0Lmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe3JldFtpXT1maXJzdFZhbHVlW2ldKyhmaXJzdFZhbHVlW2ldLW5leHRGaXJzdFZhbHVlW2ldKSooZmlyc3RLZXlGcmFtZS1jdXJyZW50RnJhbWUpLzAuMDAxO31yZXR1cm4gcmV0O31yZXR1cm4gZmlyc3RWYWx1ZSsoZmlyc3RWYWx1ZS1uZXh0Rmlyc3RWYWx1ZSkqKGZpcnN0S2V5RnJhbWUtY3VycmVudEZyYW1lKS8wLjAwMTt9cmV0dXJuIHRoaXMuZ2V0VmFsdWVBdFRpbWUoKGN5Y2xlRHVyYXRpb24tKChmaXJzdEtleUZyYW1lLWN1cnJlbnRGcmFtZSklY3ljbGVEdXJhdGlvbitmaXJzdEtleUZyYW1lKSkvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLDApOy8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn1mdW5jdGlvbiBzbW9vdGgod2lkdGgsc2FtcGxlcyl7aWYoIXRoaXMuayl7cmV0dXJuIHRoaXMucHY7fXdpZHRoPSh3aWR0aHx8MC40KSowLjU7c2FtcGxlcz1NYXRoLmZsb29yKHNhbXBsZXN8fDUpO2lmKHNhbXBsZXM8PTEpe3JldHVybiB0aGlzLnB2O312YXIgY3VycmVudFRpbWU9dGhpcy5jb21wLnJlbmRlcmVkRnJhbWUvdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO3ZhciBpbml0RnJhbWU9Y3VycmVudFRpbWUtd2lkdGg7dmFyIGVuZEZyYW1lPWN1cnJlbnRUaW1lK3dpZHRoO3ZhciBzYW1wbGVGcmVxdWVuY3k9c2FtcGxlcz4xPyhlbmRGcmFtZS1pbml0RnJhbWUpLyhzYW1wbGVzLTEpOjE7dmFyIGk9MDt2YXIgaj0wO3ZhciB2YWx1ZTtpZih0aGlzLnB2Lmxlbmd0aCl7dmFsdWU9Y3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsdGhpcy5wdi5sZW5ndGgpO31lbHNlIHt2YWx1ZT0wO312YXIgc2FtcGxlVmFsdWU7d2hpbGUoaTxzYW1wbGVzKXtzYW1wbGVWYWx1ZT10aGlzLmdldFZhbHVlQXRUaW1lKGluaXRGcmFtZStpKnNhbXBsZUZyZXF1ZW5jeSk7aWYodGhpcy5wdi5sZW5ndGgpe2ZvcihqPTA7ajx0aGlzLnB2Lmxlbmd0aDtqKz0xKXt2YWx1ZVtqXSs9c2FtcGxlVmFsdWVbal07fX1lbHNlIHt2YWx1ZSs9c2FtcGxlVmFsdWU7fWkrPTE7fWlmKHRoaXMucHYubGVuZ3RoKXtmb3Ioaj0wO2o8dGhpcy5wdi5sZW5ndGg7ais9MSl7dmFsdWVbal0vPXNhbXBsZXM7fX1lbHNlIHt2YWx1ZS89c2FtcGxlczt9cmV0dXJuIHZhbHVlO31mdW5jdGlvbiBnZXRUcmFuc2Zvcm1WYWx1ZUF0VGltZSh0aW1lKXtpZighdGhpcy5fdHJhbnNmb3JtQ2FjaGluZ0F0VGltZSl7dGhpcy5fdHJhbnNmb3JtQ2FjaGluZ0F0VGltZT17djpuZXcgTWF0cml4KCl9O30vLy8gL1xudmFyIG1hdHJpeD10aGlzLl90cmFuc2Zvcm1DYWNoaW5nQXRUaW1lLnY7bWF0cml4LmNsb25lRnJvbVByb3BzKHRoaXMucHJlLnByb3BzKTtpZih0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnM8MSl7dmFyIGFuY2hvcj10aGlzLmEuZ2V0VmFsdWVBdFRpbWUodGltZSk7bWF0cml4LnRyYW5zbGF0ZSgtYW5jaG9yWzBdKnRoaXMuYS5tdWx0LC1hbmNob3JbMV0qdGhpcy5hLm11bHQsYW5jaG9yWzJdKnRoaXMuYS5tdWx0KTt9aWYodGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zPDIpe3ZhciBzY2FsZT10aGlzLnMuZ2V0VmFsdWVBdFRpbWUodGltZSk7bWF0cml4LnNjYWxlKHNjYWxlWzBdKnRoaXMucy5tdWx0LHNjYWxlWzFdKnRoaXMucy5tdWx0LHNjYWxlWzJdKnRoaXMucy5tdWx0KTt9aWYodGhpcy5zayYmdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zPDMpe3ZhciBza2V3PXRoaXMuc2suZ2V0VmFsdWVBdFRpbWUodGltZSk7dmFyIHNrZXdBeGlzPXRoaXMuc2EuZ2V0VmFsdWVBdFRpbWUodGltZSk7bWF0cml4LnNrZXdGcm9tQXhpcygtc2tldyp0aGlzLnNrLm11bHQsc2tld0F4aXMqdGhpcy5zYS5tdWx0KTt9aWYodGhpcy5yJiZ0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnM8NCl7dmFyIHJvdGF0aW9uPXRoaXMuci5nZXRWYWx1ZUF0VGltZSh0aW1lKTttYXRyaXgucm90YXRlKC1yb3RhdGlvbip0aGlzLnIubXVsdCk7fWVsc2UgaWYoIXRoaXMuciYmdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zPDQpe3ZhciByb3RhdGlvblo9dGhpcy5yei5nZXRWYWx1ZUF0VGltZSh0aW1lKTt2YXIgcm90YXRpb25ZPXRoaXMucnkuZ2V0VmFsdWVBdFRpbWUodGltZSk7dmFyIHJvdGF0aW9uWD10aGlzLnJ4LmdldFZhbHVlQXRUaW1lKHRpbWUpO3ZhciBvcmllbnRhdGlvbj10aGlzLm9yLmdldFZhbHVlQXRUaW1lKHRpbWUpO21hdHJpeC5yb3RhdGVaKC1yb3RhdGlvbloqdGhpcy5yei5tdWx0KS5yb3RhdGVZKHJvdGF0aW9uWSp0aGlzLnJ5Lm11bHQpLnJvdGF0ZVgocm90YXRpb25YKnRoaXMucngubXVsdCkucm90YXRlWigtb3JpZW50YXRpb25bMl0qdGhpcy5vci5tdWx0KS5yb3RhdGVZKG9yaWVudGF0aW9uWzFdKnRoaXMub3IubXVsdCkucm90YXRlWChvcmllbnRhdGlvblswXSp0aGlzLm9yLm11bHQpO31pZih0aGlzLmRhdGEucCYmdGhpcy5kYXRhLnAucyl7dmFyIHBvc2l0aW9uWD10aGlzLnB4LmdldFZhbHVlQXRUaW1lKHRpbWUpO3ZhciBwb3NpdGlvblk9dGhpcy5weS5nZXRWYWx1ZUF0VGltZSh0aW1lKTtpZih0aGlzLmRhdGEucC56KXt2YXIgcG9zaXRpb25aPXRoaXMucHouZ2V0VmFsdWVBdFRpbWUodGltZSk7bWF0cml4LnRyYW5zbGF0ZShwb3NpdGlvblgqdGhpcy5weC5tdWx0LHBvc2l0aW9uWSp0aGlzLnB5Lm11bHQsLXBvc2l0aW9uWip0aGlzLnB6Lm11bHQpO31lbHNlIHttYXRyaXgudHJhbnNsYXRlKHBvc2l0aW9uWCp0aGlzLnB4Lm11bHQscG9zaXRpb25ZKnRoaXMucHkubXVsdCwwKTt9fWVsc2Uge3ZhciBwb3NpdGlvbj10aGlzLnAuZ2V0VmFsdWVBdFRpbWUodGltZSk7bWF0cml4LnRyYW5zbGF0ZShwb3NpdGlvblswXSp0aGlzLnAubXVsdCxwb3NpdGlvblsxXSp0aGlzLnAubXVsdCwtcG9zaXRpb25bMl0qdGhpcy5wLm11bHQpO31yZXR1cm4gbWF0cml4Oy8vLyAvXG59ZnVuY3Rpb24gZ2V0VHJhbnNmb3JtU3RhdGljVmFsdWVBdFRpbWUoKXtyZXR1cm4gdGhpcy52LmNsb25lKG5ldyBNYXRyaXgoKSk7fXZhciBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eT1UcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkuZ2V0VHJhbnNmb3JtUHJvcGVydHk7VHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5PWZ1bmN0aW9uKGVsZW0sZGF0YSxjb250YWluZXIpe3ZhciBwcm9wPWdldFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sZGF0YSxjb250YWluZXIpO2lmKHByb3AuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKXtwcm9wLmdldFZhbHVlQXRUaW1lPWdldFRyYW5zZm9ybVZhbHVlQXRUaW1lLmJpbmQocHJvcCk7fWVsc2Uge3Byb3AuZ2V0VmFsdWVBdFRpbWU9Z2V0VHJhbnNmb3JtU3RhdGljVmFsdWVBdFRpbWUuYmluZChwcm9wKTt9cHJvcC5zZXRHcm91cFByb3BlcnR5PWV4cHJlc3Npb25IZWxwZXJzLnNldEdyb3VwUHJvcGVydHk7cmV0dXJuIHByb3A7fTt2YXIgcHJvcGVydHlHZXRQcm9wPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wO1Byb3BlcnR5RmFjdG9yeS5nZXRQcm9wPWZ1bmN0aW9uKGVsZW0sZGF0YSx0eXBlLG11bHQsY29udGFpbmVyKXt2YXIgcHJvcD1wcm9wZXJ0eUdldFByb3AoZWxlbSxkYXRhLHR5cGUsbXVsdCxjb250YWluZXIpOy8vIHByb3AuZ2V0VmVsb2NpdHlBdFRpbWUgPSBnZXRWZWxvY2l0eUF0VGltZTtcbi8vIHByb3AubG9vcE91dCA9IGxvb3BPdXQ7XG4vLyBwcm9wLmxvb3BJbiA9IGxvb3BJbjtcbmlmKHByb3Aua2Ype3Byb3AuZ2V0VmFsdWVBdFRpbWU9ZXhwcmVzc2lvbkhlbHBlcnMuZ2V0VmFsdWVBdFRpbWUuYmluZChwcm9wKTt9ZWxzZSB7cHJvcC5nZXRWYWx1ZUF0VGltZT1leHByZXNzaW9uSGVscGVycy5nZXRTdGF0aWNWYWx1ZUF0VGltZS5iaW5kKHByb3ApO31wcm9wLnNldEdyb3VwUHJvcGVydHk9ZXhwcmVzc2lvbkhlbHBlcnMuc2V0R3JvdXBQcm9wZXJ0eTtwcm9wLmxvb3BPdXQ9bG9vcE91dDtwcm9wLmxvb3BJbj1sb29wSW47cHJvcC5zbW9vdGg9c21vb3RoO3Byb3AuZ2V0VmVsb2NpdHlBdFRpbWU9ZXhwcmVzc2lvbkhlbHBlcnMuZ2V0VmVsb2NpdHlBdFRpbWUuYmluZChwcm9wKTtwcm9wLmdldFNwZWVkQXRUaW1lPWV4cHJlc3Npb25IZWxwZXJzLmdldFNwZWVkQXRUaW1lLmJpbmQocHJvcCk7cHJvcC5udW1LZXlzPWRhdGEuYT09PTE/ZGF0YS5rLmxlbmd0aDowO3Byb3AucHJvcGVydHlJbmRleD1kYXRhLml4O3ZhciB2YWx1ZT0wO2lmKHR5cGUhPT0wKXt2YWx1ZT1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxkYXRhLmE9PT0xP2RhdGEua1swXS5zLmxlbmd0aDpkYXRhLmsubGVuZ3RoKTt9cHJvcC5fY2FjaGluZ0F0VGltZT17bGFzdEZyYW1lOmluaXRpYWxEZWZhdWx0RnJhbWUsbGFzdEluZGV4OjAsdmFsdWU6dmFsdWV9O2V4cHJlc3Npb25IZWxwZXJzLnNlYXJjaEV4cHJlc3Npb25zKGVsZW0sZGF0YSxwcm9wKTtpZihwcm9wLmspe2NvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkocHJvcCk7fXJldHVybiBwcm9wO307ZnVuY3Rpb24gZ2V0U2hhcGVWYWx1ZUF0VGltZShmcmFtZU51bSl7Ly8gRm9yIG5vdyB0aGlzIGNhY2hpbmcgb2JqZWN0IGlzIGNyZWF0ZWQgb25seSB3aGVuIG5lZWRlZCBpbnN0ZWFkIG9mIGNyZWF0aW5nIGl0IHdoZW4gdGhlIHNoYXBlIGlzIGluaXRpYWxpemVkLlxuaWYoIXRoaXMuX2NhY2hpbmdBdFRpbWUpe3RoaXMuX2NhY2hpbmdBdFRpbWU9e3NoYXBlVmFsdWU6c2hhcGVQb29sLmNsb25lKHRoaXMucHYpLGxhc3RJbmRleDowLGxhc3RUaW1lOmluaXRpYWxEZWZhdWx0RnJhbWV9O31mcmFtZU51bSo9dGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVSYXRlO2ZyYW1lTnVtLT10aGlzLm9mZnNldFRpbWU7aWYoZnJhbWVOdW0hPT10aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RUaW1lKXt0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RJbmRleD10aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RUaW1lPGZyYW1lTnVtP3RoaXMuX2NhY2hpbmcubGFzdEluZGV4OjA7dGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0VGltZT1mcmFtZU51bTt0aGlzLmludGVycG9sYXRlU2hhcGUoZnJhbWVOdW0sdGhpcy5fY2FjaGluZ0F0VGltZS5zaGFwZVZhbHVlLHRoaXMuX2NhY2hpbmdBdFRpbWUpO31yZXR1cm4gdGhpcy5fY2FjaGluZ0F0VGltZS5zaGFwZVZhbHVlO312YXIgU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb249U2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0Q29uc3RydWN0b3JGdW5jdGlvbigpO3ZhciBLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbj1TaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRLZXlmcmFtZWRDb25zdHJ1Y3RvckZ1bmN0aW9uKCk7ZnVuY3Rpb24gU2hhcGVFeHByZXNzaW9ucygpe31TaGFwZUV4cHJlc3Npb25zLnByb3RvdHlwZT17dmVydGljZXM6ZnVuY3Rpb24gdmVydGljZXMocHJvcCx0aW1lKXtpZih0aGlzLmspe3RoaXMuZ2V0VmFsdWUoKTt9dmFyIHNoYXBlUGF0aD10aGlzLnY7aWYodGltZSE9PXVuZGVmaW5lZCl7c2hhcGVQYXRoPXRoaXMuZ2V0VmFsdWVBdFRpbWUodGltZSwwKTt9dmFyIGk7dmFyIGxlbj1zaGFwZVBhdGguX2xlbmd0aDt2YXIgdmVydGljZXM9c2hhcGVQYXRoW3Byb3BdO3ZhciBwb2ludHM9c2hhcGVQYXRoLnY7dmFyIGFycj1jcmVhdGVTaXplZEFycmF5KGxlbik7Zm9yKGk9MDtpPGxlbjtpKz0xKXtpZihwcm9wPT09J2knfHxwcm9wPT09J28nKXthcnJbaV09W3ZlcnRpY2VzW2ldWzBdLXBvaW50c1tpXVswXSx2ZXJ0aWNlc1tpXVsxXS1wb2ludHNbaV1bMV1dO31lbHNlIHthcnJbaV09W3ZlcnRpY2VzW2ldWzBdLHZlcnRpY2VzW2ldWzFdXTt9fXJldHVybiBhcnI7fSxwb2ludHM6ZnVuY3Rpb24gcG9pbnRzKHRpbWUpe3JldHVybiB0aGlzLnZlcnRpY2VzKCd2Jyx0aW1lKTt9LGluVGFuZ2VudHM6ZnVuY3Rpb24gaW5UYW5nZW50cyh0aW1lKXtyZXR1cm4gdGhpcy52ZXJ0aWNlcygnaScsdGltZSk7fSxvdXRUYW5nZW50czpmdW5jdGlvbiBvdXRUYW5nZW50cyh0aW1lKXtyZXR1cm4gdGhpcy52ZXJ0aWNlcygnbycsdGltZSk7fSxpc0Nsb3NlZDpmdW5jdGlvbiBpc0Nsb3NlZCgpe3JldHVybiB0aGlzLnYuYzt9LHBvaW50T25QYXRoOmZ1bmN0aW9uIHBvaW50T25QYXRoKHBlcmMsdGltZSl7dmFyIHNoYXBlUGF0aD10aGlzLnY7aWYodGltZSE9PXVuZGVmaW5lZCl7c2hhcGVQYXRoPXRoaXMuZ2V0VmFsdWVBdFRpbWUodGltZSwwKTt9aWYoIXRoaXMuX3NlZ21lbnRzTGVuZ3RoKXt0aGlzLl9zZWdtZW50c0xlbmd0aD1iZXouZ2V0U2VnbWVudHNMZW5ndGgoc2hhcGVQYXRoKTt9dmFyIHNlZ21lbnRzTGVuZ3RoPXRoaXMuX3NlZ21lbnRzTGVuZ3RoO3ZhciBsZW5ndGhzPXNlZ21lbnRzTGVuZ3RoLmxlbmd0aHM7dmFyIGxlbmd0aFBvcz1zZWdtZW50c0xlbmd0aC50b3RhbExlbmd0aCpwZXJjO3ZhciBpPTA7dmFyIGxlbj1sZW5ndGhzLmxlbmd0aDt2YXIgYWNjdW11bGF0ZWRMZW5ndGg9MDt2YXIgcHQ7d2hpbGUoaTxsZW4pe2lmKGFjY3VtdWxhdGVkTGVuZ3RoK2xlbmd0aHNbaV0uYWRkZWRMZW5ndGg+bGVuZ3RoUG9zKXt2YXIgaW5pdEluZGV4PWk7dmFyIGVuZEluZGV4PXNoYXBlUGF0aC5jJiZpPT09bGVuLTE/MDppKzE7dmFyIHNlZ21lbnRQZXJjPShsZW5ndGhQb3MtYWNjdW11bGF0ZWRMZW5ndGgpL2xlbmd0aHNbaV0uYWRkZWRMZW5ndGg7cHQ9YmV6LmdldFBvaW50SW5TZWdtZW50KHNoYXBlUGF0aC52W2luaXRJbmRleF0sc2hhcGVQYXRoLnZbZW5kSW5kZXhdLHNoYXBlUGF0aC5vW2luaXRJbmRleF0sc2hhcGVQYXRoLmlbZW5kSW5kZXhdLHNlZ21lbnRQZXJjLGxlbmd0aHNbaV0pO2JyZWFrO31lbHNlIHthY2N1bXVsYXRlZExlbmd0aCs9bGVuZ3Roc1tpXS5hZGRlZExlbmd0aDt9aSs9MTt9aWYoIXB0KXtwdD1zaGFwZVBhdGguYz9bc2hhcGVQYXRoLnZbMF1bMF0sc2hhcGVQYXRoLnZbMF1bMV1dOltzaGFwZVBhdGgudltzaGFwZVBhdGguX2xlbmd0aC0xXVswXSxzaGFwZVBhdGgudltzaGFwZVBhdGguX2xlbmd0aC0xXVsxXV07fXJldHVybiBwdDt9LHZlY3Rvck9uUGF0aDpmdW5jdGlvbiB2ZWN0b3JPblBhdGgocGVyYyx0aW1lLHZlY3RvclR5cGUpey8vIHBlcmMgZG9lc24ndCB1c2UgdHJpcGxlIGVxdWFsaXR5IGJlY2F1c2UgaXQgY2FuIGJlIGEgTnVtYmVyIG9iamVjdCBhcyB3ZWxsIGFzIGEgcHJpbWl0aXZlLlxuaWYocGVyYz09MSl7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbnBlcmM9dGhpcy52LmM7fWVsc2UgaWYocGVyYz09MCl7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbnBlcmM9MC45OTk7fXZhciBwdDE9dGhpcy5wb2ludE9uUGF0aChwZXJjLHRpbWUpO3ZhciBwdDI9dGhpcy5wb2ludE9uUGF0aChwZXJjKzAuMDAxLHRpbWUpO3ZhciB4TGVuZ3RoPXB0MlswXS1wdDFbMF07dmFyIHlMZW5ndGg9cHQyWzFdLXB0MVsxXTt2YXIgbWFnbml0dWRlPU1hdGguc3FydChNYXRoLnBvdyh4TGVuZ3RoLDIpK01hdGgucG93KHlMZW5ndGgsMikpO2lmKG1hZ25pdHVkZT09PTApe3JldHVybiBbMCwwXTt9dmFyIHVuaXRWZWN0b3I9dmVjdG9yVHlwZT09PSd0YW5nZW50Jz9beExlbmd0aC9tYWduaXR1ZGUseUxlbmd0aC9tYWduaXR1ZGVdOlsteUxlbmd0aC9tYWduaXR1ZGUseExlbmd0aC9tYWduaXR1ZGVdO3JldHVybiB1bml0VmVjdG9yO30sdGFuZ2VudE9uUGF0aDpmdW5jdGlvbiB0YW5nZW50T25QYXRoKHBlcmMsdGltZSl7cmV0dXJuIHRoaXMudmVjdG9yT25QYXRoKHBlcmMsdGltZSwndGFuZ2VudCcpO30sbm9ybWFsT25QYXRoOmZ1bmN0aW9uIG5vcm1hbE9uUGF0aChwZXJjLHRpbWUpe3JldHVybiB0aGlzLnZlY3Rvck9uUGF0aChwZXJjLHRpbWUsJ25vcm1hbCcpO30sc2V0R3JvdXBQcm9wZXJ0eTpleHByZXNzaW9uSGVscGVycy5zZXRHcm91cFByb3BlcnR5LGdldFZhbHVlQXRUaW1lOmV4cHJlc3Npb25IZWxwZXJzLmdldFN0YXRpY1ZhbHVlQXRUaW1lfTtleHRlbmRQcm90b3R5cGUoW1NoYXBlRXhwcmVzc2lvbnNdLFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uKTtleHRlbmRQcm90b3R5cGUoW1NoYXBlRXhwcmVzc2lvbnNdLEtleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uKTtLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbi5wcm90b3R5cGUuZ2V0VmFsdWVBdFRpbWU9Z2V0U2hhcGVWYWx1ZUF0VGltZTtLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbi5wcm90b3R5cGUuaW5pdGlhdGVFeHByZXNzaW9uPUV4cHJlc3Npb25NYW5hZ2VyLmluaXRpYXRlRXhwcmVzc2lvbjt2YXIgcHJvcGVydHlHZXRTaGFwZVByb3A9U2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wO1NoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcD1mdW5jdGlvbihlbGVtLGRhdGEsdHlwZSxhcnIsdHJpbXMpe3ZhciBwcm9wPXByb3BlcnR5R2V0U2hhcGVQcm9wKGVsZW0sZGF0YSx0eXBlLGFycix0cmltcyk7cHJvcC5wcm9wZXJ0eUluZGV4PWRhdGEuaXg7cHJvcC5sb2NrPWZhbHNlO2lmKHR5cGU9PT0zKXtleHByZXNzaW9uSGVscGVycy5zZWFyY2hFeHByZXNzaW9ucyhlbGVtLGRhdGEucHQscHJvcCk7fWVsc2UgaWYodHlwZT09PTQpe2V4cHJlc3Npb25IZWxwZXJzLnNlYXJjaEV4cHJlc3Npb25zKGVsZW0sZGF0YS5rcyxwcm9wKTt9aWYocHJvcC5rKXtlbGVtLmFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTt9cmV0dXJuIHByb3A7fTt9KSgpOy8qIGdsb2JhbCBFeHByZXNzaW9uTWFuYWdlciwgVGV4dFByb3BlcnR5ICovKGZ1bmN0aW9uIGFkZERlY29yYXRvcigpe2Z1bmN0aW9uIHNlYXJjaEV4cHJlc3Npb25zKCl7aWYodGhpcy5kYXRhLmQueCl7dGhpcy5jYWxjdWxhdGVFeHByZXNzaW9uPUV4cHJlc3Npb25NYW5hZ2VyLmluaXRpYXRlRXhwcmVzc2lvbi5iaW5kKHRoaXMpKHRoaXMuZWxlbSx0aGlzLmRhdGEuZCx0aGlzKTt0aGlzLmFkZEVmZmVjdCh0aGlzLmdldEV4cHJlc3Npb25WYWx1ZS5iaW5kKHRoaXMpKTtyZXR1cm4gdHJ1ZTt9cmV0dXJuIG51bGw7fVRleHRQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0RXhwcmVzc2lvblZhbHVlPWZ1bmN0aW9uKGN1cnJlbnRWYWx1ZSx0ZXh0KXt2YXIgbmV3VmFsdWU9dGhpcy5jYWxjdWxhdGVFeHByZXNzaW9uKHRleHQpO2lmKGN1cnJlbnRWYWx1ZS50IT09bmV3VmFsdWUpe3ZhciBuZXdEYXRhPXt9O3RoaXMuY29weURhdGEobmV3RGF0YSxjdXJyZW50VmFsdWUpO25ld0RhdGEudD1uZXdWYWx1ZS50b1N0cmluZygpO25ld0RhdGEuX19jb21wbGV0ZT1mYWxzZTtyZXR1cm4gbmV3RGF0YTt9cmV0dXJuIGN1cnJlbnRWYWx1ZTt9O1RleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoUHJvcGVydHk9ZnVuY3Rpb24oKXt2YXIgaXNLZXlmcmFtZWQ9dGhpcy5zZWFyY2hLZXlmcmFtZXMoKTt2YXIgaGFzRXhwcmVzc2lvbnM9dGhpcy5zZWFyY2hFeHByZXNzaW9ucygpO3RoaXMua2Y9aXNLZXlmcmFtZWR8fGhhc0V4cHJlc3Npb25zO3JldHVybiB0aGlzLmtmO307VGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZWFyY2hFeHByZXNzaW9ucz1zZWFyY2hFeHByZXNzaW9uczt9KSgpOy8qIGdsb2JhbCBwcm9wZXJ0eUdyb3VwRmFjdG9yeSwgUHJvcGVydHlJbnRlcmZhY2UgKi8gLyogZXhwb3J0ZWQgU2hhcGVQYXRoSW50ZXJmYWNlICovdmFyIFNoYXBlUGF0aEludGVyZmFjZT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBwYXRoSW50ZXJmYWNlRmFjdG9yeShzaGFwZSx2aWV3LHByb3BlcnR5R3JvdXApe3ZhciBwcm9wPXZpZXcuc2g7ZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsKXtpZih2YWw9PT0nU2hhcGUnfHx2YWw9PT0nc2hhcGUnfHx2YWw9PT0nUGF0aCd8fHZhbD09PSdwYXRoJ3x8dmFsPT09J0FEQkUgVmVjdG9yIFNoYXBlJ3x8dmFsPT09Mil7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBhdGg7fXJldHVybiBudWxsO312YXIgX3Byb3BlcnR5R3JvdXA9cHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24scHJvcGVydHlHcm91cCk7cHJvcC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQYXRoJyxfcHJvcGVydHlHcm91cCkpO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLHtwYXRoOntnZXQ6ZnVuY3Rpb24gZ2V0KCl7aWYocHJvcC5rKXtwcm9wLmdldFZhbHVlKCk7fXJldHVybiBwcm9wO319LHNoYXBlOntnZXQ6ZnVuY3Rpb24gZ2V0KCl7aWYocHJvcC5rKXtwcm9wLmdldFZhbHVlKCk7fXJldHVybiBwcm9wO319LF9uYW1lOnt2YWx1ZTpzaGFwZS5ubX0saXg6e3ZhbHVlOnNoYXBlLml4fSxwcm9wZXJ0eUluZGV4Ont2YWx1ZTpzaGFwZS5peH0sbW46e3ZhbHVlOnNoYXBlLm1ufSxwcm9wZXJ0eUdyb3VwOnt2YWx1ZTpwcm9wZXJ0eUdyb3VwfX0pO3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbjt9O30oKTsvKiBleHBvcnRlZCBwcm9wZXJ0eUdyb3VwRmFjdG9yeSAqL3ZhciBwcm9wZXJ0eUdyb3VwRmFjdG9yeT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihpbnRlcmZhY2VGdW5jdGlvbixwYXJlbnRQcm9wZXJ0eUdyb3VwKXtyZXR1cm4gZnVuY3Rpb24odmFsKXt2YWw9dmFsPT09dW5kZWZpbmVkPzE6dmFsO2lmKHZhbDw9MCl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO31yZXR1cm4gcGFyZW50UHJvcGVydHlHcm91cCh2YWwtMSk7fTt9O30oKTsvKiBleHBvcnRlZCBQcm9wZXJ0eUludGVyZmFjZSAqL3ZhciBQcm9wZXJ0eUludGVyZmFjZT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihwcm9wZXJ0eU5hbWUscHJvcGVydHlHcm91cCl7dmFyIGludGVyZmFjZUZ1bmN0aW9uPXtfbmFtZTpwcm9wZXJ0eU5hbWV9O2Z1bmN0aW9uIF9wcm9wZXJ0eUdyb3VwKHZhbCl7dmFsPXZhbD09PXVuZGVmaW5lZD8xOnZhbDtpZih2YWw8PTApe3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbjt9cmV0dXJuIHByb3BlcnR5R3JvdXAodmFsLTEpO31yZXR1cm4gX3Byb3BlcnR5R3JvdXA7fTt9KCk7LyogZ2xvYmFsIEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSwgUHJvcGVydHlJbnRlcmZhY2UsIHByb3BlcnR5R3JvdXBGYWN0b3J5LCBTaGFwZVBhdGhJbnRlcmZhY2UgKi8gLyogZXhwb3J0ZWQgU2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlICovdmFyIFNoYXBlRXhwcmVzc2lvbkludGVyZmFjZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGl0ZXJhdGVFbGVtZW50cyhzaGFwZXMsdmlldyxwcm9wZXJ0eUdyb3VwKXt2YXIgYXJyPVtdO3ZhciBpO3ZhciBsZW49c2hhcGVzP3NoYXBlcy5sZW5ndGg6MDtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKHNoYXBlc1tpXS50eT09PSdncicpe2Fyci5wdXNoKGdyb3VwSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sdmlld1tpXSxwcm9wZXJ0eUdyb3VwKSk7fWVsc2UgaWYoc2hhcGVzW2ldLnR5PT09J2ZsJyl7YXJyLnB1c2goZmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLHZpZXdbaV0scHJvcGVydHlHcm91cCkpO31lbHNlIGlmKHNoYXBlc1tpXS50eT09PSdzdCcpe2Fyci5wdXNoKHN0cm9rZUludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLHZpZXdbaV0scHJvcGVydHlHcm91cCkpO31lbHNlIGlmKHNoYXBlc1tpXS50eT09PSd0bScpe2Fyci5wdXNoKHRyaW1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSx2aWV3W2ldLHByb3BlcnR5R3JvdXApKTt9ZWxzZSBpZihzaGFwZXNbaV0udHk9PT0ndHInKXsvLyBhcnIucHVzaCh0cmFuc2Zvcm1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSx2aWV3W2ldLHByb3BlcnR5R3JvdXApKTtcbn1lbHNlIGlmKHNoYXBlc1tpXS50eT09PSdlbCcpe2Fyci5wdXNoKGVsbGlwc2VJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSx2aWV3W2ldLHByb3BlcnR5R3JvdXApKTt9ZWxzZSBpZihzaGFwZXNbaV0udHk9PT0nc3InKXthcnIucHVzaChzdGFySW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sdmlld1tpXSxwcm9wZXJ0eUdyb3VwKSk7fWVsc2UgaWYoc2hhcGVzW2ldLnR5PT09J3NoJyl7YXJyLnB1c2goU2hhcGVQYXRoSW50ZXJmYWNlKHNoYXBlc1tpXSx2aWV3W2ldLHByb3BlcnR5R3JvdXApKTt9ZWxzZSBpZihzaGFwZXNbaV0udHk9PT0ncmMnKXthcnIucHVzaChyZWN0SW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sdmlld1tpXSxwcm9wZXJ0eUdyb3VwKSk7fWVsc2UgaWYoc2hhcGVzW2ldLnR5PT09J3JkJyl7YXJyLnB1c2gocm91bmRlZEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLHZpZXdbaV0scHJvcGVydHlHcm91cCkpO31lbHNlIGlmKHNoYXBlc1tpXS50eT09PSdycCcpe2Fyci5wdXNoKHJlcGVhdGVySW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sdmlld1tpXSxwcm9wZXJ0eUdyb3VwKSk7fX1yZXR1cm4gYXJyO31mdW5jdGlvbiBjb250ZW50c0ludGVyZmFjZUZhY3Rvcnkoc2hhcGUsdmlldyxwcm9wZXJ0eUdyb3VwKXt2YXIgaW50ZXJmYWNlczt2YXIgaW50ZXJmYWNlRnVuY3Rpb249ZnVuY3Rpb24gX2ludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKXt2YXIgaT0wO3ZhciBsZW49aW50ZXJmYWNlcy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKGludGVyZmFjZXNbaV0uX25hbWU9PT12YWx1ZXx8aW50ZXJmYWNlc1tpXS5tbj09PXZhbHVlfHxpbnRlcmZhY2VzW2ldLnByb3BlcnR5SW5kZXg9PT12YWx1ZXx8aW50ZXJmYWNlc1tpXS5peD09PXZhbHVlfHxpbnRlcmZhY2VzW2ldLmluZD09PXZhbHVlKXtyZXR1cm4gaW50ZXJmYWNlc1tpXTt9aSs9MTt9aWYodHlwZW9mIHZhbHVlPT09J251bWJlcicpe3JldHVybiBpbnRlcmZhY2VzW3ZhbHVlLTFdO31yZXR1cm4gbnVsbDt9O2ludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXA9cHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24scHJvcGVydHlHcm91cCk7aW50ZXJmYWNlcz1pdGVyYXRlRWxlbWVudHMoc2hhcGUuaXQsdmlldy5pdCxpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtpbnRlcmZhY2VGdW5jdGlvbi5udW1Qcm9wZXJ0aWVzPWludGVyZmFjZXMubGVuZ3RoO3ZhciB0cmFuc2Zvcm1JbnRlcmZhY2U9dHJhbnNmb3JtSW50ZXJmYWNlRmFjdG9yeShzaGFwZS5pdFtzaGFwZS5pdC5sZW5ndGgtMV0sdmlldy5pdFt2aWV3Lml0Lmxlbmd0aC0xXSxpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtpbnRlcmZhY2VGdW5jdGlvbi50cmFuc2Zvcm09dHJhbnNmb3JtSW50ZXJmYWNlO2ludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXg9c2hhcGUuY2l4O2ludGVyZmFjZUZ1bmN0aW9uLl9uYW1lPXNoYXBlLm5tO3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbjt9ZnVuY3Rpb24gZ3JvdXBJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLHZpZXcscHJvcGVydHlHcm91cCl7dmFyIGludGVyZmFjZUZ1bmN0aW9uPWZ1bmN0aW9uIF9pbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSl7c3dpdGNoKHZhbHVlKXtjYXNlJ0FEQkUgVmVjdG9ycyBHcm91cCc6Y2FzZSdDb250ZW50cyc6Y2FzZSAyOnJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5jb250ZW50Oy8vIE5vdCBuZWNlc3NhcnkgZm9yIG5vdy4gS2VlcGluZyB0aGVtIGhlcmUgaW4gY2FzZSBhIG5ldyBjYXNlIGFwcGVhcnNcbi8vIGNhc2UgJ0FEQkUgVmVjdG9yIFRyYW5zZm9ybSBHcm91cCc6XG4vLyBjYXNlIDM6XG5kZWZhdWx0OnJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi50cmFuc2Zvcm07fX07aW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cD1wcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbixwcm9wZXJ0eUdyb3VwKTt2YXIgY29udGVudD1jb250ZW50c0ludGVyZmFjZUZhY3Rvcnkoc2hhcGUsdmlldyxpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTt2YXIgdHJhbnNmb3JtSW50ZXJmYWNlPXRyYW5zZm9ybUludGVyZmFjZUZhY3Rvcnkoc2hhcGUuaXRbc2hhcGUuaXQubGVuZ3RoLTFdLHZpZXcuaXRbdmlldy5pdC5sZW5ndGgtMV0saW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7aW50ZXJmYWNlRnVuY3Rpb24uY29udGVudD1jb250ZW50O2ludGVyZmFjZUZ1bmN0aW9uLnRyYW5zZm9ybT10cmFuc2Zvcm1JbnRlcmZhY2U7T2JqZWN0LmRlZmluZVByb3BlcnR5KGludGVyZmFjZUZ1bmN0aW9uLCdfbmFtZScse2dldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gc2hhcGUubm07fX0pOy8vIGludGVyZmFjZUZ1bmN0aW9uLmNvbnRlbnQgPSBpbnRlcmZhY2VGdW5jdGlvbjtcbmludGVyZmFjZUZ1bmN0aW9uLm51bVByb3BlcnRpZXM9c2hhcGUubnA7aW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleD1zaGFwZS5peDtpbnRlcmZhY2VGdW5jdGlvbi5ubT1zaGFwZS5ubTtpbnRlcmZhY2VGdW5jdGlvbi5tbj1zaGFwZS5tbjtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247fWZ1bmN0aW9uIGZpbGxJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLHZpZXcscHJvcGVydHlHcm91cCl7ZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsKXtpZih2YWw9PT0nQ29sb3InfHx2YWw9PT0nY29sb3InKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uY29sb3I7fWlmKHZhbD09PSdPcGFjaXR5J3x8dmFsPT09J29wYWNpdHknKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3BhY2l0eTt9cmV0dXJuIG51bGw7fU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLHtjb2xvcjp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmMpfSxvcGFjaXR5OntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcubyl9LF9uYW1lOnt2YWx1ZTpzaGFwZS5ubX0sbW46e3ZhbHVlOnNoYXBlLm1ufX0pO3ZpZXcuYy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdDb2xvcicscHJvcGVydHlHcm91cCkpO3ZpZXcuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5Jyxwcm9wZXJ0eUdyb3VwKSk7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO31mdW5jdGlvbiBzdHJva2VJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLHZpZXcscHJvcGVydHlHcm91cCl7dmFyIF9wcm9wZXJ0eUdyb3VwPXByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLHByb3BlcnR5R3JvdXApO3ZhciBfZGFzaFByb3BlcnR5R3JvdXA9cHJvcGVydHlHcm91cEZhY3RvcnkoZGFzaE9iLF9wcm9wZXJ0eUdyb3VwKTtmdW5jdGlvbiBhZGRQcm9wZXJ0eVRvRGFzaE9iKGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXNoT2Isc2hhcGUuZFtpXS5ubSx7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmQuZGF0YVByb3BzW2ldLnApfSk7fXZhciBpO3ZhciBsZW49c2hhcGUuZD9zaGFwZS5kLmxlbmd0aDowO3ZhciBkYXNoT2I9e307Zm9yKGk9MDtpPGxlbjtpKz0xKXthZGRQcm9wZXJ0eVRvRGFzaE9iKGkpO3ZpZXcuZC5kYXRhUHJvcHNbaV0ucC5zZXRHcm91cFByb3BlcnR5KF9kYXNoUHJvcGVydHlHcm91cCk7fWZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCl7aWYodmFsPT09J0NvbG9yJ3x8dmFsPT09J2NvbG9yJyl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvbG9yO31pZih2YWw9PT0nT3BhY2l0eSd8fHZhbD09PSdvcGFjaXR5Jyl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm9wYWNpdHk7fWlmKHZhbD09PSdTdHJva2UgV2lkdGgnfHx2YWw9PT0nc3Ryb2tlIHdpZHRoJyl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnN0cm9rZVdpZHRoO31yZXR1cm4gbnVsbDt9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24se2NvbG9yOntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcuYyl9LG9wYWNpdHk6e2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5vKX0sc3Ryb2tlV2lkdGg6e2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy53KX0sZGFzaDp7Z2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBkYXNoT2I7fX0sX25hbWU6e3ZhbHVlOnNoYXBlLm5tfSxtbjp7dmFsdWU6c2hhcGUubW59fSk7dmlldy5jLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0NvbG9yJyxfcHJvcGVydHlHcm91cCkpO3ZpZXcuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5JyxfcHJvcGVydHlHcm91cCkpO3ZpZXcudy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTdHJva2UgV2lkdGgnLF9wcm9wZXJ0eUdyb3VwKSk7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO31mdW5jdGlvbiB0cmltSW50ZXJmYWNlRmFjdG9yeShzaGFwZSx2aWV3LHByb3BlcnR5R3JvdXApe2Z1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCl7aWYodmFsPT09c2hhcGUuZS5peHx8dmFsPT09J0VuZCd8fHZhbD09PSdlbmQnKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uZW5kO31pZih2YWw9PT1zaGFwZS5zLml4KXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc3RhcnQ7fWlmKHZhbD09PXNoYXBlLm8uaXgpe3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vZmZzZXQ7fXJldHVybiBudWxsO312YXIgX3Byb3BlcnR5R3JvdXA9cHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24scHJvcGVydHlHcm91cCk7aW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleD1zaGFwZS5peDt2aWV3LnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU3RhcnQnLF9wcm9wZXJ0eUdyb3VwKSk7dmlldy5lLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0VuZCcsX3Byb3BlcnR5R3JvdXApKTt2aWV3Lm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT2Zmc2V0JyxfcHJvcGVydHlHcm91cCkpO2ludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXg9c2hhcGUuaXg7aW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cD1wcm9wZXJ0eUdyb3VwO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLHtzdGFydDp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnMpfSxlbmQ6e2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5lKX0sb2Zmc2V0OntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcubyl9LF9uYW1lOnt2YWx1ZTpzaGFwZS5ubX19KTtpbnRlcmZhY2VGdW5jdGlvbi5tbj1zaGFwZS5tbjtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247fWZ1bmN0aW9uIHRyYW5zZm9ybUludGVyZmFjZUZhY3Rvcnkoc2hhcGUsdmlldyxwcm9wZXJ0eUdyb3VwKXtmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSl7aWYoc2hhcGUuYS5peD09PXZhbHVlfHx2YWx1ZT09PSdBbmNob3IgUG9pbnQnKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uYW5jaG9yUG9pbnQ7fWlmKHNoYXBlLm8uaXg9PT12YWx1ZXx8dmFsdWU9PT0nT3BhY2l0eScpe3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vcGFjaXR5O31pZihzaGFwZS5wLml4PT09dmFsdWV8fHZhbHVlPT09J1Bvc2l0aW9uJyl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBvc2l0aW9uO31pZihzaGFwZS5yLml4PT09dmFsdWV8fHZhbHVlPT09J1JvdGF0aW9uJ3x8dmFsdWU9PT0nQURCRSBWZWN0b3IgUm90YXRpb24nKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucm90YXRpb247fWlmKHNoYXBlLnMuaXg9PT12YWx1ZXx8dmFsdWU9PT0nU2NhbGUnKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2NhbGU7fWlmKHNoYXBlLnNrJiZzaGFwZS5zay5peD09PXZhbHVlfHx2YWx1ZT09PSdTa2V3Jyl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNrZXc7fWlmKHNoYXBlLnNhJiZzaGFwZS5zYS5peD09PXZhbHVlfHx2YWx1ZT09PSdTa2V3IEF4aXMnKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2tld0F4aXM7fXJldHVybiBudWxsO312YXIgX3Byb3BlcnR5R3JvdXA9cHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24scHJvcGVydHlHcm91cCk7dmlldy50cmFuc2Zvcm0ubVByb3BzLm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3BhY2l0eScsX3Byb3BlcnR5R3JvdXApKTt2aWV3LnRyYW5zZm9ybS5tUHJvcHMucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb3NpdGlvbicsX3Byb3BlcnR5R3JvdXApKTt2aWV3LnRyYW5zZm9ybS5tUHJvcHMuYS5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdBbmNob3IgUG9pbnQnLF9wcm9wZXJ0eUdyb3VwKSk7dmlldy50cmFuc2Zvcm0ubVByb3BzLnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2NhbGUnLF9wcm9wZXJ0eUdyb3VwKSk7dmlldy50cmFuc2Zvcm0ubVByb3BzLnIuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUm90YXRpb24nLF9wcm9wZXJ0eUdyb3VwKSk7aWYodmlldy50cmFuc2Zvcm0ubVByb3BzLnNrKXt2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2suc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2tldycsX3Byb3BlcnR5R3JvdXApKTt2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2Euc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2tldyBBbmdsZScsX3Byb3BlcnR5R3JvdXApKTt9dmlldy50cmFuc2Zvcm0ub3Auc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3BhY2l0eScsX3Byb3BlcnR5R3JvdXApKTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbix7b3BhY2l0eTp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMubyl9LHBvc2l0aW9uOntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5wKX0sYW5jaG9yUG9pbnQ6e2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLmEpfSxzY2FsZTp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMucyl9LHJvdGF0aW9uOntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5yKX0sc2tldzp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2spfSxza2V3QXhpczp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2EpfSxfbmFtZTp7dmFsdWU6c2hhcGUubm19fSk7aW50ZXJmYWNlRnVuY3Rpb24udHk9J3RyJztpbnRlcmZhY2VGdW5jdGlvbi5tbj1zaGFwZS5tbjtpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwPXByb3BlcnR5R3JvdXA7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO31mdW5jdGlvbiBlbGxpcHNlSW50ZXJmYWNlRmFjdG9yeShzaGFwZSx2aWV3LHByb3BlcnR5R3JvdXApe2Z1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKXtpZihzaGFwZS5wLml4PT09dmFsdWUpe3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjt9aWYoc2hhcGUucy5peD09PXZhbHVlKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2l6ZTt9cmV0dXJuIG51bGw7fXZhciBfcHJvcGVydHlHcm91cD1wcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbixwcm9wZXJ0eUdyb3VwKTtpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4PXNoYXBlLml4O3ZhciBwcm9wPXZpZXcuc2gudHk9PT0ndG0nP3ZpZXcuc2gucHJvcDp2aWV3LnNoO3Byb3Aucy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTaXplJyxfcHJvcGVydHlHcm91cCkpO3Byb3AucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb3NpdGlvbicsX3Byb3BlcnR5R3JvdXApKTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbix7c2l6ZTp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnMpfSxwb3NpdGlvbjp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnApfSxfbmFtZTp7dmFsdWU6c2hhcGUubm19fSk7aW50ZXJmYWNlRnVuY3Rpb24ubW49c2hhcGUubW47cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO31mdW5jdGlvbiBzdGFySW50ZXJmYWNlRmFjdG9yeShzaGFwZSx2aWV3LHByb3BlcnR5R3JvdXApe2Z1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKXtpZihzaGFwZS5wLml4PT09dmFsdWUpe3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjt9aWYoc2hhcGUuci5peD09PXZhbHVlKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucm90YXRpb247fWlmKHNoYXBlLnB0Lml4PT09dmFsdWUpe3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb2ludHM7fWlmKHNoYXBlLm9yLml4PT09dmFsdWV8fHZhbHVlPT09J0FEQkUgVmVjdG9yIFN0YXIgT3V0ZXIgUmFkaXVzJyl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm91dGVyUmFkaXVzO31pZihzaGFwZS5vcy5peD09PXZhbHVlKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3V0ZXJSb3VuZG5lc3M7fWlmKHNoYXBlLmlyJiYoc2hhcGUuaXIuaXg9PT12YWx1ZXx8dmFsdWU9PT0nQURCRSBWZWN0b3IgU3RhciBJbm5lciBSYWRpdXMnKSl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmlubmVyUmFkaXVzO31pZihzaGFwZS5pcyYmc2hhcGUuaXMuaXg9PT12YWx1ZSl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmlubmVyUm91bmRuZXNzO31yZXR1cm4gbnVsbDt9dmFyIF9wcm9wZXJ0eUdyb3VwPXByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLHByb3BlcnR5R3JvdXApO3ZhciBwcm9wPXZpZXcuc2gudHk9PT0ndG0nP3ZpZXcuc2gucHJvcDp2aWV3LnNoO2ludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXg9c2hhcGUuaXg7cHJvcC5vci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPdXRlciBSYWRpdXMnLF9wcm9wZXJ0eUdyb3VwKSk7cHJvcC5vcy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPdXRlciBSb3VuZG5lc3MnLF9wcm9wZXJ0eUdyb3VwKSk7cHJvcC5wdC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb2ludHMnLF9wcm9wZXJ0eUdyb3VwKSk7cHJvcC5wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1Bvc2l0aW9uJyxfcHJvcGVydHlHcm91cCkpO3Byb3Auci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdSb3RhdGlvbicsX3Byb3BlcnR5R3JvdXApKTtpZihzaGFwZS5pcil7cHJvcC5pci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdJbm5lciBSYWRpdXMnLF9wcm9wZXJ0eUdyb3VwKSk7cHJvcC5pcy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdJbm5lciBSb3VuZG5lc3MnLF9wcm9wZXJ0eUdyb3VwKSk7fU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLHtwb3NpdGlvbjp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnApfSxyb3RhdGlvbjp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnIpfSxwb2ludHM6e2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wdCl9LG91dGVyUmFkaXVzOntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3Aub3IpfSxvdXRlclJvdW5kbmVzczp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLm9zKX0saW5uZXJSYWRpdXM6e2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5pcil9LGlubmVyUm91bmRuZXNzOntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AuaXMpfSxfbmFtZTp7dmFsdWU6c2hhcGUubm19fSk7aW50ZXJmYWNlRnVuY3Rpb24ubW49c2hhcGUubW47cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO31mdW5jdGlvbiByZWN0SW50ZXJmYWNlRmFjdG9yeShzaGFwZSx2aWV3LHByb3BlcnR5R3JvdXApe2Z1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKXtpZihzaGFwZS5wLml4PT09dmFsdWUpe3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjt9aWYoc2hhcGUuci5peD09PXZhbHVlKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucm91bmRuZXNzO31pZihzaGFwZS5zLml4PT09dmFsdWV8fHZhbHVlPT09J1NpemUnfHx2YWx1ZT09PSdBREJFIFZlY3RvciBSZWN0IFNpemUnKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2l6ZTt9cmV0dXJuIG51bGw7fXZhciBfcHJvcGVydHlHcm91cD1wcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbixwcm9wZXJ0eUdyb3VwKTt2YXIgcHJvcD12aWV3LnNoLnR5PT09J3RtJz92aWV3LnNoLnByb3A6dmlldy5zaDtpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4PXNoYXBlLml4O3Byb3AucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb3NpdGlvbicsX3Byb3BlcnR5R3JvdXApKTtwcm9wLnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2l6ZScsX3Byb3BlcnR5R3JvdXApKTtwcm9wLnIuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUm90YXRpb24nLF9wcm9wZXJ0eUdyb3VwKSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24se3Bvc2l0aW9uOntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucCl9LHJvdW5kbmVzczp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnIpfSxzaXplOntnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3Aucyl9LF9uYW1lOnt2YWx1ZTpzaGFwZS5ubX19KTtpbnRlcmZhY2VGdW5jdGlvbi5tbj1zaGFwZS5tbjtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247fWZ1bmN0aW9uIHJvdW5kZWRJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLHZpZXcscHJvcGVydHlHcm91cCl7ZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpe2lmKHNoYXBlLnIuaXg9PT12YWx1ZXx8dmFsdWU9PT0nUm91bmQgQ29ybmVycyAxJyl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnJhZGl1czt9cmV0dXJuIG51bGw7fXZhciBfcHJvcGVydHlHcm91cD1wcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbixwcm9wZXJ0eUdyb3VwKTt2YXIgcHJvcD12aWV3O2ludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXg9c2hhcGUuaXg7cHJvcC5yZC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdSYWRpdXMnLF9wcm9wZXJ0eUdyb3VwKSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24se3JhZGl1czp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnJkKX0sX25hbWU6e3ZhbHVlOnNoYXBlLm5tfX0pO2ludGVyZmFjZUZ1bmN0aW9uLm1uPXNoYXBlLm1uO3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbjt9ZnVuY3Rpb24gcmVwZWF0ZXJJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLHZpZXcscHJvcGVydHlHcm91cCl7ZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpe2lmKHNoYXBlLmMuaXg9PT12YWx1ZXx8dmFsdWU9PT0nQ29waWVzJyl7cmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvcGllczt9aWYoc2hhcGUuby5peD09PXZhbHVlfHx2YWx1ZT09PSdPZmZzZXQnKXtyZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub2Zmc2V0O31yZXR1cm4gbnVsbDt9dmFyIF9wcm9wZXJ0eUdyb3VwPXByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLHByb3BlcnR5R3JvdXApO3ZhciBwcm9wPXZpZXc7aW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleD1zaGFwZS5peDtwcm9wLmMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnQ29waWVzJyxfcHJvcGVydHlHcm91cCkpO3Byb3Auby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPZmZzZXQnLF9wcm9wZXJ0eUdyb3VwKSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24se2NvcGllczp7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLmMpfSxvZmZzZXQ6e2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5vKX0sX25hbWU6e3ZhbHVlOnNoYXBlLm5tfX0pO2ludGVyZmFjZUZ1bmN0aW9uLm1uPXNoYXBlLm1uO3JldHVybiBpbnRlcmZhY2VGdW5jdGlvbjt9cmV0dXJuIGZ1bmN0aW9uKHNoYXBlcyx2aWV3LHByb3BlcnR5R3JvdXApe3ZhciBpbnRlcmZhY2VzO2Z1bmN0aW9uIF9pbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSl7aWYodHlwZW9mIHZhbHVlPT09J251bWJlcicpe3ZhbHVlPXZhbHVlPT09dW5kZWZpbmVkPzE6dmFsdWU7aWYodmFsdWU9PT0wKXtyZXR1cm4gcHJvcGVydHlHcm91cDt9cmV0dXJuIGludGVyZmFjZXNbdmFsdWUtMV07fXZhciBpPTA7dmFyIGxlbj1pbnRlcmZhY2VzLmxlbmd0aDt3aGlsZShpPGxlbil7aWYoaW50ZXJmYWNlc1tpXS5fbmFtZT09PXZhbHVlKXtyZXR1cm4gaW50ZXJmYWNlc1tpXTt9aSs9MTt9cmV0dXJuIG51bGw7fWZ1bmN0aW9uIHBhcmVudEdyb3VwV3JhcHBlcigpe3JldHVybiBwcm9wZXJ0eUdyb3VwO31faW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cD1wcm9wZXJ0eUdyb3VwRmFjdG9yeShfaW50ZXJmYWNlRnVuY3Rpb24scGFyZW50R3JvdXBXcmFwcGVyKTtpbnRlcmZhY2VzPWl0ZXJhdGVFbGVtZW50cyhzaGFwZXMsdmlldyxfaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7X2ludGVyZmFjZUZ1bmN0aW9uLm51bVByb3BlcnRpZXM9aW50ZXJmYWNlcy5sZW5ndGg7X2ludGVyZmFjZUZ1bmN0aW9uLl9uYW1lPSdDb250ZW50cyc7cmV0dXJuIF9pbnRlcmZhY2VGdW5jdGlvbjt9O30oKTsvKiBleHBvcnRlZCBUZXh0RXhwcmVzc2lvbkludGVyZmFjZSAqL3ZhciBUZXh0RXhwcmVzc2lvbkludGVyZmFjZT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlbGVtKXt2YXIgX3ByZXZWYWx1ZTt2YXIgX3NvdXJjZVRleHQ7ZnVuY3Rpb24gX3RoaXNMYXllckZ1bmN0aW9uKG5hbWUpe3N3aXRjaChuYW1lKXtjYXNlJ0FEQkUgVGV4dCBEb2N1bWVudCc6cmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi5zb3VyY2VUZXh0O2RlZmF1bHQ6cmV0dXJuIG51bGw7fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNMYXllckZ1bmN0aW9uLCdzb3VyY2VUZXh0Jyx7Z2V0OmZ1bmN0aW9uIGdldCgpe2VsZW0udGV4dFByb3BlcnR5LmdldFZhbHVlKCk7dmFyIHN0cmluZ1ZhbHVlPWVsZW0udGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLnQ7aWYoc3RyaW5nVmFsdWUhPT1fcHJldlZhbHVlKXtlbGVtLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS50PV9wcmV2VmFsdWU7X3NvdXJjZVRleHQ9bmV3IFN0cmluZyhzdHJpbmdWYWx1ZSk7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcbi8vIElmIHN0cmluZ1ZhbHVlIGlzIGFuIGVtcHR5IHN0cmluZywgZXZhbCByZXR1cm5zIHVuZGVmaW5lZCwgc28gaXQgaGFzIHRvIGJlIHJldHVybmVkIGFzIGEgU3RyaW5nIHByaW1pdGl2ZVxuX3NvdXJjZVRleHQudmFsdWU9c3RyaW5nVmFsdWV8fG5ldyBTdHJpbmcoc3RyaW5nVmFsdWUpOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG59cmV0dXJuIF9zb3VyY2VUZXh0O319KTtyZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uO307fSgpOy8qIGdsb2JhbCBNYXRyaXgsIE1hc2tNYW5hZ2VySW50ZXJmYWNlLCBUcmFuc2Zvcm1FeHByZXNzaW9uSW50ZXJmYWNlLCBnZXREZXNjcmlwdG9yICovIC8qIGV4cG9ydGVkIExheWVyRXhwcmVzc2lvbkludGVyZmFjZSAqL3ZhciBMYXllckV4cHJlc3Npb25JbnRlcmZhY2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiBnZXRNYXRyaXgodGltZSl7dmFyIHRvV29ybGRNYXQ9bmV3IE1hdHJpeCgpO2lmKHRpbWUhPT11bmRlZmluZWQpe3ZhciBwcm9wTWF0cml4PXRoaXMuX2VsZW0uZmluYWxUcmFuc2Zvcm0ubVByb3AuZ2V0VmFsdWVBdFRpbWUodGltZSk7cHJvcE1hdHJpeC5jbG9uZSh0b1dvcmxkTWF0KTt9ZWxzZSB7dmFyIHRyYW5zZm9ybU1hdD10aGlzLl9lbGVtLmZpbmFsVHJhbnNmb3JtLm1Qcm9wO3RyYW5zZm9ybU1hdC5hcHBseVRvTWF0cml4KHRvV29ybGRNYXQpO31yZXR1cm4gdG9Xb3JsZE1hdDt9ZnVuY3Rpb24gdG9Xb3JsZFZlYyhhcnIsdGltZSl7dmFyIHRvV29ybGRNYXQ9dGhpcy5nZXRNYXRyaXgodGltZSk7dG9Xb3JsZE1hdC5wcm9wc1sxMl09MDt0b1dvcmxkTWF0LnByb3BzWzEzXT0wO3RvV29ybGRNYXQucHJvcHNbMTRdPTA7cmV0dXJuIHRoaXMuYXBwbHlQb2ludCh0b1dvcmxkTWF0LGFycik7fWZ1bmN0aW9uIHRvV29ybGQoYXJyLHRpbWUpe3ZhciB0b1dvcmxkTWF0PXRoaXMuZ2V0TWF0cml4KHRpbWUpO3JldHVybiB0aGlzLmFwcGx5UG9pbnQodG9Xb3JsZE1hdCxhcnIpO31mdW5jdGlvbiBmcm9tV29ybGRWZWMoYXJyLHRpbWUpe3ZhciB0b1dvcmxkTWF0PXRoaXMuZ2V0TWF0cml4KHRpbWUpO3RvV29ybGRNYXQucHJvcHNbMTJdPTA7dG9Xb3JsZE1hdC5wcm9wc1sxM109MDt0b1dvcmxkTWF0LnByb3BzWzE0XT0wO3JldHVybiB0aGlzLmludmVydFBvaW50KHRvV29ybGRNYXQsYXJyKTt9ZnVuY3Rpb24gZnJvbVdvcmxkKGFycix0aW1lKXt2YXIgdG9Xb3JsZE1hdD10aGlzLmdldE1hdHJpeCh0aW1lKTtyZXR1cm4gdGhpcy5pbnZlcnRQb2ludCh0b1dvcmxkTWF0LGFycik7fWZ1bmN0aW9uIGFwcGx5UG9pbnQobWF0cml4LGFycil7aWYodGhpcy5fZWxlbS5oaWVyYXJjaHkmJnRoaXMuX2VsZW0uaGllcmFyY2h5Lmxlbmd0aCl7dmFyIGk7dmFyIGxlbj10aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLl9lbGVtLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5hcHBseVRvTWF0cml4KG1hdHJpeCk7fX1yZXR1cm4gbWF0cml4LmFwcGx5VG9Qb2ludEFycmF5KGFyclswXSxhcnJbMV0sYXJyWzJdfHwwKTt9ZnVuY3Rpb24gaW52ZXJ0UG9pbnQobWF0cml4LGFycil7aWYodGhpcy5fZWxlbS5oaWVyYXJjaHkmJnRoaXMuX2VsZW0uaGllcmFyY2h5Lmxlbmd0aCl7dmFyIGk7dmFyIGxlbj10aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGg7Zm9yKGk9MDtpPGxlbjtpKz0xKXt0aGlzLl9lbGVtLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5hcHBseVRvTWF0cml4KG1hdHJpeCk7fX1yZXR1cm4gbWF0cml4LmludmVyc2VQb2ludChhcnIpO31mdW5jdGlvbiBmcm9tQ29tcChhcnIpe3ZhciB0b1dvcmxkTWF0PW5ldyBNYXRyaXgoKTt0b1dvcmxkTWF0LnJlc2V0KCk7dGhpcy5fZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcC5hcHBseVRvTWF0cml4KHRvV29ybGRNYXQpO2lmKHRoaXMuX2VsZW0uaGllcmFyY2h5JiZ0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGgpe3ZhciBpO3ZhciBsZW49dGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7dGhpcy5fZWxlbS5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3AuYXBwbHlUb01hdHJpeCh0b1dvcmxkTWF0KTt9cmV0dXJuIHRvV29ybGRNYXQuaW52ZXJzZVBvaW50KGFycik7fXJldHVybiB0b1dvcmxkTWF0LmludmVyc2VQb2ludChhcnIpO31mdW5jdGlvbiBzYW1wbGVJbWFnZSgpe3JldHVybiBbMSwxLDEsMV07fXJldHVybiBmdW5jdGlvbihlbGVtKXt2YXIgdHJhbnNmb3JtSW50ZXJmYWNlO2Z1bmN0aW9uIF9yZWdpc3Rlck1hc2tJbnRlcmZhY2UobWFza01hbmFnZXIpe190aGlzTGF5ZXJGdW5jdGlvbi5tYXNrPW5ldyBNYXNrTWFuYWdlckludGVyZmFjZShtYXNrTWFuYWdlcixlbGVtKTt9ZnVuY3Rpb24gX3JlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZShlZmZlY3RzKXtfdGhpc0xheWVyRnVuY3Rpb24uZWZmZWN0PWVmZmVjdHM7fWZ1bmN0aW9uIF90aGlzTGF5ZXJGdW5jdGlvbihuYW1lKXtzd2l0Y2gobmFtZSl7Y2FzZSdBREJFIFJvb3QgVmVjdG9ycyBHcm91cCc6Y2FzZSdDb250ZW50cyc6Y2FzZSAyOnJldHVybiBfdGhpc0xheWVyRnVuY3Rpb24uc2hhcGVJbnRlcmZhY2U7Y2FzZSAxOmNhc2UgNjpjYXNlJ1RyYW5zZm9ybSc6Y2FzZSd0cmFuc2Zvcm0nOmNhc2UnQURCRSBUcmFuc2Zvcm0gR3JvdXAnOnJldHVybiB0cmFuc2Zvcm1JbnRlcmZhY2U7Y2FzZSA0OmNhc2UnQURCRSBFZmZlY3QgUGFyYWRlJzpjYXNlJ2VmZmVjdHMnOmNhc2UnRWZmZWN0cyc6cmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi5lZmZlY3Q7Y2FzZSdBREJFIFRleHQgUHJvcGVydGllcyc6cmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi50ZXh0SW50ZXJmYWNlO2RlZmF1bHQ6cmV0dXJuIG51bGw7fX1fdGhpc0xheWVyRnVuY3Rpb24uZ2V0TWF0cml4PWdldE1hdHJpeDtfdGhpc0xheWVyRnVuY3Rpb24uaW52ZXJ0UG9pbnQ9aW52ZXJ0UG9pbnQ7X3RoaXNMYXllckZ1bmN0aW9uLmFwcGx5UG9pbnQ9YXBwbHlQb2ludDtfdGhpc0xheWVyRnVuY3Rpb24udG9Xb3JsZD10b1dvcmxkO190aGlzTGF5ZXJGdW5jdGlvbi50b1dvcmxkVmVjPXRvV29ybGRWZWM7X3RoaXNMYXllckZ1bmN0aW9uLmZyb21Xb3JsZD1mcm9tV29ybGQ7X3RoaXNMYXllckZ1bmN0aW9uLmZyb21Xb3JsZFZlYz1mcm9tV29ybGRWZWM7X3RoaXNMYXllckZ1bmN0aW9uLnRvQ29tcD10b1dvcmxkO190aGlzTGF5ZXJGdW5jdGlvbi5mcm9tQ29tcD1mcm9tQ29tcDtfdGhpc0xheWVyRnVuY3Rpb24uc2FtcGxlSW1hZ2U9c2FtcGxlSW1hZ2U7X3RoaXNMYXllckZ1bmN0aW9uLnNvdXJjZVJlY3RBdFRpbWU9ZWxlbS5zb3VyY2VSZWN0QXRUaW1lLmJpbmQoZWxlbSk7X3RoaXNMYXllckZ1bmN0aW9uLl9lbGVtPWVsZW07dHJhbnNmb3JtSW50ZXJmYWNlPVRyYW5zZm9ybUV4cHJlc3Npb25JbnRlcmZhY2UoZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcCk7dmFyIGFuY2hvclBvaW50RGVzY3JpcHRvcj1nZXREZXNjcmlwdG9yKHRyYW5zZm9ybUludGVyZmFjZSwnYW5jaG9yUG9pbnQnKTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpc0xheWVyRnVuY3Rpb24se2hhc1BhcmVudDp7Z2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBlbGVtLmhpZXJhcmNoeS5sZW5ndGg7fX0scGFyZW50OntnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIGVsZW0uaGllcmFyY2h5WzBdLmxheWVySW50ZXJmYWNlO319LHJvdGF0aW9uOmdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCdyb3RhdGlvbicpLHNjYWxlOmdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCdzY2FsZScpLHBvc2l0aW9uOmdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCdwb3NpdGlvbicpLG9wYWNpdHk6Z2V0RGVzY3JpcHRvcih0cmFuc2Zvcm1JbnRlcmZhY2UsJ29wYWNpdHknKSxhbmNob3JQb2ludDphbmNob3JQb2ludERlc2NyaXB0b3IsYW5jaG9yX3BvaW50OmFuY2hvclBvaW50RGVzY3JpcHRvcix0cmFuc2Zvcm06e2dldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gdHJhbnNmb3JtSW50ZXJmYWNlO319LGFjdGl2ZTp7Z2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBlbGVtLmlzSW5SYW5nZTt9fX0pO190aGlzTGF5ZXJGdW5jdGlvbi5zdGFydFRpbWU9ZWxlbS5kYXRhLnN0O190aGlzTGF5ZXJGdW5jdGlvbi5pbmRleD1lbGVtLmRhdGEuaW5kO190aGlzTGF5ZXJGdW5jdGlvbi5zb3VyY2U9ZWxlbS5kYXRhLnJlZklkO190aGlzTGF5ZXJGdW5jdGlvbi5oZWlnaHQ9ZWxlbS5kYXRhLnR5PT09MD9lbGVtLmRhdGEuaDoxMDA7X3RoaXNMYXllckZ1bmN0aW9uLndpZHRoPWVsZW0uZGF0YS50eT09PTA/ZWxlbS5kYXRhLnc6MTAwO190aGlzTGF5ZXJGdW5jdGlvbi5pblBvaW50PWVsZW0uZGF0YS5pcC9lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7X3RoaXNMYXllckZ1bmN0aW9uLm91dFBvaW50PWVsZW0uZGF0YS5vcC9lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7X3RoaXNMYXllckZ1bmN0aW9uLl9uYW1lPWVsZW0uZGF0YS5ubTtfdGhpc0xheWVyRnVuY3Rpb24ucmVnaXN0ZXJNYXNrSW50ZXJmYWNlPV9yZWdpc3Rlck1hc2tJbnRlcmZhY2U7X3RoaXNMYXllckZ1bmN0aW9uLnJlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZT1fcmVnaXN0ZXJFZmZlY3RzSW50ZXJmYWNlO3JldHVybiBfdGhpc0xheWVyRnVuY3Rpb247fTt9KCk7LyogZXhwb3J0ZWQgQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UgKi92YXIgQ29tcEV4cHJlc3Npb25JbnRlcmZhY2U9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oY29tcCl7ZnVuY3Rpb24gX3RoaXNMYXllckZ1bmN0aW9uKG5hbWUpe3ZhciBpPTA7dmFyIGxlbj1jb21wLmxheWVycy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKGNvbXAubGF5ZXJzW2ldLm5tPT09bmFtZXx8Y29tcC5sYXllcnNbaV0uaW5kPT09bmFtZSl7cmV0dXJuIGNvbXAuZWxlbWVudHNbaV0ubGF5ZXJJbnRlcmZhY2U7fWkrPTE7fXJldHVybiBudWxsOy8vIHJldHVybiB7YWN0aXZlOmZhbHNlfTtcbn1PYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNMYXllckZ1bmN0aW9uLCdfbmFtZScse3ZhbHVlOmNvbXAuZGF0YS5ubX0pO190aGlzTGF5ZXJGdW5jdGlvbi5sYXllcj1fdGhpc0xheWVyRnVuY3Rpb247X3RoaXNMYXllckZ1bmN0aW9uLnBpeGVsQXNwZWN0PTE7X3RoaXNMYXllckZ1bmN0aW9uLmhlaWdodD1jb21wLmRhdGEuaHx8Y29tcC5nbG9iYWxEYXRhLmNvbXBTaXplLmg7X3RoaXNMYXllckZ1bmN0aW9uLndpZHRoPWNvbXAuZGF0YS53fHxjb21wLmdsb2JhbERhdGEuY29tcFNpemUudztfdGhpc0xheWVyRnVuY3Rpb24ucGl4ZWxBc3BlY3Q9MTtfdGhpc0xheWVyRnVuY3Rpb24uZnJhbWVEdXJhdGlvbj0xL2NvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7X3RoaXNMYXllckZ1bmN0aW9uLmRpc3BsYXlTdGFydFRpbWU9MDtfdGhpc0xheWVyRnVuY3Rpb24ubnVtTGF5ZXJzPWNvbXAubGF5ZXJzLmxlbmd0aDtyZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uO307fSgpOy8qIGdsb2JhbCBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UgKi8gLyogZXhwb3J0ZWQgVHJhbnNmb3JtRXhwcmVzc2lvbkludGVyZmFjZSAqL3ZhciBUcmFuc2Zvcm1FeHByZXNzaW9uSW50ZXJmYWNlPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHRyYW5zZm9ybSl7ZnVuY3Rpb24gX3RoaXNGdW5jdGlvbihuYW1lKXtzd2l0Y2gobmFtZSl7Y2FzZSdzY2FsZSc6Y2FzZSdTY2FsZSc6Y2FzZSdBREJFIFNjYWxlJzpjYXNlIDY6cmV0dXJuIF90aGlzRnVuY3Rpb24uc2NhbGU7Y2FzZSdyb3RhdGlvbic6Y2FzZSdSb3RhdGlvbic6Y2FzZSdBREJFIFJvdGF0aW9uJzpjYXNlJ0FEQkUgUm90YXRlIFonOmNhc2UgMTA6cmV0dXJuIF90aGlzRnVuY3Rpb24ucm90YXRpb247Y2FzZSdBREJFIFJvdGF0ZSBYJzpyZXR1cm4gX3RoaXNGdW5jdGlvbi54Um90YXRpb247Y2FzZSdBREJFIFJvdGF0ZSBZJzpyZXR1cm4gX3RoaXNGdW5jdGlvbi55Um90YXRpb247Y2FzZSdwb3NpdGlvbic6Y2FzZSdQb3NpdGlvbic6Y2FzZSdBREJFIFBvc2l0aW9uJzpjYXNlIDI6cmV0dXJuIF90aGlzRnVuY3Rpb24ucG9zaXRpb247Y2FzZSdBREJFIFBvc2l0aW9uXzAnOnJldHVybiBfdGhpc0Z1bmN0aW9uLnhQb3NpdGlvbjtjYXNlJ0FEQkUgUG9zaXRpb25fMSc6cmV0dXJuIF90aGlzRnVuY3Rpb24ueVBvc2l0aW9uO2Nhc2UnQURCRSBQb3NpdGlvbl8yJzpyZXR1cm4gX3RoaXNGdW5jdGlvbi56UG9zaXRpb247Y2FzZSdhbmNob3JQb2ludCc6Y2FzZSdBbmNob3JQb2ludCc6Y2FzZSdBbmNob3IgUG9pbnQnOmNhc2UnQURCRSBBbmNob3JQb2ludCc6Y2FzZSAxOnJldHVybiBfdGhpc0Z1bmN0aW9uLmFuY2hvclBvaW50O2Nhc2Unb3BhY2l0eSc6Y2FzZSdPcGFjaXR5JzpjYXNlIDExOnJldHVybiBfdGhpc0Z1bmN0aW9uLm9wYWNpdHk7ZGVmYXVsdDpyZXR1cm4gbnVsbDt9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCdyb3RhdGlvbicse2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnJ8fHRyYW5zZm9ybS5yeil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwnelJvdGF0aW9uJyx7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucnp8fHRyYW5zZm9ybS5yKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCd4Um90YXRpb24nLHtnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5yeCl9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwneVJvdGF0aW9uJyx7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucnkpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sJ3NjYWxlJyx7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucyl9KTt2YXIgX3B4O3ZhciBfcHk7dmFyIF9wejt2YXIgX3RyYW5zZm9ybUZhY3Rvcnk7aWYodHJhbnNmb3JtLnApe190cmFuc2Zvcm1GYWN0b3J5PUV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucCk7fWVsc2Uge19weD1FeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB4KTtfcHk9RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weSk7aWYodHJhbnNmb3JtLnB6KXtfcHo9RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weik7fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwncG9zaXRpb24nLHtnZXQ6ZnVuY3Rpb24gZ2V0KCl7aWYodHJhbnNmb3JtLnApe3JldHVybiBfdHJhbnNmb3JtRmFjdG9yeSgpO31yZXR1cm4gW19weCgpLF9weSgpLF9wej9fcHooKTowXTt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sJ3hQb3NpdGlvbicse2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB4KX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCd5UG9zaXRpb24nLHtnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weSl9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwnelBvc2l0aW9uJyx7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucHopfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sJ2FuY2hvclBvaW50Jyx7Z2V0OkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0uYSl9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwnb3BhY2l0eScse2dldDpFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLm8pfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sJ3NrZXcnLHtnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5zayl9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwnc2tld0F4aXMnLHtnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5zYSl9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwnb3JpZW50YXRpb24nLHtnZXQ6RXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5vcil9KTtyZXR1cm4gX3RoaXNGdW5jdGlvbjt9O30oKTsvKiBleHBvcnRlZCBQcm9qZWN0SW50ZXJmYWNlICovdmFyIFByb2plY3RJbnRlcmZhY2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiByZWdpc3RlckNvbXBvc2l0aW9uKGNvbXApe3RoaXMuY29tcG9zaXRpb25zLnB1c2goY29tcCk7fXJldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIF90aGlzUHJvamVjdEZ1bmN0aW9uKG5hbWUpe3ZhciBpPTA7dmFyIGxlbj10aGlzLmNvbXBvc2l0aW9ucy5sZW5ndGg7d2hpbGUoaTxsZW4pe2lmKHRoaXMuY29tcG9zaXRpb25zW2ldLmRhdGEmJnRoaXMuY29tcG9zaXRpb25zW2ldLmRhdGEubm09PT1uYW1lKXtpZih0aGlzLmNvbXBvc2l0aW9uc1tpXS5wcmVwYXJlRnJhbWUmJnRoaXMuY29tcG9zaXRpb25zW2ldLmRhdGEueHQpe3RoaXMuY29tcG9zaXRpb25zW2ldLnByZXBhcmVGcmFtZSh0aGlzLmN1cnJlbnRGcmFtZSk7fXJldHVybiB0aGlzLmNvbXBvc2l0aW9uc1tpXS5jb21wSW50ZXJmYWNlO31pKz0xO31yZXR1cm4gbnVsbDt9X3RoaXNQcm9qZWN0RnVuY3Rpb24uY29tcG9zaXRpb25zPVtdO190aGlzUHJvamVjdEZ1bmN0aW9uLmN1cnJlbnRGcmFtZT0wO190aGlzUHJvamVjdEZ1bmN0aW9uLnJlZ2lzdGVyQ29tcG9zaXRpb249cmVnaXN0ZXJDb21wb3NpdGlvbjtyZXR1cm4gX3RoaXNQcm9qZWN0RnVuY3Rpb247fTt9KCk7LyogZ2xvYmFsIHByb3BlcnR5R3JvdXBGYWN0b3J5LCBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UsIFByb3BlcnR5SW50ZXJmYWNlICovIC8qIGV4cG9ydGVkIEVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlICovdmFyIEVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlPWZ1bmN0aW9uKCl7dmFyIG9iPXtjcmVhdGVFZmZlY3RzSW50ZXJmYWNlOmNyZWF0ZUVmZmVjdHNJbnRlcmZhY2V9O2Z1bmN0aW9uIGNyZWF0ZUVmZmVjdHNJbnRlcmZhY2UoZWxlbSxwcm9wZXJ0eUdyb3VwKXtpZihlbGVtLmVmZmVjdHNNYW5hZ2VyKXt2YXIgZWZmZWN0RWxlbWVudHM9W107dmFyIGVmZmVjdHNEYXRhPWVsZW0uZGF0YS5lZjt2YXIgaTt2YXIgbGVuPWVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHMubGVuZ3RoO2ZvcihpPTA7aTxsZW47aSs9MSl7ZWZmZWN0RWxlbWVudHMucHVzaChjcmVhdGVHcm91cEludGVyZmFjZShlZmZlY3RzRGF0YVtpXSxlbGVtLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzW2ldLHByb3BlcnR5R3JvdXAsZWxlbSkpO312YXIgZWZmZWN0cz1lbGVtLmRhdGEuZWZ8fFtdO3ZhciBncm91cEludGVyZmFjZT1mdW5jdGlvbiBncm91cEludGVyZmFjZShuYW1lKXtpPTA7bGVuPWVmZmVjdHMubGVuZ3RoO3doaWxlKGk8bGVuKXtpZihuYW1lPT09ZWZmZWN0c1tpXS5ubXx8bmFtZT09PWVmZmVjdHNbaV0ubW58fG5hbWU9PT1lZmZlY3RzW2ldLml4KXtyZXR1cm4gZWZmZWN0RWxlbWVudHNbaV07fWkrPTE7fXJldHVybiBudWxsO307T2JqZWN0LmRlZmluZVByb3BlcnR5KGdyb3VwSW50ZXJmYWNlLCdudW1Qcm9wZXJ0aWVzJyx7Z2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBlZmZlY3RzLmxlbmd0aDt9fSk7cmV0dXJuIGdyb3VwSW50ZXJmYWNlO31yZXR1cm4gbnVsbDt9ZnVuY3Rpb24gY3JlYXRlR3JvdXBJbnRlcmZhY2UoZGF0YSxlbGVtZW50cyxwcm9wZXJ0eUdyb3VwLGVsZW0pe2Z1bmN0aW9uIGdyb3VwSW50ZXJmYWNlKG5hbWUpe3ZhciBlZmZlY3RzPWRhdGEuZWY7dmFyIGk9MDt2YXIgbGVuPWVmZmVjdHMubGVuZ3RoO3doaWxlKGk8bGVuKXtpZihuYW1lPT09ZWZmZWN0c1tpXS5ubXx8bmFtZT09PWVmZmVjdHNbaV0ubW58fG5hbWU9PT1lZmZlY3RzW2ldLml4KXtpZihlZmZlY3RzW2ldLnR5PT09NSl7cmV0dXJuIGVmZmVjdEVsZW1lbnRzW2ldO31yZXR1cm4gZWZmZWN0RWxlbWVudHNbaV0oKTt9aSs9MTt9dGhyb3cgbmV3IEVycm9yKCk7fXZhciBfcHJvcGVydHlHcm91cD1wcm9wZXJ0eUdyb3VwRmFjdG9yeShncm91cEludGVyZmFjZSxwcm9wZXJ0eUdyb3VwKTt2YXIgZWZmZWN0RWxlbWVudHM9W107dmFyIGk7dmFyIGxlbj1kYXRhLmVmLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe2lmKGRhdGEuZWZbaV0udHk9PT01KXtlZmZlY3RFbGVtZW50cy5wdXNoKGNyZWF0ZUdyb3VwSW50ZXJmYWNlKGRhdGEuZWZbaV0sZWxlbWVudHMuZWZmZWN0RWxlbWVudHNbaV0sZWxlbWVudHMuZWZmZWN0RWxlbWVudHNbaV0ucHJvcGVydHlHcm91cCxlbGVtKSk7fWVsc2Uge2VmZmVjdEVsZW1lbnRzLnB1c2goY3JlYXRlVmFsdWVJbnRlcmZhY2UoZWxlbWVudHMuZWZmZWN0RWxlbWVudHNbaV0sZGF0YS5lZltpXS50eSxlbGVtLF9wcm9wZXJ0eUdyb3VwKSk7fX1pZihkYXRhLm1uPT09J0FEQkUgQ29sb3IgQ29udHJvbCcpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShncm91cEludGVyZmFjZSwnY29sb3InLHtnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIGVmZmVjdEVsZW1lbnRzWzBdKCk7fX0pO31PYmplY3QuZGVmaW5lUHJvcGVydGllcyhncm91cEludGVyZmFjZSx7bnVtUHJvcGVydGllczp7Z2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBkYXRhLm5wO319LF9uYW1lOnt2YWx1ZTpkYXRhLm5tfSxwcm9wZXJ0eUdyb3VwOnt2YWx1ZTpfcHJvcGVydHlHcm91cH19KTtncm91cEludGVyZmFjZS5lbmFibGVkPWRhdGEuZW4hPT0wO2dyb3VwSW50ZXJmYWNlLmFjdGl2ZT1ncm91cEludGVyZmFjZS5lbmFibGVkO3JldHVybiBncm91cEludGVyZmFjZTt9ZnVuY3Rpb24gY3JlYXRlVmFsdWVJbnRlcmZhY2UoZWxlbWVudCx0eXBlLGVsZW0scHJvcGVydHlHcm91cCl7dmFyIGV4cHJlc3Npb25Qcm9wZXJ0eT1FeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UoZWxlbWVudC5wKTtmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbigpe2lmKHR5cGU9PT0xMCl7cmV0dXJuIGVsZW0uY29tcC5jb21wSW50ZXJmYWNlKGVsZW1lbnQucC52KTt9cmV0dXJuIGV4cHJlc3Npb25Qcm9wZXJ0eSgpO31pZihlbGVtZW50LnAuc2V0R3JvdXBQcm9wZXJ0eSl7ZWxlbWVudC5wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJycscHJvcGVydHlHcm91cCkpO31yZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247fXJldHVybiBvYjt9KCk7LyogZ2xvYmFsIGNyZWF0ZVNpemVkQXJyYXkgKi8gLyogZXhwb3J0ZWQgTWFza01hbmFnZXJJbnRlcmZhY2UgKi92YXIgTWFza01hbmFnZXJJbnRlcmZhY2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiBNYXNrSW50ZXJmYWNlKG1hc2ssZGF0YSl7dGhpcy5fbWFzaz1tYXNrO3RoaXMuX2RhdGE9ZGF0YTt9T2JqZWN0LmRlZmluZVByb3BlcnR5KE1hc2tJbnRlcmZhY2UucHJvdG90eXBlLCdtYXNrUGF0aCcse2dldDpmdW5jdGlvbiBnZXQoKXtpZih0aGlzLl9tYXNrLnByb3Auayl7dGhpcy5fbWFzay5wcm9wLmdldFZhbHVlKCk7fXJldHVybiB0aGlzLl9tYXNrLnByb3A7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXNrSW50ZXJmYWNlLnByb3RvdHlwZSwnbWFza09wYWNpdHknLHtnZXQ6ZnVuY3Rpb24gZ2V0KCl7aWYodGhpcy5fbWFzay5vcC5rKXt0aGlzLl9tYXNrLm9wLmdldFZhbHVlKCk7fXJldHVybiB0aGlzLl9tYXNrLm9wLnYqMTAwO319KTt2YXIgTWFza01hbmFnZXI9ZnVuY3Rpb24gTWFza01hbmFnZXIobWFza01hbmFnZXIpe3ZhciBfbWFza3NJbnRlcmZhY2VzPWNyZWF0ZVNpemVkQXJyYXkobWFza01hbmFnZXIudmlld0RhdGEubGVuZ3RoKTt2YXIgaTt2YXIgbGVuPW1hc2tNYW5hZ2VyLnZpZXdEYXRhLmxlbmd0aDtmb3IoaT0wO2k8bGVuO2krPTEpe19tYXNrc0ludGVyZmFjZXNbaV09bmV3IE1hc2tJbnRlcmZhY2UobWFza01hbmFnZXIudmlld0RhdGFbaV0sbWFza01hbmFnZXIubWFza3NQcm9wZXJ0aWVzW2ldKTt9dmFyIG1hc2tGdW5jdGlvbj1mdW5jdGlvbiBtYXNrRnVuY3Rpb24obmFtZSl7aT0wO3doaWxlKGk8bGVuKXtpZihtYXNrTWFuYWdlci5tYXNrc1Byb3BlcnRpZXNbaV0ubm09PT1uYW1lKXtyZXR1cm4gX21hc2tzSW50ZXJmYWNlc1tpXTt9aSs9MTt9cmV0dXJuIG51bGw7fTtyZXR1cm4gbWFza0Z1bmN0aW9uO307cmV0dXJuIE1hc2tNYW5hZ2VyO30oKTsvKiBnbG9iYWwgY3JlYXRlVHlwZWRBcnJheSAqLyAvKiBleHBvcnRlZCBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UgKi92YXIgRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlPWZ1bmN0aW9uKCl7dmFyIGRlZmF1bHRVbmlkaW1lbnNpb25hbFZhbHVlPXtwdjowLHY6MCxtdWx0OjF9O3ZhciBkZWZhdWx0TXVsdGlkaW1lbnNpb25hbFZhbHVlPXtwdjpbMCwwLDBdLHY6WzAsMCwwXSxtdWx0OjF9O2Z1bmN0aW9uIGNvbXBsZXRlUHJvcGVydHkoZXhwcmVzc2lvblZhbHVlLHByb3BlcnR5LHR5cGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsJ3ZlbG9jaXR5Jyx7Z2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBwcm9wZXJ0eS5nZXRWZWxvY2l0eUF0VGltZShwcm9wZXJ0eS5jb21wLmN1cnJlbnRGcmFtZSk7fX0pO2V4cHJlc3Npb25WYWx1ZS5udW1LZXlzPXByb3BlcnR5LmtleWZyYW1lcz9wcm9wZXJ0eS5rZXlmcmFtZXMubGVuZ3RoOjA7ZXhwcmVzc2lvblZhbHVlLmtleT1mdW5jdGlvbihwb3Mpe2lmKCFleHByZXNzaW9uVmFsdWUubnVtS2V5cyl7cmV0dXJuIDA7fXZhciB2YWx1ZT0nJztpZigncydpbiBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zLTFdKXt2YWx1ZT1wcm9wZXJ0eS5rZXlmcmFtZXNbcG9zLTFdLnM7fWVsc2UgaWYoJ2UnaW4gcHJvcGVydHkua2V5ZnJhbWVzW3Bvcy0yXSl7dmFsdWU9cHJvcGVydHkua2V5ZnJhbWVzW3Bvcy0yXS5lO31lbHNlIHt2YWx1ZT1wcm9wZXJ0eS5rZXlmcmFtZXNbcG9zLTJdLnM7fXZhciB2YWx1ZVByb3A9dHlwZT09PSd1bmlkaW1lbnNpb25hbCc/bmV3IE51bWJlcih2YWx1ZSk6T2JqZWN0LmFzc2lnbih7fSx2YWx1ZSk7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcbnZhbHVlUHJvcC50aW1lPXByb3BlcnR5LmtleWZyYW1lc1twb3MtMV0udC9wcm9wZXJ0eS5lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7dmFsdWVQcm9wLnZhbHVlPXR5cGU9PT0ndW5pZGltZW5zaW9uYWwnP3ZhbHVlWzBdOnZhbHVlO3JldHVybiB2YWx1ZVByb3A7fTtleHByZXNzaW9uVmFsdWUudmFsdWVBdFRpbWU9cHJvcGVydHkuZ2V0VmFsdWVBdFRpbWU7ZXhwcmVzc2lvblZhbHVlLnNwZWVkQXRUaW1lPXByb3BlcnR5LmdldFNwZWVkQXRUaW1lO2V4cHJlc3Npb25WYWx1ZS52ZWxvY2l0eUF0VGltZT1wcm9wZXJ0eS5nZXRWZWxvY2l0eUF0VGltZTtleHByZXNzaW9uVmFsdWUucHJvcGVydHlHcm91cD1wcm9wZXJ0eS5wcm9wZXJ0eUdyb3VwO31mdW5jdGlvbiBVbmlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlKHByb3BlcnR5KXtpZighcHJvcGVydHl8fCEoJ3B2J2luIHByb3BlcnR5KSl7cHJvcGVydHk9ZGVmYXVsdFVuaWRpbWVuc2lvbmFsVmFsdWU7fXZhciBtdWx0PTEvcHJvcGVydHkubXVsdDt2YXIgdmFsPXByb3BlcnR5LnB2Km11bHQ7dmFyIGV4cHJlc3Npb25WYWx1ZT1uZXcgTnVtYmVyKHZhbCk7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcbmV4cHJlc3Npb25WYWx1ZS52YWx1ZT12YWw7Y29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUscHJvcGVydHksJ3VuaWRpbWVuc2lvbmFsJyk7cmV0dXJuIGZ1bmN0aW9uKCl7aWYocHJvcGVydHkuayl7cHJvcGVydHkuZ2V0VmFsdWUoKTt9dmFsPXByb3BlcnR5LnYqbXVsdDtpZihleHByZXNzaW9uVmFsdWUudmFsdWUhPT12YWwpe2V4cHJlc3Npb25WYWx1ZT1uZXcgTnVtYmVyKHZhbCk7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcbmV4cHJlc3Npb25WYWx1ZS52YWx1ZT12YWw7Y29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUscHJvcGVydHksJ3VuaWRpbWVuc2lvbmFsJyk7fXJldHVybiBleHByZXNzaW9uVmFsdWU7fTt9ZnVuY3Rpb24gTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlKHByb3BlcnR5KXtpZighcHJvcGVydHl8fCEoJ3B2J2luIHByb3BlcnR5KSl7cHJvcGVydHk9ZGVmYXVsdE11bHRpZGltZW5zaW9uYWxWYWx1ZTt9dmFyIG11bHQ9MS9wcm9wZXJ0eS5tdWx0O3ZhciBsZW49cHJvcGVydHkuZGF0YSYmcHJvcGVydHkuZGF0YS5sfHxwcm9wZXJ0eS5wdi5sZW5ndGg7dmFyIGV4cHJlc3Npb25WYWx1ZT1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxsZW4pO3ZhciBhcnJWYWx1ZT1jcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJyxsZW4pO2V4cHJlc3Npb25WYWx1ZS52YWx1ZT1hcnJWYWx1ZTtjb21wbGV0ZVByb3BlcnR5KGV4cHJlc3Npb25WYWx1ZSxwcm9wZXJ0eSwnbXVsdGlkaW1lbnNpb25hbCcpO3JldHVybiBmdW5jdGlvbigpe2lmKHByb3BlcnR5Lmspe3Byb3BlcnR5LmdldFZhbHVlKCk7fWZvcih2YXIgaT0wO2k8bGVuO2krPTEpe2FyclZhbHVlW2ldPXByb3BlcnR5LnZbaV0qbXVsdDtleHByZXNzaW9uVmFsdWVbaV09YXJyVmFsdWVbaV07fXJldHVybiBleHByZXNzaW9uVmFsdWU7fTt9Ly8gVE9ETzogdHJ5IHRvIGF2b2lkIHVzaW5nIHRoaXMgZ2V0dGVyXG5mdW5jdGlvbiBkZWZhdWx0R2V0dGVyKCl7cmV0dXJuIGRlZmF1bHRVbmlkaW1lbnNpb25hbFZhbHVlO31yZXR1cm4gZnVuY3Rpb24ocHJvcGVydHkpe2lmKCFwcm9wZXJ0eSl7cmV0dXJuIGRlZmF1bHRHZXR0ZXI7fWlmKHByb3BlcnR5LnByb3BUeXBlPT09J3VuaWRpbWVuc2lvbmFsJyl7cmV0dXJuIFVuaWRpbWVuc2lvbmFsUHJvcGVydHlJbnRlcmZhY2UocHJvcGVydHkpO31yZXR1cm4gTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlKHByb3BlcnR5KTt9O30oKTsvKiBnbG9iYWwgZXhwcmVzc2lvbkhlbHBlcnMsIFRleHRTZWxlY3RvclByb3AsIEV4cHJlc3Npb25NYW5hZ2VyICovIC8qIGV4cG9ydGVkIFRleHRFeHByZXNzaW9uU2VsZWN0b3JQcm9wICovKGZ1bmN0aW9uKCl7dmFyIFRleHRFeHByZXNzaW9uU2VsZWN0b3JQcm9wPWZ1bmN0aW9uKCl7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuZnVuY3Rpb24gZ2V0VmFsdWVQcm94eShpbmRleCx0b3RhbCl7dGhpcy50ZXh0SW5kZXg9aW5kZXgrMTt0aGlzLnRleHRUb3RhbD10b3RhbDt0aGlzLnY9dGhpcy5nZXRWYWx1ZSgpKnRoaXMubXVsdDtyZXR1cm4gdGhpcy52O31yZXR1cm4gZnVuY3Rpb24gVGV4dEV4cHJlc3Npb25TZWxlY3RvclByb3BGYWN0b3J5KGVsZW0sZGF0YSl7dGhpcy5wdj0xO3RoaXMuY29tcD1lbGVtLmNvbXA7dGhpcy5lbGVtPWVsZW07dGhpcy5tdWx0PTAuMDE7dGhpcy5wcm9wVHlwZT0ndGV4dFNlbGVjdG9yJzt0aGlzLnRleHRUb3RhbD1kYXRhLnRvdGFsQ2hhcnM7dGhpcy5zZWxlY3RvclZhbHVlPTEwMDt0aGlzLmxhc3RWYWx1ZT1bMSwxLDFdO3RoaXMuaz10cnVlO3RoaXMueD10cnVlO3RoaXMuZ2V0VmFsdWU9RXhwcmVzc2lvbk1hbmFnZXIuaW5pdGlhdGVFeHByZXNzaW9uLmJpbmQodGhpcykoZWxlbSxkYXRhLHRoaXMpO3RoaXMuZ2V0TXVsdD1nZXRWYWx1ZVByb3h5O3RoaXMuZ2V0VmVsb2NpdHlBdFRpbWU9ZXhwcmVzc2lvbkhlbHBlcnMuZ2V0VmVsb2NpdHlBdFRpbWU7aWYodGhpcy5rZil7dGhpcy5nZXRWYWx1ZUF0VGltZT1leHByZXNzaW9uSGVscGVycy5nZXRWYWx1ZUF0VGltZS5iaW5kKHRoaXMpO31lbHNlIHt0aGlzLmdldFZhbHVlQXRUaW1lPWV4cHJlc3Npb25IZWxwZXJzLmdldFN0YXRpY1ZhbHVlQXRUaW1lLmJpbmQodGhpcyk7fXRoaXMuc2V0R3JvdXBQcm9wZXJ0eT1leHByZXNzaW9uSGVscGVycy5zZXRHcm91cFByb3BlcnR5O307fSgpO3ZhciBwcm9wZXJ0eUdldFRleHRQcm9wPVRleHRTZWxlY3RvclByb3AuZ2V0VGV4dFNlbGVjdG9yUHJvcDtUZXh0U2VsZWN0b3JQcm9wLmdldFRleHRTZWxlY3RvclByb3A9ZnVuY3Rpb24oZWxlbSxkYXRhLGFycil7aWYoZGF0YS50PT09MSl7cmV0dXJuIG5ldyBUZXh0RXhwcmVzc2lvblNlbGVjdG9yUHJvcEZhY3RvcnkoZWxlbSxkYXRhLGFycik7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxufXJldHVybiBwcm9wZXJ0eUdldFRleHRQcm9wKGVsZW0sZGF0YSxhcnIpO307fSkoKTsvKiBnbG9iYWwgUHJvcGVydHlGYWN0b3J5ICovIC8qIGV4cG9ydGVkIFNsaWRlckVmZmVjdCwgQW5nbGVFZmZlY3QsIENvbG9yRWZmZWN0LCBQb2ludEVmZmVjdCwgTGF5ZXJJbmRleEVmZmVjdCwgTWFza0luZGV4RWZmZWN0LCBDaGVja2JveEVmZmVjdCwgTm9WYWx1ZUVmZmVjdCAqL2Z1bmN0aW9uIFNsaWRlckVmZmVjdChkYXRhLGVsZW0sY29udGFpbmVyKXt0aGlzLnA9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnYsMCwwLGNvbnRhaW5lcik7fWZ1bmN0aW9uIEFuZ2xlRWZmZWN0KGRhdGEsZWxlbSxjb250YWluZXIpe3RoaXMucD1Qcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLGRhdGEudiwwLDAsY29udGFpbmVyKTt9ZnVuY3Rpb24gQ29sb3JFZmZlY3QoZGF0YSxlbGVtLGNvbnRhaW5lcil7dGhpcy5wPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS52LDEsMCxjb250YWluZXIpO31mdW5jdGlvbiBQb2ludEVmZmVjdChkYXRhLGVsZW0sY29udGFpbmVyKXt0aGlzLnA9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnYsMSwwLGNvbnRhaW5lcik7fWZ1bmN0aW9uIExheWVySW5kZXhFZmZlY3QoZGF0YSxlbGVtLGNvbnRhaW5lcil7dGhpcy5wPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS52LDAsMCxjb250YWluZXIpO31mdW5jdGlvbiBNYXNrSW5kZXhFZmZlY3QoZGF0YSxlbGVtLGNvbnRhaW5lcil7dGhpcy5wPVByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sZGF0YS52LDAsMCxjb250YWluZXIpO31mdW5jdGlvbiBDaGVja2JveEVmZmVjdChkYXRhLGVsZW0sY29udGFpbmVyKXt0aGlzLnA9UHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSxkYXRhLnYsMCwwLGNvbnRhaW5lcik7fWZ1bmN0aW9uIE5vVmFsdWVFZmZlY3QoKXt0aGlzLnA9e307fS8qIGdsb2JhbCBleHRlbmRQcm90b3R5cGUsIFNsaWRlckVmZmVjdCwgQW5nbGVFZmZlY3QsIENvbG9yRWZmZWN0LCBQb2ludEVmZmVjdCwgQ2hlY2tib3hFZmZlY3QsIExheWVySW5kZXhFZmZlY3QsXHJcbk1hc2tJbmRleEVmZmVjdCwgTm9WYWx1ZUVmZmVjdCwgRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyICovZnVuY3Rpb24gRWZmZWN0c01hbmFnZXIoZGF0YSxlbGVtZW50KXt2YXIgZWZmZWN0cz1kYXRhLmVmfHxbXTt0aGlzLmVmZmVjdEVsZW1lbnRzPVtdO3ZhciBpO3ZhciBsZW49ZWZmZWN0cy5sZW5ndGg7dmFyIGVmZmVjdEl0ZW07Zm9yKGk9MDtpPGxlbjtpKz0xKXtlZmZlY3RJdGVtPW5ldyBHcm91cEVmZmVjdChlZmZlY3RzW2ldLGVsZW1lbnQpO3RoaXMuZWZmZWN0RWxlbWVudHMucHVzaChlZmZlY3RJdGVtKTt9fWZ1bmN0aW9uIEdyb3VwRWZmZWN0KGRhdGEsZWxlbWVudCl7dGhpcy5pbml0KGRhdGEsZWxlbWVudCk7fWV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSxHcm91cEVmZmVjdCk7R3JvdXBFZmZlY3QucHJvdG90eXBlLmdldFZhbHVlPUdyb3VwRWZmZWN0LnByb3RvdHlwZS5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7R3JvdXBFZmZlY3QucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oZGF0YSxlbGVtZW50KXt0aGlzLmRhdGE9ZGF0YTt0aGlzLmVmZmVjdEVsZW1lbnRzPVtdO3RoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtZW50KTt2YXIgaTt2YXIgbGVuPXRoaXMuZGF0YS5lZi5sZW5ndGg7dmFyIGVmZjt2YXIgZWZmZWN0cz10aGlzLmRhdGEuZWY7Zm9yKGk9MDtpPGxlbjtpKz0xKXtlZmY9bnVsbDtzd2l0Y2goZWZmZWN0c1tpXS50eSl7Y2FzZSAwOmVmZj1uZXcgU2xpZGVyRWZmZWN0KGVmZmVjdHNbaV0sZWxlbWVudCx0aGlzKTticmVhaztjYXNlIDE6ZWZmPW5ldyBBbmdsZUVmZmVjdChlZmZlY3RzW2ldLGVsZW1lbnQsdGhpcyk7YnJlYWs7Y2FzZSAyOmVmZj1uZXcgQ29sb3JFZmZlY3QoZWZmZWN0c1tpXSxlbGVtZW50LHRoaXMpO2JyZWFrO2Nhc2UgMzplZmY9bmV3IFBvaW50RWZmZWN0KGVmZmVjdHNbaV0sZWxlbWVudCx0aGlzKTticmVhaztjYXNlIDQ6Y2FzZSA3OmVmZj1uZXcgQ2hlY2tib3hFZmZlY3QoZWZmZWN0c1tpXSxlbGVtZW50LHRoaXMpO2JyZWFrO2Nhc2UgMTA6ZWZmPW5ldyBMYXllckluZGV4RWZmZWN0KGVmZmVjdHNbaV0sZWxlbWVudCx0aGlzKTticmVhaztjYXNlIDExOmVmZj1uZXcgTWFza0luZGV4RWZmZWN0KGVmZmVjdHNbaV0sZWxlbWVudCx0aGlzKTticmVhaztjYXNlIDU6ZWZmPW5ldyBFZmZlY3RzTWFuYWdlcihlZmZlY3RzW2ldLGVsZW1lbnQsdGhpcyk7YnJlYWs7Ly8gY2FzZSA2OlxuZGVmYXVsdDplZmY9bmV3IE5vVmFsdWVFZmZlY3QoZWZmZWN0c1tpXSxlbGVtZW50LHRoaXMpO2JyZWFrO31pZihlZmYpe3RoaXMuZWZmZWN0RWxlbWVudHMucHVzaChlZmYpO319fTt2YXIgbG90dGllPXt9O2Z1bmN0aW9uIHNldExvY2F0aW9uSHJlZihocmVmKXtsb2NhdGlvbkhyZWY9aHJlZjt9ZnVuY3Rpb24gc2VhcmNoQW5pbWF0aW9ucygpe2lmKHN0YW5kYWxvbmU9PT10cnVlKXthbmltYXRpb25NYW5hZ2VyLnNlYXJjaEFuaW1hdGlvbnMoYW5pbWF0aW9uRGF0YSxzdGFuZGFsb25lLHJlbmRlcmVyKTt9ZWxzZSB7YW5pbWF0aW9uTWFuYWdlci5zZWFyY2hBbmltYXRpb25zKCk7fX1mdW5jdGlvbiBzZXRTdWJmcmFtZVJlbmRlcmluZyhmbGFnKXtzdWJmcmFtZUVuYWJsZWQ9ZmxhZzt9ZnVuY3Rpb24gbG9hZEFuaW1hdGlvbihwYXJhbXMpe2lmKHN0YW5kYWxvbmU9PT10cnVlKXtwYXJhbXMuYW5pbWF0aW9uRGF0YT1KU09OLnBhcnNlKGFuaW1hdGlvbkRhdGEpO31yZXR1cm4gYW5pbWF0aW9uTWFuYWdlci5sb2FkQW5pbWF0aW9uKHBhcmFtcyk7fWZ1bmN0aW9uIHNldFF1YWxpdHkodmFsdWUpe2lmKHR5cGVvZiB2YWx1ZT09PSdzdHJpbmcnKXtzd2l0Y2godmFsdWUpe2Nhc2UnaGlnaCc6ZGVmYXVsdEN1cnZlU2VnbWVudHM9MjAwO2JyZWFrO2RlZmF1bHQ6Y2FzZSdtZWRpdW0nOmRlZmF1bHRDdXJ2ZVNlZ21lbnRzPTUwO2JyZWFrO2Nhc2UnbG93JzpkZWZhdWx0Q3VydmVTZWdtZW50cz0xMDticmVhazt9fWVsc2UgaWYoIWlzTmFOKHZhbHVlKSYmdmFsdWU+MSl7ZGVmYXVsdEN1cnZlU2VnbWVudHM9dmFsdWU7fWlmKGRlZmF1bHRDdXJ2ZVNlZ21lbnRzPj01MCl7cm91bmRWYWx1ZXMoZmFsc2UpO31lbHNlIHtyb3VuZFZhbHVlcyh0cnVlKTt9fWZ1bmN0aW9uIGluQnJvd3Nlcigpe3JldHVybiB0eXBlb2YgbmF2aWdhdG9yIT09J3VuZGVmaW5lZCc7fWZ1bmN0aW9uIGluc3RhbGxQbHVnaW4odHlwZSxwbHVnaW4pe2lmKHR5cGU9PT0nZXhwcmVzc2lvbnMnKXtleHByZXNzaW9uc1BsdWdpbj1wbHVnaW47fX1mdW5jdGlvbiBnZXRGYWN0b3J5KG5hbWUpe3N3aXRjaChuYW1lKXtjYXNlJ3Byb3BlcnR5RmFjdG9yeSc6cmV0dXJuIFByb3BlcnR5RmFjdG9yeTtjYXNlJ3NoYXBlUHJvcGVydHlGYWN0b3J5JzpyZXR1cm4gU2hhcGVQcm9wZXJ0eUZhY3Rvcnk7Y2FzZSdtYXRyaXgnOnJldHVybiBNYXRyaXg7ZGVmYXVsdDpyZXR1cm4gbnVsbDt9fWxvdHRpZS5wbGF5PWFuaW1hdGlvbk1hbmFnZXIucGxheTtsb3R0aWUucGF1c2U9YW5pbWF0aW9uTWFuYWdlci5wYXVzZTtsb3R0aWUuc2V0TG9jYXRpb25IcmVmPXNldExvY2F0aW9uSHJlZjtsb3R0aWUudG9nZ2xlUGF1c2U9YW5pbWF0aW9uTWFuYWdlci50b2dnbGVQYXVzZTtsb3R0aWUuc2V0U3BlZWQ9YW5pbWF0aW9uTWFuYWdlci5zZXRTcGVlZDtsb3R0aWUuc2V0RGlyZWN0aW9uPWFuaW1hdGlvbk1hbmFnZXIuc2V0RGlyZWN0aW9uO2xvdHRpZS5zdG9wPWFuaW1hdGlvbk1hbmFnZXIuc3RvcDtsb3R0aWUuc2VhcmNoQW5pbWF0aW9ucz1zZWFyY2hBbmltYXRpb25zO2xvdHRpZS5yZWdpc3RlckFuaW1hdGlvbj1hbmltYXRpb25NYW5hZ2VyLnJlZ2lzdGVyQW5pbWF0aW9uO2xvdHRpZS5sb2FkQW5pbWF0aW9uPWxvYWRBbmltYXRpb247bG90dGllLnNldFN1YmZyYW1lUmVuZGVyaW5nPXNldFN1YmZyYW1lUmVuZGVyaW5nO2xvdHRpZS5yZXNpemU9YW5pbWF0aW9uTWFuYWdlci5yZXNpemU7Ly8gbG90dGllLnN0YXJ0ID0gc3RhcnQ7XG5sb3R0aWUuZ29Ub0FuZFN0b3A9YW5pbWF0aW9uTWFuYWdlci5nb1RvQW5kU3RvcDtsb3R0aWUuZGVzdHJveT1hbmltYXRpb25NYW5hZ2VyLmRlc3Ryb3k7bG90dGllLnNldFF1YWxpdHk9c2V0UXVhbGl0eTtsb3R0aWUuaW5Ccm93c2VyPWluQnJvd3Nlcjtsb3R0aWUuaW5zdGFsbFBsdWdpbj1pbnN0YWxsUGx1Z2luO2xvdHRpZS5mcmVlemU9YW5pbWF0aW9uTWFuYWdlci5mcmVlemU7bG90dGllLnVuZnJlZXplPWFuaW1hdGlvbk1hbmFnZXIudW5mcmVlemU7bG90dGllLnNldFZvbHVtZT1hbmltYXRpb25NYW5hZ2VyLnNldFZvbHVtZTtsb3R0aWUubXV0ZT1hbmltYXRpb25NYW5hZ2VyLm11dGU7bG90dGllLnVubXV0ZT1hbmltYXRpb25NYW5hZ2VyLnVubXV0ZTtsb3R0aWUuZ2V0UmVnaXN0ZXJlZEFuaW1hdGlvbnM9YW5pbWF0aW9uTWFuYWdlci5nZXRSZWdpc3RlcmVkQW5pbWF0aW9ucztsb3R0aWUuX19nZXRGYWN0b3J5PWdldEZhY3Rvcnk7bG90dGllLnZlcnNpb249JzUuNy43JztmdW5jdGlvbiBjaGVja1JlYWR5KCl7aWYoZG9jdW1lbnQucmVhZHlTdGF0ZT09PSdjb21wbGV0ZScpe2NsZWFySW50ZXJ2YWwocmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWwpO3NlYXJjaEFuaW1hdGlvbnMoKTt9fWZ1bmN0aW9uIGdldFF1ZXJ5VmFyaWFibGUodmFyaWFibGUpe3ZhciB2YXJzPXF1ZXJ5U3RyaW5nLnNwbGl0KCcmJyk7Zm9yKHZhciBpPTA7aTx2YXJzLmxlbmd0aDtpKz0xKXt2YXIgcGFpcj12YXJzW2ldLnNwbGl0KCc9Jyk7aWYoZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pPT12YXJpYWJsZSl7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbnJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7fX1yZXR1cm4gbnVsbDt9dmFyIHN0YW5kYWxvbmU9J19fW1NUQU5EQUxPTkVdX18nO3ZhciBhbmltYXRpb25EYXRhPSdfX1tBTklNQVRJT05EQVRBXV9fJzt2YXIgcmVuZGVyZXI9Jyc7dmFyIHF1ZXJ5U3RyaW5nO2lmKHN0YW5kYWxvbmUpe3ZhciBzY3JpcHRzPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTt2YXIgaW5kZXg9c2NyaXB0cy5sZW5ndGgtMTt2YXIgbXlTY3JpcHQ9c2NyaXB0c1tpbmRleF18fHtzcmM6Jyd9O3F1ZXJ5U3RyaW5nPW15U2NyaXB0LnNyYy5yZXBsYWNlKC9eW15cXD9dK1xcPz8vLCcnKTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5yZW5kZXJlcj1nZXRRdWVyeVZhcmlhYmxlKCdyZW5kZXJlcicpO312YXIgcmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWw9c2V0SW50ZXJ2YWwoY2hlY2tSZWFkeSwxMDApO3JldHVybiBsb3R0aWU7fSk7fSk7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QkMTtcbnZhciBzdHlsZXMgPSBjc3MoX3RlbXBsYXRlT2JqZWN0JDEgfHwgKF90ZW1wbGF0ZU9iamVjdCQxID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbXCJcXG4qIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbjpob3N0IHtcXG4gIC0tbG90dGllLXBsYXllci10b29sYmFyLWhlaWdodDogMzVweDtcXG4gIC0tbG90dGllLXBsYXllci10b29sYmFyLWJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1sb3R0aWUtcGxheWVyLXRvb2xiYXItaWNvbi1jb2xvcjogIzk5OTtcXG4gIC0tbG90dGllLXBsYXllci10b29sYmFyLWljb24taG92ZXItY29sb3I6ICMyMjI7XFxuICAtLWxvdHRpZS1wbGF5ZXItdG9vbGJhci1pY29uLWFjdGl2ZS1jb2xvcjogIzU1NTtcXG4gIC0tbG90dGllLXBsYXllci1zZWVrZXItdHJhY2stY29sb3I6ICNDQ0M7XFxuICAtLWxvdHRpZS1wbGF5ZXItc2Vla2VyLXRodW1iLWNvbG9yOiByZ2JhKDAsIDEwNywgMTIwLCAwLjgpO1xcblxcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLm1haW4ge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGRpc3BsYXk6IGlubGluZS1ncmlkO1xcbiAgZ3JpZC1hdXRvLWNvbHVtbnM6IGF1dG87XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IGluaGVyaXQ7XFxuICB3aWR0aDogaW5oZXJpdDtcXG59XFxuXFxuLm1haW4uY29udHJvbHMge1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgdmFyKC0tbG90dGllLXBsYXllci10b29sYmFyLWhlaWdodCk7XFxufVxcblxcbi5hbmltYXRpb24ge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGhlaWdodDogY2FsYygxZnIgLSB2YXIoLS1sb3R0aWUtcGxheWVyLXRvb2xiYXItaGVpZ2h0KSk7XFxufVxcblxcbi50b29sYmFyIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMycHggMzJweCAxZnIgMzJweDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sb3R0aWUtcGxheWVyLXRvb2xiYXItYmFja2dyb3VuZC1jb2xvcik7XFxuICBtYXJnaW46IDAgNXB4O1xcbn1cXG5cXG4udG9vbGJhciBidXR0b24ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZmlsbDogdmFyKC0tbG90dGllLXBsYXllci10b29sYmFyLWljb24tY29sb3IpO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBib3JkZXI6IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLnRvb2xiYXIgYnV0dG9uOmhvdmVyIHtcXG4gIGZpbGw6IHZhcigtLWxvdHRpZS1wbGF5ZXItdG9vbGJhci1pY29uLWhvdmVyLWNvbG9yKTtcXG59XFxuXFxuLnRvb2xiYXIgYnV0dG9uLmFjdGl2ZSB7XFxuICBmaWxsOiB2YXIoLS1sb3R0aWUtcGxheWVyLXRvb2xiYXItaWNvbi1hY3RpdmUtY29sb3IpO1xcbn1cXG5cXG4udG9vbGJhciBidXR0b24gc3ZnIHtcXG59XFxuXFxuLnRvb2xiYXIgYnV0dG9uLmRpc2FibGVkIHN2ZyB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uc2Vla2VyIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIHdpZHRoOiA5NSU7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG4uc2Vla2VyOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFjayB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZDogdmFyKC0tbG90dGllLXBsYXllci1zZWVrZXItdHJhY2stY29sb3IpO1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG4uc2Vla2VyOjotd2Via2l0LXNsaWRlci10aHVtYiB7XFxuICBoZWlnaHQ6IDE1cHg7XFxuICB3aWR0aDogMTVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxvdHRpZS1wbGF5ZXItc2Vla2VyLXRodW1iLWNvbG9yKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIG1hcmdpbi10b3A6IC01cHg7XFxufVxcbi5zZWVrZXI6Zm9jdXM6Oi13ZWJraXQtc2xpZGVyLXJ1bm5hYmxlLXRyYWNrIHtcXG4gIGJhY2tncm91bmQ6ICM5OTk7XFxufVxcbi5zZWVrZXI6Oi1tb3otcmFuZ2UtdHJhY2sge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxvdHRpZS1wbGF5ZXItc2Vla2VyLXRyYWNrLWNvbG9yKTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuLnNlZWtlcjo6LW1vei1yYW5nZS10aHVtYiB7XFxuICBoZWlnaHQ6IDE1cHg7XFxuICB3aWR0aDogMTVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxvdHRpZS1wbGF5ZXItc2Vla2VyLXRodW1iLWNvbG9yKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnNlZWtlcjo6LW1zLXRyYWNrIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA1cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcbi5zZWVrZXI6Oi1tcy1maWxsLWxvd2VyIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxvdHRpZS1wbGF5ZXItc2Vla2VyLXRyYWNrLWNvbG9yKTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuLnNlZWtlcjo6LW1zLWZpbGwtdXBwZXIge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tbG90dGllLXBsYXllci1zZWVrZXItdHJhY2stY29sb3IpO1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG4uc2Vla2VyOjotbXMtdGh1bWIge1xcbiAgYm9yZGVyOiAwO1xcbiAgaGVpZ2h0OiAxNXB4O1xcbiAgd2lkdGg6IDE1cHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1sb3R0aWUtcGxheWVyLXNlZWtlci10aHVtYi1jb2xvcik7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5zZWVrZXI6Zm9jdXM6Oi1tcy1maWxsLWxvd2VyIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxvdHRpZS1wbGF5ZXItc2Vla2VyLXRyYWNrLWNvbG9yKTtcXG59XFxuLnNlZWtlcjpmb2N1czo6LW1zLWZpbGwtdXBwZXIge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tbG90dGllLXBsYXllci1zZWVrZXItdHJhY2stY29sb3IpO1xcbn1cXG5cXG4uZXJyb3Ige1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXCJdKSkpO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0LCBfdGVtcGxhdGVPYmplY3QyLCBfdGVtcGxhdGVPYmplY3QzLCBfdGVtcGxhdGVPYmplY3Q0LCBfdGVtcGxhdGVPYmplY3Q1O1xuXG52YXIgUGxheWVyU3RhdGU7XG5cbihmdW5jdGlvbiAoUGxheWVyU3RhdGUpIHtcbiAgUGxheWVyU3RhdGVbXCJMb2FkaW5nXCJdID0gXCJsb2FkaW5nXCI7XG4gIFBsYXllclN0YXRlW1wiUGxheWluZ1wiXSA9IFwicGxheWluZ1wiO1xuICBQbGF5ZXJTdGF0ZVtcIlBhdXNlZFwiXSA9IFwicGF1c2VkXCI7XG4gIFBsYXllclN0YXRlW1wiU3RvcHBlZFwiXSA9IFwic3RvcHBlZFwiO1xuICBQbGF5ZXJTdGF0ZVtcIkZyb3plblwiXSA9IFwiZnJvemVuXCI7XG4gIFBsYXllclN0YXRlW1wiRXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShQbGF5ZXJTdGF0ZSB8fCAoUGxheWVyU3RhdGUgPSB7fSkpOyAvLyBEZWZpbmUgcGxheSBtb2Rlc1xuXG5cbnZhciBQbGF5TW9kZTtcblxuKGZ1bmN0aW9uIChQbGF5TW9kZSkge1xuICBQbGF5TW9kZVtcIk5vcm1hbFwiXSA9IFwibm9ybWFsXCI7XG4gIFBsYXlNb2RlW1wiQm91bmNlXCJdID0gXCJib3VuY2VcIjtcbn0pKFBsYXlNb2RlIHx8IChQbGF5TW9kZSA9IHt9KSk7IC8vIERlZmluZSBwbGF5ZXIgZXZlbnRzXG5cblxudmFyIFBsYXllckV2ZW50cztcblxuKGZ1bmN0aW9uIChQbGF5ZXJFdmVudHMpIHtcbiAgUGxheWVyRXZlbnRzW1wiTG9hZFwiXSA9IFwibG9hZFwiO1xuICBQbGF5ZXJFdmVudHNbXCJFcnJvclwiXSA9IFwiZXJyb3JcIjtcbiAgUGxheWVyRXZlbnRzW1wiUmVhZHlcIl0gPSBcInJlYWR5XCI7XG4gIFBsYXllckV2ZW50c1tcIlBsYXlcIl0gPSBcInBsYXlcIjtcbiAgUGxheWVyRXZlbnRzW1wiUGF1c2VcIl0gPSBcInBhdXNlXCI7XG4gIFBsYXllckV2ZW50c1tcIlN0b3BcIl0gPSBcInN0b3BcIjtcbiAgUGxheWVyRXZlbnRzW1wiRnJlZXplXCJdID0gXCJmcmVlemVcIjtcbiAgUGxheWVyRXZlbnRzW1wiTG9vcFwiXSA9IFwibG9vcFwiO1xuICBQbGF5ZXJFdmVudHNbXCJDb21wbGV0ZVwiXSA9IFwiY29tcGxldGVcIjtcbiAgUGxheWVyRXZlbnRzW1wiRnJhbWVcIl0gPSBcImZyYW1lXCI7XG59KShQbGF5ZXJFdmVudHMgfHwgKFBsYXllckV2ZW50cyA9IHt9KSk7XG4vKipcclxuICogUGFyc2UgYSByZXNvdXJjZSBpbnRvIGEgSlNPTiBvYmplY3Qgb3IgYSBVUkwgc3RyaW5nXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlU3JjKHNyYykge1xuICBpZiAodHlwZW9mIHNyYyA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBzcmM7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHNyYyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBUcnkgY29uc3RydWN0IGFuIGFic29sdXRlIFVSTCBmcm9tIHRoZSBzcmMgVVJMXG4gICAgdmFyIHNyY1VybCA9IG5ldyBVUkwoc3JjLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgcmV0dXJuIHNyY1VybC50b1N0cmluZygpO1xuICB9XG59XG4vKipcclxuICogTG90dGllUGxheWVyIHdlYiBjb21wb25lbnQgY2xhc3NcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAY2xhc3MgTG90dGllUGxheWVyXHJcbiAqIEBleHRlbmRzIHtMaXRFbGVtZW50fVxyXG4gKi9cblxudmFyIExvdHRpZVBsYXllciA9IGNsYXNzIExvdHRpZVBsYXllciBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxyXG4gICAgICogUGxheSBtb2RlLlxyXG4gICAgICovXG5cbiAgICB0aGlzLm1vZGUgPSBQbGF5TW9kZS5Ob3JtYWw7XG4gICAgLyoqXHJcbiAgICAgKiBBdXRvcGxheSBhbmltYXRpb24gb24gbG9hZC5cclxuICAgICAqL1xuXG4gICAgdGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuICAgIC8qKlxyXG4gICAgICogQmFja2dyb3VuZCBjb2xvci5cclxuICAgICAqL1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gXCJ0cmFuc3BhcmVudFwiO1xuICAgIC8qKlxyXG4gICAgICogU2hvdyBjb250cm9scy5cclxuICAgICAqL1xuXG4gICAgdGhpcy5jb250cm9scyA9IGZhbHNlO1xuICAgIC8qKlxyXG4gICAgICogRGlyZWN0aW9uIG9mIGFuaW1hdGlvbi5cclxuICAgICAqL1xuXG4gICAgdGhpcy5kaXJlY3Rpb24gPSAxO1xuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0byBwbGF5IG9uIG1vdXNlIGhvdmVyXHJcbiAgICAgKi9cblxuICAgIHRoaXMuaG92ZXIgPSBmYWxzZTtcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdG8gbG9vcCBhbmltYXRpb24uXHJcbiAgICAgKi9cblxuICAgIHRoaXMubG9vcCA9IGZhbHNlO1xuICAgIC8qKlxyXG4gICAgICogQXNwZWN0IHJhdGlvIHRvIHBhc3MgdG8gbG90dGllLXdlYi5cclxuICAgICAqL1xuXG4gICAgdGhpcy5wcmVzZXJ2ZUFzcGVjdFJhdGlvID0gXCJ4TWlkWU1pZCBtZWV0XCI7XG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXJlciB0byB1c2UuXHJcbiAgICAgKi9cblxuICAgIHRoaXMucmVuZGVyZXIgPSBcInN2Z1wiO1xuICAgIC8qKlxyXG4gICAgICogQW5pbWF0aW9uIHNwZWVkLlxyXG4gICAgICovXG5cbiAgICB0aGlzLnNwZWVkID0gMTtcbiAgICAvKipcclxuICAgICAqIFBsYXllciBzdGF0ZS5cclxuICAgICAqL1xuXG4gICAgdGhpcy5jdXJyZW50U3RhdGUgPSBQbGF5ZXJTdGF0ZS5Mb2FkaW5nO1xuICAgIHRoaXMuaW50ZXJtaXNzaW9uID0gMTtcbiAgICB0aGlzLl9pbyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9jb3VudGVyID0gMDtcbiAgfVxuICAvKipcclxuICAgKiBIYW5kbGUgdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnRzLlxyXG4gICAqL1xuXG5cbiAgX29uVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgICBpZiAoZG9jdW1lbnQuaGlkZGVuID09PSB0cnVlICYmIHRoaXMuY3VycmVudFN0YXRlID09PSBQbGF5ZXJTdGF0ZS5QbGF5aW5nKSB7XG4gICAgICB0aGlzLmZyZWV6ZSgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50U3RhdGUgPT09IFBsYXllclN0YXRlLkZyb3plbikge1xuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfVxuICB9XG4gIC8qKlxyXG4gICAqIEhhbmRsZXMgY2xpY2sgYW5kIGRyYWcgYWN0aW9ucyBvbiB0aGUgcHJvZ3Jlc3MgdHJhY2suXHJcbiAgICovXG5cblxuICBfaGFuZGxlU2Vla0NoYW5nZShlKSB7XG4gICAgaWYgKCF0aGlzLl9sb3R0aWUgfHwgaXNOYU4oZS50YXJnZXQudmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGZyYW1lID0gZS50YXJnZXQudmFsdWUgLyAxMDAgKiB0aGlzLl9sb3R0aWUudG90YWxGcmFtZXM7XG4gICAgdGhpcy5zZWVrKGZyYW1lKTtcbiAgfVxuICAvKipcclxuICAgKiBDb25maWd1cmUgYW5kIGluaXRpYWxpemUgbG90dGllLXdlYiBwbGF5ZXIgaW5zdGFuY2UuXHJcbiAgICovXG5cblxuICBsb2FkKHNyYykge1xuICAgIGlmICghdGhpcy5zaGFkb3dSb290KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyLFxuICAgICAgbG9vcDogZmFsc2UsXG4gICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICByZW5kZXJlcjogdGhpcy5yZW5kZXJlcixcbiAgICAgIHJlbmRlcmVyU2V0dGluZ3M6IHtcbiAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogdGhpcy5wcmVzZXJ2ZUFzcGVjdFJhdGlvLFxuICAgICAgICBjbGVhckNhbnZhczogZmFsc2UsXG4gICAgICAgIHByb2dyZXNzaXZlTG9hZDogdHJ1ZSxcbiAgICAgICAgaGlkZU9uVHJhbnNwYXJlbnQ6IHRydWVcbiAgICAgIH1cbiAgICB9OyAvLyBMb2FkIHRoZSByZXNvdXJjZSBpbmZvcm1hdGlvblxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzcmNQYXJzZWQgPSBwYXJzZVNyYyhzcmMpO1xuICAgICAgdmFyIHNyY0F0dHJpYiA9IHR5cGVvZiBzcmNQYXJzZWQgPT09IFwic3RyaW5nXCIgPyBcInBhdGhcIiA6IFwiYW5pbWF0aW9uRGF0YVwiOyAvLyBDbGVhciBwcmV2aW91cyBhbmltYXRpb24sIGlmIGFueVxuXG4gICAgICBpZiAodGhpcy5fbG90dGllKSB7XG4gICAgICAgIHRoaXMuX2xvdHRpZS5kZXN0cm95KCk7XG4gICAgICB9IC8vIEluaXRpYWxpemUgbG90dGllIHBsYXllciBhbmQgbG9hZCBhbmltYXRpb25cblxuXG4gICAgICB0aGlzLl9sb3R0aWUgPSBsb3R0aWUubG9hZEFuaW1hdGlvbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7XG4gICAgICAgIFtzcmNBdHRyaWJdOiBzcmNQYXJzZWRcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gUGxheWVyU3RhdGUuRXJyb3I7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFBsYXllckV2ZW50cy5FcnJvcikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9sb3R0aWUpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSBhbmQgc2F2ZSB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgYW5pbWF0aW9uXG4gICAgICB0aGlzLl9sb3R0aWUuYWRkRXZlbnRMaXN0ZW5lcihcImVudGVyRnJhbWVcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLnNlZWtlciA9IHRoaXMuX2xvdHRpZS5jdXJyZW50RnJhbWUgLyB0aGlzLl9sb3R0aWUudG90YWxGcmFtZXMgKiAxMDA7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUGxheWVyRXZlbnRzLkZyYW1lLCB7XG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBmcmFtZTogdGhpcy5fbG90dGllLmN1cnJlbnRGcmFtZSxcbiAgICAgICAgICAgIHNlZWtlcjogdGhpcy5zZWVrZXJcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0pOyAvLyBIYW5kbGUgYW5pbWF0aW9uIHBsYXkgY29tcGxldGVcblxuXG4gICAgICB0aGlzLl9sb3R0aWUuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBsZXRlXCIsICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0YXRlICE9PSBQbGF5ZXJTdGF0ZS5QbGF5aW5nKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChQbGF5ZXJFdmVudHMuQ29tcGxldGUpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMubG9vcCB8fCB0aGlzLmNvdW50ICYmIHRoaXMuX2NvdW50ZXIgPj0gdGhpcy5jb3VudCkge1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUGxheWVyRXZlbnRzLkNvbXBsZXRlKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gUGxheU1vZGUuQm91bmNlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvdW50ZXIgKz0gMC41O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChQbGF5ZXJFdmVudHMuTG9vcCkpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RhdGUgPT09IFBsYXllclN0YXRlLlBsYXlpbmcpIHtcbiAgICAgICAgICAgICAgdGhpcy5fbG90dGllLnNldERpcmVjdGlvbih0aGlzLl9sb3R0aWUucGxheURpcmVjdGlvbiAqIC0xKTtcblxuICAgICAgICAgICAgICB0aGlzLl9sb3R0aWUucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHRoaXMuaW50ZXJtaXNzaW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5jb3VudCkge1xuICAgICAgICAgICAgdGhpcy5fY291bnRlciArPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUGxheWVyRXZlbnRzLkxvb3ApKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0YXRlID09PSBQbGF5ZXJTdGF0ZS5QbGF5aW5nKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2xvdHRpZS5zdG9wKCk7XG5cbiAgICAgICAgICAgICAgdGhpcy5fbG90dGllLnBsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aGlzLmludGVybWlzc2lvbik7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBIYW5kbGUgbG90dGllLXdlYiByZWFkeSBldmVudFxuXG5cbiAgICAgIHRoaXMuX2xvdHRpZS5hZGRFdmVudExpc3RlbmVyKFwiRE9NTG9hZGVkXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChQbGF5ZXJFdmVudHMuUmVhZHkpKTtcbiAgICAgIH0pOyAvLyBIYW5kbGUgYW5pbWF0aW9uIGRhdGEgbG9hZCBjb21wbGV0ZVxuXG5cbiAgICAgIHRoaXMuX2xvdHRpZS5hZGRFdmVudExpc3RlbmVyKFwiZGF0YV9yZWFkeVwiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUGxheWVyRXZlbnRzLkxvYWQpKTtcbiAgICAgIH0pOyAvLyBTZXQgZXJyb3Igc3RhdGUgd2hlbiBhbmltYXRpb24gbG9hZCBmYWlsIGV2ZW50IHRyaWdnZXJzXG5cblxuICAgICAgdGhpcy5fbG90dGllLmFkZEV2ZW50TGlzdGVuZXIoXCJkYXRhX2ZhaWxlZFwiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gUGxheWVyU3RhdGUuRXJyb3I7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUGxheWVyRXZlbnRzLkVycm9yKSk7XG4gICAgICB9KTsgLy8gU2V0IGhhbmRsZXJzIHRvIGF1dG8gcGxheSBhbmltYXRpb24gb24gaG92ZXIgaWYgZW5hYmxlZFxuXG5cbiAgICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaG92ZXIgJiYgdGhpcy5jdXJyZW50U3RhdGUgIT09IFBsYXllclN0YXRlLlBsYXlpbmcpIHtcbiAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmhvdmVyICYmIHRoaXMuY3VycmVudFN0YXRlID09PSBQbGF5ZXJTdGF0ZS5QbGF5aW5nKSB7XG4gICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBTZXQgaW5pdGlhbCBwbGF5YmFjayBzcGVlZCBhbmQgZGlyZWN0aW9uXG5cbiAgICAgIHRoaXMuc2V0U3BlZWQodGhpcy5zcGVlZCk7XG4gICAgICB0aGlzLnNldERpcmVjdGlvbih0aGlzLmRpcmVjdGlvbik7IC8vIFN0YXJ0IHBsYXlpbmcgaWYgYXV0b3BsYXkgaXMgZW5hYmxlZFxuXG4gICAgICBpZiAodGhpcy5hdXRvcGxheSkge1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgbG90dGllLXdlYiBpbnN0YW5jZSB1c2VkIGluIHRoZSBjb21wb25lbnQuXHJcbiAgICovXG5cblxuICBnZXRMb3R0aWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvdHRpZTtcbiAgfVxuICAvKipcclxuICAgKiBTdGFydCBwbGF5aW5nIGFuaW1hdGlvbi5cclxuICAgKi9cblxuXG4gIHBsYXkoKSB7XG4gICAgaWYgKCF0aGlzLl9sb3R0aWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sb3R0aWUucGxheSgpO1xuXG4gICAgdGhpcy5jdXJyZW50U3RhdGUgPSBQbGF5ZXJTdGF0ZS5QbGF5aW5nO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUGxheWVyRXZlbnRzLlBsYXkpKTtcbiAgfVxuICAvKipcclxuICAgKiBQYXVzZSBhbmltYXRpb24gcGxheS5cclxuICAgKi9cblxuXG4gIHBhdXNlKCkge1xuICAgIGlmICghdGhpcy5fbG90dGllKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbG90dGllLnBhdXNlKCk7XG5cbiAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IFBsYXllclN0YXRlLlBhdXNlZDtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFBsYXllckV2ZW50cy5QYXVzZSkpO1xuICB9XG4gIC8qKlxyXG4gICAqIFN0b3BzIGFuaW1hdGlvbiBwbGF5LlxyXG4gICAqL1xuXG5cbiAgc3RvcCgpIHtcbiAgICBpZiAoIXRoaXMuX2xvdHRpZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuXG4gICAgdGhpcy5fbG90dGllLnN0b3AoKTtcblxuICAgIHRoaXMuY3VycmVudFN0YXRlID0gUGxheWVyU3RhdGUuU3RvcHBlZDtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFBsYXllckV2ZW50cy5TdG9wKSk7XG4gIH1cbiAgLyoqXHJcbiAgICogU2VlayB0byBhIGdpdmVuIGZyYW1lLlxyXG4gICAqL1xuXG5cbiAgc2Vlayh2YWx1ZSkge1xuICAgIGlmICghdGhpcy5fbG90dGllKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBFeHRyYWN0IGZyYW1lIG51bWJlciBmcm9tIGVpdGhlciBudW1iZXIgb3IgcGVyY2VudGFnZSB2YWx1ZVxuXG5cbiAgICB2YXIgbWF0Y2hlcyA9IHZhbHVlLnRvU3RyaW5nKCkubWF0Y2goL14oWzAtOV0rKSglPykkLyk7XG5cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENhbGN1bGF0ZSBhbmQgc2V0IHRoZSBmcmFtZSBudW1iZXJcblxuXG4gICAgdmFyIGZyYW1lID0gbWF0Y2hlc1syXSA9PT0gXCIlXCIgPyB0aGlzLl9sb3R0aWUudG90YWxGcmFtZXMgKiBOdW1iZXIobWF0Y2hlc1sxXSkgLyAxMDAgOiBOdW1iZXIobWF0Y2hlc1sxXSk7IC8vIFNldCBzZWVrZXIgdG8gbmV3IGZyYW1lIG51bWJlclxuXG4gICAgdGhpcy5zZWVrZXIgPSBmcmFtZTsgLy8gU2VuZCBsb3R0aWUgcGxheWVyIHRvIHRoZSBuZXcgZnJhbWVcblxuICAgIGlmICh0aGlzLmN1cnJlbnRTdGF0ZSA9PT0gUGxheWVyU3RhdGUuUGxheWluZykge1xuICAgICAgdGhpcy5fbG90dGllLmdvVG9BbmRQbGF5KGZyYW1lLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbG90dGllLmdvVG9BbmRTdG9wKGZyYW1lLCB0cnVlKTtcblxuICAgICAgdGhpcy5fbG90dGllLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxyXG4gICAqIFNuYXBzaG90IHRoZSBjdXJyZW50IGZyYW1lIGFzIFNWRy5cclxuICAgKlxyXG4gICAqIElmICdkb3dubG9hZCcgYXJndW1lbnQgaXMgYm9vbGVhbiB0cnVlLCB0aGVuIGEgZG93bmxvYWQgaXMgdHJpZ2dlcmVkIGluIGJyb3dzZXIuXHJcbiAgICovXG5cblxuICBzbmFwc2hvdCgpIHtcbiAgICB2YXIgZG93bmxvYWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gICAgaWYgKCF0aGlzLnNoYWRvd1Jvb3QpIHJldHVybjsgLy8gR2V0IFNWRyBlbGVtZW50IGFuZCBzZXJpYWxpemUgbWFya3VwXG5cbiAgICB2YXIgc3ZnRWxlbWVudCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiLmFuaW1hdGlvbiBzdmdcIik7XG4gICAgdmFyIGRhdGEgPSBuZXcgWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHN2Z0VsZW1lbnQpOyAvLyBUcmlnZ2VyIGZpbGUgZG93bmxvYWRcblxuICAgIGlmIChkb3dubG9hZCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgIGVsZW1lbnQuaHJlZiA9IFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGF0YSk7XG4gICAgICBlbGVtZW50LmRvd25sb2FkID0gXCJkb3dubG9hZF9cIiArIHRoaXMuc2Vla2VyICsgXCIuc3ZnXCI7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgZWxlbWVudC5jbGljaygpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICAvKipcclxuICAgKiBGcmVlemUgYW5pbWF0aW9uIHBsYXkuXHJcbiAgICogVGhpcyBpbnRlcm5hbCBzdGF0ZSBwYXVzZXMgYW5pbWF0aW9uIGFuZCBpcyB1c2VkIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlblxyXG4gICAqIHVzZXIgcmVxdWVzdGVkIHBhdXNlcyBhbmQgY29tcG9uZW50IGluc3RpZ2F0ZWQgcGF1c2VzLlxyXG4gICAqL1xuXG5cbiAgZnJlZXplKCkge1xuICAgIGlmICghdGhpcy5fbG90dGllKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbG90dGllLnBhdXNlKCk7XG5cbiAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IFBsYXllclN0YXRlLkZyb3plbjtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFBsYXllckV2ZW50cy5GcmVlemUpKTtcbiAgfVxuICAvKipcclxuICAgKiBTZXRzIGFuaW1hdGlvbiBwbGF5IHNwZWVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHZhbHVlIFBsYXliYWNrIHNwZWVkLlxyXG4gICAqL1xuXG5cbiAgc2V0U3BlZWQoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxO1xuXG4gICAgaWYgKCF0aGlzLl9sb3R0aWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sb3R0aWUuc2V0U3BlZWQodmFsdWUpO1xuICB9XG4gIC8qKlxyXG4gICAqIEFuaW1hdGlvbiBwbGF5IGRpcmVjdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB2YWx1ZSBEaXJlY3Rpb24gdmFsdWVzLlxyXG4gICAqL1xuXG5cbiAgc2V0RGlyZWN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCF0aGlzLl9sb3R0aWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sb3R0aWUuc2V0RGlyZWN0aW9uKHZhbHVlKTtcbiAgfVxuICAvKipcclxuICAgKiBTZXRzIHRoZSBsb29waW5nIG9mIHRoZSBhbmltYXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdmFsdWUgV2hldGhlciB0byBlbmFibGUgbG9vcGluZy4gQm9vbGVhbiB0cnVlIGVuYWJsZXMgbG9vcGluZy5cclxuICAgKi9cblxuXG4gIHNldExvb3BpbmcodmFsdWUpIHtcbiAgICBpZiAodGhpcy5fbG90dGllKSB7XG4gICAgICB0aGlzLmxvb3AgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX2xvdHRpZS5sb29wID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIC8qKlxyXG4gICAqIFRvZ2dsZSBwbGF5aW5nIHN0YXRlLlxyXG4gICAqL1xuXG5cbiAgdG9nZ2xlUGxheSgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U3RhdGUgPT09IFBsYXllclN0YXRlLlBsYXlpbmcgPyB0aGlzLnBhdXNlKCkgOiB0aGlzLnBsYXkoKTtcbiAgfVxuICAvKipcclxuICAgKiBUb2dnbGVzIGFuaW1hdGlvbiBsb29waW5nLlxyXG4gICAqL1xuXG5cbiAgdG9nZ2xlTG9vcGluZygpIHtcbiAgICB0aGlzLnNldExvb3BpbmcoIXRoaXMubG9vcCk7XG4gIH1cbiAgLyoqXHJcbiAgICogUmVzaXplIGFuaW1hdGlvbi5cclxuICAgKi9cblxuXG4gIHJlc2l6ZSgpIHtcbiAgICBpZiAoIXRoaXMuX2xvdHRpZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2xvdHRpZS5yZXNpemUoKTtcbiAgfVxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBzdHlsZXMgZm9yIHRoZSBjb21wb25lbnQuXHJcbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgZXZlcnl0aGluZyBvbiBjb21wb25lbnQgZmlyc3QgcmVuZGVyLlxyXG4gICAqL1xuXG5cbiAgZmlyc3RVcGRhdGVkKCkge1xuICAgIC8vIEFkZCBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIgZm9yIGRldGVjdGluZyBjb21wb25lbnQgYmVpbmcgb3V0LW9mLXZpZXcuXG4gICAgaWYgKFwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcIiBpbiB3aW5kb3cpIHtcbiAgICAgIHRoaXMuX2lvID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgICBpZiAoZW50cmllc1swXS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdGF0ZSA9PT0gUGxheWVyU3RhdGUuRnJvemVuKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50U3RhdGUgPT09IFBsYXllclN0YXRlLlBsYXlpbmcpIHtcbiAgICAgICAgICB0aGlzLmZyZWV6ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5faW8ub2JzZXJ2ZSh0aGlzLmNvbnRhaW5lcik7XG4gICAgfSAvLyBBZGQgbGlzdGVuZXIgZm9yIFZpc2liaWxpdHkgQVBJJ3MgY2hhbmdlIGV2ZW50LlxuXG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmhpZGRlbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgKCkgPT4gdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlKCkpO1xuICAgIH0gLy8gU2V0dXAgbG90dGllIHBsYXllclxuXG5cbiAgICBpZiAodGhpcy5zcmMpIHtcbiAgICAgIHRoaXMubG9hZCh0aGlzLnNyYyk7XG4gICAgfVxuICB9XG4gIC8qKlxyXG4gICAqIENsZWFudXAgb24gY29tcG9uZW50IGRlc3Ryb3kuXHJcbiAgICovXG5cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAvLyBSZW1vdmUgaW50ZXJzZWN0aW9uIG9ic2VydmVyIGZvciBkZXRlY3RpbmcgY29tcG9uZW50IGJlaW5nIG91dC1vZi12aWV3LlxuICAgIGlmICh0aGlzLl9pbykge1xuICAgICAgdGhpcy5faW8uZGlzY29ubmVjdCgpO1xuXG4gICAgICB0aGlzLl9pbyA9IHVuZGVmaW5lZDtcbiAgICB9IC8vIFJlbW92ZSByZXNpemUgb2JzZXJ2ZXIgZm9yIGRldGVjdGluZyByZXNpemUvcmVmbG93IGV2ZW50cyBhZmZlY3RpbmcgZWxlbWVudC5cbiAgICAvLyBpZiAodGhpcy5fcm8pIHtcbiAgICAvLyAgIHRoaXMuX3JvLmRpc2Nvbm5lY3QoKTtcbiAgICAvLyAgIHRoaXMuX3JvID0gdW5kZWZpbmVkO1xuICAgIC8vIH1cbiAgICAvLyBSZW1vdmUgdGhlIGF0dGFjaGVkIFZpc2liaWxpdHkgQVBJJ3MgY2hhbmdlIGV2ZW50IGxpc3RlbmVyLlxuXG5cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCAoKSA9PiB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UoKSk7XG4gIH1cblxuICByZW5kZXJDb250cm9scygpIHtcbiAgICB2YXIgaXNQbGF5aW5nID0gdGhpcy5jdXJyZW50U3RhdGUgPT09IFBsYXllclN0YXRlLlBsYXlpbmc7XG4gICAgdmFyIGlzUGF1c2VkID0gdGhpcy5jdXJyZW50U3RhdGUgPT09IFBsYXllclN0YXRlLlBhdXNlZDtcbiAgICB2YXIgaXNTdG9wcGVkID0gdGhpcy5jdXJyZW50U3RhdGUgPT09IFBsYXllclN0YXRlLlN0b3BwZWQ7XG4gICAgcmV0dXJuIGh0bWwoX3RlbXBsYXRlT2JqZWN0IHx8IChfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFtcIlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInRvb2xiYXJcXFwiPlxcbiAgICAgICAgPGJ1dHRvblxcbiAgICAgICAgICBAY2xpY2s9XCIsIFwiXFxuICAgICAgICAgIGNsYXNzPVwiLCBcIlxcbiAgICAgICAgICBzdHlsZT1cXFwiYWxpZ24taXRlbXM6Y2VudGVyO1xcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgXCIsIFwiXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b25cXG4gICAgICAgICAgQGNsaWNrPVwiLCBcIlxcbiAgICAgICAgICBjbGFzcz1cIiwgXCJcXG4gICAgICAgICAgc3R5bGU9XFxcImFsaWduLWl0ZW1zOmNlbnRlcjtcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIDxzdmcgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIj48cGF0aCBkPVxcXCJNNiA2aDEydjEySDZWNnpcXFwiIC8+PC9zdmc+XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxpbnB1dFxcbiAgICAgICAgICBjbGFzcz1cXFwic2Vla2VyXFxcIlxcbiAgICAgICAgICB0eXBlPVxcXCJyYW5nZVxcXCJcXG4gICAgICAgICAgbWluPVxcXCIwXFxcIlxcbiAgICAgICAgICBzdGVwPVxcXCIxXFxcIlxcbiAgICAgICAgICBtYXg9XFxcIjEwMFxcXCJcXG4gICAgICAgICAgLnZhbHVlPVwiLCBcIlxcbiAgICAgICAgICBAaW5wdXQ9XCIsIFwiXFxuICAgICAgICAgIEBtb3VzZWRvd249XCIsIFwiXFxuICAgICAgICAgIEBtb3VzZXVwPVwiLCBcIlxcbiAgICAgICAgLz5cXG4gICAgICAgIDxidXR0b25cXG4gICAgICAgICAgQGNsaWNrPVwiLCBcIlxcbiAgICAgICAgICBjbGFzcz1cIiwgXCJcXG4gICAgICAgICAgc3R5bGU9XFxcImFsaWduLWl0ZW1zOmNlbnRlcjtcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIDxzdmcgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIj5cXG4gICAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgICAgZD1cXFwiTTE3LjAxNiAxNy4wMTZ2LTQuMDMxaDEuOTY5djZoLTEydjNsLTMuOTg0LTMuOTg0IDMuOTg0LTMuOTg0djNoMTAuMDMxek02Ljk4NCA2Ljk4NHY0LjAzMUg1LjAxNXYtNmgxMnYtM2wzLjk4NCAzLjk4NC0zLjk4NCAzLjk4NHYtM0g2Ljk4NHpcXFwiXFxuICAgICAgICAgICAgLz5cXG4gICAgICAgICAgPC9zdmc+XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgXCJdKSksIHRoaXMudG9nZ2xlUGxheSwgaXNQbGF5aW5nIHx8IGlzUGF1c2VkID8gXCJhY3RpdmVcIiA6IFwiXCIsIGlzUGxheWluZyA/IGh0bWwoX3RlbXBsYXRlT2JqZWN0MiB8fCAoX3RlbXBsYXRlT2JqZWN0MiA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoW1wiPHN2ZyB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiPlxcbiAgICAgICAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgICAgICAgIGQ9XFxcIk0xNC4wMTYgNS4wMTZIMTh2MTMuOTY5aC0zLjk4NFY1LjAxNnpNNiAxOC45ODRWNS4wMTVoMy45ODR2MTMuOTY5SDZ6XFxcIlxcbiAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgICAgPC9zdmc+XCJdKSkpIDogaHRtbChfdGVtcGxhdGVPYmplY3QzIHx8IChfdGVtcGxhdGVPYmplY3QzID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbXCI8c3ZnIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCI+XFxuICAgICAgICAgICAgICAgIDxwYXRoIGQ9XFxcIk04LjAxNiA1LjAxNkwxOC45ODUgMTIgOC4wMTYgMTguOTg0VjUuMDE1elxcXCIgLz5cXG4gICAgICAgICAgICAgIDwvc3ZnPlwiXSkpKSwgdGhpcy5zdG9wLCBpc1N0b3BwZWQgPyBcImFjdGl2ZVwiIDogXCJcIiwgdGhpcy5zZWVrZXIsIHRoaXMuX2hhbmRsZVNlZWtDaGFuZ2UsICgpID0+IHtcbiAgICAgIHRoaXMuX3ByZXZTdGF0ZSA9IHRoaXMuY3VycmVudFN0YXRlO1xuICAgICAgdGhpcy5mcmVlemUoKTtcbiAgICB9LCAoKSA9PiB7XG4gICAgICB0aGlzLl9wcmV2U3RhdGUgPT09IFBsYXllclN0YXRlLlBsYXlpbmcgJiYgdGhpcy5wbGF5KCk7XG4gICAgfSwgdGhpcy50b2dnbGVMb29waW5nLCB0aGlzLmxvb3AgPyBcImFjdGl2ZVwiIDogXCJcIik7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuY29udHJvbHMgPyBcIm1haW4gY29udHJvbHNcIiA6IFwibWFpblwiO1xuICAgIHJldHVybiBodG1sKF90ZW1wbGF0ZU9iamVjdDQgfHwgKF90ZW1wbGF0ZU9iamVjdDQgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFtcIiA8ZGl2IGNsYXNzPVwiLCBcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJhbmltYXRpb25cXFwiIHN0eWxlPVwiLCBcIj5cXG4gICAgICAgIFwiLCBcIlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIFwiLCBcIlxcbiAgICA8L2Rpdj5cIl0pKSwgY2xhc3NOYW1lLCBcImJhY2tncm91bmQ6XCIgKyB0aGlzLmJhY2tncm91bmQsIHRoaXMuY3VycmVudFN0YXRlID09PSBQbGF5ZXJTdGF0ZS5FcnJvciA/IGh0bWwoX3RlbXBsYXRlT2JqZWN0NSB8fCAoX3RlbXBsYXRlT2JqZWN0NSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoW1wiPGRpdiBjbGFzcz1cXFwiZXJyb3JcXFwiPlxcdTI2QTBcXHVGRTBGPC9kaXY+XCJdKSkpIDogdW5kZWZpbmVkLCB0aGlzLmNvbnRyb2xzID8gdGhpcy5yZW5kZXJDb250cm9scygpIDogdW5kZWZpbmVkKTtcbiAgfVxuXG59O1xuXG5fX2RlY29yYXRlKFtxdWVyeShcIi5hbmltYXRpb25cIildLCBMb3R0aWVQbGF5ZXIucHJvdG90eXBlLCBcImNvbnRhaW5lclwiLCB2b2lkIDApO1xuXG5fX2RlY29yYXRlKFtwcm9wZXJ0eSgpXSwgTG90dGllUGxheWVyLnByb3RvdHlwZSwgXCJtb2RlXCIsIHZvaWQgMCk7XG5cbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhblxufSldLCBMb3R0aWVQbGF5ZXIucHJvdG90eXBlLCBcImF1dG9wbGF5XCIsIHZvaWQgMCk7XG5cbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIExvdHRpZVBsYXllci5wcm90b3R5cGUsIFwiYmFja2dyb3VuZFwiLCB2b2lkIDApO1xuXG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW5cbn0pXSwgTG90dGllUGxheWVyLnByb3RvdHlwZSwgXCJjb250cm9sc1wiLCB2b2lkIDApO1xuXG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IE51bWJlclxufSldLCBMb3R0aWVQbGF5ZXIucHJvdG90eXBlLCBcImNvdW50XCIsIHZvaWQgMCk7XG5cbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogTnVtYmVyXG59KV0sIExvdHRpZVBsYXllci5wcm90b3R5cGUsIFwiZGlyZWN0aW9uXCIsIHZvaWQgMCk7XG5cbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhblxufSldLCBMb3R0aWVQbGF5ZXIucHJvdG90eXBlLCBcImhvdmVyXCIsIHZvaWQgMCk7XG5cbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBMb3R0aWVQbGF5ZXIucHJvdG90eXBlLCBcImxvb3BcIiwgdm9pZCAwKTtcblxuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmdcbn0pXSwgTG90dGllUGxheWVyLnByb3RvdHlwZSwgXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIHZvaWQgMCk7XG5cbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nXG59KV0sIExvdHRpZVBsYXllci5wcm90b3R5cGUsIFwicmVuZGVyZXJcIiwgdm9pZCAwKTtcblxuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBOdW1iZXJcbn0pXSwgTG90dGllUGxheWVyLnByb3RvdHlwZSwgXCJzcGVlZFwiLCB2b2lkIDApO1xuXG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZ1xufSldLCBMb3R0aWVQbGF5ZXIucHJvdG90eXBlLCBcInNyY1wiLCB2b2lkIDApO1xuXG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZ1xufSldLCBMb3R0aWVQbGF5ZXIucHJvdG90eXBlLCBcImN1cnJlbnRTdGF0ZVwiLCB2b2lkIDApO1xuXG5fX2RlY29yYXRlKFtwcm9wZXJ0eSgpXSwgTG90dGllUGxheWVyLnByb3RvdHlwZSwgXCJzZWVrZXJcIiwgdm9pZCAwKTtcblxuX19kZWNvcmF0ZShbcHJvcGVydHkoKV0sIExvdHRpZVBsYXllci5wcm90b3R5cGUsIFwiaW50ZXJtaXNzaW9uXCIsIHZvaWQgMCk7XG5cbkxvdHRpZVBsYXllciA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoXCJsb3R0aWUtcGxheWVyXCIpXSwgTG90dGllUGxheWVyKTtcblxuZXhwb3J0IHsgTG90dGllUGxheWVyLCBQbGF5TW9kZSwgUGxheWVyRXZlbnRzLCBQbGF5ZXJTdGF0ZSwgcGFyc2VTcmMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvdHRpZS1wbGF5ZXIuZXNtLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==